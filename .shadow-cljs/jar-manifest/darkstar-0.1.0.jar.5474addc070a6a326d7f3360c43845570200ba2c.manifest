["^ ","~:resources",[["^ ","~:js-str-offsets",[],"~:classpath",true,"~:js-esm",false,"~:cache-key",["5474addc070a6a326d7f3360c43845570200ba2c"],"~:js-imports",[],"~:js-invalid-requires",[],"~:goog-provides",[],"~:js-language","es9","~:goog-module",null,"~:ns","~$module$vega","~:goog-module-legacy-namespace",false,"~:js-warnings",[["^ ","~:line",884,"~:column",21,"~:message","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",930,"^?",12,"^@","Missing type declaration."],["^ ","^>",971,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",972,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",973,"^?",22,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1301,"^?",22,"^@","Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1387,"^?",5,"^@","Missing type declaration."],["^ ","^>",1412,"^?",5,"^@","Missing type declaration."],["^ ","^>",1436,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1473,"^?",30,"^@","invalid param name \"-\""],["^ ","^>",1663,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1667,"^?",22,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1786,"^?",22,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1813,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1814,"^?",22,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",3508,"^?",22,"^@","invalid param name \"options.skip\""],["^ ","^>",3510,"^?",22,"^@","invalid param name \"options.force\""],["^ ","^>",3825,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",3971,"^?",33,"^@","invalid param name \"-\""],["^ ","^>",4116,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",4118,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",4246,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",4248,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",4278,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",4280,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",4394,"^?",22,"^@","invalid param name \"options.skip\""],["^ ","^>",4416,"^?",22,"^@","invalid param name \"options.force\""],["^ ","^>",4418,"^?",22,"^@","invalid param name \"options.skip\""],["^ ","^>",4440,"^?",22,"^@","invalid param name \"options.skip\""],["^ ","^>",4692,"^?",5,"^@","Missing type declaration."],["^ ","^>",6603,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",6604,"^?",41,"^@","invalid param name \"params.fields\""],["^ ","^>",6605,"^?",28,"^@","invalid param name \"params.ops\""],["^ ","^>",6606,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",6607,"^?",22,"^@","invalid param name \"params.cross\""],["^ ","^>",6610,"^?",22,"^@","invalid param name \"params.drop\""],["^ ","^>",6952,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",7090,"^?",36,"^@","invalid param name \"params.sort\""],["^ ","^>",7131,"^?",34,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",7131,"^?",34,"^@","Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",7131,"^?",34,"^@","Bad type annotation. expecting a variable name in a @param tag. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",7132,"^?",28,"^@","invalid param name \"params.orders\""],["^ ","^>",7151,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",7152,"^?",21,"^@","invalid param name \"params.pattern\""],["^ ","^>",7153,"^?",21,"^@","invalid param name \"params.case\""],["^ ","^>",7154,"^?",21,"^@","invalid param name \"params.stopwords\""],["^ ","^>",7265,"^?",39,"^@","invalid param name \"params.filter\""],["^ ","^>",7267,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",7343,"^?",39,"^@","invalid param name \"-\""],["^ ","^>",7386,"^?",21,"^@","invalid param name \"params.distribution\""],["^ ","^>",7388,"^?",21,"^@","invalid param name \"params.method\""],["^ ","^>",7390,"^?",28,"^@","invalid param name \"params.extent\""],["^ ","^>",7394,"^?",21,"^@","invalid param name \"params.minsteps\""],["^ ","^>",7396,"^?",21,"^@","invalid param name \"params.maxsteps\""],["^ ","^>",7398,"^?",21,"^@","invalid param name \"params.steps\""],["^ ","^>",7545,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",7546,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",7547,"^?",21,"^@","invalid param name \"params.step\""],["^ ","^>",7549,"^?",22,"^@","invalid param name \"params.smooth\""],["^ ","^>",7612,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",7639,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",7758,"^?",51,"^@","invalid param name \"params.subflow\""],["^ ","^>",7760,"^?",34,"^@","invalid param name \"params.key\""],["^ ","^>",7873,"^?",21,"^@","invalid param name \"params.name\""],["^ ","^>",7874,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",7892,"^?",34,"^@","invalid param name \"params.expr\""],["^ ","^>",7962,"^?",41,"^@","invalid param name \"params.fields\""],["^ ","^>",7964,"^?",21,"^@","invalid param name \"params.index\""],["^ ","^>",7966,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",8024,"^?",34,"^@","invalid param name \"params.fields\""],["^ ","^>",8026,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",8072,"^?",34,"^@","invalid param name \"params.expr\""],["^ ","^>",8073,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",8074,"^?",22,"^@","invalid param name \"params.initonly\""],["^ ","^>",8118,"^?",43,"^@","invalid param name \"params.generator\""],["^ ","^>",8122,"^?",21,"^@","invalid param name \"params.size\""],["^ ","^>",8173,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",8174,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",8176,"^?",34,"^@","invalid param name \"params.key\""],["^ ","^>",8179,"^?",23,"^@","invalid param name \"params.keyvals\""],["^ ","^>",8365,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",8367,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",8369,"^?",21,"^@","invalid param name \"params.bandwidth\""],["^ ","^>",8371,"^?",22,"^@","invalid param name \"params.counts\""],["^ ","^>",8374,"^?",21,"^@","invalid param name \"params.cumulative\""],["^ ","^>",8376,"^?",28,"^@","invalid param name \"params.extent\""],["^ ","^>",8378,"^?",21,"^@","invalid param name \"params.resolve\""],["^ ","^>",8383,"^?",21,"^@","invalid param name \"params.minsteps\""],["^ ","^>",8385,"^?",21,"^@","invalid param name \"params.maxsteps\""],["^ ","^>",8387,"^?",21,"^@","invalid param name \"params.steps\""],["^ ","^>",8468,"^?",28,"^@","invalid param name \"params.fields\""],["^ ","^>",8469,"^?",22,"^@","invalid param name \"params.flat\""],["^ ","^>",8488,"^?",21,"^@","invalid param name \"params.url\""],["^ ","^>",8489,"^?",21,"^@","invalid param name \"params.format\""],["^ ","^>",8544,"^?",18,"^@","invalid param name \"params.index\""],["^ ","^>",8545,"^?",38,"^@","Bad type annotation. missing closing > See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",8546,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",8547,"^?",16,"^@","invalid param name \"params.default\""],["^ ","^>",8628,"^?",35,"^@","invalid param name \"params.extents\""],["^ ","^>",8658,"^?",30,"^@","invalid param name \"params.values\""],["^ ","^>",8694,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",8696,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",8698,"^?",34,"^@","invalid param name \"params.value\""],["^ ","^>",8700,"^?",21,"^@","invalid param name \"params.op\""],["^ ","^>",8702,"^?",21,"^@","invalid param name \"params.limit\""],["^ ","^>",8793,"^?",51,"^@","invalid param name \"params.subflow\""],["^ ","^>",8795,"^?",46,"^@","invalid param name \"params.field\""],["^ ","^>",8838,"^?",38,"^@","Bad type annotation. missing closing > See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",8841,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",8908,"^?",16,"^@","invalid param name \"params.value\""],["^ ","^>",8927,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",8929,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",8931,"^?",28,"^@","invalid param name \"params.probs\""],["^ ","^>",8934,"^?",28,"^@","invalid param name \"params.step\""],["^ ","^>",9002,"^?",21,"^@","invalid param name \"params.derive\""],["^ ","^>",9057,"^?",21,"^@","invalid param name \"params.size\""],["^ ","^>",9162,"^?",21,"^@","invalid param name \"params.start\""],["^ ","^>",9163,"^?",21,"^@","invalid param name \"params.stop\""],["^ ","^>",9164,"^?",21,"^@","invalid param name \"params.step\""],["^ ","^>",9619,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",9714,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",9750,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",9751,"^?",36,"^@","invalid param name \"params.sort\""],["^ ","^>",10069,"^?",36,"^@","invalid param name \"params.sort\""],["^ ","^>",10070,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",10071,"^?",28,"^@","invalid param name \"params.ops\""],["^ ","^>",10072,"^?",41,"^@","invalid param name \"params.fields\""],["^ ","^>",10074,"^?",23,"^@","invalid param name \"params.params\""],["^ ","^>",10075,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",10076,"^?",28,"^@","invalid param name \"params.frame\""],["^ ","^>",10077,"^?",22,"^@","invalid param name \"params.ignorePeers\""],["^ ","^>",14847,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",14933,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",16828,"^?",21,"^@","invalid param name \"params.mark\""],["^ ","^>",16912,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",16953,"^?",21,"^@","invalid param name \"params.markdef\""],["^ ","^>",17006,"^?",36,"^@","invalid param name \"params.sort\""],["^ ","^>",17008,"^?",21,"^@","invalid param name \"params.method\""],["^ ","^>",17012,"^?",21,"^@","invalid param name \"params.boundScale\""],["^ ","^>",17016,"^?",21,"^@","invalid param name \"params.boundOrient\""],["^ ","^>",17019,"^?",21,"^@","invalid param name \"params.boundTolerance\""],["^ ","^>",17959,"^?",21,"^@","invalid param name \"params.mark\""],["^ ","^>",21397,"^?",20,"^@","invalid param name \"params.scale\""],["^ ","^>",21398,"^?",16,"^@","invalid param name \"params.count\""],["^ ","^>",21400,"^?",23,"^@","invalid param name \"params.values\""],["^ ","^>",21403,"^?",33,"^@","invalid param name \"params.formatSpecifier\""],["^ ","^>",21406,"^?",33,"^@","invalid param name \"params.format\""],["^ ","^>",21459,"^?",39,"^@","invalid param name \"params.item\""],["^ ","^>",21460,"^?",34,"^@","invalid param name \"params.key\""],["^ ","^>",21552,"^?",21,"^@","invalid param name \"params.mod\""],["^ ","^>",21554,"^?",21,"^@","invalid param name \"param.encoders\""],["^ ","^>",21555,"^?",48,"^@","invalid param name \"param.encoders.update\""],["^ ","^>",21556,"^?",48,"^@","invalid param name \"param.encoders.enter\""],["^ ","^>",21557,"^?",48,"^@","invalid param name \"param.encoders.exit\""],["^ ","^>",21753,"^?",20,"^@","invalid param name \"params.scale\""],["^ ","^>",21754,"^?",16,"^@","invalid param name \"params.count\""],["^ ","^>",21756,"^?",16,"^@","invalid param name \"params.limit\""],["^ ","^>",21758,"^?",23,"^@","invalid param name \"params.values\""],["^ ","^>",21761,"^?",21,"^@","invalid param name \"params.formatSpecifier\""],["^ ","^>",21764,"^?",33,"^@","invalid param name \"params.format\""],["^ ","^>",22051,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",22052,"^?",21,"^@","invalid param name \"params.startAngle\""],["^ ","^>",22053,"^?",21,"^@","invalid param name \"params.endAngle\""],["^ ","^>",22054,"^?",22,"^@","invalid param name \"params.sort\""],["^ ","^>",22414,"^?",36,"^@","invalid param name \"params.sort\""],["^ ","^>",22444,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",22445,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",22446,"^?",46,"^@","invalid param name \"params.sort\""],["^ ","^>",22817,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",22819,"^?",28,"^@","invalid param name \"params.thresholds\""],["^ ","^>",22821,"^?",21,"^@","invalid param name \"params.levels\""],["^ ","^>",22822,"^?",22,"^@","invalid param name \"params.nice\""],["^ ","^>",22826,"^?",21,"^@","invalid param name \"params.resolve\""],["^ ","^>",22830,"^?",22,"^@","invalid param name \"params.zero\""],["^ ","^>",22832,"^?",22,"^@","invalid param name \"params.smooth\""],["^ ","^>",22835,"^?",22,"^@","invalid param name \"params.scale\""],["^ ","^>",22838,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",23098,"^?",28,"^@","invalid param name \"params.size\""],["^ ","^>",23100,"^?",39,"^@","invalid param name \"params.x\""],["^ ","^>",23101,"^?",39,"^@","invalid param name \"params.y\""],["^ ","^>",23102,"^?",39,"^@","invalid param name \"params.weight\""],["^ ","^>",23103,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",23105,"^?",21,"^@","invalid param name \"params.cellSize\""],["^ ","^>",23110,"^?",28,"^@","invalid param name \"params.bandwidth\""],["^ ","^>",23115,"^?",22,"^@","invalid param name \"params.counts\""],["^ ","^>",23118,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",23207,"^?",28,"^@","invalid param name \"params.size\""],["^ ","^>",23210,"^?",28,"^@","invalid param name \"params.values\""],["^ ","^>",23214,"^?",39,"^@","invalid param name \"params.x\""],["^ ","^>",23215,"^?",39,"^@","invalid param name \"params.y\""],["^ ","^>",23216,"^?",39,"^@","invalid param name \"params.weight\""],["^ ","^>",23217,"^?",21,"^@","invalid param name \"params.cellSize\""],["^ ","^>",23218,"^?",21,"^@","invalid param name \"params.bandwidth\""],["^ ","^>",23219,"^?",28,"^@","invalid param name \"params.thresholds\""],["^ ","^>",23221,"^?",21,"^@","invalid param name \"params.count\""],["^ ","^>",23222,"^?",22,"^@","invalid param name \"params.nice\""],["^ ","^>",23226,"^?",22,"^@","invalid param name \"params.smooth\""],["^ ","^>",23294,"^?",41,"^@","invalid param name \"params.fields\""],["^ ","^>",23296,"^?",34,"^@","invalid param name \"params.geojson\""],["^ ","^>",26380,"^?",42,"^@","invalid param name \"params.projection\""],["^ ","^>",26382,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",26384,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",26443,"^?",42,"^@","invalid param name \"params.projection\""],["^ ","^>",26445,"^?",41,"^@","invalid param name \"params.fields\""],["^ ","^>",26447,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",26501,"^?",42,"^@","invalid param name \"params.projection\""],["^ ","^>",26503,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",26505,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",26619,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",26621,"^?",21,"^@","invalid param name \"params.color\""],["^ ","^>",26624,"^?",21,"^@","invalid param name \"params.opacity\""],["^ ","^>",26627,"^?",21,"^@","invalid param name \"params.resolve\""],["^ ","^>",26631,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",28064,"^?",28,"^@","invalid param name \"params.forces\""],["^ ","^>",29563,"^?",42,"^@","invalid param name \"params.keys\""],["^ ","^>",29564,"^?",23,"^@","invalid param name \"params.generate\""],["^ ","^>",29748,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",29781,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",29813,"^?",35,"^@","invalid param name \"params.key\""],["^ ","^>",29814,"^?",35,"^@","invalid param name \"params.parentKey\""],["^ ","^>",29983,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",30080,"^?",34,"^@","invalid param name \"params.x\""],["^ ","^>",30081,"^?",34,"^@","invalid param name \"params.y\""],["^ ","^>",30082,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",30083,"^?",21,"^@","invalid param name \"params.bandwidth\""],["^ ","^>",30150,"^?",34,"^@","invalid param name \"params.x\""],["^ ","^>",30151,"^?",34,"^@","invalid param name \"params.y\""],["^ ","^>",30152,"^?",21,"^@","invalid param name \"params.method\""],["^ ","^>",30153,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",30154,"^?",28,"^@","invalid param name \"params.extent\""],["^ ","^>",30155,"^?",21,"^@","invalid param name \"params.order\""],["^ ","^>",32230,"^?",41,"^@","invalid param name \"params.fields\""],["^ ","^>",32231,"^?",20,"^@","invalid param name \"params.query\""],["^ ","^>",32610,"^?",21,"^@","invalid param name \"params.ignore\""],["^ ","^>",32611,"^?",21,"^@","invalid param name \"params.filter\""],["^ ","^>",36811,"^?",49,"^@","invalid param name \"options.signals\""],["^ ","^>",36815,"^?",47,"^@","invalid param name \"options.data\""],["^ ","^>",36819,"^?",22,"^@","invalid param name \"options.recurse\""]],"~:output-name","module$vega.js","~:resource-id",["~:shadow.build.classpath/resource","vega.js"],"~:resource-name","vega.js","~:type","~:js","~:js-requires",[],"~:source","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.vega = {}));\n}(this, (function (exports) { 'use strict';\n\n  function accessor(fn, fields, name) {\n    fn.fields = fields || [];\n    fn.fname = name;\n    return fn;\n  }\n\n  function accessorName(fn) {\n    return fn == null ? null : fn.fname;\n  }\n\n  function accessorFields(fn) {\n    return fn == null ? null : fn.fields;\n  }\n\n  function error(message) {\n    throw Error(message);\n  }\n\n  function splitAccessPath(p) {\n    var path = [],\n        q = null,\n        b = 0,\n        n = p.length,\n        s = '',\n        i, j, c;\n\n    p = p + '';\n\n    function push() {\n      path.push(s + p.substring(i, j));\n      s = '';\n      i = j + 1;\n    }\n\n    for (i=j=0; j<n; ++j) {\n      c = p[j];\n      if (c === '\\\\') {\n        s += p.substring(i, j);\n        s += p.substring(++j, ++j);\n        i = j;\n      } else if (c === q) {\n        push();\n        q = null;\n        b = -1;\n      } else if (q) {\n        continue;\n      } else if (i === b && c === '\"') {\n        i = j + 1;\n        q = c;\n      } else if (i === b && c === \"'\") {\n        i = j + 1;\n        q = c;\n      } else if (c === '.' && !b) {\n        if (j > i) {\n          push();\n        } else {\n          i = j + 1;\n        }\n      } else if (c === '[') {\n        if (j > i) push();\n        b = i = j + 1;\n      } else if (c === ']') {\n        if (!b) error('Access path missing open bracket: ' + p);\n        if (b > 0) push();\n        b = 0;\n        i = j + 1;\n      }\n    }\n\n    if (b) error('Access path missing closing bracket: ' + p);\n    if (q) error('Access path missing closing quote: ' + p);\n\n    if (j > i) {\n      j++;\n      push();\n    }\n\n    return path;\n  }\n\n  var isArray = Array.isArray;\n\n  function isObject(_) {\n    return _ === Object(_);\n  }\n\n  function isString(_) {\n    return typeof _ === 'string';\n  }\n\n  function $(x) {\n    return isArray(x) ? '[' + x.map($) + ']'\n      : isObject(x) || isString(x) ?\n        // Output valid JSON and JS source strings.\n        // See http://timelessrepo.com/json-isnt-a-javascript-subset\n        JSON.stringify(x).replace('\\u2028','\\\\u2028').replace('\\u2029', '\\\\u2029')\n      : x;\n  }\n\n  function field(field, name) {\n    var path = splitAccessPath(field),\n        code = 'return _[' + path.map($).join('][') + '];';\n\n    return accessor(\n      Function('_', code),\n      [(field = path.length===1 ? path[0] : field)],\n      name || field\n    );\n  }\n\n  var empty = [];\n\n  var id = field('id');\n\n  var identity = accessor(function(_) { return _; }, empty, 'identity');\n\n  var zero = accessor(function() { return 0; }, empty, 'zero');\n\n  var one = accessor(function() { return 1; }, empty, 'one');\n\n  var truthy = accessor(function() { return true; }, empty, 'true');\n\n  var falsy = accessor(function() { return false; }, empty, 'false');\n\n  function log(method, level, input) {\n    var args = [level].concat([].slice.call(input));\n    console[method].apply(console, args); // eslint-disable-line no-console\n  }\n\n  var None  = 0;\n  var Error$1 = 1;\n  var Warn  = 2;\n  var Info  = 3;\n  var Debug = 4;\n\n  function logger(_, method) {\n    var level = _ || None;\n    return {\n      level: function(_) {\n        if (arguments.length) {\n          level = +_;\n          return this;\n        } else {\n          return level;\n        }\n      },\n      error: function() {\n        if (level >= Error$1) log(method || 'error', 'ERROR', arguments);\n        return this;\n      },\n      warn: function() {\n        if (level >= Warn) log(method || 'warn', 'WARN', arguments);\n        return this;\n      },\n      info: function() {\n        if (level >= Info) log(method || 'log', 'INFO', arguments);\n        return this;\n      },\n      debug: function() {\n        if (level >= Debug) log(method || 'log', 'DEBUG', arguments);\n        return this;\n      }\n    }\n  }\n\n  const isLegalKey = key => key !== '__proto__';\n\n  function mergeConfig(...configs) {\n    return configs.reduce((out, source) => {\n      for (var key in source) {\n        if (key === 'signals') {\n          // for signals, we merge the signals arrays\n          // source signals take precedence over\n          // existing signals with the same name\n          out.signals = mergeNamed(out.signals, source.signals);\n        } else {\n          // otherwise, merge objects subject to recursion constraints\n          // for legend block, recurse for the layout entry only\n          // for style block, recurse for all properties\n          // otherwise, no recursion: objects overwrite, no merging\n          var r = key === 'legend' ? {layout: 1}\n            : key === 'style' ? true\n            : null;\n          writeConfig(out, key, source[key], r);\n        }\n      }\n      return out;\n    }, {});\n  }\n\n  function writeConfig(output, key, value, recurse) {\n    if (!isLegalKey(key)) return;\n\n    var k, o;\n    if (isObject(value) && !isArray(value)) {\n      o = isObject(output[key]) ? output[key] : (output[key] = {});\n      for (k in value) {\n        if (recurse && (recurse === true || recurse[k])) {\n          writeConfig(o, k, value[k]);\n        } else if (isLegalKey(k)) {\n          o[k] = value[k];\n        }\n      }\n    } else {\n      output[key] = value;\n    }\n  }\n\n  function mergeNamed(a, b) {\n    if (a == null) return b;\n\n    const map = {}, out = [];\n\n    function add(_) {\n      if (!map[_.name]) {\n        map[_.name] = 1;\n        out.push(_);\n      }\n    }\n\n    b.forEach(add);\n    a.forEach(add);\n    return out;\n  }\n\n  function peek(array) {\n    return array[array.length - 1];\n  }\n\n  function toNumber(_) {\n    return _ == null || _ === '' ? null : +_;\n  }\n\n  function exp(sign) {\n    return function(x) { return sign * Math.exp(x); };\n  }\n\n  function log$1(sign) {\n    return function(x) { return Math.log(sign * x); };\n  }\n\n  function symlog(c) {\n    return function(x) { return Math.sign(x) * Math.log1p(Math.abs(x / c)); };\n  }\n\n  function symexp(c) {\n    return function(x) { return Math.sign(x) * Math.expm1(Math.abs(x)) * c; };\n  }\n\n  function pow(exponent) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n    };\n  }\n\n  function pan(domain, delta, lift, ground) {\n    var d0 = lift(domain[0]),\n        d1 = lift(peek(domain)),\n        dd = (d1 - d0) * delta;\n\n    return [\n      ground(d0 - dd),\n      ground(d1 - dd)\n    ];\n  }\n\n  function panLinear(domain, delta) {\n    return pan(domain, delta, toNumber, identity);\n  }\n\n  function panLog(domain, delta) {\n    var sign = Math.sign(domain[0]);\n    return pan(domain, delta, log$1(sign), exp(sign));\n  }\n\n  function panPow(domain, delta, exponent) {\n    return pan(domain, delta, pow(exponent), pow(1/exponent));\n  }\n\n  function panSymlog(domain, delta, constant) {\n    return pan(domain, delta, symlog(constant), symexp(constant));\n  }\n\n  function zoom(domain, anchor, scale, lift, ground) {\n    var d0 = lift(domain[0]),\n        d1 = lift(peek(domain)),\n        da = anchor != null ? lift(anchor) : (d0 + d1) / 2;\n\n    return [\n      ground(da + (d0 - da) * scale),\n      ground(da + (d1 - da) * scale)\n    ];\n  }\n\n  function zoomLinear(domain, anchor, scale) {\n    return zoom(domain, anchor, scale, toNumber, identity);\n  }\n\n  function zoomLog(domain, anchor, scale) {\n    var sign = Math.sign(domain[0]);\n    return zoom(domain, anchor, scale, log$1(sign), exp(sign));\n  }\n\n  function zoomPow(domain, anchor, scale, exponent) {\n    return zoom(domain, anchor, scale, pow(exponent), pow(1/exponent));\n  }\n\n  function zoomSymlog(domain, anchor, scale, constant) {\n    return zoom(domain, anchor, scale, symlog(constant), symexp(constant));\n  }\n\n  function quarter(date) {\n    return 1 + ~~(new Date(date).getMonth() / 3);\n  }\n\n  function utcquarter(date) {\n    return 1 + ~~(new Date(date).getUTCMonth() / 3);\n  }\n\n  function array(_) {\n    return _ != null ? (isArray(_) ? _ : [_]) : [];\n  }\n\n  /**\n   * Span-preserving range clamp. If the span of the input range is less\n   * than (max - min) and an endpoint exceeds either the min or max value,\n   * the range is translated such that the span is preserved and one\n   * endpoint touches the boundary of the min/max range.\n   * If the span exceeds (max - min), the range [min, max] is returned.\n   */\n  function clampRange(range, min, max) {\n    var lo = range[0],\n        hi = range[1],\n        span;\n\n    if (hi < lo) {\n      span = hi;\n      hi = lo;\n      lo = span;\n    }\n    span = hi - lo;\n\n    return span >= (max - min)\n      ? [min, max]\n      : [\n          (lo = Math.min(Math.max(lo, min), max - span)),\n          lo + span\n        ];\n  }\n\n  function isFunction(_) {\n    return typeof _ === 'function';\n  }\n\n  function compare(fields, orders) {\n    var idx = [],\n        cmp = (fields = array(fields)).map(function(f, i) {\n          if (f == null) {\n            return null;\n          } else {\n            idx.push(i);\n            return isFunction(f) ? f\n              : splitAccessPath(f).map($).join('][');\n          }\n        }),\n        n = idx.length - 1,\n        ord = array(orders),\n        code = 'var u,v;return ',\n        i, j, f, u, v, d, t, lt, gt;\n\n    if (n < 0) return null;\n\n    for (j=0; j<=n; ++j) {\n      i = idx[j];\n      f = cmp[i];\n\n      if (isFunction(f)) {\n        d = 'f' + i;\n        u = '(u=this.' + d + '(a))';\n        v = '(v=this.' + d + '(b))';\n        (t = t || {})[d] = f;\n      } else {\n        u = '(u=a['+f+'])';\n        v = '(v=b['+f+'])';\n      }\n\n      d = '((v=v instanceof Date?+v:v),(u=u instanceof Date?+u:u))';\n\n      if (ord[i] !== 'descending') {\n        gt = 1;\n        lt = -1;\n      } else {\n        gt = -1;\n        lt = 1;\n      }\n\n      code += '(' + u+'<'+v+'||u==null)&&v!=null?' + lt\n        + ':(u>v||v==null)&&u!=null?' + gt\n        + ':'+d+'!==u&&v===v?' + lt\n        + ':v!==v&&u===u?' + gt\n        + (i < n ? ':' : ':0');\n    }\n\n    f = Function('a', 'b', code + ';');\n    if (t) f = f.bind(t);\n\n    fields = fields.reduce(function(map, field) {\n      if (isFunction(field)) {\n        (accessorFields(field) || []).forEach(function(_) { map[_] = 1; });\n      } else if (field != null) {\n        map[field + ''] = 1;\n      }\n      return map;\n    }, {});\n\n    return accessor(f, Object.keys(fields));\n  }\n\n  function constant(_) {\n    return isFunction(_) ? _ : function() { return _; };\n  }\n\n  function debounce(delay, handler) {\n    var tid, evt;\n\n    function callback() {\n      handler(evt);\n      tid = evt = null;\n    }\n\n    return function(e) {\n      evt = e;\n      if (tid) clearTimeout(tid);\n      tid = setTimeout(callback, delay);\n    };\n  }\n\n  function extend(_) {\n    for (var x, k, i=1, len=arguments.length; i<len; ++i) {\n      x = arguments[i];\n      for (k in x) { _[k] = x[k]; }\n    }\n    return _;\n  }\n\n  /**\n   * Return an array with minimum and maximum values, in the\n   * form [min, max]. Ignores null, undefined, and NaN values.\n   */\n  function extent(array, f) {\n    var i = 0, n, v, min, max;\n\n    if (array && (n = array.length)) {\n      if (f == null) {\n        // find first valid value\n        for (v = array[i]; i < n && (v == null || v !== v); v = array[++i]);\n        min = max = v;\n\n        // visit all other values\n        for (; i<n; ++i) {\n          v = array[i];\n          // skip null/undefined; NaN will fail all comparisons\n          if (v != null) {\n            if (v < min) min = v;\n            if (v > max) max = v;\n          }\n        }\n      } else {\n        // find first valid value\n        for (v = f(array[i]); i < n && (v == null || v !== v); v = f(array[++i]));\n        min = max = v;\n\n        // visit all other values\n        for (; i<n; ++i) {\n          v = f(array[i]);\n          // skip null/undefined; NaN will fail all comparisons\n          if (v != null) {\n            if (v < min) min = v;\n            if (v > max) max = v;\n          }\n        }\n      }\n    }\n\n    return [min, max];\n  }\n\n  function extentIndex(array, f) {\n    var i = -1,\n        n = array.length,\n        a, b, c, u, v;\n\n    if (f == null) {\n      while (++i < n) {\n        b = array[i];\n        if (b != null && b >= b) {\n          a = c = b;\n          break;\n        }\n      }\n      if (i === n) return [-1, -1];\n      u = v = i;\n      while (++i < n) {\n        b = array[i];\n        if (b != null) {\n          if (a > b) {\n            a = b;\n            u = i;\n          }\n          if (c < b) {\n            c = b;\n            v = i;\n          }\n        }\n      }\n    } else {\n      while (++i < n) {\n        b = f(array[i], i, array);\n        if (b != null && b >= b) {\n          a = c = b;\n          break;\n        }\n      }\n      if (i === n) return [-1, -1];\n      u = v = i;\n      while (++i < n) {\n        b = f(array[i], i, array);\n        if (b != null) {\n          if (a > b) {\n            a = b;\n            u = i;\n          }\n          if (c < b) {\n            c = b;\n            v = i;\n          }\n        }\n      }\n    }\n\n    return [u, v];\n  }\n\n  const hop = Object.prototype.hasOwnProperty;\n\n  function hasOwnProperty(object, property) {\n    return hop.call(object, property);\n  }\n\n  var NULL = {};\n\n  function fastmap(input) {\n    var obj = {},\n        map,\n        test;\n\n    function has(key) {\n      return hasOwnProperty(obj, key) && obj[key] !== NULL;\n    }\n\n    map = {\n      size: 0,\n      empty: 0,\n      object: obj,\n      has: has,\n      get: function(key) {\n        return has(key) ? obj[key] : undefined;\n      },\n      set: function(key, value) {\n        if (!has(key)) {\n          ++map.size;\n          if (obj[key] === NULL) --map.empty;\n        }\n        obj[key] = value;\n        return this;\n      },\n      delete: function(key) {\n        if (has(key)) {\n          --map.size;\n          ++map.empty;\n          obj[key] = NULL;\n        }\n        return this;\n      },\n      clear: function() {\n        map.size = map.empty = 0;\n        map.object = obj = {};\n      },\n      test: function(_) {\n        if (arguments.length) {\n          test = _;\n          return map;\n        } else {\n          return test;\n        }\n      },\n      clean: function() {\n        var next = {},\n            size = 0,\n            key, value;\n        for (key in obj) {\n          value = obj[key];\n          if (value !== NULL && (!test || !test(value))) {\n            next[key] = value;\n            ++size;\n          }\n        }\n        map.size = size;\n        map.empty = 0;\n        map.object = (obj = next);\n      }\n    };\n\n    if (input) Object.keys(input).forEach(function(key) {\n      map.set(key, input[key]);\n    });\n\n    return map;\n  }\n\n  function flush(range, value, threshold, left, right, center) {\n    if (!threshold && threshold !== 0) return center;\n\n    var a = range[0],\n        b = peek(range),\n        t = +threshold,\n        l, r;\n\n    // swap endpoints if range is reversed\n    if (b < a) {\n      l = a; a = b; b = l;\n    }\n\n    // compare value to endpoints\n    l = Math.abs(value - a);\n    r = Math.abs(b - value);\n\n    // adjust if value is within threshold distance of endpoint\n    return l < r && l <= t ? left : r <= t ? right : center;\n  }\n\n  function inherits(child, parent) {\n    var proto = (child.prototype = Object.create(parent.prototype));\n    proto.constructor = child;\n    return proto;\n  }\n\n  /**\n   * Predicate that returns true if the value lies within the span\n   * of the given range. The left and right flags control the use\n   * of inclusive (true) or exclusive (false) comparisons.\n   */\n  function inrange(value, range, left, right) {\n    var r0 = range[0], r1 = range[range.length-1], t;\n    if (r0 > r1) {\n      t = r0;\n      r0 = r1;\n      r1 = t;\n    }\n    left = left === undefined || left;\n    right = right === undefined || right;\n\n    return (left ? r0 <= value : r0 < value) &&\n      (right ? value <= r1 : value < r1);\n  }\n\n  function isBoolean(_) {\n    return typeof _ === 'boolean';\n  }\n\n  function isDate(_) {\n    return Object.prototype.toString.call(_) === '[object Date]';\n  }\n\n  function isNumber(_) {\n    return typeof _ === 'number';\n  }\n\n  function isRegExp(_) {\n    return Object.prototype.toString.call(_) === '[object RegExp]';\n  }\n\n  function key(fields, flat) {\n    if (fields) {\n      fields = flat\n        ? array(fields).map(function(f) { return f.replace(/\\\\(.)/g, '$1'); })\n        : array(fields);\n    }\n\n    var fn = !(fields && fields.length)\n      ? function() { return ''; }\n      : Function('_', 'return \\'\\'+' +\n          fields.map(function(f) {\n            return '_[' + (flat\n                ? $(f)\n                : splitAccessPath(f).map($).join('][')\n              ) + ']';\n          }).join('+\\'|\\'+') + ';');\n\n    return accessor(fn, fields, 'key');\n  }\n\n  function lerp(array, frac) {\n    const lo = array[0],\n          hi = peek(array),\n          f = +frac;\n    return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);\n  }\n\n  const DEFAULT_MAX_SIZE = 10000;\n\n  // adapted from https://github.com/dominictarr/hashlru/ (MIT License)\n  function lruCache(maxsize) {\n    maxsize = +maxsize || DEFAULT_MAX_SIZE;\n\n    let curr, prev, size;\n\n    const clear = () => {\n      curr = {};\n      prev = {};\n      size = 0;\n    };\n\n    const update = (key, value) => {\n      if (++size > maxsize) {\n        prev = curr;\n        curr = {};\n        size = 1;\n      }\n      return (curr[key] = value);\n    };\n\n    clear();\n\n    return {\n      clear,\n      has: key => hasOwnProperty(curr, key) || hasOwnProperty(prev, key),\n      get: key => hasOwnProperty(curr, key) ? curr[key]\n          : hasOwnProperty(prev, key) ? update(key, prev[key])\n          : undefined,\n      set: (key, value) => hasOwnProperty(curr, key)\n          ? (curr[key] = value)\n          : update(key, value)\n    };\n  }\n\n  function merge(compare, array0, array1, output) {\n    var n0 = array0.length,\n        n1 = array1.length;\n\n    if (!n1) return array0;\n    if (!n0) return array1;\n\n    var merged = output || new array0.constructor(n0 + n1),\n        i0 = 0, i1 = 0, i = 0;\n\n    for (; i0<n0 && i1<n1; ++i) {\n      merged[i] = compare(array0[i0], array1[i1]) > 0\n         ? array1[i1++]\n         : array0[i0++];\n    }\n\n    for (; i0<n0; ++i0, ++i) {\n      merged[i] = array0[i0];\n    }\n\n    for (; i1<n1; ++i1, ++i) {\n      merged[i] = array1[i1];\n    }\n\n    return merged;\n  }\n\n  function repeat(str, reps) {\n    var s = '';\n    while (--reps >= 0) s += str;\n    return s;\n  }\n\n  function pad(str, length, padchar, align) {\n    var c = padchar || ' ',\n        s = str + '',\n        n = length - s.length;\n\n    return n <= 0 ? s\n      : align === 'left' ? repeat(c, n) + s\n      : align === 'center' ? repeat(c, ~~(n/2)) + s + repeat(c, Math.ceil(n/2))\n      : s + repeat(c, n);\n  }\n\n  /**\n   * Return the numerical span of an array: the difference between\n   * the last and first values.\n   */\n  function span(array) {\n    return array && (peek(array) - array[0]) || 0;\n  }\n\n  function toBoolean(_) {\n    return _ == null || _ === '' ? null : !_ || _ === 'false' || _ === '0' ? false : !!_;\n  }\n\n  function defaultParser(_) {\n    return isNumber(_) ? _ : isDate(_) ? _ : Date.parse(_);\n  }\n\n  function toDate(_, parser) {\n    parser = parser || defaultParser;\n    return _ == null || _ === '' ? null : parser(_);\n  }\n\n  function toString(_) {\n    return _ == null || _ === '' ? null : _ + '';\n  }\n\n  function toSet(_) {\n    for (var s={}, i=0, n=_.length; i<n; ++i) s[_[i]] = true;\n    return s;\n  }\n\n  function truncate(str, length, align, ellipsis) {\n    var e = ellipsis != null ? ellipsis : '\\u2026',\n        s = str + '',\n        n = s.length,\n        l = Math.max(0, length - e.length);\n\n    return n <= length ? s\n      : align === 'left' ? e + s.slice(n - l)\n      : align === 'center' ? s.slice(0, Math.ceil(l/2)) + e + s.slice(n - ~~(l/2))\n      : s.slice(0, l) + e;\n  }\n\n  function visitArray(array, filter, visitor) {\n    if (array) {\n      var i = 0, n = array.length, t;\n      if (filter) {\n        for (; i<n; ++i) {\n          if (t = filter(array[i])) visitor(t, i, array);\n        }\n      } else {\n        array.forEach(visitor);\n      }\n    }\n  }\n\n  function UniqueList(idFunc) {\n    var $ = idFunc || identity,\n        list = [],\n        ids = {};\n\n    list.add = function(_) {\n      var id = $(_);\n      if (!ids[id]) {\n        ids[id] = 1;\n        list.push(_);\n      }\n      return list;\n    };\n\n    list.remove = function(_) {\n      var id = $(_), idx;\n      if (ids[id]) {\n        ids[id] = 0;\n        if ((idx = list.indexOf(_)) >= 0) {\n          list.splice(idx, 1);\n        }\n      }\n      return list;\n    };\n\n    return list;\n  }\n\n  /**\n   * Invoke and await a potentially async callback function. If\n   * an error occurs, trap it and route to Dataflow.error.\n   * @param {Dataflow} df - The dataflow instance\n   * @param {function} callback - A callback function to invoke\n   *   and then await. The dataflow will be passed as the single\n   *   argument to the function.\n   */\n  async function asyncCallback(df, callback) {\n    try { await callback(df); } catch (err) { df.error(err); }\n  }\n\n  var TUPLE_ID_KEY = Symbol('vega_id'),\n      TUPLE_ID = 1;\n\n  /**\n   * Checks if an input value is a registered tuple.\n   * @param {*} t - The value to check.\n   * @return {boolean} True if the input is a tuple, false otherwise.\n   */\n  function isTuple(t) {\n    return !!(t && tupleid(t));\n  }\n\n  /**\n   * Returns the id of a tuple.\n   * @param {object} t - The input tuple.\n   * @return {*} the tuple id.\n   */\n  function tupleid(t) {\n    return t[TUPLE_ID_KEY];\n  }\n\n  /**\n   * Sets the id of a tuple.\n   * @param {object} t - The input tuple.\n   * @param {*} id - The id value to set.\n   * @return {object} the input tuple.\n   */\n  function setid(t, id) {\n    t[TUPLE_ID_KEY] = id;\n    return t;\n  }\n\n  /**\n   * Ingest an object or value as a data tuple.\n   * If the input value is an object, an id field will be added to it. For\n   * efficiency, the input object is modified directly. A copy is not made.\n   * If the input value is a literal, it will be wrapped in a new object\n   * instance, with the value accessible as the 'data' property.\n   * @param datum - The value to ingest.\n   * @return {object} The ingested data tuple.\n   */\n  function ingest(datum) {\n    var t = (datum === Object(datum)) ? datum : {data: datum};\n    return tupleid(t) ? t : setid(t, TUPLE_ID++);\n  }\n\n  /**\n   * Given a source tuple, return a derived copy.\n   * @param {object} t - The source tuple.\n   * @return {object} The derived tuple.\n   */\n  function derive(t) {\n    return rederive(t, ingest({}));\n  }\n\n  /**\n   * Rederive a derived tuple by copying values from the source tuple.\n   * @param {object} t - The source tuple.\n   * @param {object} d - The derived tuple.\n   * @return {object} The derived tuple.\n   */\n  function rederive(t, d) {\n    for (var k in t) d[k] = t[k];\n    return d;\n  }\n\n  /**\n   * Replace an existing tuple with a new tuple.\n   * @param {object} t - The existing data tuple.\n   * @param {object} d - The new tuple that replaces the old.\n   * @return {object} The new tuple.\n   */\n  function replace(t, d) {\n    return setid(d, tupleid(t));\n  }\n\n  /**\n   * Generate an augmented comparator function that provides stable\n   * sorting by tuple id when the given comparator produces ties.\n   * @param {function} cmp - The comparator to augment.\n   * @param {function} [f] - Optional tuple accessor function.\n   * @return {function} An augmented comparator function.\n   */\n  function stableCompare(cmp, f) {\n    return !cmp ? null\n      : f ? (a, b) => cmp(a, b) || (tupleid(f(a)) - tupleid(f(b)))\n      : (a, b) => cmp(a, b) || (tupleid(a) - tupleid(b));\n  }\n\n  function isChangeSet(v) {\n    return v && v.constructor === changeset;\n  }\n\n  function changeset() {\n    var add = [],  // insert tuples\n        rem = [],  // remove tuples\n        mod = [],  // modify tuples\n        remp = [], // remove by predicate\n        modp = [], // modify by predicate\n        reflow = false;\n\n    return {\n      constructor: changeset,\n      insert: function(t) {\n        var d = array(t), i = 0, n = d.length;\n        for (; i<n; ++i) add.push(d[i]);\n        return this;\n      },\n      remove: function(t) {\n        var a = isFunction(t) ? remp : rem,\n            d = array(t), i = 0, n = d.length;\n        for (; i<n; ++i) a.push(d[i]);\n        return this;\n      },\n      modify: function(t, field, value) {\n        var m = {field: field, value: constant(value)};\n        if (isFunction(t)) {\n          m.filter = t;\n          modp.push(m);\n        } else {\n          m.tuple = t;\n          mod.push(m);\n        }\n        return this;\n      },\n      encode: function(t, set) {\n        if (isFunction(t)) modp.push({filter: t, field: set});\n        else mod.push({tuple: t, field: set});\n        return this;\n      },\n      reflow: function() {\n        reflow = true;\n        return this;\n      },\n      pulse: function(pulse, tuples) {\n        var cur = {}, out = {}, i, n, m, f, t, id;\n\n        // build lookup table of current tuples\n        for (i=0, n=tuples.length; i<n; ++i) {\n          cur[tupleid(tuples[i])] = 1;\n        }\n\n        // process individual tuples to remove\n        for (i=0, n=rem.length; i<n; ++i) {\n          t = rem[i];\n          cur[tupleid(t)] = -1;\n        }\n\n        // process predicate-based removals\n        for (i=0, n=remp.length; i<n; ++i) {\n          f = remp[i];\n          tuples.forEach(function(t) {\n            if (f(t)) cur[tupleid(t)] = -1;\n          });\n        }\n\n        // process all add tuples\n        for (i=0, n=add.length; i<n; ++i) {\n          t = add[i];\n          id = tupleid(t);\n          if (cur[id]) {\n            // tuple already resides in dataset\n            // if flagged for both add and remove, cancel\n            cur[id] = 1;\n          } else {\n            // tuple does not reside in dataset, add\n            pulse.add.push(ingest(add[i]));\n          }\n        }\n\n        // populate pulse rem list\n        for (i=0, n=tuples.length; i<n; ++i) {\n          t = tuples[i];\n          if (cur[tupleid(t)] < 0) pulse.rem.push(t);\n        }\n\n        // modify helper method\n        function modify(t, f, v) {\n          if (v) {\n            t[f] = v(t);\n          } else {\n            pulse.encode = f;\n          }\n          if (!reflow) out[tupleid(t)] = t;\n        }\n\n        // process individual tuples to modify\n        for (i=0, n=mod.length; i<n; ++i) {\n          m = mod[i];\n          t = m.tuple;\n          f = m.field;\n          id = cur[tupleid(t)];\n          if (id > 0) {\n            modify(t, f, m.value);\n            pulse.modifies(f);\n          }\n        }\n\n        // process predicate-based modifications\n        for (i=0, n=modp.length; i<n; ++i) {\n          m = modp[i];\n          f = m.filter;\n          tuples.forEach(function(t) {\n            if (f(t) && cur[tupleid(t)] > 0) {\n              modify(t, m.field, m.value);\n            }\n          });\n          pulse.modifies(m.field);\n        }\n\n        // upon reflow request, populate mod with all non-removed tuples\n        // otherwise, populate mod with modified tuples only\n        if (reflow) {\n          pulse.mod = rem.length || remp.length\n            ? tuples.filter(function(t) { return cur[tupleid(t)] > 0; })\n            : tuples.slice();\n        } else {\n          for (id in out) pulse.mod.push(out[id]);\n        }\n\n        return pulse;\n      }\n    };\n  }\n\n  var CACHE = '_:mod:_';\n\n  /**\n   * Hash that tracks modifications to assigned values.\n   * Callers *must* use the set method to update values.\n   */\n  function Parameters() {\n    Object.defineProperty(this, CACHE, {writable: true, value: {}});\n  }\n\n  var prototype = Parameters.prototype;\n\n  /**\n   * Set a parameter value. If the parameter value changes, the parameter\n   * will be recorded as modified.\n   * @param {string} name - The parameter name.\n   * @param {number} index - The index into an array-value parameter. Ignored if\n   *   the argument is undefined, null or less than zero.\n   * @param {*} value - The parameter value to set.\n   * @param {boolean} [force=false] - If true, records the parameter as modified\n   *   even if the value is unchanged.\n   * @return {Parameters} - This parameter object.\n   */\n  prototype.set = function(name, index, value, force) {\n    var o = this,\n        v = o[name],\n        mod = o[CACHE];\n\n    if (index != null && index >= 0) {\n      if (v[index] !== value || force) {\n        v[index] = value;\n        mod[index + ':' + name] = -1;\n        mod[name] = -1;\n      }\n    } else if (v !== value || force) {\n      o[name] = value;\n      mod[name] = isArray(value) ? 1 + value.length : -1;\n    }\n\n    return o;\n  };\n\n  /**\n   * Tests if one or more parameters has been modified. If invoked with no\n   * arguments, returns true if any parameter value has changed. If the first\n   * argument is array, returns trues if any parameter name in the array has\n   * changed. Otherwise, tests if the given name and optional array index has\n   * changed.\n   * @param {string} name - The parameter name to test.\n   * @param {number} [index=undefined] - The parameter array index to test.\n   * @return {boolean} - Returns true if a queried parameter was modified.\n   */\n  prototype.modified = function(name, index) {\n    var mod = this[CACHE], k;\n    if (!arguments.length) {\n      for (k in mod) { if (mod[k]) return true; }\n      return false;\n    } else if (isArray(name)) {\n      for (k=0; k<name.length; ++k) {\n        if (mod[name[k]]) return true;\n      }\n      return false;\n    }\n    return (index != null && index >= 0)\n      ? (index + 1 < mod[name] || !!mod[index + ':' + name])\n      : !!mod[name];\n  };\n\n  /**\n   * Clears the modification records. After calling this method,\n   * all parameters are considered unmodified.\n   */\n  prototype.clear = function() {\n    this[CACHE] = {};\n    return this;\n  };\n\n  var OP_ID = 0;\n  var PULSE = 'pulse';\n  var NO_PARAMS = new Parameters();\n\n  // Boolean Flags\n  var SKIP     = 1,\n      MODIFIED = 2;\n\n  /**\n   * An Operator is a processing node in a dataflow graph.\n   * Each operator stores a value and an optional value update function.\n   * Operators can accept a hash of named parameters. Parameter values can\n   * either be direct (JavaScript literals, arrays, objects) or indirect\n   * (other operators whose values will be pulled dynamically). Operators\n   * included as parameters will have this operator added as a dependency.\n   * @constructor\n   * @param {*} [init] - The initial value for this operator.\n   * @param {function(object, Pulse)} [update] - An update function. Upon\n   *   evaluation of this operator, the update function will be invoked and the\n   *   return value will be used as the new value of this operator.\n   * @param {object} [params] - The parameters for this operator.\n   * @param {boolean} [react=true] - Flag indicating if this operator should\n   *   listen for changes to upstream operators included as parameters.\n   * @see parameters\n   */\n  function Operator(init, update, params, react) {\n    this.id = ++OP_ID;\n    this.value = init;\n    this.stamp = -1;\n    this.rank = -1;\n    this.qrank = -1;\n    this.flags = 0;\n\n    if (update) {\n      this._update = update;\n    }\n    if (params) this.parameters(params, react);\n  }\n\n  var prototype$1 = Operator.prototype;\n\n  /**\n   * Returns a list of target operators dependent on this operator.\n   * If this list does not exist, it is created and then returned.\n   * @return {UniqueList}\n   */\n  prototype$1.targets = function() {\n    return this._targets || (this._targets = UniqueList(id));\n  };\n\n  /**\n   * Sets the value of this operator.\n   * @param {*} value - the value to set.\n   * @return {Number} Returns 1 if the operator value has changed\n   *   according to strict equality, returns 0 otherwise.\n   */\n  prototype$1.set = function(value) {\n    if (this.value !== value) {\n      this.value = value;\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  function flag(bit) {\n    return function(state) {\n      var f = this.flags;\n      if (arguments.length === 0) return !!(f & bit);\n      this.flags = state ? (f | bit) : (f & ~bit);\n      return this;\n    };\n  }\n\n  /**\n   * Indicates that operator evaluation should be skipped on the next pulse.\n   * This operator will still propagate incoming pulses, but its update function\n   * will not be invoked. The skip flag is reset after every pulse, so calling\n   * this method will affect processing of the next pulse only.\n   */\n  prototype$1.skip = flag(SKIP);\n\n  /**\n   * Indicates that this operator's value has been modified on its most recent\n   * pulse. Normally modification is checked via strict equality; however, in\n   * some cases it is more efficient to update the internal state of an object.\n   * In those cases, the modified flag can be used to trigger propagation. Once\n   * set, the modification flag persists across pulses until unset. The flag can\n   * be used with the last timestamp to test if a modification is recent.\n   */\n  prototype$1.modified = flag(MODIFIED);\n\n  /**\n   * Sets the parameters for this operator. The parameter values are analyzed for\n   * operator instances. If found, this operator will be added as a dependency\n   * of the parameterizing operator. Operator values are dynamically marshalled\n   * from each operator parameter prior to evaluation. If a parameter value is\n   * an array, the array will also be searched for Operator instances. However,\n   * the search does not recurse into sub-arrays or object properties.\n   * @param {object} params - A hash of operator parameters.\n   * @param {boolean} [react=true] - A flag indicating if this operator should\n   *   automatically update (react) when parameter values change. In other words,\n   *   this flag determines if the operator registers itself as a listener on\n   *   any upstream operators included in the parameters.\n   * @param {boolean} [initonly=false] - A flag indicating if this operator\n   *   should calculate an update only upon its initiatal evaluation, then\n   *   deregister dependencies and suppress all future update invocations.\n   * @return {Operator[]} - An array of upstream dependencies.\n   */\n  prototype$1.parameters = function(params, react, initonly) {\n    react = react !== false;\n    var self = this,\n        argval = (self._argval = self._argval || new Parameters()),\n        argops = (self._argops = self._argops || []),\n        deps = [],\n        name, value, n, i;\n\n    function add(name, index, value) {\n      if (value instanceof Operator) {\n        if (value !== self) {\n          if (react) value.targets().add(self);\n          deps.push(value);\n        }\n        argops.push({op:value, name:name, index:index});\n      } else {\n        argval.set(name, index, value);\n      }\n    }\n\n    for (name in params) {\n      value = params[name];\n\n      if (name === PULSE) {\n        array(value).forEach(function(op) {\n          if (!(op instanceof Operator)) {\n            error('Pulse parameters must be operator instances.');\n          } else if (op !== self) {\n            op.targets().add(self);\n            deps.push(op);\n          }\n        });\n        self.source = value;\n      } else if (isArray(value)) {\n        argval.set(name, -1, Array(n = value.length));\n        for (i=0; i<n; ++i) add(name, i, value[i]);\n      } else {\n        add(name, -1, value);\n      }\n    }\n\n    this.marshall().clear(); // initialize values\n    if (initonly) argops.initonly = true;\n\n    return deps;\n  };\n\n  /**\n   * Internal method for marshalling parameter values.\n   * Visits each operator dependency to pull the latest value.\n   * @return {Parameters} A Parameters object to pass to the update function.\n   */\n  prototype$1.marshall = function(stamp) {\n    var argval = this._argval || NO_PARAMS,\n        argops = this._argops, item, i, n, op, mod;\n\n    if (argops) {\n      for (i=0, n=argops.length; i<n; ++i) {\n        item = argops[i];\n        op = item.op;\n        mod = op.modified() && op.stamp === stamp;\n        argval.set(item.name, item.index, op.value, mod);\n      }\n\n      if (argops.initonly) {\n        for (i=0; i<n; ++i) {\n          item = argops[i];\n          item.op.targets().remove(this);\n        }\n        this._argops = null;\n        this._update = null;\n      }\n    }\n    return argval;\n  };\n\n  /**\n   * Delegate method to perform operator processing.\n   * Subclasses can override this method to perform custom processing.\n   * By default, it marshalls parameters and calls the update function\n   * if that function is defined. If the update function does not\n   * change the operator value then StopPropagation is returned.\n   * If no update function is defined, this method does nothing.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return The output pulse or StopPropagation. A falsy return value\n   *   (including undefined) will let the input pulse pass through.\n   */\n  prototype$1.evaluate = function(pulse) {\n    var update = this._update;\n    if (update) {\n      var params = this.marshall(pulse.stamp),\n          v = update.call(this, params, pulse);\n\n      params.clear();\n      if (v !== this.value) {\n        this.value = v;\n      } else if (!this.modified()) {\n        return pulse.StopPropagation;\n      }\n    }\n  };\n\n  /**\n   * Run this operator for the current pulse. If this operator has already\n   * been run at (or after) the pulse timestamp, returns StopPropagation.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  prototype$1.run = function(pulse) {\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n    var rv;\n    if (this.skip()) {\n      this.skip(false);\n      rv = 0;\n    } else {\n      rv = this.evaluate(pulse);\n    }\n    return (this.pulse = rv || pulse);\n  };\n\n  /**\n   * Add an operator to the dataflow graph. This function accepts a\n   * variety of input argument types. The basic signature supports an\n   * initial value, update function and parameters. If the first parameter\n   * is an Operator instance, it will be added directly. If it is a\n   * constructor for an Operator subclass, a new instance will be instantiated.\n   * Otherwise, if the first parameter is a function instance, it will be used\n   * as the update function and a null initial value is assumed.\n   * @param {*} init - One of: the operator to add, the initial value of\n   *   the operator, an operator class to instantiate, or an update function.\n   * @param {function} [update] - The operator update function.\n   * @param {object} [params] - The operator parameters.\n   * @param {boolean} [react=true] - Flag indicating if this operator should\n   *   listen for changes to upstream operators included as parameters.\n   * @return {Operator} - The added operator.\n   */\n  function add(init, update, params, react) {\n    var shift = 1,\n      op;\n\n    if (init instanceof Operator) {\n      op = init;\n    } else if (init && init.prototype instanceof Operator) {\n      op = new init();\n    } else if (isFunction(init)) {\n      op = new Operator(null, init);\n    } else {\n      shift = 0;\n      op = new Operator(init, update);\n    }\n\n    this.rank(op);\n    if (shift) {\n      react = params;\n      params = update;\n    }\n    if (params) this.connect(op, op.parameters(params, react));\n    this.touch(op);\n\n    return op;\n  }\n\n  /**\n   * Connect a target operator as a dependent of source operators.\n   * If necessary, this method will rerank the target operator and its\n   * dependents to ensure propagation proceeds in a topologically sorted order.\n   * @param {Operator} target - The target operator.\n   * @param {Array<Operator>} - The source operators that should propagate\n   *   to the target operator.\n   */\n  function connect(target, sources) {\n    var targetRank = target.rank, i, n;\n\n    for (i=0, n=sources.length; i<n; ++i) {\n      if (targetRank < sources[i].rank) {\n        this.rerank(target);\n        return;\n      }\n    }\n  }\n\n  var STREAM_ID = 0;\n\n  /**\n   * Models an event stream.\n   * @constructor\n   * @param {function(Object, number): boolean} [filter] - Filter predicate.\n   *   Events pass through when truthy, events are suppressed when falsy.\n   * @param {function(Object): *} [apply] - Applied to input events to produce\n   *   new event values.\n   * @param {function(Object)} [receive] - Event callback function to invoke\n   *   upon receipt of a new event. Use to override standard event processing.\n   */\n  function EventStream(filter, apply, receive) {\n    this.id = ++STREAM_ID;\n    this.value = null;\n    if (receive) this.receive = receive;\n    if (filter) this._filter = filter;\n    if (apply) this._apply = apply;\n  }\n\n  /**\n   * Creates a new event stream instance with the provided\n   * (optional) filter, apply and receive functions.\n   * @param {function(Object, number): boolean} [filter] - Filter predicate.\n   *   Events pass through when truthy, events are suppressed when falsy.\n   * @param {function(Object): *} [apply] - Applied to input events to produce\n   *   new event values.\n   * @see EventStream\n   */\n  function stream(filter, apply, receive) {\n    return new EventStream(filter, apply, receive);\n  }\n\n  var prototype$2 = EventStream.prototype;\n\n  prototype$2._filter = truthy;\n\n  prototype$2._apply = identity;\n\n  prototype$2.targets = function() {\n    return this._targets || (this._targets = UniqueList(id));\n  };\n\n  prototype$2.consume = function(_) {\n    if (!arguments.length) return !!this._consume;\n    this._consume = !!_;\n    return this;\n  };\n\n  prototype$2.receive = function(evt) {\n    if (this._filter(evt)) {\n      var val = (this.value = this._apply(evt)),\n          trg = this._targets,\n          n = trg ? trg.length : 0,\n          i = 0;\n\n      for (; i<n; ++i) trg[i].receive(val);\n\n      if (this._consume) {\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n    }\n  };\n\n  prototype$2.filter = function(filter) {\n    var s = stream(filter);\n    this.targets().add(s);\n    return s;\n  };\n\n  prototype$2.apply = function(apply) {\n    var s = stream(null, apply);\n    this.targets().add(s);\n    return s;\n  };\n\n  prototype$2.merge = function() {\n    var s = stream();\n\n    this.targets().add(s);\n    for (var i=0, n=arguments.length; i<n; ++i) {\n      arguments[i].targets().add(s);\n    }\n\n    return s;\n  };\n\n  prototype$2.throttle = function(pause) {\n    var t = -1;\n    return this.filter(function() {\n      var now = Date.now();\n      if ((now - t) > pause) {\n        t = now;\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  };\n\n  prototype$2.debounce = function(delay) {\n    var s = stream();\n\n    this.targets().add(stream(null, null,\n      debounce(delay, function(e) {\n        var df = e.dataflow;\n        s.receive(e);\n        if (df && df.run) df.run();\n      })\n    ));\n\n    return s;\n  };\n\n  prototype$2.between = function(a, b) {\n    var active = false;\n    a.targets().add(stream(null, null, function() { active = true; }));\n    b.targets().add(stream(null, null, function() { active = false; }));\n    return this.filter(function() { return active; });\n  };\n\n  /**\n   * Create a new event stream from an event source.\n   * @param {object} source - The event source to monitor. The input must\n   *  support the addEventListener method.\n   * @param {string} type - The event type.\n   * @param {function(object): boolean} [filter] - Event filter function.\n   * @param {function(object): *} [apply] - Event application function.\n   *   If provided, this function will be invoked and the result will be\n   *   used as the downstream event value.\n   * @return {EventStream}\n   */\n  function events(source, type, filter, apply) {\n    var df = this,\n        s = stream(filter, apply),\n        send = function(e) {\n          e.dataflow = df;\n          try {\n            s.receive(e);\n          } catch (error) {\n            df.error(error);\n          } finally {\n            df.run();\n          }\n        },\n        sources;\n\n    if (typeof source === 'string' && typeof document !== 'undefined') {\n      sources = document.querySelectorAll(source);\n    } else {\n      sources = array(source);\n    }\n\n    for (var i=0, n=sources.length; i<n; ++i) {\n      sources[i].addEventListener(type, send);\n    }\n\n    return s;\n  }\n\n  // Matches absolute URLs with optional protocol\n  //   https://...    file://...    //...\n  const protocol_re = /^([A-Za-z]+:)?\\/\\//;\n\n  // Matches allowed URIs. From https://github.com/cure53/DOMPurify/blob/master/src/regexp.js with added file://\n  const allowed_re = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|file|data):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i; // eslint-disable-line no-useless-escape\n  const whitespace_re = /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g; // eslint-disable-line no-control-regex\n\n\n  // Special treatment in node.js for the file: protocol\n  const fileProtocol = 'file://';\n\n  /**\n   * Factory for a loader constructor that provides methods for requesting\n   * files from either the network or disk, and for sanitizing request URIs.\n   * @param {function} fetch - The Fetch API for HTTP network requests.\n   *   If null or undefined, HTTP loading will be disabled.\n   * @param {object} fs - The file system interface for file loading.\n   *   If null or undefined, local file loading will be disabled.\n   * @return {function} A loader constructor with the following signature:\n   *   param {object} [options] - Optional default loading options to use.\n   *   return {object} - A new loader instance.\n   */\n  function loaderFactory(fetch, fs) {\n    return function(options) {\n      return {\n        options: options || {},\n        sanitize: sanitize,\n        load: load,\n        fileAccess: !!fs,\n        file: fileLoader(fs),\n        http: httpLoader(fetch)\n      };\n    };\n  }\n\n  /**\n   * Load an external resource, typically either from the web or from the local\n   * filesystem. This function uses {@link sanitize} to first sanitize the uri,\n   * then calls either {@link http} (for web requests) or {@link file} (for\n   * filesystem loading).\n   * @param {string} uri - The resource indicator (e.g., URL or filename).\n   * @param {object} [options] - Optional loading options. These options will\n   *   override any existing default options.\n   * @return {Promise} - A promise that resolves to the loaded content.\n   */\n  async function load(uri, options) {\n    const opt = await this.sanitize(uri, options),\n          url = opt.href;\n\n    return opt.localFile\n      ? this.file(url)\n      : this.http(url, options);\n  }\n\n  /**\n   * URI sanitizer function.\n   * @param {string} uri - The uri (url or filename) to sanity check.\n   * @param {object} options - An options hash.\n   * @return {Promise} - A promise that resolves to an object containing\n   *  sanitized uri data, or rejects it the input uri is deemed invalid.\n   *  The properties of the resolved object are assumed to be\n   *  valid attributes for an HTML 'a' tag. The sanitized uri *must* be\n   *  provided by the 'href' property of the returned object.\n   */\n  async function sanitize(uri, options) {\n    options = extend({}, this.options, options);\n\n    const fileAccess = this.fileAccess,\n          result = {href: null};\n\n    let isFile, loadFile, base;\n\n    const isAllowed = allowed_re.test(uri.replace(whitespace_re, ''));\n\n    if (uri == null || typeof uri !== 'string' || !isAllowed) {\n      error('Sanitize failure, invalid URI: ' + $(uri));\n    }\n\n    const hasProtocol = protocol_re.test(uri);\n\n    // if relative url (no protocol/host), prepend baseURL\n    if ((base = options.baseURL) && !hasProtocol) {\n      // Ensure that there is a slash between the baseURL (e.g. hostname) and url\n      if (!uri.startsWith('/') && base[base.length-1] !== '/') {\n        uri = '/' + uri;\n      }\n      uri = base + uri;\n    }\n\n    // should we load from file system?\n    loadFile = (isFile = uri.startsWith(fileProtocol))\n      || options.mode === 'file'\n      || options.mode !== 'http' && !hasProtocol && fileAccess;\n\n    if (isFile) {\n      // strip file protocol\n      uri = uri.slice(fileProtocol.length);\n    } else if (uri.startsWith('//')) {\n      if (options.defaultProtocol === 'file') {\n        // if is file, strip protocol and set loadFile flag\n        uri = uri.slice(2);\n        loadFile = true;\n      } else {\n        // if relative protocol (starts with '//'), prepend default protocol\n        uri = (options.defaultProtocol || 'http') + ':' + uri;\n      }\n    }\n\n    // set non-enumerable mode flag to indicate local file load\n    Object.defineProperty(result, 'localFile', {value: !!loadFile});\n\n    // set uri\n    result.href = uri;\n\n    // set default result target, if specified\n    if (options.target) {\n      result.target = options.target + '';\n    }\n\n    // set default result rel, if specified (#1542)\n    if (options.rel) {\n      result.rel = options.rel + '';\n    }\n\n    // provide control over cross-origin image handling (#2238)\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\n    if (options.context === 'image' && options.crossOrigin) {\n      result.crossOrigin = options.crossOrigin + '';\n    }\n\n    // return\n    return result;\n  }\n\n  /**\n   * File system loader factory.\n   * @param {object} fs - The file system interface.\n   * @return {function} - A file loader with the following signature:\n   *   param {string} filename - The file system path to load.\n   *   param {string} filename - The file system path to load.\n   *   return {Promise} A promise that resolves to the file contents.\n   */\n  function fileLoader(fs) {\n    return fs\n      ? function(filename) {\n          return new Promise(function(accept, reject) {\n            fs.readFile(filename, function(error, data) {\n              if (error) reject(error);\n              else accept(data);\n            });\n          });\n        }\n      : fileReject;\n  }\n\n  /**\n   * Default file system loader that simply rejects.\n   */\n  async function fileReject() {\n    error('No file system access.');\n  }\n\n  /**\n   * HTTP request handler factory.\n   * @param {function} fetch - The Fetch API method.\n   * @return {function} - An http loader with the following signature:\n   *   param {string} url - The url to request.\n   *   param {object} options - An options hash.\n   *   return {Promise} - A promise that resolves to the file contents.\n   */\n  function httpLoader(fetch) {\n    return fetch\n      ? async function(url, options) {\n          const opt = extend({}, this.options.http, options),\n                type = options && options.response,\n                response = await fetch(url, opt);\n\n          return !response.ok\n            ? error(response.status + '' + response.statusText)\n            : isFunction(response[type]) ? response[type]()\n            : response.text();\n        }\n      : httpReject;\n  }\n\n  /**\n   * Default http request handler that simply rejects.\n   */\n  async function httpReject() {\n    error('No HTTP fetch method available.');\n  }\n\n  var typeParsers = {\n    boolean: toBoolean,\n    integer: toNumber,\n    number:  toNumber,\n    date:    toDate,\n    string:  toString,\n    unknown: identity\n  };\n\n  var typeTests = [\n    isBoolean$1,\n    isInteger,\n    isNumber$1,\n    isDate$1\n  ];\n\n  var typeList = [\n    'boolean',\n    'integer',\n    'number',\n    'date'\n  ];\n\n  function inferType(values, field) {\n    if (!values || !values.length) return 'unknown';\n\n    var value, i, j, t = 0,\n        n = values.length,\n        m = typeTests.length,\n        a = typeTests.map(function(_, i) { return i + 1; });\n\n    for (i=0, n=values.length; i<n; ++i) {\n      value = field ? values[i][field] : values[i];\n      for (j=0; j<m; ++j) {\n        if (a[j] && isValid(value) && !typeTests[j](value)) {\n          a[j] = 0;\n          ++t;\n          if (t === typeTests.length) return 'string';\n        }\n      }\n    }\n\n    t = a.reduce(function(u, v) { return u === 0 ? v : u; }, 0) - 1;\n    return typeList[t];\n  }\n\n  function inferTypes(data, fields) {\n    return fields.reduce(function(types, field) {\n      types[field] = inferType(data, field);\n      return types;\n    }, {});\n  }\n\n  // -- Type Checks ----\n\n  function isValid(_) {\n    return _ != null && _ === _;\n  }\n\n  function isBoolean$1(_) {\n    return _ === 'true' || _ === 'false' || _ === true || _ === false;\n  }\n\n  function isDate$1(_) {\n    return !Number.isNaN(Date.parse(_));\n  }\n\n  function isNumber$1(_) {\n    return !Number.isNaN(+_) && !(_ instanceof Date);\n  }\n\n  function isInteger(_) {\n    return isNumber$1(_) && Number.isInteger(+_);\n  }\n\n  var EOL = {},\n      EOF = {},\n      QUOTE = 34,\n      NEWLINE = 10,\n      RETURN = 13;\n\n  function objectConverter(columns) {\n    return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n      return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n    }).join(\",\") + \"}\");\n  }\n\n  function customConverter(columns, f) {\n    var object = objectConverter(columns);\n    return function(row, i) {\n      return f(object(row), i, columns);\n    };\n  }\n\n  // Compute unique columns in order of discovery.\n  function inferColumns(rows) {\n    var columnSet = Object.create(null),\n        columns = [];\n\n    rows.forEach(function(row) {\n      for (var column in row) {\n        if (!(column in columnSet)) {\n          columns.push(columnSet[column] = column);\n        }\n      }\n    });\n\n    return columns;\n  }\n\n  function pad$1(value, width) {\n    var s = value + \"\", length = s.length;\n    return length < width ? new Array(width - length + 1).join(0) + s : s;\n  }\n\n  function formatYear(year) {\n    return year < 0 ? \"-\" + pad$1(-year, 6)\n      : year > 9999 ? \"+\" + pad$1(year, 6)\n      : pad$1(year, 4);\n  }\n\n  function formatDate(date) {\n    var hours = date.getUTCHours(),\n        minutes = date.getUTCMinutes(),\n        seconds = date.getUTCSeconds(),\n        milliseconds = date.getUTCMilliseconds();\n    return isNaN(date) ? \"Invalid Date\"\n        : formatYear(date.getUTCFullYear()) + \"-\" + pad$1(date.getUTCMonth() + 1, 2) + \"-\" + pad$1(date.getUTCDate(), 2)\n        + (milliseconds ? \"T\" + pad$1(hours, 2) + \":\" + pad$1(minutes, 2) + \":\" + pad$1(seconds, 2) + \".\" + pad$1(milliseconds, 3) + \"Z\"\n        : seconds ? \"T\" + pad$1(hours, 2) + \":\" + pad$1(minutes, 2) + \":\" + pad$1(seconds, 2) + \"Z\"\n        : minutes || hours ? \"T\" + pad$1(hours, 2) + \":\" + pad$1(minutes, 2) + \"Z\"\n        : \"\");\n  }\n\n  function dsvFormat(delimiter) {\n    var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n        DELIMITER = delimiter.charCodeAt(0);\n\n    function parse(text, f) {\n      var convert, columns, rows = parseRows(text, function(row, i) {\n        if (convert) return convert(row, i - 1);\n        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n      });\n      rows.columns = columns || [];\n      return rows;\n    }\n\n    function parseRows(text, f) {\n      var rows = [], // output rows\n          N = text.length,\n          I = 0, // current character index\n          n = 0, // current line number\n          t, // current token\n          eof = N <= 0, // current token followed by EOF?\n          eol = false; // current token followed by EOL?\n\n      // Strip the trailing newline.\n      if (text.charCodeAt(N - 1) === NEWLINE) --N;\n      if (text.charCodeAt(N - 1) === RETURN) --N;\n\n      function token() {\n        if (eof) return EOF;\n        if (eol) return eol = false, EOL;\n\n        // Unescape quotes.\n        var i, j = I, c;\n        if (text.charCodeAt(j) === QUOTE) {\n          while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n          if ((i = I) >= N) eof = true;\n          else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n          else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n          return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n        }\n\n        // Find next delimiter or newline.\n        while (I < N) {\n          if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n          else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n          else if (c !== DELIMITER) continue;\n          return text.slice(j, i);\n        }\n\n        // Return last token before EOF.\n        return eof = true, text.slice(j, N);\n      }\n\n      while ((t = token()) !== EOF) {\n        var row = [];\n        while (t !== EOL && t !== EOF) row.push(t), t = token();\n        if (f && (row = f(row, n++)) == null) continue;\n        rows.push(row);\n      }\n\n      return rows;\n    }\n\n    function preformatBody(rows, columns) {\n      return rows.map(function(row) {\n        return columns.map(function(column) {\n          return formatValue(row[column]);\n        }).join(delimiter);\n      });\n    }\n\n    function format(rows, columns) {\n      if (columns == null) columns = inferColumns(rows);\n      return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n    }\n\n    function formatBody(rows, columns) {\n      if (columns == null) columns = inferColumns(rows);\n      return preformatBody(rows, columns).join(\"\\n\");\n    }\n\n    function formatRows(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    }\n\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n\n    function formatValue(value) {\n      return value == null ? \"\"\n          : value instanceof Date ? formatDate(value)\n          : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n          : value;\n    }\n\n    return {\n      parse: parse,\n      parseRows: parseRows,\n      format: format,\n      formatBody: formatBody,\n      formatRows: formatRows,\n      formatRow: formatRow,\n      formatValue: formatValue\n    };\n  }\n\n  function delimitedFormat(delimiter) {\n    const parse = function(data, format) {\n      const delim = {delimiter: delimiter};\n      return dsv(data, format ? extend(format, delim) : delim);\n    };\n\n    parse.responseType = 'text';\n\n    return parse;\n  }\n\n  function dsv(data, format) {\n    if (format.header) {\n      data = format.header\n        .map($)\n        .join(format.delimiter) + '\\n' + data;\n    }\n    return dsvFormat(format.delimiter).parse(data + '');\n  }\n\n  dsv.responseType = 'text';\n\n  function isBuffer(_) {\n    return (typeof Buffer === 'function' && isFunction(Buffer.isBuffer))\n      ? Buffer.isBuffer(_) : false;\n  }\n\n  function json(data, format) {\n    const prop = (format && format.property) ? field(format.property) : identity;\n    return isObject(data) && !isBuffer(data)\n      ? parseJSON(prop(data))\n      : prop(JSON.parse(data));\n  }\n\n  json.responseType = 'json';\n\n  function parseJSON(data, format) {\n    return (format && format.copy)\n      ? JSON.parse(JSON.stringify(data))\n      : data;\n  }\n\n  function identity$1(x) {\n    return x;\n  }\n\n  function transform(transform) {\n    if (transform == null) return identity$1;\n    var x0,\n        y0,\n        kx = transform.scale[0],\n        ky = transform.scale[1],\n        dx = transform.translate[0],\n        dy = transform.translate[1];\n    return function(input, i) {\n      if (!i) x0 = y0 = 0;\n      var j = 2, n = input.length, output = new Array(n);\n      output[0] = (x0 += input[0]) * kx + dx;\n      output[1] = (y0 += input[1]) * ky + dy;\n      while (j < n) output[j] = input[j], ++j;\n      return output;\n    };\n  }\n\n  function reverse(array, n) {\n    var t, j = array.length, i = j - n;\n    while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n  }\n\n  function feature(topology, o) {\n    if (typeof o === \"string\") o = topology.objects[o];\n    return o.type === \"GeometryCollection\"\n        ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature$1(topology, o); })}\n        : feature$1(topology, o);\n  }\n\n  function feature$1(topology, o) {\n    var id = o.id,\n        bbox = o.bbox,\n        properties = o.properties == null ? {} : o.properties,\n        geometry = object(topology, o);\n    return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n        : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n        : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n  }\n\n  function object(topology, o) {\n    var transformPoint = transform(topology.transform),\n        arcs = topology.arcs;\n\n    function arc(i, points) {\n      if (points.length) points.pop();\n      for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n        points.push(transformPoint(a[k], k));\n      }\n      if (i < 0) reverse(points, n);\n    }\n\n    function point(p) {\n      return transformPoint(p);\n    }\n\n    function line(arcs) {\n      var points = [];\n      for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n      if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n      return points;\n    }\n\n    function ring(arcs) {\n      var points = line(arcs);\n      while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n      return points;\n    }\n\n    function polygon(arcs) {\n      return arcs.map(ring);\n    }\n\n    function geometry(o) {\n      var type = o.type, coordinates;\n      switch (type) {\n        case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n        case \"Point\": coordinates = point(o.coordinates); break;\n        case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n        case \"LineString\": coordinates = line(o.arcs); break;\n        case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n        case \"Polygon\": coordinates = polygon(o.arcs); break;\n        case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n        default: return null;\n      }\n      return {type: type, coordinates: coordinates};\n    }\n\n    return geometry(o);\n  }\n\n  function stitch(topology, arcs) {\n    var stitchedArcs = {},\n        fragmentByStart = {},\n        fragmentByEnd = {},\n        fragments = [],\n        emptyIndex = -1;\n\n    // Stitch empty arcs first, since they may be subsumed by other arcs.\n    arcs.forEach(function(i, j) {\n      var arc = topology.arcs[i < 0 ? ~i : i], t;\n      if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n        t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n      }\n    });\n\n    arcs.forEach(function(i) {\n      var e = ends(i),\n          start = e[0],\n          end = e[1],\n          f, g;\n\n      if (f = fragmentByEnd[start]) {\n        delete fragmentByEnd[f.end];\n        f.push(i);\n        f.end = end;\n        if (g = fragmentByStart[end]) {\n          delete fragmentByStart[g.start];\n          var fg = g === f ? f : f.concat(g);\n          fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n        } else {\n          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n        }\n      } else if (f = fragmentByStart[end]) {\n        delete fragmentByStart[f.start];\n        f.unshift(i);\n        f.start = start;\n        if (g = fragmentByEnd[start]) {\n          delete fragmentByEnd[g.end];\n          var gf = g === f ? f : g.concat(f);\n          fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n        } else {\n          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n        }\n      } else {\n        f = [i];\n        fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n      }\n    });\n\n    function ends(i) {\n      var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n      if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n      else p1 = arc[arc.length - 1];\n      return i < 0 ? [p1, p0] : [p0, p1];\n    }\n\n    function flush(fragmentByEnd, fragmentByStart) {\n      for (var k in fragmentByEnd) {\n        var f = fragmentByEnd[k];\n        delete fragmentByStart[f.start];\n        delete f.start;\n        delete f.end;\n        f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n        fragments.push(f);\n      }\n    }\n\n    flush(fragmentByEnd, fragmentByStart);\n    flush(fragmentByStart, fragmentByEnd);\n    arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n    return fragments;\n  }\n\n  function mesh(topology) {\n    return object(topology, meshArcs.apply(this, arguments));\n  }\n\n  function meshArcs(topology, object, filter) {\n    var arcs, i, n;\n    if (arguments.length > 1) arcs = extractArcs(topology, object, filter);\n    else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\n    return {type: \"MultiLineString\", arcs: stitch(topology, arcs)};\n  }\n\n  function extractArcs(topology, object, filter) {\n    var arcs = [],\n        geomsByArc = [],\n        geom;\n\n    function extract0(i) {\n      var j = i < 0 ? ~i : i;\n      (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n    }\n\n    function extract1(arcs) {\n      arcs.forEach(extract0);\n    }\n\n    function extract2(arcs) {\n      arcs.forEach(extract1);\n    }\n\n    function extract3(arcs) {\n      arcs.forEach(extract2);\n    }\n\n    function geometry(o) {\n      switch (geom = o, o.type) {\n        case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n        case \"LineString\": extract1(o.arcs); break;\n        case \"MultiLineString\": case \"Polygon\": extract2(o.arcs); break;\n        case \"MultiPolygon\": extract3(o.arcs); break;\n      }\n    }\n\n    geometry(object);\n\n    geomsByArc.forEach(filter == null\n        ? function(geoms) { arcs.push(geoms[0].i); }\n        : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n\n    return arcs;\n  }\n\n  const filters = {\n    interior: (a, b) => a !== b,\n    exterior: (a, b) => a === b\n  };\n\n  function topojson(data, format) {\n    let method, object, property, filter;\n    data = json(data, format);\n\n    if (format && format.feature) {\n      method = feature;\n      property = format.feature;\n    } else if (format && format.mesh) {\n      method = mesh;\n      property = format.mesh;\n      filter = filters[format.filter];\n    } else {\n      error('Missing TopoJSON feature or mesh parameter.');\n    }\n\n    object = (object = data.objects[property])\n      ? method(data, object, filter)\n      : error('Invalid TopoJSON object: ' + property);\n\n    return object && object.features || [object];\n  }\n\n  topojson.responseType = 'json';\n\n  const format = {\n    dsv: dsv,\n    csv: delimitedFormat(','),\n    tsv: delimitedFormat('\\t'),\n    json: json,\n    topojson: topojson\n  };\n\n  function formats(name, reader) {\n    if (arguments.length > 1) {\n      format[name] = reader;\n      return this;\n    } else {\n      return hasOwnProperty(format, name) ? format[name] : null;\n    }\n  }\n\n  function responseType(type) {\n    const f = formats(type);\n    return f && f.responseType || 'text';\n  }\n\n  var t0 = new Date,\n      t1 = new Date;\n\n  function newInterval(floori, offseti, count, field) {\n\n    function interval(date) {\n      return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;\n    }\n\n    interval.floor = function(date) {\n      return floori(date = new Date(+date)), date;\n    };\n\n    interval.ceil = function(date) {\n      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n    };\n\n    interval.round = function(date) {\n      var d0 = interval(date),\n          d1 = interval.ceil(date);\n      return date - d0 < d1 - date ? d0 : d1;\n    };\n\n    interval.offset = function(date, step) {\n      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n    };\n\n    interval.range = function(start, stop, step) {\n      var range = [], previous;\n      start = interval.ceil(start);\n      step = step == null ? 1 : Math.floor(step);\n      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n      do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n      while (previous < start && start < stop);\n      return range;\n    };\n\n    interval.filter = function(test) {\n      return newInterval(function(date) {\n        if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n      }, function(date, step) {\n        if (date >= date) {\n          if (step < 0) while (++step <= 0) {\n            while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n          } else while (--step >= 0) {\n            while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n          }\n        }\n      });\n    };\n\n    if (count) {\n      interval.count = function(start, end) {\n        t0.setTime(+start), t1.setTime(+end);\n        floori(t0), floori(t1);\n        return Math.floor(count(t0, t1));\n      };\n\n      interval.every = function(step) {\n        step = Math.floor(step);\n        return !isFinite(step) || !(step > 0) ? null\n            : !(step > 1) ? interval\n            : interval.filter(field\n                ? function(d) { return field(d) % step === 0; }\n                : function(d) { return interval.count(0, d) % step === 0; });\n      };\n    }\n\n    return interval;\n  }\n\n  var millisecond = newInterval(function() {\n    // noop\n  }, function(date, step) {\n    date.setTime(+date + step);\n  }, function(start, end) {\n    return end - start;\n  });\n\n  // An optimized implementation for this simple case.\n  millisecond.every = function(k) {\n    k = Math.floor(k);\n    if (!isFinite(k) || !(k > 0)) return null;\n    if (!(k > 1)) return millisecond;\n    return newInterval(function(date) {\n      date.setTime(Math.floor(date / k) * k);\n    }, function(date, step) {\n      date.setTime(+date + step * k);\n    }, function(start, end) {\n      return (end - start) / k;\n    });\n  };\n\n  var durationSecond = 1e3;\n  var durationMinute = 6e4;\n  var durationHour = 36e5;\n  var durationDay = 864e5;\n  var durationWeek = 6048e5;\n\n  var second = newInterval(function(date) {\n    date.setTime(date - date.getMilliseconds());\n  }, function(date, step) {\n    date.setTime(+date + step * durationSecond);\n  }, function(start, end) {\n    return (end - start) / durationSecond;\n  }, function(date) {\n    return date.getUTCSeconds();\n  });\n\n  var minute = newInterval(function(date) {\n    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);\n  }, function(date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function(start, end) {\n    return (end - start) / durationMinute;\n  }, function(date) {\n    return date.getMinutes();\n  });\n\n  var hour = newInterval(function(date) {\n    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);\n  }, function(date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function(start, end) {\n    return (end - start) / durationHour;\n  }, function(date) {\n    return date.getHours();\n  });\n\n  var day = newInterval(function(date) {\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setDate(date.getDate() + step);\n  }, function(start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n\n  function weekday(i) {\n    return newInterval(function(date) {\n      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n      date.setHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setDate(date.getDate() + step * 7);\n    }, function(start, end) {\n      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n    });\n  }\n\n  var sunday = weekday(0);\n  var monday = weekday(1);\n  var tuesday = weekday(2);\n  var wednesday = weekday(3);\n  var thursday = weekday(4);\n  var friday = weekday(5);\n  var saturday = weekday(6);\n\n  var month = newInterval(function(date) {\n    date.setDate(1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setMonth(date.getMonth() + step);\n  }, function(start, end) {\n    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n  }, function(date) {\n    return date.getMonth();\n  });\n\n  var year = newInterval(function(date) {\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setFullYear(date.getFullYear() + step);\n  }, function(start, end) {\n    return end.getFullYear() - start.getFullYear();\n  }, function(date) {\n    return date.getFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  year.every = function(k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\n      date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n      date.setMonth(0, 1);\n      date.setHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setFullYear(date.getFullYear() + step * k);\n    });\n  };\n\n  var utcMinute = newInterval(function(date) {\n    date.setUTCSeconds(0, 0);\n  }, function(date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function(start, end) {\n    return (end - start) / durationMinute;\n  }, function(date) {\n    return date.getUTCMinutes();\n  });\n\n  var utcHour = newInterval(function(date) {\n    date.setUTCMinutes(0, 0, 0);\n  }, function(date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function(start, end) {\n    return (end - start) / durationHour;\n  }, function(date) {\n    return date.getUTCHours();\n  });\n\n  var utcDay = newInterval(function(date) {\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCDate(date.getUTCDate() + step);\n  }, function(start, end) {\n    return (end - start) / durationDay;\n  }, function(date) {\n    return date.getUTCDate() - 1;\n  });\n\n  function utcWeekday(i) {\n    return newInterval(function(date) {\n      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setUTCDate(date.getUTCDate() + step * 7);\n    }, function(start, end) {\n      return (end - start) / durationWeek;\n    });\n  }\n\n  var utcSunday = utcWeekday(0);\n  var utcMonday = utcWeekday(1);\n  var utcTuesday = utcWeekday(2);\n  var utcWednesday = utcWeekday(3);\n  var utcThursday = utcWeekday(4);\n  var utcFriday = utcWeekday(5);\n  var utcSaturday = utcWeekday(6);\n\n  var utcMonth = newInterval(function(date) {\n    date.setUTCDate(1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCMonth(date.getUTCMonth() + step);\n  }, function(start, end) {\n    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n  }, function(date) {\n    return date.getUTCMonth();\n  });\n\n  var utcYear = newInterval(function(date) {\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step);\n  }, function(start, end) {\n    return end.getUTCFullYear() - start.getUTCFullYear();\n  }, function(date) {\n    return date.getUTCFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  utcYear.every = function(k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\n      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n      date.setUTCMonth(0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setUTCFullYear(date.getUTCFullYear() + step * k);\n    });\n  };\n\n  function localDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n      date.setFullYear(d.y);\n      return date;\n    }\n    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n  }\n\n  function utcDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n      date.setUTCFullYear(d.y);\n      return date;\n    }\n    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n  }\n\n  function newDate(y, m, d) {\n    return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};\n  }\n\n  function formatLocale(locale) {\n    var locale_dateTime = locale.dateTime,\n        locale_date = locale.date,\n        locale_time = locale.time,\n        locale_periods = locale.periods,\n        locale_weekdays = locale.days,\n        locale_shortWeekdays = locale.shortDays,\n        locale_months = locale.months,\n        locale_shortMonths = locale.shortMonths;\n\n    var periodRe = formatRe(locale_periods),\n        periodLookup = formatLookup(locale_periods),\n        weekdayRe = formatRe(locale_weekdays),\n        weekdayLookup = formatLookup(locale_weekdays),\n        shortWeekdayRe = formatRe(locale_shortWeekdays),\n        shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n        monthRe = formatRe(locale_months),\n        monthLookup = formatLookup(locale_months),\n        shortMonthRe = formatRe(locale_shortMonths),\n        shortMonthLookup = formatLookup(locale_shortMonths);\n\n    var formats = {\n      \"a\": formatShortWeekday,\n      \"A\": formatWeekday,\n      \"b\": formatShortMonth,\n      \"B\": formatMonth,\n      \"c\": null,\n      \"d\": formatDayOfMonth,\n      \"e\": formatDayOfMonth,\n      \"f\": formatMicroseconds,\n      \"H\": formatHour24,\n      \"I\": formatHour12,\n      \"j\": formatDayOfYear,\n      \"L\": formatMilliseconds,\n      \"m\": formatMonthNumber,\n      \"M\": formatMinutes,\n      \"p\": formatPeriod,\n      \"q\": formatQuarter,\n      \"Q\": formatUnixTimestamp,\n      \"s\": formatUnixTimestampSeconds,\n      \"S\": formatSeconds,\n      \"u\": formatWeekdayNumberMonday,\n      \"U\": formatWeekNumberSunday,\n      \"V\": formatWeekNumberISO,\n      \"w\": formatWeekdayNumberSunday,\n      \"W\": formatWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatYear$1,\n      \"Y\": formatFullYear,\n      \"Z\": formatZone,\n      \"%\": formatLiteralPercent\n    };\n\n    var utcFormats = {\n      \"a\": formatUTCShortWeekday,\n      \"A\": formatUTCWeekday,\n      \"b\": formatUTCShortMonth,\n      \"B\": formatUTCMonth,\n      \"c\": null,\n      \"d\": formatUTCDayOfMonth,\n      \"e\": formatUTCDayOfMonth,\n      \"f\": formatUTCMicroseconds,\n      \"H\": formatUTCHour24,\n      \"I\": formatUTCHour12,\n      \"j\": formatUTCDayOfYear,\n      \"L\": formatUTCMilliseconds,\n      \"m\": formatUTCMonthNumber,\n      \"M\": formatUTCMinutes,\n      \"p\": formatUTCPeriod,\n      \"q\": formatUTCQuarter,\n      \"Q\": formatUnixTimestamp,\n      \"s\": formatUnixTimestampSeconds,\n      \"S\": formatUTCSeconds,\n      \"u\": formatUTCWeekdayNumberMonday,\n      \"U\": formatUTCWeekNumberSunday,\n      \"V\": formatUTCWeekNumberISO,\n      \"w\": formatUTCWeekdayNumberSunday,\n      \"W\": formatUTCWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatUTCYear,\n      \"Y\": formatUTCFullYear,\n      \"Z\": formatUTCZone,\n      \"%\": formatLiteralPercent\n    };\n\n    var parses = {\n      \"a\": parseShortWeekday,\n      \"A\": parseWeekday,\n      \"b\": parseShortMonth,\n      \"B\": parseMonth,\n      \"c\": parseLocaleDateTime,\n      \"d\": parseDayOfMonth,\n      \"e\": parseDayOfMonth,\n      \"f\": parseMicroseconds,\n      \"H\": parseHour24,\n      \"I\": parseHour24,\n      \"j\": parseDayOfYear,\n      \"L\": parseMilliseconds,\n      \"m\": parseMonthNumber,\n      \"M\": parseMinutes,\n      \"p\": parsePeriod,\n      \"q\": parseQuarter,\n      \"Q\": parseUnixTimestamp,\n      \"s\": parseUnixTimestampSeconds,\n      \"S\": parseSeconds,\n      \"u\": parseWeekdayNumberMonday,\n      \"U\": parseWeekNumberSunday,\n      \"V\": parseWeekNumberISO,\n      \"w\": parseWeekdayNumberSunday,\n      \"W\": parseWeekNumberMonday,\n      \"x\": parseLocaleDate,\n      \"X\": parseLocaleTime,\n      \"y\": parseYear,\n      \"Y\": parseFullYear,\n      \"Z\": parseZone,\n      \"%\": parseLiteralPercent\n    };\n\n    // These recursive directive definitions must be deferred.\n    formats.x = newFormat(locale_date, formats);\n    formats.X = newFormat(locale_time, formats);\n    formats.c = newFormat(locale_dateTime, formats);\n    utcFormats.x = newFormat(locale_date, utcFormats);\n    utcFormats.X = newFormat(locale_time, utcFormats);\n    utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n    function newFormat(specifier, formats) {\n      return function(date) {\n        var string = [],\n            i = -1,\n            j = 0,\n            n = specifier.length,\n            c,\n            pad,\n            format;\n\n        if (!(date instanceof Date)) date = new Date(+date);\n\n        while (++i < n) {\n          if (specifier.charCodeAt(i) === 37) {\n            string.push(specifier.slice(j, i));\n            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\n            else pad = c === \"e\" ? \" \" : \"0\";\n            if (format = formats[c]) c = format(date, pad);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n\n        string.push(specifier.slice(j, i));\n        return string.join(\"\");\n      };\n    }\n\n    function newParse(specifier, Z) {\n      return function(string) {\n        var d = newDate(1900, undefined, 1),\n            i = parseSpecifier(d, specifier, string += \"\", 0),\n            week, day$1;\n        if (i != string.length) return null;\n\n        // If a UNIX timestamp is specified, return it.\n        if (\"Q\" in d) return new Date(d.Q);\n        if (\"s\" in d) return new Date(d.s * 1000 + (\"L\" in d ? d.L : 0));\n\n        // If this is utcParse, never use the local timezone.\n        if (Z && !(\"Z\" in d)) d.Z = 0;\n\n        // The am-pm flag is 0 for AM, and 1 for PM.\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n        // If the month was not specified, inherit from the quarter.\n        if (d.m === undefined) d.m = \"q\" in d ? d.q : 0;\n\n        // Convert day-of-week and week-of-year to day-of-year.\n        if (\"V\" in d) {\n          if (d.V < 1 || d.V > 53) return null;\n          if (!(\"w\" in d)) d.w = 1;\n          if (\"Z\" in d) {\n            week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();\n            week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);\n            week = utcDay.offset(week, (d.V - 1) * 7);\n            d.y = week.getUTCFullYear();\n            d.m = week.getUTCMonth();\n            d.d = week.getUTCDate() + (d.w + 6) % 7;\n          } else {\n            week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();\n            week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);\n            week = day.offset(week, (d.V - 1) * 7);\n            d.y = week.getFullYear();\n            d.m = week.getMonth();\n            d.d = week.getDate() + (d.w + 6) % 7;\n          }\n        } else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\n          day$1 = \"Z\" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();\n          d.m = 0;\n          d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;\n        }\n\n        // If a time zone is specified, all fields are interpreted as UTC and then\n        // offset according to the specified time zone.\n        if (\"Z\" in d) {\n          d.H += d.Z / 100 | 0;\n          d.M += d.Z % 100;\n          return utcDate(d);\n        }\n\n        // Otherwise, all fields are in local time.\n        return localDate(d);\n      };\n    }\n\n    function parseSpecifier(d, specifier, string, j) {\n      var i = 0,\n          n = specifier.length,\n          m = string.length,\n          c,\n          parse;\n\n      while (i < n) {\n        if (j >= m) return -1;\n        c = specifier.charCodeAt(i++);\n        if (c === 37) {\n          c = specifier.charAt(i++);\n          parse = parses[c in pads ? specifier.charAt(i++) : c];\n          if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n\n      return j;\n    }\n\n    function parsePeriod(d, string, i) {\n      var n = periodRe.exec(string.slice(i));\n      return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseShortWeekday(d, string, i) {\n      var n = shortWeekdayRe.exec(string.slice(i));\n      return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseWeekday(d, string, i) {\n      var n = weekdayRe.exec(string.slice(i));\n      return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseShortMonth(d, string, i) {\n      var n = shortMonthRe.exec(string.slice(i));\n      return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseMonth(d, string, i) {\n      var n = monthRe.exec(string.slice(i));\n      return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseLocaleDateTime(d, string, i) {\n      return parseSpecifier(d, locale_dateTime, string, i);\n    }\n\n    function parseLocaleDate(d, string, i) {\n      return parseSpecifier(d, locale_date, string, i);\n    }\n\n    function parseLocaleTime(d, string, i) {\n      return parseSpecifier(d, locale_time, string, i);\n    }\n\n    function formatShortWeekday(d) {\n      return locale_shortWeekdays[d.getDay()];\n    }\n\n    function formatWeekday(d) {\n      return locale_weekdays[d.getDay()];\n    }\n\n    function formatShortMonth(d) {\n      return locale_shortMonths[d.getMonth()];\n    }\n\n    function formatMonth(d) {\n      return locale_months[d.getMonth()];\n    }\n\n    function formatPeriod(d) {\n      return locale_periods[+(d.getHours() >= 12)];\n    }\n\n    function formatQuarter(d) {\n      return 1 + ~~(d.getMonth() / 3);\n    }\n\n    function formatUTCShortWeekday(d) {\n      return locale_shortWeekdays[d.getUTCDay()];\n    }\n\n    function formatUTCWeekday(d) {\n      return locale_weekdays[d.getUTCDay()];\n    }\n\n    function formatUTCShortMonth(d) {\n      return locale_shortMonths[d.getUTCMonth()];\n    }\n\n    function formatUTCMonth(d) {\n      return locale_months[d.getUTCMonth()];\n    }\n\n    function formatUTCPeriod(d) {\n      return locale_periods[+(d.getUTCHours() >= 12)];\n    }\n\n    function formatUTCQuarter(d) {\n      return 1 + ~~(d.getUTCMonth() / 3);\n    }\n\n    return {\n      format: function(specifier) {\n        var f = newFormat(specifier += \"\", formats);\n        f.toString = function() { return specifier; };\n        return f;\n      },\n      parse: function(specifier) {\n        var p = newParse(specifier += \"\", false);\n        p.toString = function() { return specifier; };\n        return p;\n      },\n      utcFormat: function(specifier) {\n        var f = newFormat(specifier += \"\", utcFormats);\n        f.toString = function() { return specifier; };\n        return f;\n      },\n      utcParse: function(specifier) {\n        var p = newParse(specifier += \"\", true);\n        p.toString = function() { return specifier; };\n        return p;\n      }\n    };\n  }\n\n  var pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"},\n      numberRe = /^\\s*\\d+/, // note: ignores next directive\n      percentRe = /^%/,\n      requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\n\n  function pad$2(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\",\n        string = (sign ? -value : value) + \"\",\n        length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n\n  function requote(s) {\n    return s.replace(requoteRe, \"\\\\$&\");\n  }\n\n  function formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n  }\n\n  function formatLookup(names) {\n    var map = {}, i = -1, n = names.length;\n    while (++i < n) map[names[i].toLowerCase()] = i;\n    return map;\n  }\n\n  function parseWeekdayNumberSunday(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.w = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekdayNumberMonday(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.u = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberSunday(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.U = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberISO(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.V = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberMonday(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.W = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseFullYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 4));\n    return n ? (d.y = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n  }\n\n  function parseZone(d, string, i) {\n    var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\n    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n  }\n\n  function parseQuarter(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;\n  }\n\n  function parseMonthNumber(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n  }\n\n  function parseDayOfMonth(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseDayOfYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseHour24(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.H = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMinutes(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.M = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseSeconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.S = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMilliseconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.L = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMicroseconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 6));\n    return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\n  }\n\n  function parseLiteralPercent(d, string, i) {\n    var n = percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n\n  function parseUnixTimestamp(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.Q = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseUnixTimestampSeconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.s = +n[0], i + n[0].length) : -1;\n  }\n\n  function formatDayOfMonth(d, p) {\n    return pad$2(d.getDate(), p, 2);\n  }\n\n  function formatHour24(d, p) {\n    return pad$2(d.getHours(), p, 2);\n  }\n\n  function formatHour12(d, p) {\n    return pad$2(d.getHours() % 12 || 12, p, 2);\n  }\n\n  function formatDayOfYear(d, p) {\n    return pad$2(1 + day.count(year(d), d), p, 3);\n  }\n\n  function formatMilliseconds(d, p) {\n    return pad$2(d.getMilliseconds(), p, 3);\n  }\n\n  function formatMicroseconds(d, p) {\n    return formatMilliseconds(d, p) + \"000\";\n  }\n\n  function formatMonthNumber(d, p) {\n    return pad$2(d.getMonth() + 1, p, 2);\n  }\n\n  function formatMinutes(d, p) {\n    return pad$2(d.getMinutes(), p, 2);\n  }\n\n  function formatSeconds(d, p) {\n    return pad$2(d.getSeconds(), p, 2);\n  }\n\n  function formatWeekdayNumberMonday(d) {\n    var day = d.getDay();\n    return day === 0 ? 7 : day;\n  }\n\n  function formatWeekNumberSunday(d, p) {\n    return pad$2(sunday.count(year(d) - 1, d), p, 2);\n  }\n\n  function formatWeekNumberISO(d, p) {\n    var day = d.getDay();\n    d = (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);\n    return pad$2(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);\n  }\n\n  function formatWeekdayNumberSunday(d) {\n    return d.getDay();\n  }\n\n  function formatWeekNumberMonday(d, p) {\n    return pad$2(monday.count(year(d) - 1, d), p, 2);\n  }\n\n  function formatYear$1(d, p) {\n    return pad$2(d.getFullYear() % 100, p, 2);\n  }\n\n  function formatFullYear(d, p) {\n    return pad$2(d.getFullYear() % 10000, p, 4);\n  }\n\n  function formatZone(d) {\n    var z = d.getTimezoneOffset();\n    return (z > 0 ? \"-\" : (z *= -1, \"+\"))\n        + pad$2(z / 60 | 0, \"0\", 2)\n        + pad$2(z % 60, \"0\", 2);\n  }\n\n  function formatUTCDayOfMonth(d, p) {\n    return pad$2(d.getUTCDate(), p, 2);\n  }\n\n  function formatUTCHour24(d, p) {\n    return pad$2(d.getUTCHours(), p, 2);\n  }\n\n  function formatUTCHour12(d, p) {\n    return pad$2(d.getUTCHours() % 12 || 12, p, 2);\n  }\n\n  function formatUTCDayOfYear(d, p) {\n    return pad$2(1 + utcDay.count(utcYear(d), d), p, 3);\n  }\n\n  function formatUTCMilliseconds(d, p) {\n    return pad$2(d.getUTCMilliseconds(), p, 3);\n  }\n\n  function formatUTCMicroseconds(d, p) {\n    return formatUTCMilliseconds(d, p) + \"000\";\n  }\n\n  function formatUTCMonthNumber(d, p) {\n    return pad$2(d.getUTCMonth() + 1, p, 2);\n  }\n\n  function formatUTCMinutes(d, p) {\n    return pad$2(d.getUTCMinutes(), p, 2);\n  }\n\n  function formatUTCSeconds(d, p) {\n    return pad$2(d.getUTCSeconds(), p, 2);\n  }\n\n  function formatUTCWeekdayNumberMonday(d) {\n    var dow = d.getUTCDay();\n    return dow === 0 ? 7 : dow;\n  }\n\n  function formatUTCWeekNumberSunday(d, p) {\n    return pad$2(utcSunday.count(utcYear(d) - 1, d), p, 2);\n  }\n\n  function formatUTCWeekNumberISO(d, p) {\n    var day = d.getUTCDay();\n    d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\n    return pad$2(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\n  }\n\n  function formatUTCWeekdayNumberSunday(d) {\n    return d.getUTCDay();\n  }\n\n  function formatUTCWeekNumberMonday(d, p) {\n    return pad$2(utcMonday.count(utcYear(d) - 1, d), p, 2);\n  }\n\n  function formatUTCYear(d, p) {\n    return pad$2(d.getUTCFullYear() % 100, p, 2);\n  }\n\n  function formatUTCFullYear(d, p) {\n    return pad$2(d.getUTCFullYear() % 10000, p, 4);\n  }\n\n  function formatUTCZone() {\n    return \"+0000\";\n  }\n\n  function formatLiteralPercent() {\n    return \"%\";\n  }\n\n  function formatUnixTimestamp(d) {\n    return +d;\n  }\n\n  function formatUnixTimestampSeconds(d) {\n    return Math.floor(+d / 1000);\n  }\n\n  var locale;\n  var timeFormat;\n  var timeParse;\n  var utcFormat;\n  var utcParse;\n\n  defaultLocale({\n    dateTime: \"%x, %X\",\n    date: \"%-m/%-d/%Y\",\n    time: \"%-I:%M:%S %p\",\n    periods: [\"AM\", \"PM\"],\n    days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n    shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  });\n\n  function defaultLocale(definition) {\n    locale = formatLocale(definition);\n    timeFormat = locale.format;\n    timeParse = locale.parse;\n    utcFormat = locale.utcFormat;\n    utcParse = locale.utcParse;\n    return locale;\n  }\n\n  function read(data, schema, dateParse) {\n    schema = schema || {};\n\n    const reader = formats(schema.type || 'json');\n    if (!reader) error('Unknown data format type: ' + schema.type);\n\n    data = reader(data, schema);\n    if (schema.parse) parse(data, schema.parse, dateParse);\n\n    if (hasOwnProperty(data, 'columns')) delete data.columns;\n    return data;\n  }\n\n  function parse(data, types, dateParse) {\n    if (!data.length) return; // early exit for empty data\n\n    dateParse = dateParse || timeParse;\n\n    var fields = data.columns || Object.keys(data[0]),\n        parsers, datum, field, i, j, n, m;\n\n    if (types === 'auto') types = inferTypes(data, fields);\n\n    fields = Object.keys(types);\n    parsers = fields.map(function(field) {\n      var type = types[field],\n          parts, pattern;\n\n      if (type && (type.startsWith('date:') || type.startsWith('utc:'))) {\n        parts = type.split(/:(.+)?/, 2);  // split on first :\n        pattern = parts[1];\n\n        if ((pattern[0] === '\\'' && pattern[pattern.length-1] === '\\'') ||\n            (pattern[0] === '\"'  && pattern[pattern.length-1] === '\"')) {\n          pattern = pattern.slice(1, -1);\n        }\n\n        return parts[0] === 'utc' ? utcParse(pattern) : dateParse(pattern);\n      }\n\n      if (!typeParsers[type]) {\n        throw Error('Illegal format pattern: ' + field + ':' + type);\n      }\n\n      return typeParsers[type];\n    });\n\n    for (i=0, n=data.length, m=fields.length; i<n; ++i) {\n      datum = data[i];\n      for (j=0; j<m; ++j) {\n        field = fields[j];\n        datum[field] = parsers[j](datum[field]);\n      }\n    }\n  }\n\n  var loader = loaderFactory(\n      typeof fetch !== 'undefined' && fetch, // use built-in fetch API\n//      null // no file system access\n      typeof fs !== 'undefined' && fs // XXX -jar    \n  );\n\n  const parse$1 = read;\n\n  /**\n   * Ingests new data into the dataflow. First parses the data using the\n   * vega-loader read method, then pulses a changeset to the target operator.\n   * @param {Operator} target - The Operator to target with ingested data,\n   *   typically a Collect transform instance.\n   * @param {*} data - The input data, prior to parsing. For JSON this may\n   *   be a string or an object. For CSV, TSV, etc should be a string.\n   * @param {object} format - The data format description for parsing\n   *   loaded data. This object is passed to the vega-loader read method.\n   * @returns {Dataflow}\n   */\n  function ingest$1(target, data, format) {\n    return this.pulse(target, this.changeset().insert(parse$1(data, format)));\n  }\n\n  /**\n   * Request data from an external source, parse it, and return a Promise.\n   * @param {string} url - The URL from which to load the data. This string\n   *   is passed to the vega-loader load method.\n   * @param {object} [format] - The data format description for parsing\n   *   loaded data. This object is passed to the vega-loader read method.\n   * @return {Promise} A Promise that resolves upon completion of the request.\n   *   The resolved object contains the following properties:\n   *   - data: an array of parsed data (or null upon error)\n   *   - status: a code for success (0), load fail (-1), or parse fail (-2)\n   */\n  async function request(url, format) {\n    const df = this;\n    let status = 0, data;\n\n    try {\n      data = await df.loader().load(url, {\n        context: 'dataflow',\n        response: responseType(format && format.type)\n      });\n      try {\n        data = parse$1(data, format);\n      } catch (err) {\n        status = -2;\n        df.warn('Data ingestion failed', url, err);\n      }\n    } catch (err) {\n      status = -1;\n      df.warn('Loading failed', url, err);\n    }\n\n    return {data, status};\n  }\n\n  async function preload(target, url, format) {\n    const df = this,\n          pending = df._pending || loadPending(df);\n\n    pending.requests += 1;\n\n    const res = await df.request(url, format);\n    df.pulse(target, df.changeset().remove(truthy).insert(res.data || []));\n\n    pending.done();\n    return res;\n  }\n\n  function loadPending(df) {\n    var pending = new Promise(function(a) { accept = a; }),\n        accept;\n\n    pending.requests = 0;\n\n    pending.done = function() {\n      if (--pending.requests === 0) {\n        df._pending = null;\n        accept(df);\n      }\n    };\n\n    return (df._pending = pending);\n  }\n\n  var SKIP$1 = {skip: true};\n\n  /**\n   * Perform operator updates in response to events. Applies an\n   * update function to compute a new operator value. If the update function\n   * returns a {@link ChangeSet}, the operator will be pulsed with those tuple\n   * changes. Otherwise, the operator value will be updated to the return value.\n   * @param {EventStream|Operator} source - The event source to react to.\n   *   This argument can be either an EventStream or an Operator.\n   * @param {Operator|function(object):Operator} target - The operator to update.\n   *   This argument can either be an Operator instance or (if the source\n   *   argument is an EventStream), a function that accepts an event object as\n   *   input and returns an Operator to target.\n   * @param {function(Parameters,Event): *} [update] - Optional update function\n   *   to compute the new operator value, or a literal value to set. Update\n   *   functions expect to receive a parameter object and event as arguments.\n   *   This function can either return a new operator value or (if the source\n   *   argument is an EventStream) a {@link ChangeSet} instance to pulse\n   *   the target operator with tuple changes.\n   * @param {object} [params] - The update function parameters.\n   * @param {object} [options] - Additional options hash. If not overridden,\n   *   updated operators will be skipped by default.\n   * @param {boolean} [options.skip] - If true, the operator will\n   *  be skipped: it will not be evaluated, but its dependents will be.\n   * @param {boolean} [options.force] - If true, the operator will\n   *   be re-evaluated even if its value has not changed.\n   * @return {Dataflow}\n   */\n  function on(source, target, update, params, options) {\n    var fn = source instanceof Operator ? onOperator : onStream;\n    fn(this, source, target, update, params, options);\n    return this;\n  }\n\n  function onStream(df, stream, target, update, params, options) {\n    var opt = extend({}, options, SKIP$1), func, op;\n\n    if (!isFunction(target)) target = constant(target);\n\n    if (update === undefined) {\n      func = e => df.touch(target(e));\n    } else if (isFunction(update)) {\n      op = new Operator(null, update, params, false);\n      func = e => {\n        op.evaluate(e);\n        const t = target(e), v = op.value;\n        isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);\n      };\n    } else {\n      func = e => df.update(target(e), update, opt);\n    }\n\n    stream.apply(func);\n  }\n\n  function onOperator(df, source, target, update, params, options) {\n    if (update === undefined) {\n      source.targets().add(target);\n    } else {\n      const opt = options || {},\n            op = new Operator(null, updater(target, update), params, false);\n      op.modified(opt.force);\n      op.rank = source.rank;       // immediately follow source\n      source.targets().add(op);    // add dependency\n\n      if (target) {\n        op.skip(true);             // skip first invocation\n        op.value = target.value;   // initialize value\n        op.targets().add(target);  // chain dependencies\n        df.connect(target, [op]);  // rerank as needed, #1672\n      }\n    }\n  }\n\n  function updater(target, update) {\n    update = isFunction(update) ? update : constant(update);\n    return target\n      ? function(_, pulse) {\n          const value = update(_, pulse);\n          if (!target.skip()) {\n            target.skip(value !== this.value).value = value;\n          }\n          return value;\n        }\n      : update;\n  }\n\n  /**\n   * Assigns a rank to an operator. Ranks are assigned in increasing order\n   * by incrementing an internal rank counter.\n   * @param {Operator} op - The operator to assign a rank.\n   */\n  function rank(op) {\n    op.rank = ++this._rank;\n  }\n\n  /**\n   * Re-ranks an operator and all downstream target dependencies. This\n   * is necessary when upstream dependencies of higher rank are added to\n   * a target operator.\n   * @param {Operator} op - The operator to re-rank.\n   */\n  function rerank(op) {\n    var queue = [op],\n        cur, list, i;\n\n    while (queue.length) {\n      this.rank(cur = queue.pop());\n      if (list = cur._targets) {\n        for (i=list.length; --i >= 0;) {\n          queue.push(cur = list[i]);\n          if (cur === op) error('Cycle detected in dataflow graph.');\n        }\n      }\n    }\n  }\n\n  /**\n   * Sentinel value indicating pulse propagation should stop.\n   */\n  var StopPropagation = {};\n\n  // Pulse visit type flags\n  var ADD       = (1 << 0),\n      REM       = (1 << 1),\n      MOD       = (1 << 2),\n      ADD_REM   = ADD | REM,\n      ADD_MOD   = ADD | MOD,\n      ALL       = ADD | REM | MOD,\n      REFLOW    = (1 << 3),\n      SOURCE    = (1 << 4),\n      NO_SOURCE = (1 << 5),\n      NO_FIELDS = (1 << 6);\n\n  /**\n   * A Pulse enables inter-operator communication during a run of the\n   * dataflow graph. In addition to the current timestamp, a pulse may also\n   * contain a change-set of added, removed or modified data tuples, as well as\n   * a pointer to a full backing data source. Tuple change sets may not\n   * be fully materialized; for example, to prevent needless array creation\n   * a change set may include larger arrays and corresponding filter functions.\n   * The pulse provides a {@link visit} method to enable proper and efficient\n   * iteration over requested data tuples.\n   *\n   * In addition, each pulse can track modification flags for data tuple fields.\n   * Responsible transform operators should call the {@link modifies} method to\n   * indicate changes to data fields. The {@link modified} method enables\n   * querying of this modification state.\n   *\n   * @constructor\n   * @param {Dataflow} dataflow - The backing dataflow instance.\n   * @param {number} stamp - The current propagation timestamp.\n   * @param {string} [encode] - An optional encoding set name, which is then\n   *   accessible as Pulse.encode. Operators can respond to (or ignore) this\n   *   setting as appropriate. This parameter can be used in conjunction with\n   *   the Encode transform in the vega-encode module.\n   */\n  function Pulse(dataflow, stamp, encode) {\n    this.dataflow = dataflow;\n    this.stamp = stamp == null ? -1 : stamp;\n    this.add = [];\n    this.rem = [];\n    this.mod = [];\n    this.fields = null;\n    this.encode = encode || null;\n  }\n\n  var prototype$3 = Pulse.prototype;\n\n  /**\n   * Sentinel value indicating pulse propagation should stop.\n   */\n  prototype$3.StopPropagation = StopPropagation;\n\n  /**\n   * Boolean flag indicating ADD (added) tuples.\n   */\n  prototype$3.ADD = ADD;\n\n  /**\n   * Boolean flag indicating REM (removed) tuples.\n   */\n  prototype$3.REM = REM;\n\n  /**\n   * Boolean flag indicating MOD (modified) tuples.\n   */\n  prototype$3.MOD = MOD;\n\n  /**\n   * Boolean flag indicating ADD (added) and REM (removed) tuples.\n   */\n  prototype$3.ADD_REM = ADD_REM;\n\n  /**\n   * Boolean flag indicating ADD (added) and MOD (modified) tuples.\n   */\n  prototype$3.ADD_MOD = ADD_MOD;\n\n  /**\n   * Boolean flag indicating ADD, REM and MOD tuples.\n   */\n  prototype$3.ALL = ALL;\n\n  /**\n   * Boolean flag indicating all tuples in a data source\n   * except for the ADD, REM and MOD tuples.\n   */\n  prototype$3.REFLOW = REFLOW;\n\n  /**\n   * Boolean flag indicating a 'pass-through' to a\n   * backing data source, ignoring ADD, REM and MOD tuples.\n   */\n  prototype$3.SOURCE = SOURCE;\n\n  /**\n   * Boolean flag indicating that source data should be\n   * suppressed when creating a forked pulse.\n   */\n  prototype$3.NO_SOURCE = NO_SOURCE;\n\n  /**\n   * Boolean flag indicating that field modifications should be\n   * suppressed when creating a forked pulse.\n   */\n  prototype$3.NO_FIELDS = NO_FIELDS;\n\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created.\n   * @return {Pulse} - The forked pulse instance.\n   * @see init\n   */\n  prototype$3.fork = function(flags) {\n    return new Pulse(this.dataflow).init(this, flags);\n  };\n\n  /**\n   * Creates a copy of this pulse with new materialized array\n   * instances for the ADD, REM, MOD, and SOURCE arrays.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse} - The cloned pulse instance.\n   * @see init\n   */\n  prototype$3.clone = function() {\n    var p = this.fork(ALL);\n    p.add = p.add.slice();\n    p.rem = p.rem.slice();\n    p.mod = p.mod.slice();\n    if (p.source) p.source = p.source.slice();\n    return p.materialize(ALL | SOURCE);\n  };\n\n  /**\n   * Returns a pulse that adds all tuples from a backing source. This is\n   * useful for cases where operators are added to a dataflow after an\n   * upstream data pipeline has already been processed, ensuring that\n   * new operators can observe all tuples within a stream.\n   * @return {Pulse} - A pulse instance with all source tuples included\n   *   in the add array. If the current pulse already has all source\n   *   tuples in its add array, it is returned directly. If the current\n   *   pulse does not have a backing source, it is returned directly.\n   */\n  prototype$3.addAll = function() {\n    var p = this;\n    if (!this.source || this.source.length === this.add.length) {\n      return p;\n    } else {\n      p = new Pulse(this.dataflow).init(this);\n      p.add = p.source;\n      return p;\n    }\n  };\n\n  /**\n   * Initialize this pulse based on the values of another pulse. This method\n   * is used internally by {@link fork} to initialize a new forked tuple.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {Pulse} src - The source pulse to copy from.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created. By default, source data arrays are copied\n   *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.\n   * @return {Pulse} - Returns this Pulse instance.\n   */\n  prototype$3.init = function(src, flags) {\n    var p = this;\n    p.stamp = src.stamp;\n    p.encode = src.encode;\n\n    if (src.fields && !(flags & NO_FIELDS)) {\n      p.fields = src.fields;\n    }\n\n    if (flags & ADD) {\n      p.addF = src.addF;\n      p.add = src.add;\n    } else {\n      p.addF = null;\n      p.add = [];\n    }\n\n    if (flags & REM) {\n      p.remF = src.remF;\n      p.rem = src.rem;\n    } else {\n      p.remF = null;\n      p.rem = [];\n    }\n\n    if (flags & MOD) {\n      p.modF = src.modF;\n      p.mod = src.mod;\n    } else {\n      p.modF = null;\n      p.mod = [];\n    }\n\n    if (flags & NO_SOURCE) {\n      p.srcF = null;\n      p.source = null;\n    } else {\n      p.srcF = src.srcF;\n      p.source = src.source;\n    }\n\n    return p;\n  };\n\n  /**\n   * Schedules a function to run after pulse propagation completes.\n   * @param {function} func - The function to run.\n   */\n  prototype$3.runAfter = function(func) {\n    this.dataflow.runAfter(func);\n  };\n\n  /**\n   * Indicates if tuples have been added, removed or modified.\n   * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.\n   *   Defaults to ALL, returning true if any tuple type has changed.\n   * @return {boolean} - Returns true if one or more queried tuple types have\n   *   changed, false otherwise.\n   */\n  prototype$3.changed = function(flags) {\n    var f = flags || ALL;\n    return ((f & ADD) && this.add.length)\n        || ((f & REM) && this.rem.length)\n        || ((f & MOD) && this.mod.length);\n  };\n\n  /**\n   * Forces a \"reflow\" of tuple values, such that all tuples in the backing\n   * source are added to the MOD set, unless already present in the ADD set.\n   * @param {boolean} [fork=false] - If true, returns a forked copy of this\n   *   pulse, and invokes reflow on that derived pulse.\n   * @return {Pulse} - The reflowed pulse instance.\n   */\n  prototype$3.reflow = function(fork) {\n    if (fork) return this.fork(ALL).reflow();\n\n    var len = this.add.length,\n        src = this.source && this.source.length;\n    if (src && src !== len) {\n      this.mod = this.source;\n      if (len) this.filter(MOD, filter(this, ADD));\n    }\n    return this;\n  };\n\n  /**\n   * Marks one or more data field names as modified to assist dependency\n   * tracking and incremental processing by transform operators.\n   * @param {string|Array<string>} _ - The field(s) to mark as modified.\n   * @return {Pulse} - This pulse instance.\n   */\n  prototype$3.modifies = function(_) {\n    var hash = this.fields || (this.fields = {});\n    if (isArray(_)) {\n      _.forEach(f => hash[f] = true);\n    } else {\n      hash[_] = true;\n    }\n    return this;\n  };\n\n  /**\n   * Checks if one or more data fields have been modified during this pulse\n   * propagation timestamp.\n   * @param {string|Array<string>} _ - The field(s) to check for modified.\n   * @param {boolean} nomod - If true, will check the modified flag even if\n   *   no mod tuples exist. If false (default), mod tuples must be present.\n   * @return {boolean} - Returns true if any of the provided fields has been\n   *   marked as modified, false otherwise.\n   */\n  prototype$3.modified = function(_, nomod) {\n    var fields = this.fields;\n    return !((nomod || this.mod.length) && fields) ? false\n      : !arguments.length ? !!fields\n      : isArray(_) ? _.some(function(f) { return fields[f]; })\n      : fields[_];\n  };\n\n  /**\n   * Adds a filter function to one more tuple sets. Filters are applied to\n   * backing tuple arrays, to determine the actual set of tuples considered\n   * added, removed or modified. They can be used to delay materialization of\n   * a tuple set in order to avoid expensive array copies. In addition, the\n   * filter functions can serve as value transformers: unlike standard predicate\n   * function (which return boolean values), Pulse filters should return the\n   * actual tuple value to process. If a tuple set is already filtered, the\n   * new filter function will be appended into a conjuntive ('and') query.\n   * @param {number} flags - Flags indicating the tuple set(s) to filter.\n   * @param {function(*):object} filter - Filter function that will be applied\n   *   to the tuple set array, and should return a data tuple if the value\n   *   should be included in the tuple set, and falsy (or null) otherwise.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  prototype$3.filter = function(flags, filter) {\n    var p = this;\n    if (flags & ADD) p.addF = addFilter(p.addF, filter);\n    if (flags & REM) p.remF = addFilter(p.remF, filter);\n    if (flags & MOD) p.modF = addFilter(p.modF, filter);\n    if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);\n    return p;\n  };\n\n  function addFilter(a, b) {\n    return a ? function(t,i) { return a(t,i) && b(t,i); } : b;\n  }\n\n  /**\n   * Materialize one or more tuple sets in this pulse. If the tuple set(s) have\n   * a registered filter function, it will be applied and the tuple set(s) will\n   * be replaced with materialized tuple arrays.\n   * @param {number} flags - Flags indicating the tuple set(s) to materialize.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  prototype$3.materialize = function(flags) {\n    flags = flags || ALL;\n    var p = this;\n    if ((flags & ADD) && p.addF) {\n      p.add = materialize(p.add, p.addF);\n      p.addF = null;\n    }\n    if ((flags & REM) && p.remF) {\n      p.rem = materialize(p.rem, p.remF);\n      p.remF = null;\n    }\n    if ((flags & MOD) && p.modF) {\n      p.mod = materialize(p.mod, p.modF);\n      p.modF = null;\n    }\n    if ((flags & SOURCE) && p.srcF) {\n      p.source = p.source.filter(p.srcF);\n      p.srcF = null;\n    }\n    return p;\n  };\n\n  function materialize(data, filter) {\n    var out = [];\n    visitArray(data, filter, function(_) { out.push(_); });\n    return out;\n  }\n\n  function filter(pulse, flags) {\n    var map = {};\n    pulse.visit(flags, function(t) { map[tupleid(t)] = 1; });\n    return function(t) { return map[tupleid(t)] ? null : t; };\n  }\n\n  /**\n   * Visit one or more tuple sets in this pulse.\n   * @param {number} flags - Flags indicating the tuple set(s) to visit.\n   *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source\n   *   has been set).\n   * @param {function(object):*} - Visitor function invoked per-tuple.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  prototype$3.visit = function(flags, visitor) {\n    var p = this, v = visitor, src, sum;\n\n    if (flags & SOURCE) {\n      visitArray(p.source, p.srcF, v);\n      return p;\n    }\n\n    if (flags & ADD) visitArray(p.add, p.addF, v);\n    if (flags & REM) visitArray(p.rem, p.remF, v);\n    if (flags & MOD) visitArray(p.mod, p.modF, v);\n\n    if ((flags & REFLOW) && (src = p.source)) {\n      sum = p.add.length + p.mod.length;\n      if (sum === src.length) ; else if (sum) {\n        visitArray(src, filter(p, ADD_MOD), v);\n      } else {\n        // if no add/rem/mod tuples, visit source\n        visitArray(src, p.srcF, v);\n      }\n    }\n\n    return p;\n  };\n\n  /**\n   * Represents a set of multiple pulses. Used as input for operators\n   * that accept multiple pulses at a time. Contained pulses are\n   * accessible via the public \"pulses\" array property. This pulse doe\n   * not carry added, removed or modified tuples directly. However,\n   * the visit method can be used to traverse all such tuples contained\n   * in sub-pulses with a timestamp matching this parent multi-pulse.\n   * @constructor\n   * @param {Dataflow} dataflow - The backing dataflow instance.\n   * @param {number} stamp - The timestamp.\n   * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.\n   */\n  function MultiPulse(dataflow, stamp, pulses, encode) {\n    var p = this,\n        c = 0,\n        pulse, hash, i, n, f;\n\n    this.dataflow = dataflow;\n    this.stamp = stamp;\n    this.fields = null;\n    this.encode = encode || null;\n    this.pulses = pulses;\n\n    for (i=0, n=pulses.length; i<n; ++i) {\n      pulse = pulses[i];\n      if (pulse.stamp !== stamp) continue;\n\n      if (pulse.fields) {\n        hash = p.fields || (p.fields = {});\n        for (f in pulse.fields) { hash[f] = 1; }\n      }\n\n      if (pulse.changed(p.ADD)) c |= p.ADD;\n      if (pulse.changed(p.REM)) c |= p.REM;\n      if (pulse.changed(p.MOD)) c |= p.MOD;\n    }\n\n    this.changes = c;\n  }\n\n  var prototype$4 = inherits(MultiPulse, Pulse);\n\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse}\n   */\n  prototype$4.fork = function(flags) {\n    var p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);\n    if (flags !== undefined) {\n      if (flags & p.ADD) {\n        this.visit(p.ADD, function(t) { return p.add.push(t); });\n      }\n      if (flags & p.REM) {\n        this.visit(p.REM, function(t) { return p.rem.push(t); });\n      }\n      if (flags & p.MOD) {\n        this.visit(p.MOD, function(t) { return p.mod.push(t); });\n      }\n    }\n    return p;\n  };\n\n  prototype$4.changed = function(flags) {\n    return this.changes & flags;\n  };\n\n  prototype$4.modified = function(_) {\n    var p = this, fields = p.fields;\n    return !(fields && (p.changes & p.MOD)) ? 0\n      : isArray(_) ? _.some(function(f) { return fields[f]; })\n      : fields[_];\n  };\n\n  prototype$4.filter = function() {\n    error('MultiPulse does not support filtering.');\n  };\n\n  prototype$4.materialize = function() {\n    error('MultiPulse does not support materialization.');\n  };\n\n  prototype$4.visit = function(flags, visitor) {\n    var p = this,\n        pulses = p.pulses,\n        n = pulses.length,\n        i = 0;\n\n    if (flags & p.SOURCE) {\n      for (; i<n; ++i) {\n        pulses[i].visit(flags, visitor);\n      }\n    } else {\n      for (; i<n; ++i) {\n        if (pulses[i].stamp === p.stamp) {\n          pulses[i].visit(flags, visitor);\n        }\n      }\n    }\n\n    return p;\n  };\n\n  /* eslint-disable require-atomic-updates */\n\n  /**\n   * Evaluates the dataflow and returns a Promise that resolves when pulse\n   * propagation completes. This method will increment the current timestamp\n   * and process all updated, pulsed and touched operators. When invoked for\n   * the first time, all registered operators will be processed. This method\n   * should not be invoked by third-party clients, use {@link runAsync} or\n   * {@link run} instead.\n   * @param {string} [encode] - The name of an encoding set to invoke during\n   *   propagation. This value is added to generated Pulse instances;\n   *   operators can then respond to (or ignore) this setting as appropriate.\n   *   This parameter can be used in conjunction with the Encode transform in\n   *   the vega-encode package.\n   * @param {function} [prerun] - An optional callback function to invoke\n   *   immediately before dataflow evaluation commences.\n   * @param {function} [postrun] - An optional callback function to invoke\n   *   after dataflow evaluation completes. The callback will be invoked\n   *   after those registered via {@link runAfter}.\n   * @return {Promise} - A promise that resolves to this dataflow after\n   *   evaluation completes.\n   */\n  async function evaluate(encode, prerun, postrun) {\n    const df = this,\n          level = df.logLevel(),\n          async = [];\n\n    // if the pulse value is set, this is a re-entrant call\n    if (df._pulse) return reentrant(df);\n\n    // wait for pending datasets to load\n    if (df._pending) {\n      await df._pending;\n    }\n\n    // invoke prerun function, if provided\n    if (prerun) await asyncCallback(df, prerun);\n\n    // exit early if there are no updates\n    if (!df._touched.length) {\n      df.info('Dataflow invoked, but nothing to do.');\n      return df;\n    }\n\n    // increment timestamp clock\n    let stamp = ++df._clock,\n        count = 0, op, next, dt, error;\n\n    // set the current pulse\n    df._pulse = new Pulse(df, stamp, encode);\n\n    if (level >= Info) {\n      dt = Date.now();\n      df.debug('-- START PROPAGATION (' + stamp + ') -----');\n    }\n\n    // initialize priority queue, reset touched operators\n    df._touched.forEach(op => df._enqueue(op, true));\n    df._touched = UniqueList(id);\n\n    try {\n      while (df._heap.size() > 0) {\n        // dequeue operator with highest priority\n        op = df._heap.pop();\n\n        // re-queue if rank changed\n        if (op.rank !== op.qrank) { df._enqueue(op, true); continue; }\n\n        // otherwise, evaluate the operator\n        next = op.run(df._getPulse(op, encode));\n\n        if (next.then) {\n          // await if operator returns a promise directly\n          next = await next;\n        } else if (next.async) {\n          // queue parallel asynchronous execution\n          async.push(next.async);\n          next = StopPropagation;\n        }\n\n        if (level >= Debug) {\n          df.debug(op.id, next === StopPropagation ? 'STOP' : next, op);\n        }\n\n        // propagate evaluation, enqueue dependent operators\n        if (next !== StopPropagation) {\n          if (op._targets) op._targets.forEach(op => df._enqueue(op));\n        }\n\n        // increment visit counter\n        ++count;\n      }\n    } catch (err) {\n      df._heap.clear();\n      error = err;\n    }\n\n    // reset pulse map\n    df._input = {};\n    df._pulse = null;\n\n    if (level >= Info) {\n      dt = Date.now() - dt;\n      df.info('> Pulse ' + stamp + ': ' + count + ' operators; ' + dt + 'ms');\n    }\n\n    if (error) {\n      df._postrun = [];\n      df.error(error);\n    }\n\n    // invoke callbacks queued via runAfter\n    if (df._postrun.length) {\n      const pr = df._postrun.sort((a, b) => b.priority - a.priority);\n      df._postrun = [];\n      for (let i=0; i<pr.length; ++i) {\n        await asyncCallback(df, pr[i].callback);\n      }\n    }\n\n    // invoke postrun function, if provided\n    if (postrun) await asyncCallback(df, postrun);\n\n    // handle non-blocking asynchronous callbacks\n    if (async.length) {\n      Promise.all(async).then(cb => df.runAsync(null, () => {\n        cb.forEach(f => { try { f(df); } catch (err) { df.error(err); } });\n      }));\n    }\n\n    return df;\n  }\n\n  /**\n   * Queues dataflow evaluation to run once any other queued evaluations have\n   * completed and returns a Promise that resolves when the queued pulse\n   * propagation completes. If provided, a callback function will be invoked\n   * immediately before evaluation commences. This method will ensure a\n   * separate evaluation is invoked for each time it is called.\n   * @param {string} [encode] - The name of an encoding set to invoke during\n   *   propagation. This value is added to generated Pulse instances;\n   *   operators can then respond to (or ignore) this setting as appropriate.\n   *   This parameter can be used in conjunction with the Encode transform in\n   *   the vega-encode package.\n   * @param {function} [prerun] - An optional callback function to invoke\n   *   immediately before dataflow evaluation commences.\n   * @param {function} [postrun] - An optional callback function to invoke\n   *   after dataflow evaluation completes. The callback will be invoked\n   *   after those registered via {@link runAfter}.\n   * @return {Promise} - A promise that resolves to this dataflow after\n   *   evaluation completes.\n   */\n  async function runAsync(encode, prerun, postrun) {\n    // await previously queued functions\n    while (this._running) await this._running;\n\n    // run dataflow, manage running promise\n    const clear = () => this._running = null;\n    (this._running = this.evaluate(encode, prerun, postrun))\n      .then(clear, clear);\n\n    return this._running;\n  }\n\n  /**\n   * Requests dataflow evaluation and the immediately returns this dataflow\n   * instance. If there are pending data loading or other asynchronous\n   * operations, the dataflow will evaluate asynchronously after this method\n   * has been invoked. To track when dataflow evaluation completes, use the\n   * {@link runAsync} method instead. This method will raise an error if\n   * invoked while the dataflow is already in the midst of evaluation.\n   * @param {string} [encode] - The name of an encoding set to invoke during\n   *   propagation. This value is added to generated Pulse instances;\n   *   operators can then respond to (or ignore) this setting as appropriate.\n   *   This parameter can be used in conjunction with the Encode transform in\n   *   the vega-encode module.\n   * @param {function} [prerun] - An optional callback function to invoke\n   *   immediately before dataflow evaluation commences.\n   * @param {function} [postrun] - An optional callback function to invoke\n   *   after dataflow evaluation completes. The callback will be invoked\n   *   after those registered via {@link runAfter}.\n   * @return {Dataflow} - This dataflow instance.\n   */\n  function run(encode, prerun, postrun) {\n    return this._pulse ? reentrant(this)\n      : (this.evaluate(encode, prerun, postrun), this);\n  }\n\n  /**\n   * Schedules a callback function to be invoked after the current pulse\n   * propagation completes. If no propagation is currently occurring,\n   * the function is invoked immediately. Callbacks scheduled via runAfter\n   * are invoked immediately upon completion of the current cycle, before\n   * any request queued via runAsync. This method is primarily intended for\n   * internal use. Third-party callers using runAfter to schedule a callback\n   * that invokes {@link run} or {@link runAsync} should not use this method,\n   * but instead use {@link runAsync} with prerun or postrun arguments.\n   * @param {function(Dataflow)} callback - The callback function to run.\n   *   The callback will be invoked with this Dataflow instance as its\n   *   sole argument.\n   * @param {boolean} enqueue - A boolean flag indicating that the\n   *   callback should be queued up to run after the next propagation\n   *   cycle, suppressing immediate invocation when propagation is not\n   *   currently occurring.\n   * @param {number} [priority] - A priority value used to sort registered\n   *   callbacks to determine execution order. This argument is intended\n   *   for internal Vega use only.\n   */\n  function runAfter(callback, enqueue, priority) {\n    if (this._pulse || enqueue) {\n      // pulse propagation is currently running, queue to run after\n      this._postrun.push({\n        priority: priority || 0,\n        callback: callback\n      });\n    } else {\n      // pulse propagation already complete, invoke immediately\n      try { callback(this); } catch (err) { this.error(err); }\n    }\n  }\n\n  /**\n   * Raise an error for re-entrant dataflow evaluation.\n   */\n  function reentrant(df) {\n    df.error('Dataflow already running. Use runAsync() to chain invocations.');\n    return df;\n  }\n\n  /**\n   * Enqueue an operator into the priority queue for evaluation. The operator\n   * will be enqueued if it has no registered pulse for the current cycle, or if\n   * the force argument is true. Upon enqueue, this method also sets the\n   * operator's qrank to the current rank value.\n   * @param {Operator} op - The operator to enqueue.\n   * @param {boolean} [force] - A flag indicating if the operator should be\n   *   forceably added to the queue, even if it has already been previously\n   *   enqueued during the current pulse propagation. This is useful when the\n   *   dataflow graph is dynamically modified and the operator rank changes.\n   */\n  function enqueue(op, force) {\n    var q = op.stamp < this._clock;\n    if (q) op.stamp = this._clock;\n    if (q || force) {\n      op.qrank = op.rank;\n      this._heap.push(op);\n    }\n  }\n\n  /**\n   * Provide a correct pulse for evaluating an operator. If the operator has an\n   * explicit source operator, we will try to pull the pulse(s) from it.\n   * If there is an array of source operators, we build a multi-pulse.\n   * Otherwise, we return a current pulse with correct source data.\n   * If the pulse is the pulse map has an explicit target set, we use that.\n   * Else if the pulse on the upstream source operator is current, we use that.\n   * Else we use the pulse from the pulse map, but copy the source tuple array.\n   * @param {Operator} op - The operator for which to get an input pulse.\n   * @param {string} [encode] - An (optional) encoding set name with which to\n   *   annotate the returned pulse. See {@link run} for more information.\n   */\n  function getPulse(op, encode) {\n    var s = op.source,\n        stamp = this._clock;\n\n    return s && isArray(s)\n      ? new MultiPulse(this, stamp, s.map(_ => _.pulse), encode)\n      : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);\n  }\n\n  function singlePulse(p, s) {\n    if (s && s.stamp === p.stamp) {\n      return s;\n    }\n\n    p = p.fork();\n    if (s && s !== StopPropagation) {\n      p.source = s.source;\n    }\n    return p;\n  }\n\n  var NO_OPT = {skip: false, force: false};\n\n  /**\n   * Touches an operator, scheduling it to be evaluated. If invoked outside of\n   * a pulse propagation, the operator will be evaluated the next time this\n   * dataflow is run. If invoked in the midst of pulse propagation, the operator\n   * will be queued for evaluation if and only if the operator has not yet been\n   * evaluated on the current propagation timestamp.\n   * @param {Operator} op - The operator to touch.\n   * @param {object} [options] - Additional options hash.\n   * @param {boolean} [options.skip] - If true, the operator will\n   *   be skipped: it will not be evaluated, but its dependents will be.\n   * @return {Dataflow}\n   */\n  function touch(op, options) {\n    var opt = options || NO_OPT;\n    if (this._pulse) {\n      // if in midst of propagation, add to priority queue\n      this._enqueue(op);\n    } else {\n      // otherwise, queue for next propagation\n      this._touched.add(op);\n    }\n    if (opt.skip) op.skip(true);\n    return this;\n  }\n\n  /**\n   * Updates the value of the given operator.\n   * @param {Operator} op - The operator to update.\n   * @param {*} value - The value to set.\n   * @param {object} [options] - Additional options hash.\n   * @param {boolean} [options.force] - If true, the operator will\n   *   be re-evaluated even if its value has not changed.\n   * @param {boolean} [options.skip] - If true, the operator will\n   *   be skipped: it will not be evaluated, but its dependents will be.\n   * @return {Dataflow}\n   */\n  function update(op, value, options) {\n    var opt = options || NO_OPT;\n    if (op.set(value) || opt.force) {\n      this.touch(op, opt);\n    }\n    return this;\n  }\n\n  /**\n   * Pulses an operator with a changeset of tuples. If invoked outside of\n   * a pulse propagation, the pulse will be applied the next time this\n   * dataflow is run. If invoked in the midst of pulse propagation, the pulse\n   * will be added to the set of active pulses and will be applied if and\n   * only if the target operator has not yet been evaluated on the current\n   * propagation timestamp.\n   * @param {Operator} op - The operator to pulse.\n   * @param {ChangeSet} value - The tuple changeset to apply.\n   * @param {object} [options] - Additional options hash.\n   * @param {boolean} [options.skip] - If true, the operator will\n   *   be skipped: it will not be evaluated, but its dependents will be.\n   * @return {Dataflow}\n   */\n  function pulse(op, changeset, options) {\n    this.touch(op, options || NO_OPT);\n\n    var p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),\n        t = op.pulse && op.pulse.source || [];\n\n    p.target = op;\n    this._input[op.id] = changeset.pulse(p, t);\n\n    return this;\n  }\n\n  function Heap(cmp) {\n    var nodes = [];\n    return {\n      clear: () => nodes = [],\n      size: () => nodes.length,\n      peek: () => nodes[0],\n      push: x => {\n        nodes.push(x);\n        return siftdown(nodes, 0, nodes.length - 1, cmp);\n      },\n      pop: () => {\n        var last = nodes.pop(), item;\n        if (nodes.length) {\n          item = nodes[0];\n          nodes[0] = last;\n          siftup(nodes, 0, cmp);\n        } else {\n          item = last;\n        }\n        return item;\n      }\n    };\n  }\n\n  function siftdown(array, start, idx, cmp) {\n    var item, parent, pidx;\n\n    item = array[idx];\n    while (idx > start) {\n      pidx = (idx - 1) >> 1;\n      parent = array[pidx];\n      if (cmp(item, parent) < 0) {\n        array[idx] = parent;\n        idx = pidx;\n        continue;\n      }\n      break;\n    }\n    return (array[idx] = item);\n  }\n\n  function siftup(array, idx, cmp) {\n    var start = idx,\n        end = array.length,\n        item = array[idx],\n        cidx = (idx << 1) + 1, ridx;\n\n    while (cidx < end) {\n      ridx = cidx + 1;\n      if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {\n        cidx = ridx;\n      }\n      array[idx] = array[cidx];\n      idx = cidx;\n      cidx = (idx << 1) + 1;\n    }\n    array[idx] = item;\n    return siftdown(array, start, idx, cmp);\n  }\n\n  /**\n   * A dataflow graph for reactive processing of data streams.\n   * @constructor\n   */\n  function Dataflow() {\n    this.logger(logger());\n    this.logLevel(Error$1);\n\n    this._clock = 0;\n    this._rank = 0;\n    try {\n      this._loader = loader();\n    } catch (e) {\n      // do nothing if loader module is unavailable\n    }\n\n    this._touched = UniqueList(id);\n    this._input = {};\n    this._pulse = null;\n\n    this._heap = Heap((a, b) => a.qrank - b.qrank);\n    this._postrun = [];\n  }\n\n  var prototype$5 = Dataflow.prototype;\n\n  /**\n   * The current timestamp of this dataflow. This value reflects the\n   * timestamp of the previous dataflow run. The dataflow is initialized\n   * with a stamp value of 0. The initial run of the dataflow will have\n   * a timestap of 1, and so on. This value will match the\n   * {@link Pulse.stamp} property.\n   * @return {number} - The current timestamp value.\n   */\n  prototype$5.stamp = function() {\n    return this._clock;\n  };\n\n  /**\n   * Gets or sets the loader instance to use for data file loading. A\n   * loader object must provide a \"load\" method for loading files and a\n   * \"sanitize\" method for checking URL/filename validity. Both methods\n   * should accept a URI and options hash as arguments, and return a Promise\n   * that resolves to the loaded file contents (load) or a hash containing\n   * sanitized URI data with the sanitized url assigned to the \"href\" property\n   * (sanitize).\n   * @param {object} _ - The loader instance to use.\n   * @return {object|Dataflow} - If no arguments are provided, returns\n   *   the current loader instance. Otherwise returns this Dataflow instance.\n   */\n  prototype$5.loader = function(_) {\n    if (arguments.length) {\n      this._loader = _;\n      return this;\n    } else {\n      return this._loader;\n    }\n  };\n\n  /**\n   * Empty entry threshold for garbage cleaning. Map data structures will\n   * perform cleaning once the number of empty entries exceeds this value.\n   */\n  prototype$5.cleanThreshold = 1e4;\n\n  // OPERATOR REGISTRATION\n  prototype$5.add = add;\n  prototype$5.connect = connect;\n  prototype$5.rank = rank;\n  prototype$5.rerank = rerank;\n\n  // OPERATOR UPDATES\n  prototype$5.pulse = pulse;\n  prototype$5.touch = touch;\n  prototype$5.update = update;\n  prototype$5.changeset = changeset;\n\n  // DATA LOADING\n  prototype$5.ingest = ingest$1;\n  prototype$5.parse  = parse$1;\n  prototype$5.preload = preload;\n  prototype$5.request = request;\n\n  // EVENT HANDLING\n  prototype$5.events = events;\n  prototype$5.on = on;\n\n  // PULSE PROPAGATION\n  prototype$5.evaluate = evaluate;\n  prototype$5.run = run;\n  prototype$5.runAsync = runAsync;\n  prototype$5.runAfter = runAfter;\n  prototype$5._enqueue = enqueue;\n  prototype$5._getPulse = getPulse;\n\n  // LOGGING AND ERROR HANDLING\n\n  function logMethod(method) {\n    return function() {\n      return this._log[method].apply(this, arguments);\n    };\n  }\n\n  /**\n   * Get or set the logger instance used to log messages. If no arguments are\n   * provided, returns the current logger instance. Otherwise, sets the logger\n   * and return this Dataflow instance. Provided loggers must support the full\n   * API of logger objects generated by the vega-util logger method. Note that\n   * by default the log level of the new logger will be used; use the logLevel\n   * method to adjust the log level as needed.\n   */\n  prototype$5.logger = function(logger) {\n    if (arguments.length) {\n      this._log = logger;\n      return this;\n    } else {\n      return this._log;\n    }\n  };\n\n  /**\n   * Logs an error message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit error messages.\n   */\n  prototype$5.error = logMethod('error');\n\n  /**\n   * Logs a warning message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit warning messages.\n   */\n  prototype$5.warn = logMethod('warn');\n\n  /**\n   * Logs a information message. By default, logged messages are written to\n   * console output. The message will only be logged if the current log level is\n   * high enough to permit information messages.\n   */\n  prototype$5.info = logMethod('info');\n\n  /**\n   * Logs a debug message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit debug messages.\n   */\n  prototype$5.debug = logMethod('debug');\n\n  /**\n   * Get or set the current log level. If an argument is provided, it\n   * will be used as the new log level.\n   * @param {number} [level] - Should be one of None, Warn, Info\n   * @return {number} - The current log level.\n   */\n  prototype$5.logLevel = logMethod('level');\n\n  /**\n   * Abstract class for operators that process data tuples.\n   * Subclasses must provide a {@link transform} method for operator processing.\n   * @constructor\n   * @param {*} [init] - The initial value for this operator.\n   * @param {object} [params] - The parameters for this operator.\n   * @param {Operator} [source] - The operator from which to receive pulses.\n   */\n  function Transform(init, params) {\n    Operator.call(this, init, null, params);\n  }\n\n  var prototype$6 = inherits(Transform, Operator);\n\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  prototype$6.run = function(pulse) {\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n\n    var rv;\n    if (this.skip()) {\n      this.skip(false);\n    } else {\n      rv = this.evaluate(pulse);\n    }\n    rv = rv || pulse;\n\n    if (rv.then) {\n      rv = rv.then(_ => this.pulse =_);\n    } else if (rv !== pulse.StopPropagation) {\n      this.pulse = rv;\n    }\n\n    return rv;\n  };\n\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Marshalls parameter values and then invokes {@link transform}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n       value (including undefined) will let the input pulse pass through.\n   */\n  prototype$6.evaluate = function(pulse) {\n    var params = this.marshall(pulse.stamp),\n        out = this.transform(params, pulse);\n    params.clear();\n    return out;\n  };\n\n  /**\n   * Process incoming pulses.\n   * Subclasses should override this method to implement transforms.\n   * @param {Parameters} _ - The operator parameter values.\n   * @param {Pulse} pulse - The current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n   *   value (including undefined) will let the input pulse pass through.\n   */\n  prototype$6.transform = function() {};\n\n  var transforms = {};\n\n  function definition(type) {\n    var t = transform$1(type);\n    return t && t.Definition || null;\n  }\n\n  function transform$1(type) {\n    type = type && type.toLowerCase();\n    return hasOwnProperty(transforms, type) ? transforms[type] : null;\n  }\n\n  function multikey(f) {\n    return function(x) {\n      var n = f.length,\n          i = 1,\n          k = String(f[0](x));\n\n      for (; i<n; ++i) {\n        k += '|' + f[i](x);\n      }\n\n      return k;\n    };\n  }\n\n  function groupkey(fields) {\n    return !fields || !fields.length ? function() { return ''; }\n      : fields.length === 1 ? fields[0]\n      : multikey(fields);\n  }\n\n  function measureName(op, field, as) {\n    return as || (op + (!field ? '' : '_' + field));\n  }\n\n  var AggregateOps = {\n    'values': measure({\n      name: 'values',\n      init: 'cell.store = true;',\n      set:  'cell.data.values()', idx: -1\n    }),\n    'count': measure({\n      name: 'count',\n      set:  'cell.num'\n    }),\n    '__count__': measure({\n      name: 'count',\n      set:  'this.missing + this.valid'\n    }),\n    'missing': measure({\n      name: 'missing',\n      set:  'this.missing'\n    }),\n    'valid': measure({\n      name: 'valid',\n      set:  'this.valid'\n    }),\n    'sum': measure({\n      name: 'sum',\n      init: 'this.sum = 0;',\n      add:  'this.sum += +v;',\n      rem:  'this.sum -= v;',\n      set:  'this.sum'\n    }),\n    'product': measure({\n      name: 'product',\n      init: 'this.product = 1;',\n      add:  'this.product *= v;',\n      rem:  'this.product /= v;',\n      set:  'this.valid ? this.product : undefined'\n    }),\n    'mean': measure({\n      name: 'mean',\n      init: 'this.mean = 0;',\n      add:  'var d = v - this.mean; this.mean += d / this.valid;',\n      rem:  'var d = v - this.mean; this.mean -= this.valid ? d / this.valid : this.mean;',\n      set:  'this.valid ? this.mean : undefined'\n    }),\n    'average': measure({\n      name: 'average',\n      set:  'this.valid ? this.mean : undefined',\n      req:  ['mean'], idx: 1\n    }),\n    'variance': measure({\n      name: 'variance',\n      init: 'this.dev = 0;',\n      add:  'this.dev += d * (v - this.mean);',\n      rem:  'this.dev -= d * (v - this.mean);',\n      set:  'this.valid > 1 ? this.dev / (this.valid-1) : undefined',\n      req:  ['mean'], idx: 1\n    }),\n    'variancep': measure({\n      name: 'variancep',\n      set:  'this.valid > 1 ? this.dev / this.valid : undefined',\n      req:  ['variance'], idx: 2\n    }),\n    'stdev': measure({\n      name: 'stdev',\n      set:  'this.valid > 1 ? Math.sqrt(this.dev / (this.valid-1)) : undefined',\n      req:  ['variance'], idx: 2\n    }),\n    'stdevp': measure({\n      name: 'stdevp',\n      set:  'this.valid > 1 ? Math.sqrt(this.dev / this.valid) : undefined',\n      req:  ['variance'], idx: 2\n    }),\n    'stderr': measure({\n      name: 'stderr',\n      set:  'this.valid > 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : undefined',\n      req:  ['variance'], idx: 2\n    }),\n    'distinct': measure({\n      name: 'distinct',\n      set:  'cell.data.distinct(this.get)',\n      req:  ['values'], idx: 3\n    }),\n    'ci0': measure({\n      name: 'ci0',\n      set:  'cell.data.ci0(this.get)',\n      req:  ['values'], idx: 3\n    }),\n    'ci1': measure({\n      name: 'ci1',\n      set:  'cell.data.ci1(this.get)',\n      req:  ['values'], idx: 3\n    }),\n    'median': measure({\n      name: 'median',\n      set:  'cell.data.q2(this.get)',\n      req:  ['values'], idx: 3\n    }),\n    'q1': measure({\n      name: 'q1',\n      set:  'cell.data.q1(this.get)',\n      req:  ['values'], idx: 3\n    }),\n    'q3': measure({\n      name: 'q3',\n      set:  'cell.data.q3(this.get)',\n      req:  ['values'], idx: 3\n    }),\n    'argmin': measure({\n      name: 'argmin',\n      init: 'this.argmin = undefined;',\n      add:  'if (v < this.min) this.argmin = t;',\n      rem:  'if (v <= this.min) this.argmin = undefined;',\n      set:  'this.argmin || cell.data.argmin(this.get)',\n      req:  ['min'], str: ['values'], idx: 3\n    }),\n    'argmax': measure({\n      name: 'argmax',\n      init: 'this.argmax = undefined;',\n      add:  'if (v > this.max) this.argmax = t;',\n      rem:  'if (v >= this.max) this.argmax = undefined;',\n      set:  'this.argmax || cell.data.argmax(this.get)',\n      req:  ['max'], str: ['values'], idx: 3\n    }),\n    'min': measure({\n      name: 'min',\n      init: 'this.min = undefined;',\n      add:  'if (v < this.min || this.min === undefined) this.min = v;',\n      rem:  'if (v <= this.min) this.min = NaN;',\n      set:  'this.min = (Number.isNaN(this.min) ? cell.data.min(this.get) : this.min)',\n      str:  ['values'], idx: 4\n    }),\n    'max': measure({\n      name: 'max',\n      init: 'this.max = undefined;',\n      add:  'if (v > this.max || this.max === undefined) this.max = v;',\n      rem:  'if (v >= this.max) this.max = NaN;',\n      set:  'this.max = (Number.isNaN(this.max) ? cell.data.max(this.get) : this.max)',\n      str:  ['values'], idx: 4\n    })\n  };\n\n  var ValidAggregateOps = Object.keys(AggregateOps);\n\n  function createMeasure(op, name) {\n    return AggregateOps[op](name);\n  }\n\n  function measure(base) {\n    return function(out) {\n      var m = extend({init:'', add:'', rem:'', idx:0}, base);\n      m.out = out || base.name;\n      return m;\n    };\n  }\n\n  function compareIndex(a, b) {\n    return a.idx - b.idx;\n  }\n\n  function resolve(agg, stream) {\n    function collect(m, a) {\n      function helper(r) { if (!m[r]) collect(m, m[r] = AggregateOps[r]()); }\n      if (a.req) a.req.forEach(helper);\n      if (stream && a.str) a.str.forEach(helper);\n      return m;\n    }\n    var map = agg.reduce(\n      collect,\n      agg.reduce(function(m, a) {\n        m[a.name] = a;\n        return m;\n      }, {})\n    );\n    var values = [], key;\n    for (key in map) values.push(map[key]);\n    return values.sort(compareIndex);\n  }\n\n  function compileMeasures(agg, field) {\n    var get = field || identity,\n        all = resolve(agg, true), // assume streaming removes may occur\n        init = 'var cell = this.cell; this.valid = 0; this.missing = 0;',\n        ctr = 'this.cell = cell; this.init();',\n        add = 'if(v==null){++this.missing; return;} if(v!==v) return; ++this.valid;',\n        rem = 'if(v==null){--this.missing; return;} if(v!==v) return; --this.valid;',\n        set = 'var cell = this.cell;';\n\n    all.forEach(function(a) {\n      init += a.init;\n      add += a.add;\n      rem += a.rem;\n    });\n    agg.slice().sort(compareIndex).forEach(function(a) {\n      set += 't[' + $(a.out) + ']=' + a.set + ';';\n    });\n    set += 'return t;';\n\n    ctr = Function('cell', ctr);\n    ctr.prototype.init = Function(init);\n    ctr.prototype.add = Function('v', 't', add);\n    ctr.prototype.rem = Function('v', 't', rem);\n    ctr.prototype.set = Function('t', set);\n    ctr.prototype.get = get;\n    ctr.fields = agg.map(function(_) { return _.out; });\n    return ctr;\n  }\n\n  function* numbers(values, valueof) {\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    }\n  }\n\n  function ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function bisector(compare) {\n    if (compare.length === 1) compare = ascendingComparator(compare);\n    return {\n      left: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1;\n          else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid;\n          else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n\n  function ascendingComparator(f) {\n    return function(d, x) {\n      return ascending(f(d), x);\n    };\n  }\n\n  var ascendingBisect = bisector(ascending);\n  var bisectRight = ascendingBisect.right;\n  var bisectLeft = ascendingBisect.left;\n\n  function variance(values, valueof) {\n    let count = 0;\n    let delta;\n    let mean = 0;\n    let sum = 0;\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          delta = value - mean;\n          mean += delta / ++count;\n          sum += delta * (value - mean);\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          delta = value - mean;\n          mean += delta / ++count;\n          sum += delta * (value - mean);\n        }\n      }\n    }\n    if (count > 1) return sum / (count - 1);\n  }\n\n  function deviation(values, valueof) {\n    const v = variance(values, valueof);\n    return v ? Math.sqrt(v) : v;\n  }\n\n  function sequence(start, stop, step) {\n    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n    var i = -1,\n        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n        range = new Array(n);\n\n    while (++i < n) {\n      range[i] = start + i * step;\n    }\n\n    return range;\n  }\n\n  var e10 = Math.sqrt(50),\n      e5 = Math.sqrt(10),\n      e2 = Math.sqrt(2);\n\n  function ticks(start, stop, count) {\n    var reverse,\n        i = -1,\n        n,\n        ticks,\n        step;\n\n    stop = +stop, start = +start, count = +count;\n    if (start === stop && count > 0) return [start];\n    if (reverse = stop < start) n = start, start = stop, stop = n;\n    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n    if (step > 0) {\n      start = Math.ceil(start / step);\n      stop = Math.floor(stop / step);\n      ticks = new Array(n = Math.ceil(stop - start + 1));\n      while (++i < n) ticks[i] = (start + i) * step;\n    } else {\n      start = Math.floor(start * step);\n      stop = Math.ceil(stop * step);\n      ticks = new Array(n = Math.ceil(start - stop + 1));\n      while (++i < n) ticks[i] = (start - i) / step;\n    }\n\n    if (reverse) ticks.reverse();\n\n    return ticks;\n  }\n\n  function tickIncrement(start, stop, count) {\n    var step = (stop - start) / Math.max(0, count),\n        power = Math.floor(Math.log(step) / Math.LN10),\n        error = step / Math.pow(10, power);\n    return power >= 0\n        ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n        : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n  }\n\n  function tickStep(start, stop, count) {\n    var step0 = Math.abs(stop - start) / Math.max(0, count),\n        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n        error = step0 / step1;\n    if (error >= e10) step1 *= 10;\n    else if (error >= e5) step1 *= 5;\n    else if (error >= e2) step1 *= 2;\n    return stop < start ? -step1 : step1;\n  }\n\n  function max(values, valueof) {\n    let max;\n    if (valueof === undefined) {\n      for (const value of values) {\n        if (value != null\n            && (max < value || (max === undefined && value >= value))) {\n          max = value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null\n            && (max < value || (max === undefined && value >= value))) {\n          max = value;\n        }\n      }\n    }\n    return max;\n  }\n\n  function min(values, valueof) {\n    let min;\n    if (valueof === undefined) {\n      for (const value of values) {\n        if (value != null\n            && (min > value || (min === undefined && value >= value))) {\n          min = value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null\n            && (min > value || (min === undefined && value >= value))) {\n          min = value;\n        }\n      }\n    }\n    return min;\n  }\n\n  // Based on https://github.com/mourner/quickselect\n  // ISC license, Copyright 2018 Vladimir Agafonkin.\n  function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {\n    while (right > left) {\n      if (right - left > 600) {\n        const n = right - left + 1;\n        const m = k - left + 1;\n        const z = Math.log(n);\n        const s = 0.5 * Math.exp(2 * z / 3);\n        const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n        const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n        const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n        quickselect(array, k, newLeft, newRight, compare);\n      }\n\n      const t = array[k];\n      let i = left;\n      let j = right;\n\n      swap(array, left, k);\n      if (compare(array[right], t) > 0) swap(array, left, right);\n\n      while (i < j) {\n        swap(array, i, j), ++i, --j;\n        while (compare(array[i], t) < 0) ++i;\n        while (compare(array[j], t) > 0) --j;\n      }\n\n      if (compare(array[left], t) === 0) swap(array, left, j);\n      else ++j, swap(array, j, right);\n\n      if (j <= k) left = j + 1;\n      if (k <= j) right = j - 1;\n    }\n    return array;\n  }\n\n  function swap(array, i, j) {\n    const t = array[i];\n    array[i] = array[j];\n    array[j] = t;\n  }\n\n  function number(x) {\n    return x === null ? NaN : +x;\n  }\n\n  function* numbers$1(values, valueof) {\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    }\n  }\n\n  function quantile(values, p, valueof) {\n    values = Float64Array.from(numbers$1(values, valueof));\n    if (!(n = values.length)) return;\n    if ((p = +p) <= 0 || n < 2) return min(values);\n    if (p >= 1) return max(values);\n    var n,\n        i = (n - 1) * p,\n        i0 = Math.floor(i),\n        value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n        value1 = min(values.subarray(i0 + 1));\n    return value0 + (value1 - value0) * (i - i0);\n  }\n\n  function quantileSorted(values, p, valueof = number) {\n    if (!(n = values.length)) return;\n    if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n    if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n    var n,\n        i = (n - 1) * p,\n        i0 = Math.floor(i),\n        value0 = +valueof(values[i0], i0, values),\n        value1 = +valueof(values[i0 + 1], i0 + 1, values);\n    return value0 + (value1 - value0) * (i - i0);\n  }\n\n  function mean(values, valueof) {\n    let count = 0;\n    let sum = 0;\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          ++count, sum += value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          ++count, sum += value;\n        }\n      }\n    }\n    if (count) return sum / count;\n  }\n\n  function median(values, valueof) {\n    return quantile(values, 0.5, valueof);\n  }\n\n  function permute(source, keys) {\n    return Array.from(keys, key => source[key]);\n  }\n\n  function sum(values, valueof) {\n    let sum = 0;\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value = +value) {\n          sum += value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if (value = +valueof(value, ++index, values)) {\n          sum += value;\n        }\n      }\n    }\n    return sum;\n  }\n\n  function quantiles(array, p, f) {\n    var values = Float64Array.from(numbers(array, f));\n\n    // don't depend on return value from typed array sort call\n    // protects against undefined sort results in Safari (vega/vega-lite#4964)\n    values.sort(ascending);\n\n    return p.map(_ => quantileSorted(values, _));\n  }\n\n  function quartiles(array, f) {\n    return quantiles(array, [0.25, 0.50, 0.75], f);\n  }\n\n  // Scott, D. W. (1992) Multivariate Density Estimation:\n  // Theory, Practice, and Visualization. Wiley.\n  function bandwidthNRD(array, f) {\n    var n = array.length,\n        v = deviation(array, f),\n        q = quartiles(array, f),\n        h = (q[2] - q[0]) / 1.34;\n\n    v = Math.min(v, h) || v || Math.abs(q[0]) || 1;\n\n    return 1.06 * v * Math.pow(n, -0.2);\n  }\n\n  function bin(_) {\n    // determine range\n    var maxb = _.maxbins || 20,\n        base = _.base || 10,\n        logb = Math.log(base),\n        div  = _.divide || [5, 2],\n        min  = _.extent[0],\n        max  = _.extent[1],\n        span = _.span || (max - min) || Math.abs(min) || 1,\n        step, level, minstep, precision, v, i, n, eps;\n\n    if (_.step) {\n      // if step size is explicitly given, use that\n      step = _.step;\n    } else if (_.steps) {\n      // if provided, limit choice to acceptable step sizes\n      v = span / maxb;\n      for (i=0, n=_.steps.length; i < n && _.steps[i] < v; ++i);\n      step = _.steps[Math.max(0, i-1)];\n    } else {\n      // else use span to determine step size\n      level = Math.ceil(Math.log(maxb) / logb);\n      minstep = _.minstep || 0;\n      step = Math.max(\n        minstep,\n        Math.pow(base, Math.round(Math.log(span) / logb) - level)\n      );\n\n      // increase step size if too many bins\n      while (Math.ceil(span/step) > maxb) { step *= base; }\n\n      // decrease step size if allowed\n      for (i=0, n=div.length; i<n; ++i) {\n        v = step / div[i];\n        if (v >= minstep && span / v <= maxb) step = v;\n      }\n    }\n\n    // update precision, min and max\n    v = Math.log(step);\n    precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n    eps = Math.pow(base, -precision - 1);\n    if (_.nice || _.nice === undefined) {\n      v = Math.floor(min / step + eps) * step;\n      min = min < v ? v - step : v;\n      max = Math.ceil(max / step) * step;\n    }\n\n    return {\n      start: min,\n      stop:  max === min ? min + step : max,\n      step:  step\n    };\n  }\n\n  exports.random = Math.random;\n\n  function setRandom(r) {\n    exports.random = r;\n  }\n\n  function bootstrapCI(array, samples, alpha, f) {\n    if (!array.length) return [undefined, undefined];\n\n    var values = Float64Array.from(numbers(array, f)),\n        n = values.length,\n        m = samples,\n        a, i, j, mu;\n\n    for (j=0, mu=Array(m); j<m; ++j) {\n      for (a=0, i=0; i<n; ++i) {\n        a += values[~~(exports.random() * n)];\n      }\n      mu[j] = a / n;\n    }\n\n    mu.sort(ascending);\n\n    return [\n      quantile(mu, alpha/2),\n      quantile(mu, 1-(alpha/2))\n    ];\n  }\n\n  // Dot density binning for dot plot construction.\n  // Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n  // https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n  function dotbin(array, step, smooth, f) {\n    f = f || (_ => _);\n\n    let i = 0, j = 1,\n        n = array.length,\n        v = new Float64Array(n),\n        a = f(array[0]),\n        b = a,\n        w = a + step,\n        x;\n\n    for (; j<n; ++j) {\n      x = f(array[j]);\n      if (x >= w) {\n        b = (a + b) / 2;\n        for (; i<j; ++i) v[i] = b;\n        w = x + step;\n        a = x;\n      }\n      b = x;\n    }\n\n    b = (a + b) / 2;\n    for (; i<j; ++i) v[i] = b;\n\n    return smooth ? smoothing(v, step + step / 4) : v;\n  }\n\n  // perform smoothing to reduce variance\n  // swap points between \"adjacent\" stacks\n  // Wilkinson defines adjacent as within step/4 units\n  function smoothing(v, thresh) {\n    let n = v.length,\n        a = 0,\n        b = 1,\n        c, d;\n\n    // get left stack\n    while (v[a] === v[b]) ++b;\n\n    while (b < n) {\n      // get right stack\n      c = b + 1;\n      while (v[b] === v[c]) ++c;\n\n      // are stacks adjacent?\n      // if so, compare sizes and swap as needed\n      if (v[b] - v[b-1] < thresh) {\n        d = b + ((a + c - b - b) >> 1);\n        while (d < b) v[d++] = v[b];\n        while (d > b) v[d--] = v[a];\n      }\n\n      // update left stack indices\n      a = b;\n      b = c;\n    }\n\n    return v;\n  }\n\n  function lcg(seed) {\n    // Random numbers using a Linear Congruential Generator with seed value\n    // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n    return function() {\n      seed = (1103515245 * seed + 12345) % 2147483647;\n      return seed / 2147483647;\n    };\n  }\n\n  function integer(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n\n    var dist = {},\n        a, b, d;\n\n    dist.min = function(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return a;\n      }\n    };\n\n    dist.max = function(_) {\n      if (arguments.length) {\n        b = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return b;\n      }\n    };\n\n    dist.sample = function() {\n      return a + Math.floor(d * exports.random());\n    };\n\n    dist.pdf = function(x) {\n      return (x === Math.floor(x) && x >= a && x < b) ? 1 / d : 0;\n    };\n\n    dist.cdf = function(x) {\n      var v = Math.floor(x);\n      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n    };\n\n    dist.icdf = function(p) {\n      return (p >= 0 && p <= 1) ? a - 1 + Math.floor(p * d) : NaN;\n    };\n\n    return dist.min(min).max(max);\n  }\n\n  const SQRT2PI = Math.sqrt(2 * Math.PI);\n  const SQRT2 = Math.SQRT2;\n\n  let nextSample = NaN;\n\n  function sampleNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n\n    let x = 0, y = 0, rds, c;\n    if (nextSample === nextSample) {\n      x = nextSample;\n      nextSample = NaN;\n    } else {\n      do {\n        x = exports.random() * 2 - 1;\n        y = exports.random() * 2 - 1;\n        rds = x * x + y * y;\n      } while (rds === 0 || rds > 1);\n      c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n      x *= c;\n      nextSample = y * c;\n    }\n    return mean + x * stdev;\n  }\n\n  function densityNormal(value, mean, stdev) {\n    stdev = stdev == null ? 1 : stdev;\n    const z = (value - (mean || 0)) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n  }\n\n  // Approximation from West (2009)\n  // Better Approximations to Cumulative Normal Functions\n  function cumulativeNormal(value, mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n\n    let cd,\n        z = (value - mean) / stdev,\n        Z = Math.abs(z);\n\n    if (Z > 37) {\n      cd = 0;\n    } else {\n      let sum, exp = Math.exp(-Z * Z / 2);\n      if (Z < 7.07106781186547) {\n        sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n        sum = sum * Z + 6.37396220353165;\n        sum = sum * Z + 33.912866078383;\n        sum = sum * Z + 112.079291497871;\n        sum = sum * Z + 221.213596169931;\n        sum = sum * Z + 220.206867912376;\n        cd = exp * sum;\n        sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n        sum = sum * Z + 16.064177579207;\n        sum = sum * Z + 86.7807322029461;\n        sum = sum * Z + 296.564248779674;\n        sum = sum * Z + 637.333633378831;\n        sum = sum * Z + 793.826512519948;\n        sum = sum * Z + 440.413735824752;\n        cd = cd / sum;\n      } else {\n        sum = Z + 0.65;\n        sum = Z + 4 / sum;\n        sum = Z + 3 / sum;\n        sum = Z + 2 / sum;\n        sum = Z + 1 / sum;\n        cd = exp / sum / 2.506628274631;\n      }\n    }\n    return z > 0 ? 1 - cd : cd;\n  }\n\n  // Approximation of Probit function using inverse error function.\n  function quantileNormal(p, mean, stdev) {\n    if (p < 0 || p > 1) return NaN;\n    return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n  }\n\n  // Approximate inverse error function. Implementation from \"Approximating\n  // the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n  // Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\n  function erfinv(x) {\n    // beware that the logarithm argument must be\n    // commputed as (1.0 - x) * (1.0 + x),\n    // it must NOT be simplified as 1.0 - x * x as this\n    // would induce rounding errors near the boundaries +/-1\n    let w = - Math.log((1 - x) * (1 + x)), p;\n\n    if (w < 6.25) {\n        w -= 3.125;\n        p =  -3.6444120640178196996e-21;\n        p =   -1.685059138182016589e-19 + p * w;\n        p =   1.2858480715256400167e-18 + p * w;\n        p =    1.115787767802518096e-17 + p * w;\n        p =   -1.333171662854620906e-16 + p * w;\n        p =   2.0972767875968561637e-17 + p * w;\n        p =   6.6376381343583238325e-15 + p * w;\n        p =  -4.0545662729752068639e-14 + p * w;\n        p =  -8.1519341976054721522e-14 + p * w;\n        p =   2.6335093153082322977e-12 + p * w;\n        p =  -1.2975133253453532498e-11 + p * w;\n        p =  -5.4154120542946279317e-11 + p * w;\n        p =    1.051212273321532285e-09 + p * w;\n        p =  -4.1126339803469836976e-09 + p * w;\n        p =  -2.9070369957882005086e-08 + p * w;\n        p =   4.2347877827932403518e-07 + p * w;\n        p =  -1.3654692000834678645e-06 + p * w;\n        p =  -1.3882523362786468719e-05 + p * w;\n        p =    0.0001867342080340571352 + p * w;\n        p =  -0.00074070253416626697512 + p * w;\n        p =   -0.0060336708714301490533 + p * w;\n        p =      0.24015818242558961693 + p * w;\n        p =       1.6536545626831027356 + p * w;\n    } else if (w < 16.0) {\n        w = Math.sqrt(w) - 3.25;\n        p =   2.2137376921775787049e-09;\n        p =   9.0756561938885390979e-08 + p * w;\n        p =  -2.7517406297064545428e-07 + p * w;\n        p =   1.8239629214389227755e-08 + p * w;\n        p =   1.5027403968909827627e-06 + p * w;\n        p =   -4.013867526981545969e-06 + p * w;\n        p =   2.9234449089955446044e-06 + p * w;\n        p =   1.2475304481671778723e-05 + p * w;\n        p =  -4.7318229009055733981e-05 + p * w;\n        p =   6.8284851459573175448e-05 + p * w;\n        p =   2.4031110387097893999e-05 + p * w;\n        p =   -0.0003550375203628474796 + p * w;\n        p =   0.00095328937973738049703 + p * w;\n        p =   -0.0016882755560235047313 + p * w;\n        p =    0.0024914420961078508066 + p * w;\n        p =   -0.0037512085075692412107 + p * w;\n        p =     0.005370914553590063617 + p * w;\n        p =       1.0052589676941592334 + p * w;\n        p =       3.0838856104922207635 + p * w;\n    } else if (Number.isFinite(w)) {\n        w = Math.sqrt(w) - 5.0;\n        p =  -2.7109920616438573243e-11;\n        p =  -2.5556418169965252055e-10 + p * w;\n        p =   1.5076572693500548083e-09 + p * w;\n        p =  -3.7894654401267369937e-09 + p * w;\n        p =   7.6157012080783393804e-09 + p * w;\n        p =  -1.4960026627149240478e-08 + p * w;\n        p =   2.9147953450901080826e-08 + p * w;\n        p =  -6.7711997758452339498e-08 + p * w;\n        p =   2.2900482228026654717e-07 + p * w;\n        p =  -9.9298272942317002539e-07 + p * w;\n        p =   4.5260625972231537039e-06 + p * w;\n        p =  -1.9681778105531670567e-05 + p * w;\n        p =   7.5995277030017761139e-05 + p * w;\n        p =  -0.00021503011930044477347 + p * w;\n        p =  -0.00013871931833623122026 + p * w;\n        p =       1.0103004648645343977 + p * w;\n        p =       4.8499064014085844221 + p * w;\n    } else {\n        p = Infinity;\n    }\n\n    return p * x;\n  }\n\n  function randomNormal(mean, stdev) {\n    var mu,\n        sigma,\n        dist = {\n          mean: function(_) {\n            if (arguments.length) {\n              mu = _ || 0;\n              return dist;\n            } else {\n              return mu;\n            }\n          },\n          stdev: function(_) {\n            if (arguments.length) {\n              sigma = _ == null ? 1 : _;\n              return dist;\n            } else {\n              return sigma;\n            }\n          },\n          sample: () => sampleNormal(mu, sigma),\n          pdf: value => densityNormal(value, mu, sigma),\n          cdf: value => cumulativeNormal(value, mu, sigma),\n          icdf: p => quantileNormal(p, mu, sigma)\n        };\n\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  // TODO: support for additional kernels?\n  function randomKDE(support, bandwidth) {\n    var kernel = randomNormal(),\n        dist = {},\n        n = 0;\n\n    dist.data = function(_) {\n      if (arguments.length) {\n        support = _;\n        n = _ ? _.length : 0;\n        return dist.bandwidth(bandwidth);\n      } else {\n        return support;\n      }\n    };\n\n    dist.bandwidth = function(_) {\n      if (!arguments.length) return bandwidth;\n      bandwidth = _;\n      if (!bandwidth && support) bandwidth = bandwidthNRD(support);\n      return dist;\n    };\n\n    dist.sample = function() {\n      return support[~~(exports.random() * n)] + bandwidth * kernel.sample();\n    };\n\n    dist.pdf = function(x) {\n      for (var y=0, i=0; i<n; ++i) {\n        y += kernel.pdf((x - support[i]) / bandwidth);\n      }\n      return y / bandwidth / n;\n    };\n\n    dist.cdf = function(x) {\n      for (var y=0, i=0; i<n; ++i) {\n        y += kernel.cdf((x - support[i]) / bandwidth);\n      }\n      return y / n;\n    };\n\n    dist.icdf = function() {\n      throw Error('KDE icdf not supported.');\n    };\n\n    return dist.data(support);\n  }\n\n  function sampleLogNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    return Math.exp(mean + sampleNormal() * stdev);\n  }\n\n  function densityLogNormal(value, mean, stdev) {\n    if (value <= 0) return 0;\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    const z = (Math.log(value) - mean) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n  }\n\n  function cumulativeLogNormal(value, mean, stdev) {\n    return cumulativeNormal(Math.log(value), mean, stdev);\n  }\n\n  function quantileLogNormal(p, mean, stdev) {\n    return Math.exp(quantileNormal(p, mean, stdev));\n  }\n\n  function randomLogNormal(mean, stdev) {\n    var mu,\n        sigma,\n        dist = {\n          mean: function(_) {\n            if (arguments.length) {\n              mu = _ || 0;\n              return dist;\n            } else {\n              return mu;\n            }\n          },\n          stdev: function(_) {\n            if (arguments.length) {\n              sigma = _ == null ? 1 : _;\n              return dist;\n            } else {\n              return sigma;\n            }\n          },\n          sample: () => sampleLogNormal(mu, sigma),\n          pdf: value => densityLogNormal(value, mu, sigma),\n          cdf: value => cumulativeLogNormal(value, mu, sigma),\n          icdf: p => quantileLogNormal(p, mu, sigma)\n        };\n\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  function randomMixture(dists, weights) {\n    var dist = {}, m = 0, w;\n\n    function normalize(x) {\n      var w = [], sum = 0, i;\n      for (i=0; i<m; ++i) { sum += (w[i] = (x[i]==null ? 1 : +x[i])); }\n      for (i=0; i<m; ++i) { w[i] /= sum; }\n      return w;\n    }\n\n    dist.weights = function(_) {\n      if (arguments.length) {\n        w = normalize(weights = (_ || []));\n        return dist;\n      }\n      return weights;\n    };\n\n    dist.distributions = function(_) {\n      if (arguments.length) {\n        if (_) {\n          m = _.length;\n          dists = _;\n        } else {\n          m = 0;\n          dists = [];\n        }\n        return dist.weights(weights);\n      }\n      return dists;\n    };\n\n    dist.sample = function() {\n      var r = exports.random(),\n          d = dists[m-1],\n          v = w[0],\n          i = 0;\n\n      // first select distribution\n      for (; i<m-1; v += w[++i]) {\n        if (r < v) { d = dists[i]; break; }\n      }\n      // then sample from it\n      return d.sample();\n    };\n\n    dist.pdf = function(x) {\n      for (var p=0, i=0; i<m; ++i) {\n        p += w[i] * dists[i].pdf(x);\n      }\n      return p;\n    };\n\n    dist.cdf = function(x) {\n      for (var p=0, i=0; i<m; ++i) {\n        p += w[i] * dists[i].cdf(x);\n      }\n      return p;\n    };\n\n    dist.icdf = function() {\n      throw Error('Mixture icdf not supported.');\n    };\n\n    return dist.distributions(dists).weights(weights);\n  }\n\n  function sampleUniform(min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return min + (max - min) * exports.random();\n  }\n\n  function densityUniform(value, min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return (value >= min && value <= max) ? 1 / (max - min) : 0;\n  }\n\n  function cumulativeUniform(value, min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n  }\n\n  function quantileUniform(p, min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return (p >= 0 && p <= 1) ? min + p * (max - min) : NaN;\n  }\n\n  function randomUniform(min, max) {\n    var a, b,\n        dist = {\n          min: function(_) {\n            if (arguments.length) {\n              a = _ || 0;\n              return dist;\n            } else {\n              return a;\n            }\n          },\n          max: function(_) {\n            if (arguments.length) {\n              b = _ == null ? 1 : _;\n              return dist;\n            } else {\n              return b;\n            }\n          },\n          sample: () => sampleUniform(a, b),\n          pdf: value => densityUniform(value, a, b),\n          cdf: value => cumulativeUniform(value, a, b),\n          icdf: p => quantileUniform(p, a, b)\n        };\n\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return dist.min(min).max(max);\n  }\n\n  // Ordinary Least Squares\n  function ols(uX, uY, uXY, uX2) {\n    const delta = uX2 - uX * uX,\n          slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n          intercept = uY - slope * uX;\n\n    return [intercept, slope];\n  }\n\n  function points(data, x, y, sort) {\n    data = data.filter(d => {\n      let u = x(d), v = y(d);\n      return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n    });\n\n    if (sort) {\n      data.sort((a, b) => x(a) - x(b));\n    }\n\n    const n = data.length,\n          X = new Float64Array(n),\n          Y = new Float64Array(n);\n\n    // extract values, calculate means\n    let i = 0, ux = 0, uy = 0, xv, yv, d;\n    for (d of data) {\n      X[i] = xv = +x(d);\n      Y[i] = yv = +y(d);\n      ++i;\n      ux += (xv - ux) / i;\n      uy += (yv - uy) / i;\n    }\n\n    // mean center the data\n    for (i=0; i<n; ++i) {\n      X[i] -= ux;\n      Y[i] -= uy;\n    }\n\n    return [X, Y, ux, uy];\n  }\n\n  function visitPoints(data, x, y, callback) {\n    let i = -1, u, v;\n\n    for (let d of data) {\n      u = x(d);\n      v = y(d);\n      if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n        callback(u, v, ++i);\n      }\n    }\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function rSquared(data, x, y, uY, predict) {\n    let SSE = 0, SST = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      const sse = dy - predict(dx),\n            sst = dy - uY;\n\n      SSE += sse * sse;\n      SST += sst * sst;\n    });\n\n    return 1 - SSE / SST;\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function regressionLinear(data, x, y) {\n    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      ++n;\n      X += (dx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (dx * dy - XY) / n;\n      X2 += (dx * dx - X2) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] + coef[1] * x;\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function regressionLog(data, x, y) {\n    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      ++n;\n      dx = Math.log(dx);\n      X += (dx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (dx * dy - XY) / n;\n      X2 += (dx * dx - X2) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] + coef[1] * Math.log(x);\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y, predict)\n    };\n  }\n\n  function regressionExp(data, x, y) {\n    // eslint-disable-next-line no-unused-vars\n    const [xv, yv, ux, uy] = points(data, x, y);\n    let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly, xy;\n\n    visitPoints(data, x, y, (_, dy) => {\n      dx = xv[n++];\n      ly = Math.log(dy);\n      xy = dx * dy;\n\n      YL += (dy * ly - YL) / n;\n      XY += (xy - XY) / n;\n      XYL += (xy * ly - XYL) / n;\n      X2Y += (dx * xy - X2Y) / n;\n    });\n\n    const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n          predict = x => Math.exp(c0 + c1 * (x - ux));\n\n    return {\n      coef: [Math.exp(c0 - c1 * ux), c1],\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function regressionPow(data, x, y) {\n    let X = 0, Y = 0, XY = 0, X2 = 0, YS = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      const lx = Math.log(dx),\n            ly = Math.log(dy);\n      ++n;\n      X += (lx - X) / n;\n      Y += (ly - Y) / n;\n      XY += (lx * ly - XY) / n;\n      X2 += (lx * lx - X2) / n;\n      YS += (dy - YS) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] * Math.pow(x, coef[1]);\n\n    coef[0] = Math.exp(coef[0]);\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, YS, predict)\n    };\n  }\n\n  function regressionQuad(data, x, y) {\n    const [xv, yv, ux, uy] = points(data, x, y),\n          n = xv.length;\n\n    let X2 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0,\n        i, dx, dy, x2;\n\n    for (i=0; i<n;) {\n      dx = xv[i];\n      dy = yv[i++];\n      x2 = dx * dx;\n      X2 += (x2 - X2) / i;\n      X3 += (x2 * dx - X3) / i;\n      X4 += (x2 * x2 - X4) / i;\n      XY += (dx * dy - XY) / i;\n      X2Y += (x2 * dy - X2Y) / i;\n    }\n\n    const X2X2 = X4 - (X2 * X2),\n          d = (X2 * X2X2 - X3 * X3),\n          a = (X2Y * X2 - XY * X3) / d,\n          b = (XY * X2X2 - X2Y * X3) / d,\n          c = -a * X2,\n          predict = x => {\n            x = x - ux;\n            return a * x * x + b * x + c + uy;\n          };\n\n    // transform coefficients back from mean-centered space\n    return {\n      coef: [\n        c - b * ux + a * ux * ux + uy,\n        b - 2 * a * ux,\n        a\n      ],\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  // ... which was adapted from regression-js by Tom Alexander\n  // Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n  // License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\n  function regressionPoly(data, x, y, order) {\n    // use more efficient methods for lower orders\n    if (order === 1) return regressionLinear(data, x, y);\n    if (order === 2) return regressionQuad(data, x, y);\n\n    const [xv, yv, ux, uy] = points(data, x, y),\n          n = xv.length,\n          lhs = [],\n          rhs = [],\n          k = order + 1;\n\n    let i, j, l, v, c;\n\n    for (i=0; i<k; ++i) {\n      for (l=0, v=0; l<n; ++l) {\n        v += Math.pow(xv[l], i) * yv[l];\n      }\n      lhs.push(v);\n\n      c = new Float64Array(k);\n      for (j=0; j<k; ++j) {\n        for (l=0, v=0; l<n; ++l) {\n          v += Math.pow(xv[l], i + j);\n        }\n        c[j] = v;\n      }\n      rhs.push(c);\n    }\n    rhs.push(lhs);\n\n    const coef = gaussianElimination(rhs),\n          predict = x => {\n            x -= ux;\n            let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n            for (i=3; i<k; ++i) y += coef[i] * Math.pow(x, i);\n            return y;\n          };\n\n    return {\n      coef: uncenter(k, coef, -ux, uy),\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  function uncenter(k, a, x, y) {\n    const z = Array(k);\n    let i, j, v, c;\n\n    // initialize to zero\n    for (i=0; i<k; ++i) z[i] = 0;\n\n    // polynomial expansion\n    for (i=k-1; i>=0; --i) {\n      v = a[i];\n      c = 1;\n      z[i] += v;\n      for (j=1; j<=i; ++j) {\n        c *= (i + 1 - j) / j; // binomial coefficent\n        z[i-j] += v * Math.pow(x, j) * c;\n      }\n    }\n\n    // bias term\n    z[0] += y;\n\n    return z;\n  }\n\n  // Given an array for a two-dimensional matrix and the polynomial order,\n  // solve A * x = b using Gaussian elimination.\n  function gaussianElimination(matrix) {\n    const n = matrix.length - 1,\n          coef = [];\n\n    let i, j, k, r, t;\n\n    for (i = 0; i < n; ++i) {\n      r = i; // max row\n      for (j = i + 1; j < n; ++j) {\n        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n          r = j;\n        }\n      }\n\n      for (k = i; k < n + 1; ++k) {\n        t = matrix[k][i];\n        matrix[k][i] = matrix[k][r];\n        matrix[k][r] = t;\n      }\n\n      for (j = i + 1; j < n; ++j) {\n        for (k = n; k >= i; k--) {\n          matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\n        }\n      }\n    }\n\n    for (j = n - 1; j >= 0; --j) {\n      t = 0;\n      for (k = j + 1; k < n; ++k) {\n        t += matrix[k][j] * coef[k];\n      }\n      coef[j] = (matrix[n][j] - t) / matrix[j][j];\n    }\n\n    return coef;\n  }\n\n  const maxiters = 2,\n        epsilon = 1e-12;\n\n  // Adapted from science.js by Jason Davies\n  // Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n  // License: https://github.com/jasondavies/science.js/blob/master/LICENSE\n  function regressionLoess(data, x, y, bandwidth) {\n    const [xv, yv, ux, uy] = points(data, x, y, true),\n          n = xv.length,\n          bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors\n          yhat = new Float64Array(n),\n          residuals = new Float64Array(n),\n          robustWeights = new Float64Array(n).fill(1);\n\n    for (let iter = -1; ++iter <= maxiters; ) {\n      const interval = [0, bw - 1];\n\n      for (let i = 0; i < n; ++i) {\n        const dx = xv[i],\n              i0 = interval[0],\n              i1 = interval[1],\n              edge = (dx - xv[i0]) > (xv[i1] - dx) ? i0 : i1;\n\n        let W = 0, X = 0, Y = 0, XY = 0, X2 = 0,\n            denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n        for (let k = i0; k <= i1; ++k) {\n          const xk = xv[k],\n                yk = yv[k],\n                w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n                xkw = xk * w;\n\n          W += w;\n          X += xkw;\n          Y += yk * w;\n          XY += yk * xkw;\n          X2 += xk * xkw;\n        }\n\n        // linear regression fit\n        const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n        yhat[i] = a + b * dx;\n        residuals[i] = Math.abs(yv[i] - yhat[i]);\n\n        updateInterval(xv, i + 1, interval);\n      }\n\n      if (iter === maxiters) {\n        break;\n      }\n\n      const medianResidual = median(residuals);\n      if (Math.abs(medianResidual) < epsilon) break;\n\n      for (let i = 0, arg, w; i < n; ++i){\n        arg = residuals[i] / (6 * medianResidual);\n        // default to epsilon (rather than zero) for large deviations\n        // keeping weights tiny but non-zero prevents singularites\n        robustWeights[i] = (arg >= 1) ? epsilon : ((w = 1 - arg * arg) * w);\n      }\n    }\n\n    return output(xv, yhat, ux, uy);\n  }\n\n  // weighting kernel for local regression\n  function tricube(x) {\n    return (x = 1 - x * x * x) * x * x;\n  }\n\n  // advance sliding window interval of nearest neighbors\n  function updateInterval(xv, i, interval) {\n    let val = xv[i],\n        left = interval[0],\n        right = interval[1] + 1;\n\n    if (right >= xv.length) return;\n\n    // step right if distance to new right edge is <= distance to old left edge\n    // step when distance is equal to ensure movement over duplicate x values\n    while (i > left && (xv[right] - val) <= (val - xv[left])) {\n      interval[0] = ++left;\n      interval[1] = right;\n      ++right;\n    }\n  }\n\n  // generate smoothed output points\n  // average points with repeated x values\n  function output(xv, yhat, ux, uy) {\n    const n = xv.length, out = [];\n    let i = 0, cnt = 0, prev = [], v;\n\n    for (; i<n; ++i) {\n      v = xv[i] + ux;\n      if (prev[0] === v) {\n        // average output values via online update\n        prev[1] += (yhat[i] - prev[1]) / (++cnt);\n      } else {\n        // add new output point\n        cnt = 0;\n        prev[1] += uy;\n        prev = [v, yhat[i]];\n        out.push(prev);\n      }\n    }\n    prev[1] += uy;\n\n    return out;\n  }\n\n  // subdivide up to accuracy of 0.1 degrees\n  const MIN_RADIANS = 0.1 * Math.PI / 180;\n\n  // Adaptively sample an interpolated function over a domain extent\n  function sampleCurve(f, extent, minSteps, maxSteps) {\n    minSteps = minSteps || 25;\n    maxSteps = Math.max(minSteps, maxSteps || 200);\n\n    const point = x => [x, f(x)],\n          minX = extent[0],\n          maxX = extent[1],\n          span = maxX - minX,\n          stop = span / maxSteps,\n          prev = [point(minX)],\n          next = [];\n\n    if (minSteps === maxSteps) {\n      // no adaptation, sample uniform grid directly and return\n      for (let i = 1; i < maxSteps; ++i) {\n        prev.push(point(minX + (i / minSteps) * span));\n      }\n      prev.push(point(maxX));\n      return prev;\n    } else {\n      // sample minimum points on uniform grid\n      // then move on to perform adaptive refinement\n      next.push(point(maxX));\n      for (let i = minSteps; --i > 0;) {\n        next.push(point(minX + (i / minSteps) * span));\n      }\n    }\n\n    let p0 = prev[0],\n        p1 = next[next.length - 1];\n\n    while (p1) {\n      // midpoint for potential curve subdivision\n      const pm = point((p0[0] + p1[0]) / 2);\n\n      if (pm[0] - p0[0] >= stop && angleDelta(p0, pm, p1) > MIN_RADIANS) {\n        // maximum resolution has not yet been met, and\n        // subdivision midpoint sufficiently different from endpoint\n        // save subdivision, push midpoint onto the visitation stack\n        next.push(pm);\n      } else {\n        // subdivision midpoint sufficiently similar to endpoint\n        // skip subdivision, store endpoint, move to next point on the stack\n        p0 = p1;\n        prev.push(p1);\n        next.pop();\n      }\n      p1 = next[next.length - 1];\n    }\n\n    return prev;\n  }\n\n  function angleDelta(p, q, r) {\n    const a0 = Math.atan2(r[1] - p[1], r[0] - p[0]),\n          a1 = Math.atan2(q[1] - p[1], q[0] - p[0]);\n    return Math.abs(a0 - a1);\n  }\n\n  function TupleStore(key) {\n    this._key = key ? field(key) : tupleid;\n    this.reset();\n  }\n\n  var prototype$7 = TupleStore.prototype;\n\n  prototype$7.reset = function() {\n    this._add = [];\n    this._rem = [];\n    this._ext = null;\n    this._get = null;\n    this._q = null;\n  };\n\n  prototype$7.add = function(v) {\n    this._add.push(v);\n  };\n\n  prototype$7.rem = function(v) {\n    this._rem.push(v);\n  };\n\n  prototype$7.values = function() {\n    this._get = null;\n    if (this._rem.length === 0) return this._add;\n\n    var a = this._add,\n        r = this._rem,\n        k = this._key,\n        n = a.length,\n        m = r.length,\n        x = Array(n - m),\n        map = {}, i, j, v;\n\n    // use unique key field to clear removed values\n    for (i=0; i<m; ++i) {\n      map[k(r[i])] = 1;\n    }\n    for (i=0, j=0; i<n; ++i) {\n      if (map[k(v = a[i])]) {\n        map[k(v)] = 0;\n      } else {\n        x[j++] = v;\n      }\n    }\n\n    this._rem = [];\n    return (this._add = x);\n  };\n\n  // memoizing statistics methods\n\n  prototype$7.distinct = function(get) {\n    var v = this.values(),\n        n = v.length,\n        map = {},\n        count = 0, s;\n\n    while (--n >= 0) {\n      s = get(v[n]) + '';\n      if (!hasOwnProperty(map, s)) {\n        map[s] = 1;\n        ++count;\n      }\n    }\n\n    return count;\n  };\n\n  prototype$7.extent = function(get) {\n    if (this._get !== get || !this._ext) {\n      var v = this.values(),\n          i = extentIndex(v, get);\n      this._ext = [v[i[0]], v[i[1]]];\n      this._get = get;\n    }\n    return this._ext;\n  };\n\n  prototype$7.argmin = function(get) {\n    return this.extent(get)[0] || {};\n  };\n\n  prototype$7.argmax = function(get) {\n    return this.extent(get)[1] || {};\n  };\n\n  prototype$7.min = function(get) {\n    var m = this.extent(get)[0];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype$7.max = function(get) {\n    var m = this.extent(get)[1];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype$7.quartile = function(get) {\n    if (this._get !== get || !this._q) {\n      this._q = quartiles(this.values(), get);\n      this._get = get;\n    }\n    return this._q;\n  };\n\n  prototype$7.q1 = function(get) {\n    return this.quartile(get)[0];\n  };\n\n  prototype$7.q2 = function(get) {\n    return this.quartile(get)[1];\n  };\n\n  prototype$7.q3 = function(get) {\n    return this.quartile(get)[2];\n  };\n\n  prototype$7.ci = function(get) {\n    if (this._get !== get || !this._ci) {\n      this._ci = bootstrapCI(this.values(), 1000, 0.05, get);\n      this._get = get;\n    }\n    return this._ci;\n  };\n\n  prototype$7.ci0 = function(get) {\n    return this.ci(get)[0];\n  };\n\n  prototype$7.ci1 = function(get) {\n    return this.ci(get)[1];\n  };\n\n  /**\n   * Group-by aggregation operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n   * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n   * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n   * @param {boolean} [params.cross=false] - A flag indicating that the full\n   *   cross-product of groupby values should be generated, including empty cells.\n   *   If true, the drop parameter is ignored and empty cells are retained.\n   * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n   */\n  function Aggregate(params) {\n    Transform.call(this, null, params);\n\n    this._adds = []; // array of added output tuples\n    this._mods = []; // array of modified output tuples\n    this._alen = 0;  // number of active added tuples\n    this._mlen = 0;  // number of active modified tuples\n    this._drop = true;   // should empty aggregation cells be removed\n    this._cross = false; // produce full cross-product of group-by values\n\n    this._dims = [];   // group-by dimension accessors\n    this._dnames = []; // group-by dimension names\n\n    this._measures = []; // collection of aggregation monoids\n    this._countOnly = false; // flag indicating only count aggregation\n    this._counts = null; // collection of count fields\n    this._prev = null;   // previous aggregation cells\n\n    this._inputs = null;  // array of dependent input tuple field names\n    this._outputs = null; // array of output tuple field names\n  }\n\n  Aggregate.Definition = {\n    \"type\": \"Aggregate\",\n    \"metadata\": {\"generates\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"ops\", \"type\": \"enum\", \"array\": true, \"values\": ValidAggregateOps },\n      { \"name\": \"fields\", \"type\": \"field\", \"null\": true, \"array\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"null\": true, \"array\": true },\n      { \"name\": \"drop\", \"type\": \"boolean\", \"default\": true },\n      { \"name\": \"cross\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"key\", \"type\": \"field\" }\n    ]\n  };\n\n  var prototype$8 = inherits(Aggregate, Transform);\n\n  prototype$8.transform = function(_, pulse) {\n    var aggr = this,\n        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        mod = _.modified();\n\n    aggr.stamp = out.stamp;\n\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      aggr._prev = aggr.value;\n      aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, t => aggr.add(t));\n    } else {\n      aggr.value = aggr.value || aggr.init(_);\n      pulse.visit(pulse.REM, t => aggr.rem(t));\n      pulse.visit(pulse.ADD, t => aggr.add(t));\n    }\n\n    // Indicate output fields and return aggregate tuples.\n    out.modifies(aggr._outputs);\n\n    // Should empty cells be dropped?\n    aggr._drop = _.drop !== false;\n\n    // If domain cross-product requested, generate empty cells as needed\n    // and ensure that empty cells are not dropped\n    if (_.cross && aggr._dims.length > 1) {\n      aggr._drop = false;\n      aggr.cross();\n    }\n\n    return aggr.changes(out);\n  };\n\n  prototype$8.cross = function() {\n    var aggr = this,\n        curr = aggr.value,\n        dims = aggr._dnames,\n        vals = dims.map(function() { return {}; }),\n        n = dims.length;\n\n    // collect all group-by domain values\n    function collect(cells) {\n      var key, i, t, v;\n      for (key in cells) {\n        t = cells[key].tuple;\n        for (i=0; i<n; ++i) {\n          vals[i][(v = t[dims[i]])] = v;\n        }\n      }\n    }\n    collect(aggr._prev);\n    collect(curr);\n\n    // iterate over key cross-product, create cells as needed\n    function generate(base, tuple, index) {\n      var name = dims[index],\n          v = vals[index++],\n          k, key;\n\n      for (k in v) {\n        tuple[name] = v[k];\n        key = base ? base + '|' + k : k;\n        if (index < n) generate(key, tuple, index);\n        else if (!curr[key]) aggr.cell(key, tuple);\n      }\n    }\n    generate('', {}, 0);\n  };\n\n  prototype$8.init = function(_) {\n    // initialize input and output fields\n    var inputs = (this._inputs = []),\n        outputs = (this._outputs = []),\n        inputMap = {};\n\n    function inputVisit(get) {\n      var fields = array(accessorFields(get)),\n          i = 0, n = fields.length, f;\n      for (; i<n; ++i) {\n        if (!inputMap[f=fields[i]]) {\n          inputMap[f] = 1;\n          inputs.push(f);\n        }\n      }\n    }\n\n    // initialize group-by dimensions\n    this._dims = array(_.groupby);\n    this._dnames = this._dims.map(function(d) {\n      var dname = accessorName(d);\n      inputVisit(d);\n      outputs.push(dname);\n      return dname;\n    });\n    this.cellkey = _.key ? _.key : groupkey(this._dims);\n\n    // initialize aggregate measures\n    this._countOnly = true;\n    this._counts = [];\n    this._measures = [];\n\n    var fields = _.fields || [null],\n        ops = _.ops || ['count'],\n        as = _.as || [],\n        n = fields.length,\n        map = {},\n        field, op, m, mname, outname, i;\n\n    if (n !== ops.length) {\n      error('Unmatched number of fields and aggregate ops.');\n    }\n\n    for (i=0; i<n; ++i) {\n      field = fields[i];\n      op = ops[i];\n\n      if (field == null && op !== 'count') {\n        error('Null aggregate field specified.');\n      }\n      mname = accessorName(field);\n      outname = measureName(op, mname, as[i]);\n      outputs.push(outname);\n\n      if (op === 'count') {\n        this._counts.push(outname);\n        continue;\n      }\n\n      m = map[mname];\n      if (!m) {\n        inputVisit(field);\n        m = (map[mname] = []);\n        m.field = field;\n        this._measures.push(m);\n      }\n\n      if (op !== 'count') this._countOnly = false;\n      m.push(createMeasure(op, outname));\n    }\n\n    this._measures = this._measures.map(function(m) {\n      return compileMeasures(m, m.field);\n    });\n\n    return {}; // aggregation cells (this.value)\n  };\n\n  // -- Cell Management -----\n\n  prototype$8.cellkey = groupkey();\n\n  prototype$8.cell = function(key, t) {\n    var cell = this.value[key];\n    if (!cell) {\n      cell = this.value[key] = this.newcell(key, t);\n      this._adds[this._alen++] = cell;\n    } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._adds[this._alen++] = cell;\n    } else if (cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._mods[this._mlen++] = cell;\n    }\n    return cell;\n  };\n\n  prototype$8.newcell = function(key, t) {\n    var cell = {\n      key:   key,\n      num:   0,\n      agg:   null,\n      tuple: this.newtuple(t, this._prev && this._prev[key]),\n      stamp: this.stamp,\n      store: false\n    };\n\n    if (!this._countOnly) {\n      var measures = this._measures,\n          n = measures.length, i;\n\n      cell.agg = Array(n);\n      for (i=0; i<n; ++i) {\n        cell.agg[i] = new measures[i](cell);\n      }\n    }\n\n    if (cell.store) {\n      cell.data = new TupleStore();\n    }\n\n    return cell;\n  };\n\n  prototype$8.newtuple = function(t, p) {\n    var names = this._dnames,\n        dims = this._dims,\n        x = {}, i, n;\n\n    for (i=0, n=dims.length; i<n; ++i) {\n      x[names[i]] = dims[i](t);\n    }\n\n    return p ? replace(p.tuple, x) : ingest(x);\n  };\n\n  // -- Process Tuples -----\n\n  prototype$8.add = function(t) {\n    var key = this.cellkey(t),\n        cell = this.cell(key, t),\n        agg, i, n;\n\n    cell.num += 1;\n    if (this._countOnly) return;\n\n    if (cell.store) cell.data.add(t);\n\n    agg = cell.agg;\n    for (i=0, n=agg.length; i<n; ++i) {\n      agg[i].add(agg[i].get(t), t);\n    }\n  };\n\n  prototype$8.rem = function(t) {\n    var key = this.cellkey(t),\n        cell = this.cell(key, t),\n        agg, i, n;\n\n    cell.num -= 1;\n    if (this._countOnly) return;\n\n    if (cell.store) cell.data.rem(t);\n\n    agg = cell.agg;\n    for (i=0, n=agg.length; i<n; ++i) {\n      agg[i].rem(agg[i].get(t), t);\n    }\n  };\n\n  prototype$8.celltuple = function(cell) {\n    var tuple = cell.tuple,\n        counts = this._counts,\n        agg, i, n;\n\n    // consolidate stored values\n    if (cell.store) {\n      cell.data.values();\n    }\n\n    // update tuple properties\n    for (i=0, n=counts.length; i<n; ++i) {\n      tuple[counts[i]] = cell.num;\n    }\n    if (!this._countOnly) {\n      agg = cell.agg;\n      for (i=0, n=agg.length; i<n; ++i) {\n        agg[i].set(tuple);\n      }\n    }\n\n    return tuple;\n  };\n\n  prototype$8.changes = function(out) {\n    var adds = this._adds,\n        mods = this._mods,\n        prev = this._prev,\n        drop = this._drop,\n        add = out.add,\n        rem = out.rem,\n        mod = out.mod,\n        cell, key, i, n;\n\n    if (prev) for (key in prev) {\n      cell = prev[key];\n      if (!drop || cell.num) rem.push(cell.tuple);\n    }\n\n    for (i=0, n=this._alen; i<n; ++i) {\n      add.push(this.celltuple(adds[i]));\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i=0, n=this._mlen; i<n; ++i) {\n      cell = mods[i];\n      (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n    this._prev = null;\n    return out;\n  };\n\n  // epsilon bias to offset floating point error (#1737)\n  const EPSILON = 1e-14;\n\n  /**\n   * Generates a binning function for discretizing data.\n   * @constructor\n   * @param {object} params - The parameters for this operator. The\n   *   provided values should be valid options for the {@link bin} function.\n   * @param {function(object): *} params.field - The data field to bin.\n   */\n  function Bin(params) {\n    Transform.call(this, null, params);\n  }\n\n  Bin.Definition = {\n    \"type\": \"Bin\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"interval\", \"type\": \"boolean\", \"default\": true },\n      { \"name\": \"anchor\", \"type\": \"number\" },\n      { \"name\": \"maxbins\", \"type\": \"number\", \"default\": 20 },\n      { \"name\": \"base\", \"type\": \"number\", \"default\": 10 },\n      { \"name\": \"divide\", \"type\": \"number\", \"array\": true, \"default\": [5, 2] },\n      { \"name\": \"extent\", \"type\": \"number\", \"array\": true, \"length\": 2, \"required\": true },\n      { \"name\": \"span\", \"type\": \"number\" },\n      { \"name\": \"step\", \"type\": \"number\" },\n      { \"name\": \"steps\", \"type\": \"number\", \"array\": true },\n      { \"name\": \"minstep\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"nice\", \"type\": \"boolean\", \"default\": true },\n      { \"name\": \"name\", \"type\": \"string\" },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"bin0\", \"bin1\"] }\n    ]\n  };\n\n  var prototype$9 = inherits(Bin, Transform);\n\n  prototype$9.transform = function(_, pulse) {\n    var band = _.interval !== false,\n        bins = this._bins(_),\n        start = bins.start,\n        step = bins.step,\n        as = _.as || ['bin0', 'bin1'],\n        b0 = as[0],\n        b1 = as[1],\n        flag;\n\n    if (_.modified()) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n    } else {\n      flag = pulse.modified(accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n    }\n\n    pulse.visit(flag, band\n      ? function(t) {\n          var v = bins(t);\n          // minimum bin value (inclusive)\n          t[b0] = v;\n          // maximum bin value (exclusive)\n          // use convoluted math for better floating point agreement\n          // see https://github.com/vega/vega/issues/830\n          // infinite values propagate through this formula! #2227\n          t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n        }\n      : function(t) { t[b0] = bins(t); }\n    );\n\n    return pulse.modifies(band ? as : b0);\n  };\n\n  prototype$9._bins = function(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    var field = _.field,\n        bins  = bin(_),\n        step  = bins.step,\n        start = bins.start,\n        stop  = start + Math.ceil((bins.stop - start) / step) * step,\n        a, d;\n\n    if ((a = _.anchor) != null) {\n      d = a - (start + step * Math.floor((a - start) / step));\n      start += d;\n      stop += d;\n    }\n\n    var f = function(t) {\n      var v = field(t);\n      return v == null ? null\n        : v < start ? -Infinity\n        : v > stop ? +Infinity\n        : (\n            v = Math.max(start, Math.min(+v, stop - step)),\n            start + step * Math.floor(EPSILON + (v - start) / step)\n          );\n    };\n\n    f.start = start;\n    f.stop = bins.stop;\n    f.step = step;\n\n    return this.value = accessor(\n      f,\n      accessorFields(field),\n      _.name || 'bin_' + accessorName(field)\n    );\n  };\n\n  function SortedList(idFunc, source, input) {\n    var $ = idFunc,\n        data = source || [],\n        add = input || [],\n        rem = {},\n        cnt = 0;\n\n    return {\n      add: function(t) { add.push(t); },\n      remove: function(t) { rem[$(t)] = ++cnt; },\n      size: function() { return data.length; },\n      data: function(compare, resort) {\n        if (cnt) {\n          data = data.filter(function(t) { return !rem[$(t)]; });\n          rem = {};\n          cnt = 0;\n        }\n        if (resort && compare) {\n          data.sort(compare);\n        }\n        if (add.length) {\n          data = compare\n            ? merge(compare, data, add.sort(compare))\n            : data.concat(add);\n          add = [];\n        }\n        return data;\n      }\n    }\n  }\n\n  /**\n   * Collects all data tuples that pass through this operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for additionally sorting the collected tuples.\n   */\n  function Collect(params) {\n    Transform.call(this, [], params);\n  }\n\n  Collect.Definition = {\n    \"type\": \"Collect\",\n    \"metadata\": {\"source\": true},\n    \"params\": [\n      { \"name\": \"sort\", \"type\": \"compare\" }\n    ]\n  };\n\n  var prototype$a = inherits(Collect, Transform);\n\n  prototype$a.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        list = SortedList(tupleid, this.value, out.materialize(out.ADD).add),\n        sort = _.sort,\n        mod = pulse.changed() || (sort &&\n              (_.modified('sort') || pulse.modified(sort.fields)));\n\n    out.visit(out.REM, list.remove);\n\n    this.modified(mod);\n    this.value = out.source = list.data(stableCompare(sort), mod);\n\n    // propagate tree root if defined\n    if (pulse.source && pulse.source.root) {\n      this.value.root = pulse.source.root;\n    }\n\n    return out;\n  };\n\n  /**\n   * Generates a comparator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string|function>} params.fields - The fields to compare.\n   * @param {Array<string>} [params.orders] - The sort orders.\n   *   Each entry should be one of \"ascending\" (default) or \"descending\".\n   */\n  function Compare(params) {\n    Operator.call(this, null, update$1, params);\n  }\n\n  inherits(Compare, Operator);\n\n  function update$1(_) {\n    return (this.value && !_.modified())\n      ? this.value\n      : compare(_.fields, _.orders);\n  }\n\n  /**\n   * Count regexp-defined pattern occurrences in a text field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the text field.\n   * @param {string} [params.pattern] - RegExp string defining the text pattern.\n   * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n   * @param {string} [params.stopwords] - RegExp string of words to ignore.\n   */\n  function CountPattern(params) {\n    Transform.call(this, null, params);\n  }\n\n  CountPattern.Definition = {\n    \"type\": \"CountPattern\",\n    \"metadata\": {\"generates\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"case\", \"type\": \"enum\", \"values\": [\"upper\", \"lower\", \"mixed\"], \"default\": \"mixed\" },\n      { \"name\": \"pattern\", \"type\": \"string\", \"default\": \"[\\\\w\\\"]+\" },\n      { \"name\": \"stopwords\", \"type\": \"string\", \"default\": \"\" },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"text\", \"count\"] }\n    ]\n  };\n\n  function tokenize(text, tcase, match) {\n    switch (tcase) {\n      case 'upper': text = text.toUpperCase(); break;\n      case 'lower': text = text.toLowerCase(); break;\n    }\n    return text.match(match);\n  }\n\n  var prototype$b = inherits(CountPattern, Transform);\n\n  prototype$b.transform = function(_, pulse) {\n    function process(update) {\n      return function(tuple) {\n        var tokens = tokenize(get(tuple), _.case, match) || [], t;\n        for (var i=0, n=tokens.length; i<n; ++i) {\n          if (!stop.test(t = tokens[i])) update(t);\n        }\n      };\n    }\n\n    var init = this._parameterCheck(_, pulse),\n        counts = this._counts,\n        match = this._match,\n        stop = this._stop,\n        get = _.field,\n        as = _.as || ['text', 'count'],\n        add = process(function(t) { counts[t] = 1 + (counts[t] || 0); }),\n        rem = process(function(t) { counts[t] -= 1; });\n\n    if (init) {\n      pulse.visit(pulse.SOURCE, add);\n    } else {\n      pulse.visit(pulse.ADD, add);\n      pulse.visit(pulse.REM, rem);\n    }\n\n    return this._finish(pulse, as); // generate output tuples\n  };\n\n  prototype$b._parameterCheck = function(_, pulse) {\n    var init = false;\n\n    if (_.modified('stopwords') || !this._stop) {\n      this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n      init = true;\n    }\n\n    if (_.modified('pattern') || !this._match) {\n      this._match = new RegExp((_.pattern || '[\\\\w\\']+'), 'g');\n      init = true;\n    }\n\n    if (_.modified('field') || pulse.modified(_.field.fields)) {\n      init = true;\n    }\n\n    if (init) this._counts = {};\n    return init;\n  };\n\n  prototype$b._finish = function(pulse, as) {\n    var counts = this._counts,\n        tuples = this._tuples || (this._tuples = {}),\n        text = as[0],\n        count = as[1],\n        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        w, t, c;\n\n    for (w in counts) {\n      t = tuples[w];\n      c = counts[w] || 0;\n      if (!t && c) {\n        tuples[w] = (t = ingest({}));\n        t[text] = w;\n        t[count] = c;\n        out.add.push(t);\n      } else if (c === 0) {\n        if (t) out.rem.push(t);\n        counts[w] = null;\n        tuples[w] = null;\n      } else if (t[count] !== c) {\n        t[count] = c;\n        out.mod.push(t);\n      }\n    }\n\n    return out.modifies(as);\n  };\n\n  /**\n   * Perform a cross-product of a tuple stream with itself.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object):boolean} [params.filter] - An optional filter\n   *   function for selectively including tuples in the cross product.\n   * @param {Array<string>} [params.as] - The names of the output fields.\n   */\n  function Cross(params) {\n    Transform.call(this, null, params);\n  }\n\n  Cross.Definition = {\n    \"type\": \"Cross\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"filter\", \"type\": \"expr\" },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"a\", \"b\"] }\n    ]\n  };\n\n  var prototype$c = inherits(Cross, Transform);\n\n  prototype$c.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n        data = this.value,\n        as = _.as || ['a', 'b'],\n        a = as[0], b = as[1],\n        reset = !data\n            || pulse.changed(pulse.ADD_REM)\n            || _.modified('as')\n            || _.modified('filter');\n\n    if (reset) {\n      if (data) out.rem = data;\n      data = pulse.materialize(pulse.SOURCE).source;\n      out.add = this.value = cross(data, a, b, _.filter || truthy);\n    } else {\n      out.mod = data;\n    }\n\n    out.source = this.value;\n    return out.modifies(as);\n  };\n\n  function cross(input, a, b, filter) {\n    var data = [],\n        t = {},\n        n = input.length,\n        i = 0,\n        j, left;\n\n    for (; i<n; ++i) {\n      t[a] = left = input[i];\n      for (j=0; j<n; ++j) {\n        t[b] = input[j];\n        if (filter(t)) {\n          data.push(ingest(t));\n          t = {};\n          t[a] = left;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  var Distributions = {\n    kde:       randomKDE,\n    mixture:   randomMixture,\n    normal:    randomNormal,\n    lognormal: randomLogNormal,\n    uniform:   randomUniform\n  };\n\n  var DISTRIBUTIONS = 'distributions',\n      FUNCTION = 'function',\n      FIELD = 'field';\n\n  /**\n   * Parse a parameter object for a probability distribution.\n   * @param {object} def - The distribution parameter object.\n   * @param {function():Array<object>} - A method for requesting\n   *   source data. Used for distributions (such as KDE) that\n   *   require sample data points. This method will only be\n   *   invoked if the 'from' parameter for a target data source\n   *   is not provided. Typically this method returns backing\n   *   source data for a Pulse object.\n   * @return {object} - The output distribution object.\n   */\n  function parse$2(def, data) {\n    var func = def[FUNCTION];\n    if (!hasOwnProperty(Distributions, func)) {\n      error('Unknown distribution function: ' + func);\n    }\n\n    var d = Distributions[func]();\n\n    for (var name in def) {\n      // if data field, extract values\n      if (name === FIELD) {\n        d.data((def.from || data()).map(def[name]));\n      }\n\n      // if distribution mixture, recurse to parse each definition\n      else if (name === DISTRIBUTIONS) {\n        d[name](def[name].map(function(_) { return parse$2(_, data); }));\n      }\n\n      // otherwise, simply set the parameter\n      else if (typeof d[name] === FUNCTION) {\n        d[name](def[name]);\n      }\n    }\n\n    return d;\n  }\n\n  /**\n   * Grid sample points for a probability density. Given a distribution and\n   * a sampling extent, will generate points suitable for plotting either\n   * PDF (probability density function) or CDF (cumulative distribution\n   * function) curves.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.distribution - The probability distribution. This\n   *   is an object parameter dependent on the distribution type.\n   * @param {string} [params.method='pdf'] - The distribution method to sample.\n   *   One of 'pdf' or 'cdf'.\n   * @param {Array<number>} [params.extent] - The [min, max] extent over which\n   *   to sample the distribution. This argument is required in most cases, but\n   *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n   *   that returns numerical sample points from which the extent can be deduced.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n  function Density(params) {\n    Transform.call(this, null, params);\n  }\n\n  var distributions = [\n    {\n      \"key\": {\"function\": \"normal\"},\n      \"params\": [\n        { \"name\": \"mean\", \"type\": \"number\", \"default\": 0 },\n        { \"name\": \"stdev\", \"type\": \"number\", \"default\": 1 }\n      ]\n    },\n    {\n      \"key\": {\"function\": \"lognormal\"},\n      \"params\": [\n        { \"name\": \"mean\", \"type\": \"number\", \"default\": 0 },\n        { \"name\": \"stdev\", \"type\": \"number\", \"default\": 1 }\n      ]\n    },\n    {\n      \"key\": {\"function\": \"uniform\"},\n      \"params\": [\n        { \"name\": \"min\", \"type\": \"number\", \"default\": 0 },\n        { \"name\": \"max\", \"type\": \"number\", \"default\": 1 }\n      ]\n    },\n    {\n      \"key\": {\"function\": \"kde\"},\n      \"params\": [\n        { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n        { \"name\": \"from\", \"type\": \"data\" },\n        { \"name\": \"bandwidth\", \"type\": \"number\", \"default\": 0 }\n      ]\n    }\n  ];\n\n  var mixture = {\n    \"key\": {\"function\": \"mixture\"},\n    \"params\": [\n      { \"name\": \"distributions\", \"type\": \"param\", \"array\": true,\n        \"params\": distributions },\n      { \"name\": \"weights\", \"type\": \"number\", \"array\": true }\n    ]\n  };\n\n  Density.Definition = {\n    \"type\": \"Density\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"extent\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"steps\", \"type\": \"number\" },\n      { \"name\": \"minsteps\", \"type\": \"number\", \"default\": 25 },\n      { \"name\": \"maxsteps\", \"type\": \"number\", \"default\": 200 },\n      { \"name\": \"method\", \"type\": \"string\", \"default\": \"pdf\",\n        \"values\": [\"pdf\", \"cdf\"] },\n      { \"name\": \"distribution\", \"type\": \"param\",\n        \"params\": distributions.concat(mixture) },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true,\n        \"default\": [\"value\", \"density\"] }\n    ]\n  };\n\n  var prototype$d = inherits(Density, Transform);\n\n  prototype$d.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      var dist = parse$2(_.distribution, source(pulse)),\n          minsteps = _.steps || _.minsteps || 25,\n          maxsteps = _.steps || _.maxsteps || 200,\n          method = _.method || 'pdf';\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        error('Invalid density method: ' + method);\n      }\n      if (!_.extent && !dist.data) {\n        error('Missing density extent parameter.');\n      }\n      method = dist[method];\n\n      var as = _.as || ['value', 'density'],\n          domain = _.extent || extent(dist.data()),\n          values = sampleCurve(method, domain, minsteps, maxsteps).map(v => {\n            var tuple = {};\n            tuple[as[0]] = v[0];\n            tuple[as[1]] = v[1];\n            return ingest(tuple);\n          });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  };\n\n  function source(pulse) {\n    return function() { return pulse.materialize(pulse.SOURCE).source; };\n  }\n\n  // use either provided alias or accessor field name\n  function fieldNames(fields, as) {\n    if (!fields) return null;\n    return fields.map(function(f, i) {\n      return as[i] || accessorName(f);\n    });\n  }\n\n  function partition(data, groupby, field) {\n    var groups = [],\n        get = function(f) { return f(t); },\n        map, i, n, t, k, g;\n\n    // partition data points into groups\n    if (groupby == null) {\n      groups.push(data.map(field));\n    } else {\n      for (map={}, i=0, n=data.length; i<n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n        if (!g) {\n          map[k] = (g = []);\n          g.dims = k;\n          groups.push(g);\n        }\n        g.push(field(t));\n      }\n    }\n\n    return groups;\n  }\n\n  const Output = 'bin';\n\n  /**\n   * Dot density binning for dot plot construction.\n   * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n   * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to bin.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {number} [params.step] - The step size (bin width) within which dots should be\n   *   stacked. Defaults to 1/30 of the extent of the data *field*.\n   * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n   *   stacks should be smoothed to reduce variance.\n   */\n  function DotBin(params) {\n    Transform.call(this, null, params);\n  }\n\n  DotBin.Definition = {\n    \"type\": \"DotBin\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"step\", \"type\": \"number\" },\n      { \"name\": \"smooth\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"as\", \"type\": \"string\", \"default\": Output }\n    ]\n  };\n\n  const prototype$e = inherits(DotBin, Transform);\n\n  prototype$e.transform = function(_, pulse) {\n    if (this.value && !(_.modified() || pulse.changed())) {\n      return pulse; // early exit\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(pulse.source, _.groupby, identity),\n          smooth = _.smooth || false,\n          field = _.field,\n          step = _.step || autostep(source, field),\n          sort = stableCompare((a, b) => field(a) - field(b)),\n          as = _.as || Output,\n          n = groups.length;\n\n    // compute dotplot bins per group\n    let min = Infinity, max = -Infinity, i = 0, j;\n    for (; i<n; ++i) {\n      const g = groups[i].sort(sort);\n      j = -1;\n      for (const v of dotbin(g, step, smooth, field)) {\n        if (v < min) min = v;\n        if (v > max) max = v;\n        g[++j][as] = v;\n      }\n    }\n\n    this.value = {\n      start: min,\n      stop: max,\n      step: step\n    };\n    return pulse.reflow(true).modifies(as);\n  };\n\n  function autostep(data, field) {\n    return span(extent(data, field)) / 30;\n  }\n\n  /**\n   * Wraps an expression function with access to external parameters.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function} params.expr - The expression function. The\n   *  function should accept both a datum and a parameter object.\n   *  This operator's value will be a new function that wraps the\n   *  expression function with access to this operator's parameters.\n   */\n  function Expression(params) {\n    Operator.call(this, null, update$2, params);\n    this.modified(true);\n  }\n\n  inherits(Expression, Operator);\n\n  function update$2(_) {\n    var expr = _.expr;\n    return this.value && !_.modified('expr')\n      ? this.value\n      : accessor(\n          datum => expr(datum, _),\n          accessorFields(expr),\n          accessorName(expr)\n        );\n  }\n\n  /**\n   * Computes extents (min/max) for a data field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field over which to compute extends.\n   */\n  function Extent(params) {\n    Transform.call(this, [undefined, undefined], params);\n  }\n\n  Extent.Definition = {\n    \"type\": \"Extent\",\n    \"metadata\": {},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true }\n    ]\n  };\n\n  var prototype$f = inherits(Extent, Transform);\n\n  prototype$f.transform = function(_, pulse) {\n    var extent = this.value,\n        field = _.field,\n        min = extent[0],\n        max = extent[1],\n        mod;\n\n    mod = pulse.changed()\n       || pulse.modified(field.fields)\n       || _.modified('field');\n\n    if (mod || min == null) {\n      min = +Infinity;\n      max = -Infinity;\n    }\n\n    pulse.visit(mod ? pulse.SOURCE : pulse.ADD, function(t) {\n      var v = field(t);\n      if (v != null) {\n        // coerce to number\n        v = +v;\n        // NaNs will fail all comparisons!\n        if (v < min) min = v;\n        if (v > max) max = v;\n      }\n    });\n\n    if (!Number.isFinite(min) || !Number.isFinite(max)) {\n      let name = accessorName(field);\n      if (name) name = ` for field \"${name}\"`;\n      pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);\n      min = max = undefined;\n    }\n    this.value = [min, max];\n  };\n\n  /**\n   * Provides a bridge between a parent transform and a target subflow that\n   * consumes only a subset of the tuples that pass through the parent.\n   * @constructor\n   * @param {Pulse} pulse - A pulse to use as the value of this operator.\n   * @param {Transform} parent - The parent transform (typically a Facet instance).\n   * @param {Transform} target - A transform that receives the subflow of tuples.\n   */\n  function Subflow(pulse, parent) {\n    Operator.call(this, pulse);\n    this.parent = parent;\n  }\n\n  var prototype$g = inherits(Subflow, Operator);\n\n  prototype$g.connect = function(target) {\n    this.targets().add(target);\n    return (target.source = this);\n  };\n\n  /**\n   * Add an 'add' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being added.\n   */\n  prototype$g.add = function(t) {\n    this.value.add.push(t);\n  };\n\n  /**\n   * Add a 'rem' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being removed.\n   */\n  prototype$g.rem = function(t) {\n    this.value.rem.push(t);\n  };\n\n  /**\n   * Add a 'mod' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being modified.\n   */\n  prototype$g.mod = function(t) {\n    this.value.mod.push(t);\n  };\n\n  /**\n   * Re-initialize this operator's pulse value.\n   * @param {Pulse} pulse - The pulse to copy from.\n   * @see Pulse.init\n   */\n  prototype$g.init = function(pulse) {\n    this.value.init(pulse, pulse.NO_SOURCE);\n  };\n\n  /**\n   * Evaluate this operator. This method overrides the\n   * default behavior to simply return the contained pulse value.\n   * @return {Pulse}\n   */\n  prototype$g.evaluate = function() {\n    // assert: this.value.stamp === pulse.stamp\n    return this.value;\n  };\n\n  /**\n   * Facets a dataflow into a set of subflows based on a key.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): *} params.key - The key field to facet by.\n   */\n  function Facet(params) {\n    Transform.call(this, {}, params);\n    this._keys = fastmap(); // cache previously calculated key values\n\n    // keep track of active subflows, use as targets array for listeners\n    // this allows us to limit propagation to only updated subflows\n    var a = this._targets = [];\n    a.active = 0;\n    a.forEach = function(f) {\n      for (var i=0, n=a.active; i<n; ++i) f(a[i], i, a);\n    };\n  }\n\n  var prototype$h = inherits(Facet, Transform);\n\n  prototype$h.activate = function(flow) {\n    this._targets[this._targets.active++] = flow;\n  };\n\n  prototype$h.subflow = function(key, flow, pulse, parent) {\n    var flows = this.value,\n        sf = hasOwnProperty(flows, key) && flows[key],\n        df, p;\n\n    if (!sf) {\n      p = parent || (p = this._group[key]) && p.tuple;\n      df = pulse.dataflow;\n      sf = df.add(new Subflow(pulse.fork(pulse.NO_SOURCE), this))\n        .connect(flow(df, key, p));\n      flows[key] = sf;\n      this.activate(sf);\n    } else if (sf.value.stamp < pulse.stamp) {\n      sf.init(pulse);\n      this.activate(sf);\n    }\n\n    return sf;\n  };\n\n  prototype$h.transform = function(_, pulse) {\n    var df = pulse.dataflow,\n        self = this,\n        key = _.key,\n        flow = _.subflow,\n        cache = this._keys,\n        rekey = _.modified('key');\n\n    function subflow(key) {\n      return self.subflow(key, flow, pulse);\n    }\n\n    this._group = _.group || {};\n    this._targets.active = 0; // reset list of active subflows\n\n    pulse.visit(pulse.REM, function(t) {\n      var id = tupleid(t),\n          k = cache.get(id);\n      if (k !== undefined) {\n        cache.delete(id);\n        subflow(k).rem(t);\n      }\n    });\n\n    pulse.visit(pulse.ADD, function(t) {\n      var k = key(t);\n      cache.set(tupleid(t), k);\n      subflow(k).add(t);\n    });\n\n    if (rekey || pulse.modified(key.fields)) {\n      pulse.visit(pulse.MOD, function(t) {\n        var id = tupleid(t),\n            k0 = cache.get(id),\n            k1 = key(t);\n        if (k0 === k1) {\n          subflow(k1).mod(t);\n        } else {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    } else if (pulse.changed(pulse.MOD)) {\n      pulse.visit(pulse.MOD, function(t) {\n        subflow(cache.get(tupleid(t))).mod(t);\n      });\n    }\n\n    if (rekey) {\n      pulse.visit(pulse.REFLOW, function(t) {\n        var id = tupleid(t),\n            k0 = cache.get(id),\n            k1 = key(t);\n        if (k0 !== k1) {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    }\n\n    if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n    return pulse;\n  };\n\n  /**\n   * Generates one or more field accessor functions.\n   * If the 'name' parameter is an array, an array of field accessors\n   * will be created and the 'as' parameter will be ignored.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.name - The field name(s) to access.\n   * @param {string} params.as - The accessor function name.\n   */\n  function Field(params) {\n    Operator.call(this, null, update$3, params);\n  }\n\n  inherits(Field, Operator);\n\n  function update$3(_) {\n    return (this.value && !_.modified()) ? this.value\n      : isArray(_.name) ? array(_.name).map(function(f) { return field(f); })\n      : field(_.name, _.as);\n  }\n\n  /**\n   * Filters data tuples according to a predicate function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The predicate expression function\n   *   that determines a tuple's filter status. Truthy values pass the filter.\n   */\n  function Filter(params) {\n    Transform.call(this, fastmap(), params);\n  }\n\n  Filter.Definition = {\n    \"type\": \"Filter\",\n    \"metadata\": {\"changes\": true},\n    \"params\": [\n      { \"name\": \"expr\", \"type\": \"expr\", \"required\": true }\n    ]\n  };\n\n  var prototype$i = inherits(Filter, Transform);\n\n  prototype$i.transform = function(_, pulse) {\n    var df = pulse.dataflow,\n        cache = this.value, // cache ids of filtered tuples\n        output = pulse.fork(),\n        add = output.add,\n        rem = output.rem,\n        mod = output.mod,\n        test = _.expr,\n        isMod = true;\n\n    pulse.visit(pulse.REM, function(t) {\n      var id = tupleid(t);\n      if (!cache.has(id)) rem.push(t);\n      else cache.delete(id);\n    });\n\n    pulse.visit(pulse.ADD, function(t) {\n      if (test(t, _)) add.push(t);\n      else cache.set(tupleid(t), 1);\n    });\n\n    function revisit(t) {\n      var id = tupleid(t),\n          b = test(t, _),\n          s = cache.get(id);\n      if (b && s) {\n        cache.delete(id);\n        add.push(t);\n      } else if (!b && !s) {\n        cache.set(id, 1);\n        rem.push(t);\n      } else if (isMod && b && !s) {\n        mod.push(t);\n      }\n    }\n\n    pulse.visit(pulse.MOD, revisit);\n\n    if (_.modified()) {\n      isMod = false;\n      pulse.visit(pulse.REFLOW, revisit);\n    }\n\n    if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n    return output;\n  };\n\n  /**\n   * Flattens array-typed field values into new data objects.\n   * If multiple fields are specified, they are treated as parallel arrays,\n   * with output values included for each matching index (or null if missing).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of field\n   *   accessors for the tuple fields that should be flattened.\n   * @param {string} [params.index] - Optional output field name for index\n   *   value. If unspecified, no index field is included in the output.\n   * @param {Array<string>} [params.as] - Output field names for flattened\n   *   array fields. Any unspecified fields will use the field name provided\n   *   by the fields accessors.\n   */\n  function Flatten(params) {\n    Transform.call(this, [], params);\n  }\n\n  Flatten.Definition = {\n    \"type\": \"Flatten\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true },\n      { \"name\": \"index\", \"type\": \"string\" },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true }\n    ]\n  };\n\n  var prototype$j = inherits(Flatten, Transform);\n\n  prototype$j.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n        fields = _.fields,\n        as = fieldNames(fields, _.as || []),\n        index = _.index || null,\n        m = as.length;\n\n    // remove any previous results\n    out.rem = this.value;\n\n    // generate flattened tuples\n    pulse.visit(pulse.SOURCE, function(t) {\n      var arrays = fields.map(f => f(t)),\n          maxlen = arrays.reduce((l, a) => Math.max(l, a.length), 0),\n          i = 0, j, d, v;\n\n      for (; i<maxlen; ++i) {\n        d = derive(t);\n        for (j=0; j<m; ++j) {\n          d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n        }\n        if (index) {\n          d[index] = i;\n        }\n        out.add.push(d);\n      }\n    });\n\n    this.value = out.source = out.add;\n    if (index) out.modifies(index);\n    return out.modifies(as);\n  };\n\n  /**\n   * Folds one more tuple fields into multiple tuples in which the field\n   * name and values are available under new 'key' and 'value' fields.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.fields - An array of field accessors\n   *   for the tuple fields that should be folded.\n   * @param {Array<string>} [params.as] - Output field names for folded key\n   *   and value fields, defaults to ['key', 'value'].\n   */\n  function Fold(params) {\n    Transform.call(this, [], params);\n  }\n\n  Fold.Definition = {\n    \"type\": \"Fold\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"key\", \"value\"] }\n    ]\n  };\n\n  var prototype$k = inherits(Fold, Transform);\n\n  prototype$k.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n        fields = _.fields,\n        fnames = fields.map(accessorName),\n        as = _.as || ['key', 'value'],\n        k = as[0],\n        v = as[1],\n        n = fields.length;\n\n    out.rem = this.value;\n\n    pulse.visit(pulse.SOURCE, function(t) {\n      for (var i=0, d; i<n; ++i) {\n        d = derive(t);\n        d[k] = fnames[i];\n        d[v] = fields[i](t);\n        out.add.push(d);\n      }\n    });\n\n    this.value = out.source = out.add;\n    return out.modifies(as);\n  };\n\n  /**\n   * Invokes a function for each data tuple and saves the results as a new field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n   * @param {string} params.as - The field name under which to save the result.\n   * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n   *   added tuples only, and does not update in response to modifications.\n   */\n  function Formula(params) {\n    Transform.call(this, null, params);\n  }\n\n  Formula.Definition = {\n    \"type\": \"Formula\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"expr\", \"type\": \"expr\", \"required\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"required\": true },\n      { \"name\": \"initonly\", \"type\": \"boolean\" }\n    ]\n  };\n\n  var prototype$l = inherits(Formula, Transform);\n\n  prototype$l.transform = function(_, pulse) {\n    var func = _.expr,\n        as = _.as,\n        mod = _.modified(),\n        flag = _.initonly ? pulse.ADD\n          : mod ? pulse.SOURCE\n          : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD\n          : pulse.ADD;\n\n    if (mod) {\n      // parameters updated, need to reflow\n      pulse = pulse.materialize().reflow(true);\n    }\n\n    if (!_.initonly) {\n      pulse.modifies(as);\n    }\n\n    return pulse.visit(flag, t => t[as] = func(t, _));\n  };\n\n  /**\n   * Generates data tuples using a provided generator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Parameters): object} params.generator - A tuple generator\n   *   function. This function is given the operator parameters as input.\n   *   Changes to any additional parameters will not trigger re-calculation\n   *   of previously generated tuples. Only future tuples are affected.\n   * @param {number} params.size - The number of tuples to produce.\n   */\n  function Generate(params) {\n    Transform.call(this, [], params);\n  }\n\n  var prototype$m = inherits(Generate, Transform);\n\n  prototype$m.transform = function(_, pulse) {\n    var data = this.value,\n        out = pulse.fork(pulse.ALL),\n        num = _.size - data.length,\n        gen = _.generator,\n        add, rem, t;\n\n    if (num > 0) {\n      // need more tuples, generate and add\n      for (add=[]; --num >= 0;) {\n        add.push(t = ingest(gen(_)));\n        data.push(t);\n      }\n      out.add = out.add.length\n        ? out.materialize(out.ADD).add.concat(add)\n        : add;\n    } else {\n      // need fewer tuples, remove\n      rem = data.slice(0, -num);\n      out.rem = out.rem.length\n        ? out.materialize(out.REM).rem.concat(rem)\n        : rem;\n      data = data.slice(-num);\n    }\n\n    out.source = this.value = data;\n    return out;\n  };\n\n  var Methods = {\n    value: 'value',\n    median: median,\n    mean: mean,\n    min: min,\n    max: max\n  };\n\n  var Empty = [];\n\n  /**\n   * Impute missing values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to impute.\n   * @param {Array<function(object): *>} [params.groupby] - An array of\n   *   accessors to determine series within which to perform imputation.\n   * @param {function(object): *} params.key - An accessor for a key value.\n   *   Each key value should be unique within a group. New tuples will be\n   *   imputed for any key values that are not found within a group.\n   * @param {Array<*>} [params.keyvals] - Optional array of required key\n   *   values. New tuples will be imputed for any key values that are not\n   *   found within a group. In addition, these values will be automatically\n   *   augmented with the key values observed in the input data.\n   * @param {string} [method='value'] - The imputation method to use. One of\n   *   'value', 'mean', 'median', 'max', 'min'.\n   * @param {*} [value=0] - The constant value to use for imputation\n   *   when using method 'value'.\n   */\n  function Impute(params) {\n    Transform.call(this, [], params);\n  }\n\n  Impute.Definition = {\n    \"type\": \"Impute\",\n    \"metadata\": {\"changes\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"key\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"keyvals\", \"array\": true },\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"method\", \"type\": \"enum\", \"default\": \"value\",\n        \"values\": [\"value\", \"mean\", \"median\", \"max\", \"min\"] },\n      { \"name\": \"value\", \"default\": 0 }\n    ]\n  };\n\n  var prototype$n = inherits(Impute, Transform);\n\n  function getValue(_) {\n    var m = _.method || Methods.value, v;\n\n    if (Methods[m] == null) {\n      error('Unrecognized imputation method: ' + m);\n    } else if (m === Methods.value) {\n      v = _.value !== undefined ? _.value : 0;\n      return function() { return v; };\n    } else {\n      return Methods[m];\n    }\n  }\n\n  function getField(_) {\n    var f = _.field;\n    return function(t) { return t ? f(t) : NaN; };\n  }\n\n  prototype$n.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        impute = getValue(_),\n        field = getField(_),\n        fName = accessorName(_.field),\n        kName = accessorName(_.key),\n        gNames = (_.groupby || []).map(accessorName),\n        groups = partition$1(pulse.source, _.groupby, _.key, _.keyvals),\n        curr = [],\n        prev = this.value,\n        m = groups.domain.length,\n        group, value, gVals, kVal, g, i, j, l, n, t;\n\n    for (g=0, l=groups.length; g<l; ++g) {\n      group = groups[g];\n      gVals = group.values;\n      value = NaN;\n\n      // add tuples for missing values\n      for (j=0; j<m; ++j) {\n        if (group[j] != null) continue;\n        kVal = groups.domain[j];\n\n        t = {_impute: true};\n        for (i=0, n=gVals.length; i<n; ++i) t[gNames[i]] = gVals[i];\n        t[kName] = kVal;\n        t[fName] = Number.isNaN(value) ? (value = impute(group, field)) : value;\n\n        curr.push(ingest(t));\n      }\n    }\n\n    // update pulse with imputed tuples\n    if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n    if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n    this.value = curr;\n\n    return out;\n  };\n\n  function partition$1(data, groupby, key, keyvals) {\n    var get = function(f) { return f(t); },\n        groups = [],\n        domain = keyvals ? keyvals.slice() : [],\n        kMap = {},\n        gMap = {}, gVals, gKey,\n        group, i, j, k, n, t;\n\n    domain.forEach(function(k, i) { kMap[k] = i + 1; });\n\n    for (i=0, n=data.length; i<n; ++i) {\n      t = data[i];\n      k = key(t);\n      j = kMap[k] || (kMap[k] = domain.push(k));\n\n      gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';\n      if (!(group = gMap[gKey])) {\n        group = (gMap[gKey] = []);\n        groups.push(group);\n        group.values = gVals;\n      }\n      group[j-1] = t;\n    }\n\n    groups.domain = domain;\n    return groups;\n  }\n\n  /**\n   * Extend input tuples with aggregate values.\n   * Calcuates aggregate values and joins them with the input stream.\n   * @constructor\n   */\n  function JoinAggregate(params) {\n    Aggregate.call(this, params);\n  }\n\n  JoinAggregate.Definition = {\n    \"type\": \"JoinAggregate\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"fields\", \"type\": \"field\", \"null\": true, \"array\": true },\n      { \"name\": \"ops\", \"type\": \"enum\", \"array\": true, \"values\": ValidAggregateOps },\n      { \"name\": \"as\", \"type\": \"string\", \"null\": true, \"array\": true },\n      { \"name\": \"key\", \"type\": \"field\" }\n    ]\n  };\n\n  var prototype$o = inherits(JoinAggregate, Aggregate);\n\n  prototype$o.transform = function(_, pulse) {\n    var aggr = this,\n        mod = _.modified(),\n        cells;\n\n    // process all input tuples to calculate aggregates\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      cells = aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, function(t) { aggr.add(t); });\n    } else {\n      cells = aggr.value = aggr.value || this.init(_);\n      pulse.visit(pulse.REM, function(t) { aggr.rem(t); });\n      pulse.visit(pulse.ADD, function(t) { aggr.add(t); });\n    }\n\n    // update aggregation cells\n    aggr.changes();\n\n    // write aggregate values to input tuples\n    pulse.visit(pulse.SOURCE, function(t) {\n      extend(t, cells[aggr.cellkey(t)].tuple);\n    });\n\n    return pulse.reflow(mod).modifies(this._outputs);\n  };\n\n  prototype$o.changes = function() {\n    var adds = this._adds,\n        mods = this._mods,\n        i, n;\n\n    for (i=0, n=this._alen; i<n; ++i) {\n      this.celltuple(adds[i]);\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i=0, n=this._mlen; i<n; ++i) {\n      this.celltuple(mods[i]);\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n  };\n\n  /**\n   * Compute kernel density estimates (KDE) for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   to estimate.\n   * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n   *   If zero or unspecified, the bandwidth is automatically determined.\n   * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n   *   output values should be probability estimates (false, default) or\n   *   smoothed counts (true).\n   * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n   *   density (false) or cumulative distribution (true) should be generated.\n   * @param {Array<number>} [params.extent] - The domain extent over which to\n   *   plot the density. If unspecified, the [min, max] data extent is used.\n   * @param {string} [params.resolve='independent'] - Indicates how parameters for\n   *   multiple densities should be resolved. If \"independent\" (the default), each\n   *   density may have its own domain extent and dynamic number of curve sample\n   *   steps. If \"shared\", the KDE transform will ensure that all densities are\n   *   defined over a shared domain and curve steps, enabling stacking.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n  function KDE(params) {\n    Transform.call(this, null, params);\n  }\n\n  KDE.Definition = {\n    \"type\": \"KDE\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"cumulative\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"counts\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"bandwidth\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"extent\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"resolve\", \"type\": \"enum\", \"values\": [\"shared\", \"independent\"], \"default\": \"independent\" },\n      { \"name\": \"steps\", \"type\": \"number\" },\n      { \"name\": \"minsteps\", \"type\": \"number\", \"default\": 25 },\n      { \"name\": \"maxsteps\", \"type\": \"number\", \"default\": 200 },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"default\": [\"value\", \"density\"] }\n    ]\n  };\n\n  var prototype$p = inherits(KDE, Transform);\n\n  prototype$p.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition(source, _.groupby, _.field),\n            names = (_.groupby || []).map(accessorName),\n            bandwidth = _.bandwidth,\n            method = _.cumulative ? 'cdf' : 'pdf',\n            as = _.as || ['value', 'density'],\n            values = [];\n\n      let domain = _.extent,\n          minsteps = _.steps || _.minsteps || 25,\n          maxsteps = _.steps || _.maxsteps || 200;\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        error('Invalid density method: ' + method);\n      }\n\n      if (_.resolve === 'shared') {\n        if (!domain) domain = extent(source, _.field);\n        minsteps = maxsteps = _.steps || maxsteps;\n      }\n\n      groups.forEach(g => {\n        const density = randomKDE(g, bandwidth)[method],\n              scale = _.counts ? g.length : 1,\n              local = domain || extent(g);\n\n        sampleCurve(density, local, minsteps, maxsteps).forEach(v => {\n          const t = {};\n          for (let i=0; i<names.length; ++i) {\n            t[names[i]] = g.dims[i];\n          }\n          t[as[0]] = v[0];\n          t[as[1]] = v[1] * scale;\n          values.push(ingest(t));\n        });\n      });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  };\n\n  /**\n   * Generates a key function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string>} params.fields - The field name(s) for the key function.\n   * @param {boolean} params.flat - A boolean flag indicating if the field names\n   *  should be treated as flat property names, side-stepping nested field\n   *  lookups normally indicated by dot or bracket notation.\n   */\n  function Key(params) {\n    Operator.call(this, null, update$4, params);\n  }\n\n  inherits(Key, Operator);\n\n  function update$4(_) {\n    return (this.value && !_.modified()) ? this.value : key(_.fields, _.flat);\n  }\n\n  /**\n   * Load and parse data from an external source. Marshalls parameter\n   * values and then invokes the Dataflow request method.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.url - The URL to load from.\n   * @param {object} params.format - The data format options.\n   */\n  function Load(params) {\n    Transform.call(this, [], params);\n    this._pending = null;\n  }\n\n  var prototype$q = inherits(Load, Transform);\n\n  prototype$q.transform = function(_, pulse) {\n    const df = pulse.dataflow;\n\n    if (this._pending) {\n      // update state and return pulse\n      return output$1(this, pulse, this._pending);\n    }\n\n    if (stop(_)) return pulse.StopPropagation;\n\n    if (_.values) {\n      // parse and ingest values, return output pulse\n      return output$1(this, pulse, df.parse(_.values, _.format));\n    } else if (_.async) {\n      // return promise for non-blocking async loading\n      const p = df.request(_.url, _.format).then(res => {\n        this._pending = array(res.data);\n        return df => df.touch(this);\n      });\n      return {async: p};\n    } else {\n      // return promise for synchronous loading\n      return df.request(_.url, _.format)\n        .then(res => output$1(this, pulse, array(res.data)));\n    }\n  };\n\n  function stop(_) {\n    return _.modified('async') && !(\n      _.modified('values') || _.modified('url') || _.modified('format')\n    );\n  }\n\n  function output$1(op, pulse, data) {\n    data.forEach(ingest);\n    const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n    out.rem = op.value;\n    op.value = out.source = out.add = data;\n    op._pending = null;\n    return out;\n  }\n\n  /**\n   * Extend tuples by joining them with values from a lookup table.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Map} params.index - The lookup table map.\n   * @param {Array<function(object): *} params.fields - The fields to lookup.\n   * @param {Array<string>} params.as - Output field names for each lookup value.\n   * @param {*} [params.default] - A default value to use if lookup fails.\n   */\n  function Lookup(params) {\n    Transform.call(this, {}, params);\n  }\n\n  Lookup.Definition = {\n    \"type\": \"Lookup\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"index\", \"type\": \"index\", \"params\": [\n          {\"name\": \"from\", \"type\": \"data\", \"required\": true },\n          {\"name\": \"key\", \"type\": \"field\", \"required\": true }\n        ] },\n      { \"name\": \"values\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true },\n      { \"name\": \"default\", \"default\": null }\n    ]\n  };\n\n  var prototype$r = inherits(Lookup, Transform);\n\n  prototype$r.transform = function(_, pulse) {\n    var out = pulse,\n        as = _.as,\n        keys = _.fields,\n        index = _.index,\n        values = _.values,\n        defaultValue = _.default==null ? null : _.default,\n        reset = _.modified(),\n        flag = reset ? pulse.SOURCE : pulse.ADD,\n        n = keys.length,\n        set, m, mods;\n\n    if (values) {\n      m = values.length;\n\n      if (n > 1 && !as) {\n        error('Multi-field lookup requires explicit \"as\" parameter.');\n      }\n      if (as && as.length !== n * m) {\n        error('The \"as\" parameter has too few output field names.');\n      }\n      as = as || values.map(accessorName);\n\n      set = function(t) {\n        for (var i=0, k=0, j, v; i<n; ++i) {\n          v = index.get(keys[i](t));\n          if (v == null) for (j=0; j<m; ++j, ++k) t[as[k]] = defaultValue;\n          else for (j=0; j<m; ++j, ++k) t[as[k]] = values[j](v);\n        }\n      };\n    } else {\n      if (!as) {\n        error('Missing output field names.');\n      }\n\n      set = function(t) {\n        for (var i=0, v; i<n; ++i) {\n          v = index.get(keys[i](t));\n          t[as[i]] = v==null ? defaultValue : v;\n        }\n      };\n    }\n\n    if (reset) {\n      out = pulse.reflow(true);\n    } else {\n      mods = keys.some(function(k) { return pulse.modified(k.fields); });\n      flag |= (mods ? pulse.MOD : 0);\n    }\n    pulse.visit(flag, set);\n\n    return out.modifies(as);\n  };\n\n  /**\n   * Computes global min/max extents over a collection of extents.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<number>>} params.extents - The input extents.\n   */\n  function MultiExtent(params) {\n    Operator.call(this, null, update$5, params);\n  }\n\n  inherits(MultiExtent, Operator);\n\n  function update$5(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    var min = +Infinity,\n        max = -Infinity,\n        ext = _.extents,\n        i, n, e;\n\n    for (i=0, n=ext.length; i<n; ++i) {\n      e = ext[i];\n      if (e[0] < min) min = e[0];\n      if (e[1] > max) max = e[1];\n    }\n    return [min, max];\n  }\n\n  /**\n   * Merge a collection of value arrays.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<*>>} params.values - The input value arrrays.\n   */\n  function MultiValues(params) {\n    Operator.call(this, null, update$6, params);\n  }\n\n  inherits(MultiValues, Operator);\n\n  function update$6(_) {\n    return (this.value && !_.modified())\n      ? this.value\n      : _.values.reduce(function(data, _) { return data.concat(_); }, []);\n  }\n\n  /**\n   * Operator whose value is simply its parameter hash. This operator is\n   * useful for enabling reactive updates to values of nested objects.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function Params(params) {\n    Transform.call(this, null, params);\n  }\n\n  inherits(Params, Transform);\n\n  Params.prototype.transform = function(_, pulse) {\n    this.modified(_.modified());\n    this.value = _;\n    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n  };\n\n  /**\n   * Aggregate and pivot selected field values to become new fields.\n   * This operator is useful to construction cross-tabulations.\n   * @constructor\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n   * @param {function(object): *} params.field - The field to pivot on. The unique\n   *  values of this field become new field names in the output stream.\n   * @param {function(object): *} params.value - The field to populate pivoted fields.\n   *  The aggregate values of this field become the values of the new pivoted fields.\n   * @param {string} [params.op] - The aggregation operation for the value field,\n   *  applied per cell in the output stream. The default is \"sum\".\n   * @param {number} [params.limit] - An optional parameter indicating the maximum\n   *  number of pivoted fields to generate. The pivoted field names are sorted in\n   *  ascending order prior to enforcing the limit.\n   */\n  function Pivot(params) {\n    Aggregate.call(this, params);\n  }\n\n  Pivot.Definition = {\n    \"type\": \"Pivot\",\n    \"metadata\": {\"generates\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"value\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"op\", \"type\": \"enum\", \"values\": ValidAggregateOps, \"default\": \"sum\" },\n      { \"name\": \"limit\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"key\", \"type\": \"field\" }\n    ]\n  };\n\n  var prototype$s = inherits(Pivot, Aggregate);\n\n  prototype$s._transform = prototype$s.transform;\n\n  prototype$s.transform = function(_, pulse) {\n    return this._transform(aggregateParams(_, pulse), pulse);\n  };\n\n  // Shoehorn a pivot transform into an aggregate transform!\n  // First collect all unique pivot field values.\n  // Then generate aggregate fields for each output pivot field.\n  function aggregateParams(_, pulse) {\n    var key    = _.field,\n        value  = _.value,\n        op     = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n        fields = accessorFields(key).concat(accessorFields(value)),\n        keys   = pivotKeys(key, _.limit || 0, pulse);\n\n    // if data stream content changes, pivot fields may change\n    // flag parameter modification to ensure re-initialization\n    if (pulse.changed()) _.set('__pivot__', null, null, true);\n\n    return {\n      key:      _.key,\n      groupby:  _.groupby,\n      ops:      keys.map(function() { return op; }),\n      fields:   keys.map(function(k) { return get(k, key, value, fields); }),\n      as:       keys.map(function(k) { return k + ''; }),\n      modified: _.modified.bind(_)\n    };\n  }\n\n  // Generate aggregate field accessor.\n  // Output NaN for non-existent values; aggregator will ignore!\n  function get(k, key, value, fields) {\n    return accessor(\n      function(d) { return key(d) === k ? value(d) : NaN; },\n      fields,\n      k + ''\n    );\n  }\n\n  // Collect (and optionally limit) all unique pivot values.\n  function pivotKeys(key, limit, pulse) {\n    var map = {},\n        list = [];\n\n    pulse.visit(pulse.SOURCE, function(t) {\n      var k = key(t);\n      if (!map[k]) {\n        map[k] = 1;\n        list.push(k);\n      }\n    });\n\n    // TODO? Move this comparator to vega-util?\n    list.sort(function(u, v) {\n      return (u<v||u==null) && v!=null ? -1\n        : (u>v||v==null) && u!=null ? 1\n        : ((v=v instanceof Date?+v:v),(u=u instanceof Date?+u:u))!==u && v===v ? -1\n        : v!==v && u===u ? 1 : 0;\n    });\n\n    return limit ? list.slice(0, limit) : list;\n  }\n\n  /**\n   * Partitions pre-faceted data into tuple subflows.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): Array<object>} params.field - The field\n   *   accessor for an array of subflow tuple objects.\n   */\n  function PreFacet(params) {\n    Facet.call(this, params);\n  }\n\n  var prototype$t = inherits(PreFacet, Facet);\n\n  prototype$t.transform = function(_, pulse) {\n    var self = this,\n        flow = _.subflow,\n        field = _.field;\n\n    if (_.modified('field') || field && pulse.modified(accessorFields(field))) {\n      error('PreFacet does not support field modification.');\n    }\n\n    this._targets.active = 0; // reset list of active subflows\n\n    pulse.visit(pulse.MOD, function(t) {\n      var sf = self.subflow(tupleid(t), flow, pulse, t);\n      field ? field(t).forEach(function(_) { sf.mod(_); }) : sf.mod(t);\n    });\n\n    pulse.visit(pulse.ADD, function(t) {\n      var sf = self.subflow(tupleid(t), flow, pulse, t);\n      field ? field(t).forEach(function(_) { sf.add(ingest(_)); }) : sf.add(t);\n    });\n\n    pulse.visit(pulse.REM, function(t) {\n      var sf = self.subflow(tupleid(t), flow, pulse, t);\n      field ? field(t).forEach(function(_) { sf.rem(_); }) : sf.rem(t);\n    });\n\n    return pulse;\n  };\n\n  /**\n   * Performs a relational projection, copying selected fields from source\n   * tuples to a new set of derived tuples.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *} params.fields - The fields to project,\n   *   as an array of field accessors. If unspecified, all fields will be\n   *   copied with names unchanged.\n   * @param {Array<string>} [params.as] - Output field names for each projected\n   *   field. Any unspecified fields will use the field name provided by\n   *   the field accessor.\n   */\n  function Project(params) {\n    Transform.call(this, null, params);\n  }\n\n  Project.Definition = {\n    \"type\": \"Project\",\n    \"metadata\": {\"generates\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"fields\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"null\": true, \"array\": true }\n    ]\n  };\n\n  var prototype$u = inherits(Project, Transform);\n\n  prototype$u.transform = function(_, pulse) {\n    var fields = _.fields,\n        as = fieldNames(_.fields, _.as || []),\n        derive = fields\n          ? function(s, t) { return project(s, t, fields, as); }\n          : rederive,\n        out, lut;\n\n    if (this.value) {\n      lut = this.value;\n    } else {\n      pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    out = pulse.fork(pulse.NO_SOURCE);\n\n    pulse.visit(pulse.REM, function(t) {\n      var id = tupleid(t);\n      out.rem.push(lut[id]);\n      lut[id] = null;\n    });\n\n    pulse.visit(pulse.ADD, function(t) {\n      var dt = derive(t, ingest({}));\n      lut[tupleid(t)] = dt;\n      out.add.push(dt);\n    });\n\n    pulse.visit(pulse.MOD, function(t) {\n      out.mod.push(derive(t, lut[tupleid(t)]));\n    });\n\n    return out;\n  };\n\n  function project(s, t, fields, as) {\n    for (var i=0, n=fields.length; i<n; ++i) {\n      t[as[i]] = fields[i](s);\n    }\n    return t;\n  }\n\n  /**\n   * Proxy the value of another operator as a pure signal value.\n   * Ensures no tuples are propagated.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {*} params.value - The value to proxy, becomes the value of this operator.\n   */\n  function Proxy(params) {\n    Transform.call(this, null, params);\n  }\n\n  var prototype$v = inherits(Proxy, Transform);\n\n  prototype$v.transform = function(_, pulse) {\n    this.value = _.value;\n    return _.modified('value')\n      ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n      : pulse.StopPropagation;\n  };\n\n  /**\n   * Generates sample quantile values from an input data stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   over which to calculate quantile values.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {Array<number>} [params.probs] - An array of probabilities in\n   *   the range (0, 1) for which to compute quantile values. If not specified,\n   *   the *step* parameter will be used.\n   * @param {Array<number>} [params.step=0.01] - A probability step size for\n   *   sampling quantile values. All values from one-half the step size up to\n   *   1 (exclusive) will be sampled. This parameter is only used if the\n   *   *quantiles* parameter is not provided.\n   */\n  function Quantile(params) {\n    Transform.call(this, null, params);\n  }\n\n  Quantile.Definition = {\n    \"type\": \"Quantile\",\n    \"metadata\": {\"generates\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"probs\", \"type\": \"number\", \"array\": true },\n      { \"name\": \"step\", \"type\": \"number\", \"default\": 0.01 },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"default\": [\"prob\", \"value\"] }\n    ]\n  };\n\n  var prototype$w = inherits(Quantile, Transform);\n\n  var EPSILON$1 = 1e-14;\n\n  prototype$w.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        as = _.as || ['prob', 'value'];\n\n    if (this.value && !_.modified() && !pulse.changed()) {\n      out.source = this.value;\n      return out;\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(source, _.groupby, _.field),\n          names = (_.groupby || []).map(accessorName),\n          values = [],\n          step = _.step || 0.01,\n          p = _.probs || sequence(step/2, 1 - EPSILON$1, step),\n          n = p.length;\n\n    groups.forEach(g => {\n      const q = quantiles(g, p);\n\n      for (let i=0; i<n; ++i) {\n        const t = {};\n        for (let i=0; i<names.length; ++i) {\n          t[names[i]] = g.dims[i];\n        }\n        t[as[0]] = p[i];\n        t[as[1]] = q[i];\n        values.push(ingest(t));\n      }\n    });\n\n    if (this.value) out.rem = this.value;\n    this.value = out.add = out.source = values;\n\n    return out;\n  };\n\n  /**\n   * Relays a data stream between data processing pipelines.\n   * If the derive parameter is set, this transform will create derived\n   * copies of observed tuples. This provides derived data streams in which\n   * modifications to the tuples do not pollute an upstream data source.\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.derive=false] - Boolean flag indicating if\n   *   the transform should make derived copies of incoming tuples.\n   * @constructor\n   */\n  function Relay(params) {\n    Transform.call(this, null, params);\n  }\n\n  var prototype$x = inherits(Relay, Transform);\n\n  prototype$x.transform = function(_, pulse) {\n    var out, lut;\n\n    if (this.value) {\n      lut = this.value;\n    } else {\n      out = pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    if (_.derive) {\n      out = pulse.fork(pulse.NO_SOURCE);\n\n      pulse.visit(pulse.REM, t => {\n        var id = tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n\n      pulse.visit(pulse.ADD, t => {\n        var dt = derive(t);\n        lut[tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n\n      pulse.visit(pulse.MOD, t => {\n        var dt = lut[tupleid(t)], k;\n        for (k in t) {\n          dt[k] = t[k];\n          // down stream writes may overwrite re-derived tuples\n          // conservatively mark all source fields as modified\n          out.modifies(k);\n        }\n        out.mod.push(dt);\n      });\n    }\n\n    return out;\n  };\n\n  /**\n   * Samples tuples passing through this operator.\n   * Uses reservoir sampling to maintain a representative sample.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.size=1000] - The maximum number of samples.\n   */\n  function Sample(params) {\n    Transform.call(this, [], params);\n    this.count = 0;\n  }\n\n  Sample.Definition = {\n    \"type\": \"Sample\",\n    \"metadata\": {},\n    \"params\": [\n      { \"name\": \"size\", \"type\": \"number\", \"default\": 1000 }\n    ]\n  };\n\n  var prototype$y = inherits(Sample, Transform);\n\n  prototype$y.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n        mod = _.modified('size'),\n        num = _.size,\n        res = this.value,\n        cnt = this.count,\n        cap = 0,\n        map = res.reduce(function(m, t) {\n          m[tupleid(t)] = 1;\n          return m;\n        }, {});\n\n    // sample reservoir update function\n    function update(t) {\n      var p, idx;\n\n      if (res.length < num) {\n        res.push(t);\n      } else {\n        idx = ~~((cnt + 1) * exports.random());\n        if (idx < res.length && idx >= cap) {\n          p = res[idx];\n          if (map[tupleid(p)]) out.rem.push(p); // eviction\n          res[idx] = t;\n        }\n      }\n      ++cnt;\n    }\n\n    if (pulse.rem.length) {\n      // find all tuples that should be removed, add to output\n      pulse.visit(pulse.REM, function(t) {\n        var id = tupleid(t);\n        if (map[id]) {\n          map[id] = -1;\n          out.rem.push(t);\n        }\n        --cnt;\n      });\n\n      // filter removed tuples out of the sample reservoir\n      res = res.filter(function(t) { return map[tupleid(t)] !== -1; });\n    }\n\n    if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n      // replenish sample if backing data source is available\n      cap = cnt = res.length;\n      pulse.visit(pulse.SOURCE, function(t) {\n        // update, but skip previously sampled tuples\n        if (!map[tupleid(t)]) update(t);\n      });\n      cap = -1;\n    }\n\n    if (mod && res.length > num) {\n      for (var i=0, n=res.length-num; i<n; ++i) {\n        map[tupleid(res[i])] = -1;\n        out.rem.push(res[i]);\n      }\n      res = res.slice(n);\n    }\n\n    if (pulse.mod.length) {\n      // propagate modified tuples in the sample reservoir\n      pulse.visit(pulse.MOD, function(t) {\n        if (map[tupleid(t)]) out.mod.push(t);\n      });\n    }\n\n    if (pulse.add.length) {\n      // update sample reservoir\n      pulse.visit(pulse.ADD, update);\n    }\n\n    if (pulse.add.length || cap < 0) {\n      // output newly added tuples\n      out.add = res.filter(function(t) { return !map[tupleid(t)]; });\n    }\n\n    this.count = cnt;\n    this.value = out.source = res;\n    return out;\n  };\n\n  /**\n   * Generates data tuples for a specified sequence range of numbers.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} params.start - The first number in the sequence.\n   * @param {number} params.stop - The last number (exclusive) in the sequence.\n   * @param {number} [params.step=1] - The step size between numbers in the sequence.\n   */\n  function Sequence(params) {\n    Transform.call(this, null, params);\n  }\n\n  Sequence.Definition = {\n    \"type\": \"Sequence\",\n    \"metadata\": {\"generates\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"start\", \"type\": \"number\", \"required\": true },\n      { \"name\": \"stop\", \"type\": \"number\", \"required\": true },\n      { \"name\": \"step\", \"type\": \"number\", \"default\": 1 },\n      { \"name\": \"as\", \"type\": \"string\", \"default\": \"data\" }\n    ]\n  };\n\n  var prototype$z = inherits(Sequence, Transform);\n\n  prototype$z.transform = function(_, pulse) {\n    if (this.value && !_.modified()) return;\n\n    var out = pulse.materialize().fork(pulse.MOD),\n        as = _.as || 'data';\n\n    out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n\n    this.value = sequence(_.start, _.stop, _.step || 1).map(function(v) {\n      var t = {};\n      t[as] = v;\n      return ingest(t);\n    });\n\n    out.add = pulse.add.concat(this.value);\n\n    return out;\n  };\n\n  /**\n   * Propagates a new pulse without any tuples so long as the input\n   * pulse contains some added, removed or modified tuples.\n   * @param {object} params - The parameters for this operator.\n   * @constructor\n   */\n  function Sieve(params) {\n    Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n\n  var prototype$A = inherits(Sieve, Transform);\n\n  prototype$A.transform = function(_, pulse) {\n    this.value = pulse.source;\n    return pulse.changed()\n      ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n      : pulse.StopPropagation;\n  };\n\n  const YEAR = 'year';\n  const QUARTER = 'quarter';\n  const MONTH = 'month';\n  const WEEK = 'week';\n  const DATE = 'date';\n  const DAY = 'day';\n  const HOURS = 'hours';\n  const MINUTES = 'minutes';\n  const SECONDS = 'seconds';\n  const MILLISECONDS = 'milliseconds';\n\n  const UNITS = [\n    YEAR,\n    QUARTER,\n    MONTH,\n    WEEK,\n    DATE,\n    DAY,\n    HOURS,\n    MINUTES,\n    SECONDS,\n    MILLISECONDS\n  ].reduce((o, u, i) => (o[u] = 1 + i, o), {});\n\n  function timeUnits(units) {\n    const u = array(units).slice(),\n          m = {};\n\n    // check validity\n    if (!u.length) error('Missing time unit.');\n\n    u.forEach(unit => {\n      if (hasOwnProperty(UNITS, unit)) {\n        m[unit] = 1;\n      } else {\n        error(`Invalid time unit: ${unit}.`);\n      }\n    });\n\n    if ((m[WEEK] || m[DAY]) && (m[QUARTER] || m[MONTH] || m[DATE])) {\n      error(`Incompatible time units: ${units}`);\n    }\n\n    // ensure proper sort order\n    u.sort((a, b) => UNITS[a] - UNITS[b]);\n\n    return u;\n  }\n\n  const t0$1 = new Date;\n\n  function floor(units, step, get, inv, newDate) {\n    const s = step || 1,\n          b = peek(units),\n          _ = (unit, p, key) => {\n            key = key || unit;\n            return getUnit(get[key], inv[key], unit === b && s, p);\n          };\n\n    const t = new Date,\n          u = toSet(units),\n          y = u[YEAR] ? _(YEAR) : constant(2012),\n          m = u[MONTH] ? _(MONTH)\n            : u[QUARTER] ? _(QUARTER)\n            : zero,\n          d = u[WEEK] && u[DAY] ? _(DAY, 1, WEEK + DAY)\n            : u[WEEK] ? _(WEEK, 1)\n            : u[DAY] ? _(DAY, 1)\n            : u[DATE] ? _(DATE, 1)\n            : one,\n          H = u[HOURS] ? _(HOURS) : zero,\n          M = u[MINUTES] ? _(MINUTES) : zero,\n          S = u[SECONDS] ? _(SECONDS) : zero,\n          L = u[MILLISECONDS] ? _(MILLISECONDS) : zero;\n\n    return function(v) {\n      t.setTime(+v);\n      const year = y(t);\n      return newDate(year, m(t), d(t, year), H(t), M(t), S(t), L(t));\n    };\n  }\n\n  function getUnit(f, inv, step, phase) {\n    const u = step <= 1 ? f\n      : phase ? (d, y) => phase + step * Math.floor((f(d, y) - phase) / step)\n      : (d, y) => step * Math.floor(f(d, y) / step);\n    return inv ? (d, y) => inv(u(d, y), y) : u;\n  }\n\n  // returns the day of the year based on week number, day of week,\n  // and the day of the week for the first day of the year\n  function weekday$1(week, day, firstDay) {\n    return day + week * 7 - (firstDay + 6) % 7;\n  }\n\n  // -- LOCAL TIME --\n\n  const localGet = {\n    [YEAR]:         d => d.getFullYear(),\n    [QUARTER]:      d => Math.floor(d.getMonth() / 3),\n    [MONTH]:        d => d.getMonth(),\n    [DATE]:         d => d.getDate(),\n    [HOURS]:        d => d.getHours(),\n    [MINUTES]:      d => d.getMinutes(),\n    [SECONDS]:      d => d.getSeconds(),\n    [MILLISECONDS]: d => d.getMilliseconds(),\n    [WEEK]:         d => localWeekNum(d),\n    [WEEK + DAY]:   (d, y) => weekday$1(localWeekNum(d), d.getDay(), localFirst(y)),\n    [DAY]:          (d, y) => weekday$1(1, d.getDay(), localFirst(y))\n  };\n\n  const localInv = {\n    [QUARTER]: q => 3 * q,\n    [WEEK]:    (w, y) => weekday$1(w, 0, localFirst(y))\n  };\n\n  function localYear(y) {\n    t0$1.setFullYear(y);\n    t0$1.setMonth(0);\n    t0$1.setDate(1);\n    t0$1.setHours(0, 0, 0, 0);\n    return t0$1;\n  }\n\n  function localWeekNum(d) {\n    return sunday.count(localYear(d.getFullYear()) - 1, d);\n  }\n\n  function localFirst(y) {\n    return localYear(y).getDay();\n  }\n\n  function localDate$1(y, m, d, H, M, S, L) {\n    if (0 <= y && y < 100) {\n      var date = new Date(-1, m, d, H, M, S, L);\n      date.setFullYear(y);\n      return date;\n    }\n    return new Date(y, m, d, H, M, S, L);\n  }\n\n  function timeFloor(units, step) {\n    return floor(units, step || 1, localGet, localInv, localDate$1);\n  }\n\n  // -- UTC TIME --\n\n  const utcGet = {\n    [YEAR]:         d => d.getUTCFullYear(),\n    [QUARTER]:      d => Math.floor(d.getUTCMonth() / 3),\n    [MONTH]:        d => d.getUTCMonth(),\n    [DATE]:         d => d.getUTCDate(),\n    [HOURS]:        d => d.getUTCHours(),\n    [MINUTES]:      d => d.getUTCMinutes(),\n    [SECONDS]:      d => d.getUTCSeconds(),\n    [MILLISECONDS]: d => d.getUTCMilliseconds(),\n    [WEEK]:         d => utcWeekNum(d),\n    [DAY]:          (d, y) => weekday$1(1, d.getUTCDay(), utcFirst(y)),\n    [WEEK + DAY]:   (d, y) => weekday$1(utcWeekNum(d), d.getUTCDay(), utcFirst(y))\n  };\n\n  const utcInv = {\n    [QUARTER]: q => 3 * q,\n    [WEEK]:    (w, y) => weekday$1(w, 0, utcFirst(y))\n  };\n\n  function utcWeekNum(d) {\n    const y = Date.UTC(d.getUTCFullYear(), 0, 1);\n    return utcSunday.count(y - 1, d);\n  }\n\n  function utcFirst(y) {\n    t0$1.setTime(Date.UTC(y, 0, 1));\n    return t0$1.getUTCDay();\n  }\n\n  function utcDate$1(y, m, d, H, M, S, L) {\n    if (0 <= y && y < 100) {\n      var date = new Date(Date.UTC(-1, m, d, H, M, S, L));\n      date.setUTCFullYear(d.y);\n      return date;\n    }\n    return new Date(Date.UTC(y, m, d, H, M, S, L));\n  }\n\n  function utcFloor(units, step) {\n    return floor(units, step || 1, utcGet, utcInv, utcDate$1);\n  }\n\n  const timeIntervals = {\n    [YEAR]:         year,\n    [QUARTER]:      month.every(3),\n    [MONTH]:        month,\n    [WEEK]:         sunday,\n    [DATE]:         day,\n    [DAY]:          day,\n    [HOURS]:        hour,\n    [MINUTES]:      minute,\n    [SECONDS]:      second,\n    [MILLISECONDS]: millisecond\n  };\n\n  const utcIntervals = {\n    [YEAR]:         utcYear,\n    [QUARTER]:      utcMonth.every(3),\n    [MONTH]:        utcMonth,\n    [WEEK]:         utcSunday,\n    [DATE]:         utcDay,\n    [DAY]:          utcDay,\n    [HOURS]:        utcHour,\n    [MINUTES]:      utcMinute,\n    [SECONDS]:      second,\n    [MILLISECONDS]: millisecond\n  };\n\n  function timeInterval(unit) {\n    return timeIntervals[unit];\n  }\n\n  function utcInterval(unit) {\n    return utcIntervals[unit];\n  }\n\n  function offset(ival, date, step) {\n    return ival ? ival.offset(date, step) : undefined;\n  }\n\n  function timeOffset(unit, date, step) {\n    return offset(timeInterval(unit), date, step);\n  }\n\n  function utcOffset(unit, date, step) {\n    return offset(utcInterval(unit), date, step);\n  }\n\n  function sequence$1(ival, start, stop, step) {\n    return ival ? ival.range(start, stop, step) : undefined;\n  }\n\n  function timeSequence(unit, start, stop, step) {\n    return sequence$1(timeInterval(unit), start, stop, step);\n  }\n\n  function utcSequence(unit, start, stop, step) {\n    return sequence$1(utcInterval(unit), start, stop, step);\n  }\n\n  const defaultSpecifiers = {\n    [YEAR]: '%Y ',\n    [QUARTER]: 'Q%q ',\n    [MONTH]: '%b ',\n    [DATE]: '%d ',\n    [WEEK]: 'W%U ',\n    [DAY]: '%a ',\n    [HOURS]: '%H:00',\n    [MINUTES]: '00:%M',\n    [SECONDS]: ':%S',\n    [MILLISECONDS]: '.%L',\n    [`${YEAR}-${MONTH}`]: '%Y-%m ',\n    [`${YEAR}-${MONTH}-${DATE}`]: '%Y-%m-%d ',\n    [`${HOURS}-${MINUTES}`]: '%H:%M'\n  };\n\n  function timeUnitSpecifier(units, specifiers) {\n    const s = extend({}, defaultSpecifiers, specifiers),\n          u = timeUnits(units),\n          n = u.length;\n\n    let fmt = '', start = 0, end, key;\n\n    for (start=0; start<n; ) {\n      for (end=u.length; end > start; --end) {\n        key = u.slice(start, end).join('-');\n        if (s[key] != null) {\n          fmt += s[key];\n          start = end;\n          break;\n        }\n      }\n    }\n\n    return fmt.trim();\n  }\n\n  function timeFormat$1(specifier) {\n    return formatter(timeFormat, timeInterval, specifier);\n  }\n\n  function utcFormat$1(specifier) {\n    return formatter(utcFormat, utcInterval, specifier);\n  }\n\n  function formatter(format, interval, specifier) {\n    return isString(specifier)\n      ? format(specifier)\n      : multiFormat(format, interval, specifier);\n  }\n\n  function multiFormat(format, interval, spec) {\n    spec = spec || {};\n    if (!isObject(spec)) {\n      error(`Invalid time multi-format specifier: ${spec}`);\n    }\n\n    const second = interval(SECONDS),\n          minute = interval(MINUTES),\n          hour = interval(HOURS),\n          day = interval(DATE),\n          week = interval(WEEK),\n          month = interval(MONTH),\n          quarter = interval(QUARTER),\n          year = interval(YEAR),\n          L = format(spec[MILLISECONDS] || '.%L'),\n          S = format(spec[SECONDS] || ':%S'),\n          M = format(spec[MINUTES] || '%I:%M'),\n          H = format(spec[HOURS] || '%I %p'),\n          d = format(spec[DATE] || spec[DAY] || '%a %d'),\n          w = format(spec[WEEK] || '%b %d'),\n          m = format(spec[MONTH] || '%B'),\n          q = format(spec[QUARTER] || '%B'),\n          y = format(spec[YEAR] || '%Y');\n\n    return function(date) {\n      return (second(date) < date ? L\n        : minute(date) < date ? S\n        : hour(date) < date ? M\n        : day(date) < date ? H\n        : month(date) < date ? (week(date) < date ? d : w)\n        : year(date) < date ? (quarter(date) < date ? m : q)\n        : y)(date);\n    };\n  }\n\n  const durationSecond$1 = 1000,\n        durationMinute$1 = durationSecond$1 * 60,\n        durationHour$1 = durationMinute$1 * 60,\n        durationDay$1 = durationHour$1 * 24,\n        durationWeek$1 = durationDay$1 * 7,\n        durationMonth = durationDay$1 * 30,\n        durationYear = durationDay$1 * 365;\n\n  const Milli   = [YEAR, MONTH, DATE, HOURS, MINUTES, SECONDS, MILLISECONDS],\n        Seconds = Milli.slice(0, -1),\n        Minutes = Seconds.slice(0, -1),\n        Hours   = Minutes.slice(0, -1),\n        Day     = Hours.slice(0, -1),\n        Week    = [YEAR, WEEK],\n        Month   = [YEAR, MONTH],\n        Year    = [YEAR];\n\n  const intervals = [\n    [Seconds,  1,      durationSecond$1],\n    [Seconds,  5,  5 * durationSecond$1],\n    [Seconds, 15, 15 * durationSecond$1],\n    [Seconds, 30, 30 * durationSecond$1],\n    [Minutes,  1,      durationMinute$1],\n    [Minutes,  5,  5 * durationMinute$1],\n    [Minutes, 15, 15 * durationMinute$1],\n    [Minutes, 30, 30 * durationMinute$1],\n    [  Hours,  1,      durationHour$1  ],\n    [  Hours,  3,  3 * durationHour$1  ],\n    [  Hours,  6,  6 * durationHour$1  ],\n    [  Hours, 12, 12 * durationHour$1  ],\n    [    Day,  1,      durationDay$1   ],\n    [   Week,  1,      durationWeek$1  ],\n    [  Month,  1,      durationMonth ],\n    [  Month,  3,  3 * durationMonth ],\n    [   Year,  1,      durationYear  ]\n  ];\n\n  function timeBin(opt) {\n    const ext = opt.extent,\n          max = opt.maxbins || 40,\n          target = Math.abs(span(ext)) / max;\n\n    let i = bisector(i => i[2]).right(intervals, target),\n        units, step;\n\n    if (i === intervals.length) {\n      units = Year,\n      step = tickStep(ext[0] / durationYear, ext[1] / durationYear, max);\n    } else if (i) {\n      i = intervals[target / intervals[i - 1][2] < intervals[i][2] / target ? i - 1 : i];\n      units = i[0];\n      step = i[1];\n    } else {\n      units = Milli;\n      step = Math.max(tickStep(ext[0], ext[1], max), 1);\n    }\n\n    return {units, step};\n  }\n\n  /**\n   * Discretize dates to specific time units.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The data field containing date/time values.\n   */\n  function TimeUnit(params) {\n    Transform.call(this, null, params);\n  }\n\n  const OUTPUT = ['unit0', 'unit1'];\n\n  TimeUnit.Definition = {\n    \"type\": \"TimeUnit\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"interval\", \"type\": \"boolean\", \"default\": true },\n      { \"name\": \"units\", \"type\": \"string\", \"array\": true },\n      { \"name\": \"step\", \"type\": \"number\", \"default\": 1 },\n      { \"name\": \"maxbins\", \"type\": \"number\", \"default\": 40 },\n      { \"name\": \"extent\", \"type\": \"date\", \"array\": true},\n      { \"name\": \"timezone\", \"type\": \"enum\", \"default\": \"local\", \"values\": [\"local\", \"utc\"] },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": OUTPUT }\n    ]\n  };\n\n  var prototype$B = inherits(TimeUnit, Transform);\n\n  prototype$B.transform = function(_, pulse) {\n    var field = _.field,\n        band = _.interval !== false,\n        utc = _.timezone === 'utc',\n        floor = this._floor(_, pulse),\n        offset = (utc ? utcInterval : timeInterval)(floor.unit).offset,\n        as = _.as || OUTPUT,\n        u0 = as[0],\n        u1 = as[1],\n        min = floor.start || Infinity,\n        max = floor.stop || -Infinity,\n        step = floor.step,\n        flag = pulse.ADD;\n\n    if (_.modified() || pulse.modified(accessorFields(field))) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n      min = Infinity;\n      max = -Infinity;\n    }\n\n    pulse.visit(flag, function(t) {\n      var v = field(t), a, b;\n      if (v == null) {\n        t[u0] = null;\n        if (band) t[u1] = null;\n      } else {\n        t[u0] = a = b = floor(v);\n        if (band) t[u1] = b = offset(a, step);\n        if (a < min) min = a;\n        if (b > max) max = b;\n      }\n    });\n\n    floor.start = min;\n    floor.stop = max;\n\n    return pulse.modifies(band ? as : u0);\n  };\n\n  prototype$B._floor = function(_, pulse) {\n    const utc = _.timezone === 'utc';\n\n    // get parameters\n    let {units, step} = _.units\n      ? {units: _.units, step: _.step || 1}\n      : timeBin({\n        extent:  _.extent || extent(pulse.materialize(pulse.SOURCE).source, _.field),\n        maxbins: _.maxbins\n      });\n\n    // check / standardize time units\n    units = timeUnits(units);\n\n    const prev = this.value || {},\n          floor = (utc ? utcFloor : timeFloor)(units, step);\n\n    floor.unit = peek(units);\n    floor.units = units;\n    floor.step = step;\n    floor.start = prev.start;\n    floor.stop = prev.stop;\n    return this.value = floor;\n  };\n\n  /**\n   * An index that maps from unique, string-coerced, field values to tuples.\n   * Assumes that the field serves as a unique key with no duplicate values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field accessor to index.\n   */\n  function TupleIndex(params) {\n    Transform.call(this, fastmap(), params);\n  }\n\n  var prototype$C = inherits(TupleIndex, Transform);\n\n  prototype$C.transform = function(_, pulse) {\n    var df = pulse.dataflow,\n        field = _.field,\n        index = this.value,\n        mod = true;\n\n    function set(t) { index.set(field(t), t); }\n\n    if (_.modified('field') || pulse.modified(field.fields)) {\n      index.clear();\n      pulse.visit(pulse.SOURCE, set);\n    } else if (pulse.changed()) {\n      pulse.visit(pulse.REM, function(t) { index.delete(field(t)); });\n      pulse.visit(pulse.ADD, set);\n    } else {\n      mod = false;\n    }\n\n    this.modified(mod);\n    if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n    return pulse.fork();\n  };\n\n  /**\n   * Extracts an array of values. Assumes the source data has already been\n   * reduced as needed (e.g., by an upstream Aggregate transform).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The domain field to extract.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for sorting the values. The comparator will be\n   *   applied to backing tuples prior to value extraction.\n   */\n  function Values(params) {\n    Transform.call(this, null, params);\n  }\n\n  var prototype$D = inherits(Values, Transform);\n\n  prototype$D.transform = function(_, pulse) {\n    var run = !this.value\n      || _.modified('field')\n      || _.modified('sort')\n      || pulse.changed()\n      || (_.sort && pulse.modified(_.sort.fields));\n\n    if (run) {\n      this.value = (_.sort\n        ? pulse.source.slice().sort(stableCompare(_.sort))\n        : pulse.source).map(_.field);\n    }\n  };\n\n  function WindowOp(op, field, param, as) {\n    let fn = WindowOps[op](field, param);\n    return {\n      init:   fn.init || zero,\n      update: function(w, t) { t[as] = fn.next(w); }\n    };\n  }\n\n  const WindowOps = {\n    row_number: function() {\n      return {\n        next: w => w.index + 1\n      };\n    },\n    rank: function() {\n      let rank;\n      return {\n        init: () => rank = 1,\n        next: w => {\n          let i = w.index,\n              data = w.data;\n          return (i && w.compare(data[i - 1], data[i])) ? (rank = i + 1) : rank;\n        }\n      };\n    },\n    dense_rank: function() {\n      let drank;\n      return {\n        init: () => drank = 1,\n        next: w => {\n          let i = w.index,\n              d = w.data;\n          return (i && w.compare(d[i - 1], d[i])) ? ++drank : drank;\n        }\n      };\n    },\n    percent_rank: function() {\n      let rank = WindowOps.rank(),\n          next = rank.next;\n      return {\n        init: rank.init,\n        next: w => (next(w) - 1) / (w.data.length - 1)\n      };\n    },\n    cume_dist: function() {\n      let cume;\n      return {\n        init: () => cume = 0,\n        next: w => {\n          let i = w.index,\n              d = w.data,\n              c = w.compare;\n          if (cume < i) {\n            while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;\n            cume = i;\n          }\n          return (1 + cume) / d.length;\n        }\n      };\n    },\n    ntile: function(field, num) {\n      num = +num;\n      if (!(num > 0)) error('ntile num must be greater than zero.');\n      let cume = WindowOps.cume_dist(),\n          next = cume.next;\n      return {\n        init: cume.init,\n        next: w => Math.ceil(num * next(w))\n      };\n    },\n\n    lag: function(field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          let i = w.index - offset;\n          return i >= 0 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    lead: function(field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          let i = w.index + offset,\n              d = w.data;\n          return i < d.length ? field(d[i]) : null;\n        }\n      };\n    },\n\n    first_value: function(field) {\n      return {\n        next: w => field(w.data[w.i0])\n      };\n    },\n    last_value: function(field) {\n      return {\n        next: w => field(w.data[w.i1 - 1])\n      }\n    },\n    nth_value: function(field, nth) {\n      nth = +nth;\n      if (!(nth > 0)) error('nth_value nth must be greater than zero.');\n      return {\n        next: w => {\n          let i = w.i0 + (nth - 1);\n          return i < w.i1 ? field(w.data[i]) : null;\n        }\n      }\n    },\n\n    prev_value: function(field) {\n      let prev;\n      return {\n        init: () => prev = null,\n        next: w => {\n          let v = field(w.data[w.index]);\n          return v != null ? (prev = v) : prev;\n        }\n      }\n    },\n    next_value: function(field) {\n      let v, i;\n      return {\n        init: () => (v = null, i = -1),\n        next: w => {\n          let d = w.data;\n          return w.index <= i ? v\n            : (i = find(field, d, w.index)) < 0\n              ? (i = d.length, v = null)\n              : (v = field(d[i]));\n        }\n      };\n    },\n\n  };\n\n  function find(field, data, index) {\n    for (let n = data.length; index < n; ++index) {\n      let v = field(data[index]);\n      if (v != null) return index;\n    }\n    return -1;\n  }\n\n  var ValidWindowOps = Object.keys(WindowOps);\n\n  function WindowState(_) {\n    let self = this,\n        ops = array(_.ops),\n        fields = array(_.fields),\n        params = array(_.params),\n        as = array(_.as),\n        outputs = self.outputs = [],\n        windows = self.windows = [],\n        inputs = {},\n        map = {},\n        countOnly = true,\n        counts = [],\n        measures = [];\n\n    function visitInputs(f) {\n      array(accessorFields(f)).forEach(_ => inputs[_] = 1);\n    }\n    visitInputs(_.sort);\n\n    ops.forEach(function(op, i) {\n      let field = fields[i],\n          mname = accessorName(field),\n          name = measureName(op, mname, as[i]);\n\n      visitInputs(field);\n      outputs.push(name);\n\n      // Window operation\n      if (hasOwnProperty(WindowOps, op)) {\n        windows.push(WindowOp(op, fields[i], params[i], name));\n      }\n\n      // Aggregate operation\n      else {\n        if (field == null && op !== 'count') {\n          error('Null aggregate field specified.');\n        }\n        if (op === 'count') {\n          counts.push(name);\n          return;\n        }\n\n        countOnly = false;\n        let m = map[mname];\n        if (!m) {\n          m = (map[mname] = []);\n          m.field = field;\n          measures.push(m);\n        }\n        m.push(createMeasure(op, name));\n      }\n    });\n\n    if (counts.length || measures.length) {\n      self.cell = cell(measures, counts, countOnly);\n    }\n\n    self.inputs = Object.keys(inputs);\n  }\n\n  const prototype$E = WindowState.prototype;\n\n  prototype$E.init = function() {\n    this.windows.forEach(_ => _.init());\n    if (this.cell) this.cell.init();\n  };\n\n  prototype$E.update = function(w, t) {\n    let self = this,\n        cell = self.cell,\n        wind = self.windows,\n        data = w.data,\n        m = wind && wind.length,\n        j;\n\n    if (cell) {\n      for (j=w.p0; j<w.i0; ++j) cell.rem(data[j]);\n      for (j=w.p1; j<w.i1; ++j) cell.add(data[j]);\n      cell.set(t);\n    }\n    for (j=0; j<m; ++j) wind[j].update(w, t);\n  };\n\n  function cell(measures, counts, countOnly) {\n    measures = measures.map(m => compileMeasures(m, m.field));\n\n    let cell = {\n      num:   0,\n      agg:   null,\n      store: false,\n      count: counts\n    };\n\n    if (!countOnly) {\n      var n = measures.length,\n          a = cell.agg = Array(n),\n          i = 0;\n      for (; i<n; ++i) a[i] = new measures[i](cell);\n    }\n\n    if (cell.store) {\n      var store = cell.data = new TupleStore();\n    }\n\n    cell.add = function(t) {\n      cell.num += 1;\n      if (countOnly) return;\n      if (store) store.add(t);\n      for (let i=0; i<n; ++i) {\n        a[i].add(a[i].get(t), t);\n      }\n    };\n\n    cell.rem = function(t) {\n      cell.num -= 1;\n      if (countOnly) return;\n      if (store) store.rem(t);\n      for (let i=0; i<n; ++i) {\n        a[i].rem(a[i].get(t), t);\n      }\n    };\n\n    cell.set = function(t) {\n      let i, n;\n\n      // consolidate stored values\n      if (store) store.values();\n\n      // update tuple properties\n      for (i=0, n=counts.length; i<n; ++i) t[counts[i]] = cell.num;\n      if (!countOnly) for (i=0, n=a.length; i<n; ++i) a[i].set(t);\n    };\n\n    cell.init = function() {\n      cell.num = 0;\n      if (store) store.reset();\n      for (let i=0; i<n; ++i) a[i].init();\n    };\n\n    return cell;\n  }\n\n  /**\n   * Perform window calculations and write results to the input stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n   * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors\n   *   for data fields to use as inputs to window operations.\n   * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n   * @param {Array<string>} [params.as] - An array of output field names for window operations.\n   * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n   * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n   *   number alone, ignoring peers with identical sort values. If false (default),\n   *   the window boundaries will be adjusted to include peer values.\n   */\n  function Window(params) {\n    Transform.call(this, {}, params);\n    this._mlen = 0;\n    this._mods = [];\n  }\n\n  Window.Definition = {\n    \"type\": \"Window\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"sort\", \"type\": \"compare\" },\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"ops\", \"type\": \"enum\", \"array\": true, \"values\": ValidWindowOps.concat(ValidAggregateOps) },\n      { \"name\": \"params\", \"type\": \"number\", \"null\": true, \"array\": true },\n      { \"name\": \"fields\", \"type\": \"field\", \"null\": true, \"array\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"null\": true, \"array\": true },\n      { \"name\": \"frame\", \"type\": \"number\", \"null\": true, \"array\": true, \"length\": 2, \"default\": [null, 0] },\n      { \"name\": \"ignorePeers\", \"type\": \"boolean\", \"default\": false }\n    ]\n  };\n\n  var prototype$F = inherits(Window, Transform);\n\n  prototype$F.transform = function(_, pulse) {\n    var self = this,\n        state = self.state,\n        mod = _.modified(),\n        cmp = stableCompare(_.sort),\n        i, n;\n\n    this.stamp = pulse.stamp;\n\n    // initialize window state\n    if (!state || mod) {\n      state = self.state = new WindowState(_);\n    }\n\n    // retrieve group for a tuple\n    var key = groupkey(_.groupby);\n    function group(t) { return self.group(key(t)); }\n\n    // partition input tuples\n    if (mod || pulse.modified(state.inputs)) {\n      self.value = {};\n      pulse.visit(pulse.SOURCE, function(t) { group(t).add(t); });\n    } else {\n      pulse.visit(pulse.REM, function(t) { group(t).remove(t); });\n      pulse.visit(pulse.ADD, function(t) { group(t).add(t); });\n    }\n\n    // perform window calculations for each modified partition\n    for (i=0, n=self._mlen; i<n; ++i) {\n      processPartition(self._mods[i], state, cmp, _);\n    }\n    self._mlen = 0;\n    self._mods = [];\n\n    // TODO don't reflow everything?\n    return pulse.reflow(mod).modifies(state.outputs);\n  };\n\n  prototype$F.group = function(key) {\n    var self = this,\n        group = self.value[key];\n\n    if (!group) {\n      group = self.value[key] = SortedList(tupleid);\n      group.stamp = -1;\n    }\n\n    if (group.stamp < self.stamp) {\n      group.stamp = self.stamp;\n      self._mods[self._mlen++] = group;\n    }\n\n    return group;\n  };\n\n  function processPartition(list, state, cmp, _) {\n    var sort = _.sort,\n        range = sort && !_.ignorePeers,\n        frame = _.frame || [null, 0],\n        data = list.data(cmp), // use cmp for stable sort\n        n = data.length,\n        i = 0,\n        b = range ? bisector(sort) : null,\n        w = {\n          i0: 0, i1: 0, p0: 0, p1: 0, index: 0,\n          data: data, compare: sort || constant(-1)\n        };\n\n    for (state.init(); i<n; ++i) {\n      setWindow(w, frame, i, n);\n      if (range) adjustRange(w, b);\n      state.update(w, data[i]);\n    }\n  }\n\n  function setWindow(w, f, i, n) {\n    w.p0 = w.i0;\n    w.p1 = w.i1;\n    w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n    w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n    w.index = i;\n  }\n\n  // if frame type is 'range', adjust window for peer values\n  function adjustRange(w, bisect) {\n    var r0 = w.i0,\n        r1 = w.i1 - 1,\n        c = w.compare,\n        d = w.data,\n        n = d.length - 1;\n\n    if (r0 > 0 && !c(d[r0], d[r0-1])) w.i0 = bisect.left(d, d[r0]);\n    if (r1 < n && !c(d[r1], d[r1+1])) w.i1 = bisect.right(d, d[r1]);\n  }\n\n\n\n  var tx = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    aggregate: Aggregate,\n    bin: Bin,\n    collect: Collect,\n    compare: Compare,\n    countpattern: CountPattern,\n    cross: Cross,\n    density: Density,\n    dotbin: DotBin,\n    expression: Expression,\n    extent: Extent,\n    facet: Facet,\n    field: Field,\n    filter: Filter,\n    flatten: Flatten,\n    fold: Fold,\n    formula: Formula,\n    generate: Generate,\n    impute: Impute,\n    joinaggregate: JoinAggregate,\n    kde: KDE,\n    key: Key,\n    load: Load,\n    lookup: Lookup,\n    multiextent: MultiExtent,\n    multivalues: MultiValues,\n    params: Params,\n    pivot: Pivot,\n    prefacet: PreFacet,\n    project: Project,\n    proxy: Proxy,\n    quantile: Quantile,\n    relay: Relay,\n    sample: Sample,\n    sequence: Sequence,\n    sieve: Sieve,\n    subflow: Subflow,\n    timeunit: TimeUnit,\n    tupleindex: TupleIndex,\n    values: Values,\n    window: Window\n  });\n\n  const Top = 'top';\n  const Left = 'left';\n  const Right = 'right';\n  const Bottom = 'bottom';\n\n  const TopLeft = 'top-left';\n  const TopRight = 'top-right';\n  const BottomLeft = 'bottom-left';\n  const BottomRight = 'bottom-right';\n\n  const Start = 'start';\n  const Middle = 'middle';\n  const End = 'end';\n\n  const X = 'x';\n  const Y = 'y';\n\n  const Group = 'group';\n\n  const AxisRole = 'axis';\n  const TitleRole = 'title';\n  const FrameRole = 'frame';\n  const ScopeRole = 'scope';\n  const LegendRole = 'legend';\n\n  const RowHeader = 'row-header';\n  const RowFooter = 'row-footer';\n  const RowTitle  = 'row-title';\n  const ColHeader = 'column-header';\n  const ColFooter = 'column-footer';\n  const ColTitle  = 'column-title';\n\n  const Padding = 'padding';\n\n  const Symbols = 'symbol';\n\n  const Fit  = 'fit';\n  const FitX = 'fit-x';\n  const FitY = 'fit-y';\n  const Pad  = 'pad';\n  const None$1 = 'none';\n\n  const All = 'all';\n  const Each = 'each';\n  const Flush = 'flush';\n\n  const Column = 'column';\n  const Row = 'row';\n\n  function Bounds(b) {\n    this.clear();\n    if (b) this.union(b);\n  }\n\n  var prototype$G = Bounds.prototype;\n\n  prototype$G.clone = function() {\n    return new Bounds(this);\n  };\n\n  prototype$G.clear = function() {\n    this.x1 = +Number.MAX_VALUE;\n    this.y1 = +Number.MAX_VALUE;\n    this.x2 = -Number.MAX_VALUE;\n    this.y2 = -Number.MAX_VALUE;\n    return this;\n  };\n\n  prototype$G.empty = function() {\n    return (\n      this.x1 === +Number.MAX_VALUE &&\n      this.y1 === +Number.MAX_VALUE &&\n      this.x2 === -Number.MAX_VALUE &&\n      this.y2 === -Number.MAX_VALUE\n    );\n  };\n\n  prototype$G.equals = function(b) {\n    return (\n      this.x1 === b.x1 &&\n      this.y1 === b.y1 &&\n      this.x2 === b.x2 &&\n      this.y2 === b.y2\n    );\n  };\n\n  prototype$G.set = function(x1, y1, x2, y2) {\n    if (x2 < x1) {\n      this.x2 = x1;\n      this.x1 = x2;\n    } else {\n      this.x1 = x1;\n      this.x2 = x2;\n    }\n    if (y2 < y1) {\n      this.y2 = y1;\n      this.y1 = y2;\n    } else {\n      this.y1 = y1;\n      this.y2 = y2;\n    }\n    return this;\n  };\n\n  prototype$G.add = function(x, y) {\n    if (x < this.x1) this.x1 = x;\n    if (y < this.y1) this.y1 = y;\n    if (x > this.x2) this.x2 = x;\n    if (y > this.y2) this.y2 = y;\n    return this;\n  };\n\n  prototype$G.expand = function(d) {\n    this.x1 -= d;\n    this.y1 -= d;\n    this.x2 += d;\n    this.y2 += d;\n    return this;\n  };\n\n  prototype$G.round = function() {\n    this.x1 = Math.floor(this.x1);\n    this.y1 = Math.floor(this.y1);\n    this.x2 = Math.ceil(this.x2);\n    this.y2 = Math.ceil(this.y2);\n    return this;\n  };\n\n  prototype$G.scale = function(s) {\n    this.x1 *= s;\n    this.y1 *= s;\n    this.x2 *= s;\n    this.y2 *= s;\n    return this;\n  };\n\n  prototype$G.translate = function(dx, dy) {\n    this.x1 += dx;\n    this.x2 += dx;\n    this.y1 += dy;\n    this.y2 += dy;\n    return this;\n  };\n\n  prototype$G.rotate = function(angle, x, y) {\n    const p = this.rotatedPoints(angle, x, y);\n    return this.clear()\n      .add(p[0], p[1])\n      .add(p[2], p[3])\n      .add(p[4], p[5])\n      .add(p[6], p[7]);\n  };\n\n  prototype$G.rotatedPoints = function(angle, x, y) {\n    var {x1, y1, x2, y2} = this,\n        cos = Math.cos(angle),\n        sin = Math.sin(angle),\n        cx = x - x*cos + y*sin,\n        cy = y - x*sin - y*cos;\n\n    return [\n      cos*x1 - sin*y1 + cx, sin*x1 + cos*y1 + cy,\n      cos*x1 - sin*y2 + cx, sin*x1 + cos*y2 + cy,\n      cos*x2 - sin*y1 + cx, sin*x2 + cos*y1 + cy,\n      cos*x2 - sin*y2 + cx, sin*x2 + cos*y2 + cy\n    ];\n  };\n\n  prototype$G.union = function(b) {\n    if (b.x1 < this.x1) this.x1 = b.x1;\n    if (b.y1 < this.y1) this.y1 = b.y1;\n    if (b.x2 > this.x2) this.x2 = b.x2;\n    if (b.y2 > this.y2) this.y2 = b.y2;\n    return this;\n  };\n\n  prototype$G.intersect = function(b) {\n    if (b.x1 > this.x1) this.x1 = b.x1;\n    if (b.y1 > this.y1) this.y1 = b.y1;\n    if (b.x2 < this.x2) this.x2 = b.x2;\n    if (b.y2 < this.y2) this.y2 = b.y2;\n    return this;\n  };\n\n  prototype$G.encloses = function(b) {\n    return b && (\n      this.x1 <= b.x1 &&\n      this.x2 >= b.x2 &&\n      this.y1 <= b.y1 &&\n      this.y2 >= b.y2\n    );\n  };\n\n  prototype$G.alignsWith = function(b) {\n    return b && (\n      this.x1 == b.x1 ||\n      this.x2 == b.x2 ||\n      this.y1 == b.y1 ||\n      this.y2 == b.y2\n    );\n  };\n\n  prototype$G.intersects = function(b) {\n    return b && !(\n      this.x2 < b.x1 ||\n      this.x1 > b.x2 ||\n      this.y2 < b.y1 ||\n      this.y1 > b.y2\n    );\n  };\n\n  prototype$G.contains = function(x, y) {\n    return !(\n      x < this.x1 ||\n      x > this.x2 ||\n      y < this.y1 ||\n      y > this.y2\n    );\n  };\n\n  prototype$G.width = function() {\n    return this.x2 - this.x1;\n  };\n\n  prototype$G.height = function() {\n    return this.y2 - this.y1;\n  };\n\n  var gradient_id = 0;\n\n  const patternPrefix = 'p_';\n\n  function isGradient(value) {\n    return value && value.gradient;\n  }\n\n  function gradientRef(g, defs, base) {\n    let id = g.id,\n        type = g.gradient,\n        prefix = type === 'radial' ? patternPrefix : '';\n\n    // check id, assign default values as needed\n    if (!id) {\n      id = g.id = 'gradient_' + (gradient_id++);\n      if (type === 'radial') {\n        g.x1 = get$1(g.x1, 0.5);\n        g.y1 = get$1(g.y1, 0.5);\n        g.r1 = get$1(g.r1, 0);\n        g.x2 = get$1(g.x2, 0.5);\n        g.y2 = get$1(g.y2, 0.5);\n        g.r2 = get$1(g.r2, 0.5);\n        prefix = patternPrefix;\n      } else {\n        g.x1 = get$1(g.x1, 0);\n        g.y1 = get$1(g.y1, 0);\n        g.x2 = get$1(g.x2, 1);\n        g.y2 = get$1(g.y2, 0);\n      }\n    }\n\n    // register definition\n    defs[id] = g;\n\n    // return url reference\n    return 'url(' + (base || '') + '#' + prefix + id + ')';\n  }\n\n  function get$1(val, def) {\n    return val != null ? val : def;\n  }\n\n  function Gradient(p0, p1) {\n    var stops = [], gradient;\n    return gradient = {\n      gradient: 'linear',\n      x1: p0 ? p0[0] : 0,\n      y1: p0 ? p0[1] : 0,\n      x2: p1 ? p1[0] : 1,\n      y2: p1 ? p1[1] : 0,\n      stops: stops,\n      stop: function(offset, color) {\n        stops.push({offset: offset, color: color});\n        return gradient;\n      }\n    };\n  }\n\n  function Item(mark) {\n    this.mark = mark;\n    this.bounds = (this.bounds || new Bounds());\n  }\n\n  function GroupItem(mark) {\n    Item.call(this, mark);\n    this.items = (this.items || []);\n  }\n\n  inherits(GroupItem, Item);\n\n  function domCanvas(w, h) {\n    if (typeof document !== 'undefined' && document.createElement) {\n      var c = document.createElement('canvas');\n      if (c && c.getContext) {\n        c.width = w;\n        c.height = h;\n        return c;\n      }\n    }\n    return null;\n  }\n\n  function domImage() {\n    return typeof Image !== 'undefined' ? Image : null;\n  }\n\n  function ResourceLoader(customLoader) {\n    this._pending = 0;\n    this._loader = customLoader || loader();\n  }\n\n  var prototype$H = ResourceLoader.prototype;\n\n  prototype$H.pending = function() {\n    return this._pending;\n  };\n\n  function increment(loader) {\n    loader._pending += 1;\n  }\n\n  function decrement(loader) {\n    loader._pending -= 1;\n  }\n\n  prototype$H.sanitizeURL = function(uri) {\n    var loader = this;\n    increment(loader);\n\n    return loader._loader.sanitize(uri, {context:'href'})\n      .then(function(opt) {\n        decrement(loader);\n        return opt;\n      })\n      .catch(function() {\n        decrement(loader);\n        return null;\n      });\n  };\n\n  prototype$H.loadImage = function(uri) {\n    const loader = this,\n          Image = domImage();\n    increment(loader);\n\n    return loader._loader\n      .sanitize(uri, {context: 'image'})\n      .then(function(opt) {\n        const url = opt.href;\n        if (!url || !Image) throw {url: url};\n\n        const img = new Image();\n\n        // set crossOrigin only if cors is defined; empty string sets anonymous mode\n        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin\n        const cors = hasOwnProperty(opt, 'crossOrigin') ? opt.crossOrigin : 'anonymous';\n        if (cors != null) img.crossOrigin = cors;\n\n        // attempt to load image resource\n        img.onload = () => decrement(loader);\n        img.onerror = () => decrement(loader);\n        img.src = url;\n\n        return img;\n      })\n      .catch(function(e) {\n        decrement(loader);\n        return {complete: false, width: 0, height: 0, src: e && e.url || ''};\n      });\n  };\n\n  prototype$H.ready = function() {\n    var loader = this;\n    return new Promise(function(accept) {\n      function poll(value) {\n        if (!loader.pending()) accept(value);\n        else setTimeout(function() { poll(true); }, 10);\n      }\n      poll(false);\n    });\n  };\n\n  var pi = Math.PI,\n      tau = 2 * pi,\n      epsilon$1 = 1e-6,\n      tauEpsilon = tau - epsilon$1;\n\n  function Path() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n\n  function path() {\n    return new Path;\n  }\n\n  Path.prototype = path.prototype = {\n    constructor: Path,\n    moveTo: function(x, y) {\n      this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n    },\n    closePath: function() {\n      if (this._x1 !== null) {\n        this._x1 = this._x0, this._y1 = this._y0;\n        this._ += \"Z\";\n      }\n    },\n    lineTo: function(x, y) {\n      this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n    },\n    quadraticCurveTo: function(x1, y1, x, y) {\n      this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n    },\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n      this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n    },\n    arcTo: function(x1, y1, x2, y2, r) {\n      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n      var x0 = this._x1,\n          y0 = this._y1,\n          x21 = x2 - x1,\n          y21 = y2 - y1,\n          x01 = x0 - x1,\n          y01 = y0 - y1,\n          l01_2 = x01 * x01 + y01 * y01;\n\n      // Is the radius negative? Error.\n      if (r < 0) throw new Error(\"negative radius: \" + r);\n\n      // Is this path empty? Move to (x1,y1).\n      if (this._x1 === null) {\n        this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n      }\n\n      // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n      else if (!(l01_2 > epsilon$1));\n\n      // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n      // Equivalently, is (x1,y1) coincident with (x2,y2)?\n      // Or, is the radius zero? Line to (x1,y1).\n      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {\n        this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n      }\n\n      // Otherwise, draw an arc!\n      else {\n        var x20 = x2 - x0,\n            y20 = y2 - y0,\n            l21_2 = x21 * x21 + y21 * y21,\n            l20_2 = x20 * x20 + y20 * y20,\n            l21 = Math.sqrt(l21_2),\n            l01 = Math.sqrt(l01_2),\n            l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n            t01 = l / l01,\n            t21 = l / l21;\n\n        // If the start tangent is not coincident with (x0,y0), line to.\n        if (Math.abs(t01 - 1) > epsilon$1) {\n          this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n        }\n\n        this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n      }\n    },\n    arc: function(x, y, r, a0, a1, ccw) {\n      x = +x, y = +y, r = +r, ccw = !!ccw;\n      var dx = r * Math.cos(a0),\n          dy = r * Math.sin(a0),\n          x0 = x + dx,\n          y0 = y + dy,\n          cw = 1 ^ ccw,\n          da = ccw ? a0 - a1 : a1 - a0;\n\n      // Is the radius negative? Error.\n      if (r < 0) throw new Error(\"negative radius: \" + r);\n\n      // Is this path empty? Move to (x0,y0).\n      if (this._x1 === null) {\n        this._ += \"M\" + x0 + \",\" + y0;\n      }\n\n      // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n      else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {\n        this._ += \"L\" + x0 + \",\" + y0;\n      }\n\n      // Is this arc empty? We’re done.\n      if (!r) return;\n\n      // Does the angle go the wrong way? Flip the direction.\n      if (da < 0) da = da % tau + tau;\n\n      // Is this a complete circle? Draw two arcs to complete the circle.\n      if (da > tauEpsilon) {\n        this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n      }\n\n      // Is this arc non-empty? Draw an arc!\n      else if (da > epsilon$1) {\n        this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= pi)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n      }\n    },\n    rect: function(x, y, w, h) {\n      this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\n    },\n    toString: function() {\n      return this._;\n    }\n  };\n\n  function constant$1(x) {\n    return function constant() {\n      return x;\n    };\n  }\n\n  var abs = Math.abs;\n  var atan2 = Math.atan2;\n  var cos = Math.cos;\n  var max$1 = Math.max;\n  var min$1 = Math.min;\n  var sin = Math.sin;\n  var sqrt = Math.sqrt;\n\n  var epsilon$2 = 1e-12;\n  var pi$1 = Math.PI;\n  var halfPi = pi$1 / 2;\n  var tau$1 = 2 * pi$1;\n\n  function acos(x) {\n    return x > 1 ? 0 : x < -1 ? pi$1 : Math.acos(x);\n  }\n\n  function asin(x) {\n    return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);\n  }\n\n  function arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n\n  function arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n\n  function arcStartAngle(d) {\n    return d.startAngle;\n  }\n\n  function arcEndAngle(d) {\n    return d.endAngle;\n  }\n\n  function arcPadAngle(d) {\n    return d && d.padAngle; // Note: optional!\n  }\n\n  function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var x10 = x1 - x0, y10 = y1 - y0,\n        x32 = x3 - x2, y32 = y3 - y2,\n        t = y32 * x10 - x32 * y10;\n    if (t * t < epsilon$2) return;\n    t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\n    return [x0 + t * x10, y0 + t * y10];\n  }\n\n  // Compute perpendicular offset line of length rc.\n  // http://mathworld.wolfram.com/Circle-LineIntersection.html\n  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n    var x01 = x0 - x1,\n        y01 = y0 - y1,\n        lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n        ox = lo * y01,\n        oy = -lo * x01,\n        x11 = x0 + ox,\n        y11 = y0 + oy,\n        x10 = x1 + ox,\n        y10 = y1 + oy,\n        x00 = (x11 + x10) / 2,\n        y00 = (y11 + y10) / 2,\n        dx = x10 - x11,\n        dy = y10 - y11,\n        d2 = dx * dx + dy * dy,\n        r = r1 - rc,\n        D = x11 * y10 - x10 * y11,\n        d = (dy < 0 ? -1 : 1) * sqrt(max$1(0, r * r * d2 - D * D)),\n        cx0 = (D * dy - dx * d) / d2,\n        cy0 = (-D * dx - dy * d) / d2,\n        cx1 = (D * dy + dx * d) / d2,\n        cy1 = (-D * dx + dy * d) / d2,\n        dx0 = cx0 - x00,\n        dy0 = cy0 - y00,\n        dx1 = cx1 - x00,\n        dy1 = cy1 - y00;\n\n    // Pick the closer of the two intersection points.\n    // TODO Is there a faster way to determine which intersection to use?\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n    return {\n      cx: cx0,\n      cy: cy0,\n      x01: -ox,\n      y01: -oy,\n      x11: cx0 * (r1 / r - 1),\n      y11: cy0 * (r1 / r - 1)\n    };\n  }\n\n  function d3_arc() {\n    var innerRadius = arcInnerRadius,\n        outerRadius = arcOuterRadius,\n        cornerRadius = constant$1(0),\n        padRadius = null,\n        startAngle = arcStartAngle,\n        endAngle = arcEndAngle,\n        padAngle = arcPadAngle,\n        context = null;\n\n    function arc() {\n      var buffer,\n          r,\n          r0 = +innerRadius.apply(this, arguments),\n          r1 = +outerRadius.apply(this, arguments),\n          a0 = startAngle.apply(this, arguments) - halfPi,\n          a1 = endAngle.apply(this, arguments) - halfPi,\n          da = abs(a1 - a0),\n          cw = a1 > a0;\n\n      if (!context) context = buffer = path();\n\n      // Ensure that the outer radius is always larger than the inner radius.\n      if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n      // Is it a point?\n      if (!(r1 > epsilon$2)) context.moveTo(0, 0);\n\n      // Or is it a circle or annulus?\n      else if (da > tau$1 - epsilon$2) {\n        context.moveTo(r1 * cos(a0), r1 * sin(a0));\n        context.arc(0, 0, r1, a0, a1, !cw);\n        if (r0 > epsilon$2) {\n          context.moveTo(r0 * cos(a1), r0 * sin(a1));\n          context.arc(0, 0, r0, a1, a0, cw);\n        }\n      }\n\n      // Or is it a circular or annular sector?\n      else {\n        var a01 = a0,\n            a11 = a1,\n            a00 = a0,\n            a10 = a1,\n            da0 = da,\n            da1 = da,\n            ap = padAngle.apply(this, arguments) / 2,\n            rp = (ap > epsilon$2) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n            rc = min$1(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n            rc0 = rc,\n            rc1 = rc,\n            t0,\n            t1;\n\n        // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n        if (rp > epsilon$2) {\n          var p0 = asin(rp / r0 * sin(ap)),\n              p1 = asin(rp / r1 * sin(ap));\n          if ((da0 -= p0 * 2) > epsilon$2) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n          else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n          if ((da1 -= p1 * 2) > epsilon$2) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n          else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n        }\n\n        var x01 = r1 * cos(a01),\n            y01 = r1 * sin(a01),\n            x10 = r0 * cos(a10),\n            y10 = r0 * sin(a10);\n\n        // Apply rounded corners?\n        if (rc > epsilon$2) {\n          var x11 = r1 * cos(a11),\n              y11 = r1 * sin(a11),\n              x00 = r0 * cos(a00),\n              y00 = r0 * sin(a00),\n              oc;\n\n          // Restrict the corner radius according to the sector angle.\n          if (da < pi$1 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {\n            var ax = x01 - oc[0],\n                ay = y01 - oc[1],\n                bx = x11 - oc[0],\n                by = y11 - oc[1],\n                kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n                lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n            rc0 = min$1(rc, (r0 - lc) / (kc - 1));\n            rc1 = min$1(rc, (r1 - lc) / (kc + 1));\n          }\n        }\n\n        // Is the sector collapsed to a line?\n        if (!(da1 > epsilon$2)) context.moveTo(x01, y01);\n\n        // Does the sector’s outer ring have rounded corners?\n        else if (rc1 > epsilon$2) {\n          t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n          t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n          context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n          // Have the corners merged?\n          if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n          // Otherwise, draw the two corners and the ring.\n          else {\n            context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n            context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n            context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n          }\n        }\n\n        // Or is the outer ring just a circular arc?\n        else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n        // Is there no inner ring, and it’s a circular sector?\n        // Or perhaps it’s an annular sector collapsed due to padding?\n        if (!(r0 > epsilon$2) || !(da0 > epsilon$2)) context.lineTo(x10, y10);\n\n        // Does the sector’s inner ring (or point) have rounded corners?\n        else if (rc0 > epsilon$2) {\n          t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n          t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n          context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n          // Have the corners merged?\n          if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n          // Otherwise, draw the two corners and the ring.\n          else {\n            context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n            context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n            context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n          }\n        }\n\n        // Or is the inner ring just a circular arc?\n        else context.arc(0, 0, r0, a10, a00, cw);\n      }\n\n      context.closePath();\n\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n          a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$1 / 2;\n      return [cos(a) * r, sin(a) * r];\n    };\n\n    arc.innerRadius = function(_) {\n      return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : innerRadius;\n    };\n\n    arc.outerRadius = function(_) {\n      return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : outerRadius;\n    };\n\n    arc.cornerRadius = function(_) {\n      return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : cornerRadius;\n    };\n\n    arc.padRadius = function(_) {\n      return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), arc) : padRadius;\n    };\n\n    arc.startAngle = function(_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : startAngle;\n    };\n\n    arc.endAngle = function(_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : endAngle;\n    };\n\n    arc.padAngle = function(_) {\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : padAngle;\n    };\n\n    arc.context = function(_) {\n      return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n    };\n\n    return arc;\n  }\n\n  function Linear(context) {\n    this._context = context;\n  }\n\n  Linear.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; // proceed\n        default: this._context.lineTo(x, y); break;\n      }\n    }\n  };\n\n  function curveLinear(context) {\n    return new Linear(context);\n  }\n\n  function x(p) {\n    return p[0];\n  }\n\n  function y(p) {\n    return p[1];\n  }\n\n  function d3_line() {\n    var x$1 = x,\n        y$1 = y,\n        defined = constant$1(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n\n    function line(data) {\n      var i,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer;\n\n      if (context == null) output = curve(buffer = path());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) output.lineStart();\n          else output.lineEnd();\n        }\n        if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    line.x = function(_) {\n      return arguments.length ? (x$1 = typeof _ === \"function\" ? _ : constant$1(+_), line) : x$1;\n    };\n\n    line.y = function(_) {\n      return arguments.length ? (y$1 = typeof _ === \"function\" ? _ : constant$1(+_), line) : y$1;\n    };\n\n    line.defined = function(_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), line) : defined;\n    };\n\n    line.curve = function(_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n    };\n\n    line.context = function(_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n    };\n\n    return line;\n  }\n\n  function d3_area() {\n    var x0 = x,\n        x1 = null,\n        y0 = constant$1(0),\n        y1 = y,\n        defined = constant$1(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n\n    function area(data) {\n      var i,\n          j,\n          k,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer,\n          x0z = new Array(n),\n          y0z = new Array(n);\n\n      if (context == null) output = curve(buffer = path());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) {\n            j = i;\n            output.areaStart();\n            output.lineStart();\n          } else {\n            output.lineEnd();\n            output.lineStart();\n            for (k = i - 1; k >= j; --k) {\n              output.point(x0z[k], y0z[k]);\n            }\n            output.lineEnd();\n            output.areaEnd();\n          }\n        }\n        if (defined0) {\n          x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n        }\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    function arealine() {\n      return d3_line().defined(defined).curve(curve).context(context);\n    }\n\n    area.x = function(_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), x1 = null, area) : x0;\n    };\n\n    area.x0 = function(_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : x0;\n    };\n\n    area.x1 = function(_) {\n      return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : x1;\n    };\n\n    area.y = function(_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), y1 = null, area) : y0;\n    };\n\n    area.y0 = function(_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : y0;\n    };\n\n    area.y1 = function(_) {\n      return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : y1;\n    };\n\n    area.lineX0 =\n    area.lineY0 = function() {\n      return arealine().x(x0).y(y0);\n    };\n\n    area.lineY1 = function() {\n      return arealine().x(x0).y(y1);\n    };\n\n    area.lineX1 = function() {\n      return arealine().x(x1).y(y0);\n    };\n\n    area.defined = function(_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), area) : defined;\n    };\n\n    area.curve = function(_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n    };\n\n    area.context = function(_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n    };\n\n    return area;\n  }\n\n  var circle = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size / pi$1);\n      context.moveTo(r, 0);\n      context.arc(0, 0, r, 0, tau$1);\n    }\n  };\n\n  function d3_symbol() {\n    var type = constant$1(circle),\n        size = constant$1(64),\n        context = null;\n\n    function symbol() {\n      var buffer;\n      if (!context) context = buffer = path();\n      type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    symbol.type = function(_) {\n      return arguments.length ? (type = typeof _ === \"function\" ? _ : constant$1(_), symbol) : type;\n    };\n\n    symbol.size = function(_) {\n      return arguments.length ? (size = typeof _ === \"function\" ? _ : constant$1(+_), symbol) : size;\n    };\n\n    symbol.context = function(_) {\n      return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n    };\n\n    return symbol;\n  }\n\n  function noop() {}\n\n  function point(that, x, y) {\n    that._context.bezierCurveTo(\n      (2 * that._x0 + that._x1) / 3,\n      (2 * that._y0 + that._y1) / 3,\n      (that._x0 + 2 * that._x1) / 3,\n      (that._y0 + 2 * that._y1) / 3,\n      (that._x0 + 4 * that._x1 + x) / 6,\n      (that._y0 + 4 * that._y1 + y) / 6\n    );\n  }\n\n  function Basis(context) {\n    this._context = context;\n  }\n\n  Basis.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 3: point(this, this._x1, this._y1); // proceed\n        case 2: this._context.lineTo(this._x1, this._y1); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function curveBasis(context) {\n    return new Basis(context);\n  }\n\n  function BasisClosed(context) {\n    this._context = context;\n  }\n\n  BasisClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x2, this._y2);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\n          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x2, this._y2);\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._x2 = x, this._y2 = y; break;\n        case 1: this._point = 2; this._x3 = x, this._y3 = y; break;\n        case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function curveBasisClosed(context) {\n    return new BasisClosed(context);\n  }\n\n  function BasisOpen(context) {\n    this._context = context;\n  }\n\n  BasisOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;\n        case 3: this._point = 4; // proceed\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function curveBasisOpen(context) {\n    return new BasisOpen(context);\n  }\n\n  function Bundle(context, beta) {\n    this._basis = new Basis(context);\n    this._beta = beta;\n  }\n\n  Bundle.prototype = {\n    lineStart: function() {\n      this._x = [];\n      this._y = [];\n      this._basis.lineStart();\n    },\n    lineEnd: function() {\n      var x = this._x,\n          y = this._y,\n          j = x.length - 1;\n\n      if (j > 0) {\n        var x0 = x[0],\n            y0 = y[0],\n            dx = x[j] - x0,\n            dy = y[j] - y0,\n            i = -1,\n            t;\n\n        while (++i <= j) {\n          t = i / j;\n          this._basis.point(\n            this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\n            this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\n          );\n        }\n      }\n\n      this._x = this._y = null;\n      this._basis.lineEnd();\n    },\n    point: function(x, y) {\n      this._x.push(+x);\n      this._y.push(+y);\n    }\n  };\n\n  var curveBundle = (function custom(beta) {\n\n    function bundle(context) {\n      return beta === 1 ? new Basis(context) : new Bundle(context, beta);\n    }\n\n    bundle.beta = function(beta) {\n      return custom(+beta);\n    };\n\n    return bundle;\n  })(0.85);\n\n  function point$1(that, x, y) {\n    that._context.bezierCurveTo(\n      that._x1 + that._k * (that._x2 - that._x0),\n      that._y1 + that._k * (that._y2 - that._y0),\n      that._x2 + that._k * (that._x1 - x),\n      that._y2 + that._k * (that._y1 - y),\n      that._x2,\n      that._y2\n    );\n  }\n\n  function Cardinal(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  Cardinal.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x2, this._y2); break;\n        case 3: point$1(this, this._x1, this._y1); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\n        case 2: this._point = 3; // proceed\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var curveCardinal = (function custom(tension) {\n\n    function cardinal(context) {\n      return new Cardinal(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function CardinalClosed(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  CardinalClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.lineTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          this.point(this._x5, this._y5);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var curveCardinalClosed = (function custom(tension) {\n\n    function cardinal(context) {\n      return new CardinalClosed(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function CardinalOpen(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  CardinalOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n        case 3: this._point = 4; // proceed\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var curveCardinalOpen = (function custom(tension) {\n\n    function cardinal(context) {\n      return new CardinalOpen(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function point$2(that, x, y) {\n    var x1 = that._x1,\n        y1 = that._y1,\n        x2 = that._x2,\n        y2 = that._y2;\n\n    if (that._l01_a > epsilon$2) {\n      var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\n          n = 3 * that._l01_a * (that._l01_a + that._l12_a);\n      x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\n      y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\n    }\n\n    if (that._l23_a > epsilon$2) {\n      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\n          m = 3 * that._l23_a * (that._l23_a + that._l12_a);\n      x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\n      y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\n    }\n\n    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\n  }\n\n  function CatmullRom(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRom.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x2, this._y2); break;\n        case 3: this.point(this._x2, this._y2); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; // proceed\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var curveCatmullRom = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function CatmullRomClosed(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.lineTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          this.point(this._x5, this._y5);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var curveCatmullRomClosed = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function CatmullRomOpen(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n        case 3: this._point = 4; // proceed\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var curveCatmullRomOpen = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function LinearClosed(context) {\n    this._context = context;\n  }\n\n  LinearClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._point) this._context.closePath();\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      if (this._point) this._context.lineTo(x, y);\n      else this._point = 1, this._context.moveTo(x, y);\n    }\n  };\n\n  function curveLinearClosed(context) {\n    return new LinearClosed(context);\n  }\n\n  function sign(x) {\n    return x < 0 ? -1 : 1;\n  }\n\n  // Calculate the slopes of the tangents (Hermite-type interpolation) based on\n  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n  // NOV(II), P. 443, 1990.\n  function slope3(that, x2, y2) {\n    var h0 = that._x1 - that._x0,\n        h1 = x2 - that._x1,\n        s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n        s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n        p = (s0 * h1 + s1 * h0) / (h0 + h1);\n    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n  }\n\n  // Calculate a one-sided slope.\n  function slope2(that, t) {\n    var h = that._x1 - that._x0;\n    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n  }\n\n  // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n  // \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n  function point$3(that, t0, t1) {\n    var x0 = that._x0,\n        y0 = that._y0,\n        x1 = that._x1,\n        y1 = that._y1,\n        dx = (x1 - x0) / 3;\n    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n  }\n\n  function MonotoneX(context) {\n    this._context = context;\n  }\n\n  MonotoneX.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 =\n      this._t0 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x1, this._y1); break;\n        case 3: point$3(this, this._t0, slope2(this, this._t0)); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      var t1 = NaN;\n\n      x = +x, y = +y;\n      if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n        default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;\n      }\n\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n      this._t0 = t1;\n    }\n  };\n\n  function MonotoneY(context) {\n    this._context = new ReflectContext(context);\n  }\n\n  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\n    MonotoneX.prototype.point.call(this, y, x);\n  };\n\n  function ReflectContext(context) {\n    this._context = context;\n  }\n\n  ReflectContext.prototype = {\n    moveTo: function(x, y) { this._context.moveTo(y, x); },\n    closePath: function() { this._context.closePath(); },\n    lineTo: function(x, y) { this._context.lineTo(y, x); },\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\n  };\n\n  function monotoneX(context) {\n    return new MonotoneX(context);\n  }\n\n  function monotoneY(context) {\n    return new MonotoneY(context);\n  }\n\n  function Natural(context) {\n    this._context = context;\n  }\n\n  Natural.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x = [];\n      this._y = [];\n    },\n    lineEnd: function() {\n      var x = this._x,\n          y = this._y,\n          n = x.length;\n\n      if (n) {\n        this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n        if (n === 2) {\n          this._context.lineTo(x[1], y[1]);\n        } else {\n          var px = controlPoints(x),\n              py = controlPoints(y);\n          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n          }\n        }\n      }\n\n      if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n      this._x = this._y = null;\n    },\n    point: function(x, y) {\n      this._x.push(+x);\n      this._y.push(+y);\n    }\n  };\n\n  // See https://www.particleincell.com/2012/bezier-splines/ for derivation.\n  function controlPoints(x) {\n    var i,\n        n = x.length - 1,\n        m,\n        a = new Array(n),\n        b = new Array(n),\n        r = new Array(n);\n    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n    for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n    for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n    a[n - 1] = r[n - 1] / b[n - 1];\n    for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\n    b[n - 1] = (x[n] + a[n - 1]) / 2;\n    for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\n    return [a, b];\n  }\n\n  function curveNatural(context) {\n    return new Natural(context);\n  }\n\n  function Step(context, t) {\n    this._context = context;\n    this._t = t;\n  }\n\n  Step.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x = this._y = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; // proceed\n        default: {\n          if (this._t <= 0) {\n            this._context.lineTo(this._x, y);\n            this._context.lineTo(x, y);\n          } else {\n            var x1 = this._x * (1 - this._t) + x * this._t;\n            this._context.lineTo(x1, this._y);\n            this._context.lineTo(x1, y);\n          }\n          break;\n        }\n      }\n      this._x = x, this._y = y;\n    }\n  };\n\n  function curveStep(context) {\n    return new Step(context, 0.5);\n  }\n\n  function stepBefore(context) {\n    return new Step(context, 0);\n  }\n\n  function stepAfter(context) {\n    return new Step(context, 1);\n  }\n\n  var lookup = {\n    'basis': {\n      curve: curveBasis\n    },\n    'basis-closed': {\n      curve: curveBasisClosed\n    },\n    'basis-open': {\n      curve: curveBasisOpen\n    },\n    'bundle': {\n      curve: curveBundle,\n      tension: 'beta',\n      value: 0.85\n    },\n    'cardinal': {\n      curve: curveCardinal,\n      tension: 'tension',\n      value: 0\n    },\n    'cardinal-open': {\n      curve: curveCardinalOpen,\n      tension: 'tension',\n      value: 0\n    },\n    'cardinal-closed': {\n      curve: curveCardinalClosed,\n      tension: 'tension',\n      value: 0\n    },\n    'catmull-rom': {\n      curve: curveCatmullRom,\n      tension: 'alpha',\n      value: 0.5\n    },\n    'catmull-rom-closed': {\n      curve: curveCatmullRomClosed,\n      tension: 'alpha',\n      value: 0.5\n    },\n    'catmull-rom-open': {\n      curve: curveCatmullRomOpen,\n      tension: 'alpha',\n      value: 0.5\n    },\n    'linear': {\n      curve: curveLinear\n    },\n    'linear-closed': {\n      curve: curveLinearClosed\n    },\n    'monotone': {\n      horizontal: monotoneY,\n      vertical:   monotoneX\n    },\n    'natural': {\n      curve: curveNatural\n    },\n    'step': {\n      curve: curveStep\n    },\n    'step-after': {\n      curve: stepAfter\n    },\n    'step-before': {\n      curve: stepBefore\n    }\n  };\n\n  function curves(type, orientation, tension) {\n    var entry = hasOwnProperty(lookup, type) && lookup[type],\n        curve = null;\n\n    if (entry) {\n      curve = entry.curve || entry[orientation || 'vertical'];\n      if (entry.tension && tension != null) {\n        curve = curve[entry.tension](tension);\n      }\n    }\n\n    return curve;\n  }\n\n  // Path parsing and rendering code adapted from fabric.js -- Thanks!\n  var cmdlen = { m:2, l:2, h:1, v:1, c:6, s:4, q:4, t:2, a:7 },\n      regexp = [/([MLHVCSQTAZmlhvcsqtaz])/g, /###/, /(\\d)([-+])/g, /\\s|,|###/];\n\n  function pathParse(pathstr) {\n    var result = [],\n        path,\n        curr,\n        chunks,\n        parsed, param,\n        cmd, len, i, j, n, m;\n\n    // First, break path into command sequence\n    path = pathstr\n      .slice()\n      .replace(regexp[0], '###$1')\n      .split(regexp[1])\n      .slice(1);\n\n    // Next, parse each command in turn\n    for (i=0, n=path.length; i<n; ++i) {\n      curr = path[i];\n      chunks = curr\n        .slice(1)\n        .trim()\n        .replace(regexp[2],'$1###$2')\n        .split(regexp[3]);\n      cmd = curr.charAt(0);\n\n      parsed = [cmd];\n      for (j=0, m=chunks.length; j<m; ++j) {\n        if ((param = +chunks[j]) === param) { // not NaN\n          parsed.push(param);\n        }\n      }\n\n      len = cmdlen[cmd.toLowerCase()];\n      if (parsed.length-1 > len) {\n        for (j=1, m=parsed.length; j<m; j+=len) {\n          result.push([cmd].concat(parsed.slice(j, j+len)));\n        }\n      }\n      else {\n        result.push(parsed);\n      }\n    }\n\n    return result;\n  }\n\n  const DegToRad = Math.PI / 180;\n  const Epsilon = 1e-14;\n  const HalfPi = Math.PI / 2;\n  const Tau = Math.PI * 2;\n  const HalfSqrt3 = Math.sqrt(3) / 2;\n\n  var segmentCache = {};\n  var bezierCache = {};\n\n  var join = [].join;\n\n  // Copied from Inkscape svgtopdf, thanks!\n  function segments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {\n    var key = join.call(arguments);\n    if (segmentCache[key]) {\n      return segmentCache[key];\n    }\n\n    var th = rotateX * DegToRad;\n    var sin_th = Math.sin(th);\n    var cos_th = Math.cos(th);\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n    var px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;\n    var py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;\n    var pl = (px*px) / (rx*rx) + (py*py) / (ry*ry);\n    if (pl > 1) {\n      pl = Math.sqrt(pl);\n      rx *= pl;\n      ry *= pl;\n    }\n\n    var a00 = cos_th / rx;\n    var a01 = sin_th / rx;\n    var a10 = (-sin_th) / ry;\n    var a11 = (cos_th) / ry;\n    var x0 = a00 * ox + a01 * oy;\n    var y0 = a10 * ox + a11 * oy;\n    var x1 = a00 * x + a01 * y;\n    var y1 = a10 * x + a11 * y;\n\n    var d = (x1-x0) * (x1-x0) + (y1-y0) * (y1-y0);\n    var sfactor_sq = 1 / d - 0.25;\n    if (sfactor_sq < 0) sfactor_sq = 0;\n    var sfactor = Math.sqrt(sfactor_sq);\n    if (sweep == large) sfactor = -sfactor;\n    var xc = 0.5 * (x0 + x1) - sfactor * (y1-y0);\n    var yc = 0.5 * (y0 + y1) + sfactor * (x1-x0);\n\n    var th0 = Math.atan2(y0-yc, x0-xc);\n    var th1 = Math.atan2(y1-yc, x1-xc);\n\n    var th_arc = th1-th0;\n    if (th_arc < 0 && sweep === 1) {\n      th_arc += Tau;\n    } else if (th_arc > 0 && sweep === 0) {\n      th_arc -= Tau;\n    }\n\n    var segs = Math.ceil(Math.abs(th_arc / (HalfPi + 0.001)));\n    var result = [];\n    for (var i=0; i<segs; ++i) {\n      var th2 = th0 + i * th_arc / segs;\n      var th3 = th0 + (i+1) * th_arc / segs;\n      result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];\n    }\n\n    return (segmentCache[key] = result);\n  }\n\n  function bezier(params) {\n    var key = join.call(params);\n    if (bezierCache[key]) {\n      return bezierCache[key];\n    }\n\n    var cx = params[0],\n        cy = params[1],\n        th0 = params[2],\n        th1 = params[3],\n        rx = params[4],\n        ry = params[5],\n        sin_th = params[6],\n        cos_th = params[7];\n\n    var a00 = cos_th * rx;\n    var a01 = -sin_th * ry;\n    var a10 = sin_th * rx;\n    var a11 = cos_th * ry;\n\n    var cos_th0 = Math.cos(th0);\n    var sin_th0 = Math.sin(th0);\n    var cos_th1 = Math.cos(th1);\n    var sin_th1 = Math.sin(th1);\n\n    var th_half = 0.5 * (th1 - th0);\n    var sin_th_h2 = Math.sin(th_half * 0.5);\n    var t = (8/3) * sin_th_h2 * sin_th_h2 / Math.sin(th_half);\n    var x1 = cx + cos_th0 - t * sin_th0;\n    var y1 = cy + sin_th0 + t * cos_th0;\n    var x3 = cx + cos_th1;\n    var y3 = cy + sin_th1;\n    var x2 = x3 + t * sin_th1;\n    var y2 = y3 - t * cos_th1;\n\n    return (bezierCache[key] = [\n      a00 * x1 + a01 * y1,  a10 * x1 + a11 * y1,\n      a00 * x2 + a01 * y2,  a10 * x2 + a11 * y2,\n      a00 * x3 + a01 * y3,  a10 * x3 + a11 * y3\n    ]);\n  }\n\n  var temp = ['l', 0, 0, 0, 0, 0, 0, 0];\n\n  function scale(current, sX, sY) {\n    var c = (temp[0] = current[0]);\n    if (c === 'a' || c === 'A') {\n      temp[1] = sX * current[1];\n      temp[2] = sY * current[2];\n      temp[3] = current[3];\n      temp[4] = current[4];\n      temp[5] = current[5];\n      temp[6] = sX * current[6];\n      temp[7] = sY * current[7];\n    } else if (c === 'h' || c === 'H') {\n      temp[1] = sX * current[1];\n    } else if (c === 'v' || c === 'V') {\n      temp[1] = sY * current[1];\n    } else {\n      for (var i=1, n=current.length; i<n; ++i) {\n        temp[i] = (i % 2 == 1 ? sX : sY) * current[i];\n      }\n    }\n    return temp;\n  }\n\n  function pathRender(context, path, l, t, sX, sY) {\n    var current, // current instruction\n        previous = null,\n        x = 0, // current x\n        y = 0, // current y\n        controlX = 0, // current control point x\n        controlY = 0, // current control point y\n        tempX,\n        tempY,\n        tempControlX,\n        tempControlY;\n\n    if (l == null) l = 0;\n    if (t == null) t = 0;\n    if (sX == null) sX = 1;\n    if (sY == null) sY = sX;\n\n    if (context.beginPath) context.beginPath();\n\n    for (var i=0, len=path.length; i<len; ++i) {\n      current = path[i];\n      if (sX !== 1 || sY !== 1) {\n        current = scale(current, sX, sY);\n      }\n\n      switch (current[0]) { // first letter\n\n        case 'l': // lineto, relative\n          x += current[1];\n          y += current[2];\n          context.lineTo(x + l, y + t);\n          break;\n\n        case 'L': // lineto, absolute\n          x = current[1];\n          y = current[2];\n          context.lineTo(x + l, y + t);\n          break;\n\n        case 'h': // horizontal lineto, relative\n          x += current[1];\n          context.lineTo(x + l, y + t);\n          break;\n\n        case 'H': // horizontal lineto, absolute\n          x = current[1];\n          context.lineTo(x + l, y + t);\n          break;\n\n        case 'v': // vertical lineto, relative\n          y += current[1];\n          context.lineTo(x + l, y + t);\n          break;\n\n        case 'V': // verical lineto, absolute\n          y = current[1];\n          context.lineTo(x + l, y + t);\n          break;\n\n        case 'm': // moveTo, relative\n          x += current[1];\n          y += current[2];\n          context.moveTo(x + l, y + t);\n          break;\n\n        case 'M': // moveTo, absolute\n          x = current[1];\n          y = current[2];\n          context.moveTo(x + l, y + t);\n          break;\n\n        case 'c': // bezierCurveTo, relative\n          tempX = x + current[5];\n          tempY = y + current[6];\n          controlX = x + current[3];\n          controlY = y + current[4];\n          context.bezierCurveTo(\n            x + current[1] + l, // x1\n            y + current[2] + t, // y1\n            controlX + l, // x2\n            controlY + t, // y2\n            tempX + l,\n            tempY + t\n          );\n          x = tempX;\n          y = tempY;\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          x = current[5];\n          y = current[6];\n          controlX = current[3];\n          controlY = current[4];\n          context.bezierCurveTo(\n            current[1] + l,\n            current[2] + t,\n            controlX + l,\n            controlY + t,\n            x + l,\n            y + t\n          );\n          break;\n\n        case 's': // shorthand cubic bezierCurveTo, relative\n          // transform to absolute x,y\n          tempX = x + current[3];\n          tempY = y + current[4];\n          // calculate reflection of previous control points\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n          context.bezierCurveTo(\n            controlX + l,\n            controlY + t,\n            x + current[1] + l,\n            y + current[2] + t,\n            tempX + l,\n            tempY + t\n          );\n\n          // set control point to 2nd one of this command\n          // the first control point is assumed to be the reflection of\n          // the second control point on the previous command relative\n          // to the current point.\n          controlX = x + current[1];\n          controlY = y + current[2];\n\n          x = tempX;\n          y = tempY;\n          break;\n\n        case 'S': // shorthand cubic bezierCurveTo, absolute\n          tempX = current[3];\n          tempY = current[4];\n          // calculate reflection of previous control points\n          controlX = 2*x - controlX;\n          controlY = 2*y - controlY;\n          context.bezierCurveTo(\n            controlX + l,\n            controlY + t,\n            current[1] + l,\n            current[2] + t,\n            tempX + l,\n            tempY + t\n          );\n          x = tempX;\n          y = tempY;\n          // set control point to 2nd one of this command\n          // the first control point is assumed to be the reflection of\n          // the second control point on the previous command relative\n          // to the current point.\n          controlX = current[1];\n          controlY = current[2];\n\n          break;\n\n        case 'q': // quadraticCurveTo, relative\n          // transform to absolute x,y\n          tempX = x + current[3];\n          tempY = y + current[4];\n\n          controlX = x + current[1];\n          controlY = y + current[2];\n\n          context.quadraticCurveTo(\n            controlX + l,\n            controlY + t,\n            tempX + l,\n            tempY + t\n          );\n          x = tempX;\n          y = tempY;\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          tempX = current[3];\n          tempY = current[4];\n\n          context.quadraticCurveTo(\n            current[1] + l,\n            current[2] + t,\n            tempX + l,\n            tempY + t\n          );\n          x = tempX;\n          y = tempY;\n          controlX = current[1];\n          controlY = current[2];\n          break;\n\n        case 't': // shorthand quadraticCurveTo, relative\n\n          // transform to absolute x,y\n          tempX = x + current[1];\n          tempY = y + current[2];\n\n          if (previous[0].match(/[QqTt]/) === null) {\n            // If there is no previous command or if the previous command was not a Q, q, T or t,\n            // assume the control point is coincident with the current point\n            controlX = x;\n            controlY = y;\n          }\n          else if (previous[0] === 't') {\n            // calculate reflection of previous control points for t\n            controlX = 2 * x - tempControlX;\n            controlY = 2 * y - tempControlY;\n          }\n          else if (previous[0] === 'q') {\n            // calculate reflection of previous control points for q\n            controlX = 2 * x - controlX;\n            controlY = 2 * y - controlY;\n          }\n\n          tempControlX = controlX;\n          tempControlY = controlY;\n\n          context.quadraticCurveTo(\n            controlX + l,\n            controlY + t,\n            tempX + l,\n            tempY + t\n          );\n          x = tempX;\n          y = tempY;\n          controlX = x + current[1];\n          controlY = y + current[2];\n          break;\n\n        case 'T':\n          tempX = current[1];\n          tempY = current[2];\n\n          // calculate reflection of previous control points\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n          context.quadraticCurveTo(\n            controlX + l,\n            controlY + t,\n            tempX + l,\n            tempY + t\n          );\n          x = tempX;\n          y = tempY;\n          break;\n\n        case 'a':\n          drawArc(context, x + l, y + t, [\n            current[1],\n            current[2],\n            current[3],\n            current[4],\n            current[5],\n            current[6] + x + l,\n            current[7] + y + t\n          ]);\n          x += current[6];\n          y += current[7];\n          break;\n\n        case 'A':\n          drawArc(context, x + l, y + t, [\n            current[1],\n            current[2],\n            current[3],\n            current[4],\n            current[5],\n            current[6] + l,\n            current[7] + t\n          ]);\n          x = current[6];\n          y = current[7];\n          break;\n\n        case 'z':\n        case 'Z':\n          context.closePath();\n          break;\n      }\n      previous = current;\n    }\n  }\n\n  function drawArc(context, x, y, coords) {\n    var seg = segments(\n      coords[5], // end x\n      coords[6], // end y\n      coords[0], // radius x\n      coords[1], // radius y\n      coords[3], // large flag\n      coords[4], // sweep flag\n      coords[2], // rotation\n      x, y\n    );\n    for (var i=0; i<seg.length; ++i) {\n      var bez = bezier(seg[i]);\n      context.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);\n    }\n  }\n\n  var Tan30 = 0.5773502691896257;\n\n  var builtins = {\n    'circle': {\n      draw: function(context, size) {\n        var r = Math.sqrt(size) / 2;\n        context.moveTo(r, 0);\n        context.arc(0, 0, r, 0, Tau);\n      }\n    },\n    'cross': {\n      draw: function(context, size) {\n        var r = Math.sqrt(size) / 2,\n            s = r / 2.5;\n        context.moveTo(-r, -s);\n        context.lineTo(-r, s);\n        context.lineTo(-s, s);\n        context.lineTo(-s, r);\n        context.lineTo(s, r);\n        context.lineTo(s, s);\n        context.lineTo(r, s);\n        context.lineTo(r, -s);\n        context.lineTo(s, -s);\n        context.lineTo(s, -r);\n        context.lineTo(-s, -r);\n        context.lineTo(-s, -s);\n        context.closePath();\n      }\n    },\n    'diamond': {\n      draw: function(context, size) {\n        var r = Math.sqrt(size) / 2;\n        context.moveTo(-r, 0);\n        context.lineTo(0, -r);\n        context.lineTo(r, 0);\n        context.lineTo(0, r);\n        context.closePath();\n      }\n    },\n    'square': {\n      draw: function(context, size) {\n        var w = Math.sqrt(size),\n            x = -w / 2;\n        context.rect(x, x, w, w);\n      }\n    },\n    'arrow': {\n      draw: function(context, size) {\n        var r = Math.sqrt(size) / 2,\n            s = r / 7,\n            t = r / 2.5,\n            v = r / 8;\n        context.moveTo(-s, r);\n        context.lineTo(s, r);\n        context.lineTo(s, -v);\n        context.lineTo(t, -v);\n        context.lineTo(0, -r);\n        context.lineTo(-t, -v);\n        context.lineTo(-s, -v);\n        context.closePath();\n      }\n    },\n    'wedge': {\n      draw: function(context, size) {\n        var r = Math.sqrt(size) / 2,\n            h = HalfSqrt3 * r,\n            o = (h - r * Tan30),\n            b = r / 4;\n        context.moveTo(0, -h - o);\n        context.lineTo(-b, h - o);\n        context.lineTo(b, h - o);\n        context.closePath();\n      }\n    },\n    'triangle': {\n      draw: function(context, size) {\n        var r = Math.sqrt(size) / 2,\n            h = HalfSqrt3 * r,\n            o = (h - r * Tan30);\n        context.moveTo(0, -h - o);\n        context.lineTo(-r, h - o);\n        context.lineTo(r, h - o);\n        context.closePath();\n      }\n    },\n    'triangle-up': {\n      draw: function(context, size) {\n        var r = Math.sqrt(size) / 2,\n            h = HalfSqrt3 * r;\n        context.moveTo(0, -h);\n        context.lineTo(-r, h);\n        context.lineTo(r, h);\n        context.closePath();\n      }\n    },\n    'triangle-down': {\n      draw: function(context, size) {\n        var r = Math.sqrt(size) / 2,\n            h = HalfSqrt3 * r;\n        context.moveTo(0, h);\n        context.lineTo(-r, -h);\n        context.lineTo(r, -h);\n        context.closePath();\n      }\n    },\n    'triangle-right': {\n      draw: function(context, size) {\n        var r = Math.sqrt(size) / 2,\n            h = HalfSqrt3 * r;\n        context.moveTo(h, 0);\n        context.lineTo(-h, -r);\n        context.lineTo(-h, r);\n        context.closePath();\n      }\n    },\n    'triangle-left': {\n      draw: function(context, size) {\n        var r = Math.sqrt(size) / 2,\n            h = HalfSqrt3 * r;\n        context.moveTo(-h, 0);\n        context.lineTo(h, -r);\n        context.lineTo(h, r);\n        context.closePath();\n      }\n    },\n    'stroke': {\n      draw: function(context, size) {\n        var r = Math.sqrt(size) / 2;\n        context.moveTo(-r, 0);\n        context.lineTo(r, 0);\n      }\n    }\n  };\n\n  function symbols(_) {\n    return hasOwnProperty(builtins, _) ? builtins[_] : customSymbol(_);\n  }\n\n  var custom = {};\n\n  function customSymbol(path) {\n    if (!hasOwnProperty(custom, path)) {\n      var parsed = pathParse(path);\n      custom[path] = {\n        draw: function(context, size) {\n          pathRender(context, parsed, 0, 0, Math.sqrt(size) / 2);\n        }\n      };\n    }\n    return custom[path];\n  }\n\n  // See http://spencermortensen.com/articles/bezier-circle/\n  const C = 0.448084975506; // C = 1 - c\n\n  function rectangleX(d) {\n    return d.x;\n  }\n\n  function rectangleY(d) {\n    return d.y;\n  }\n\n  function rectangleWidth(d) {\n    return d.width;\n  }\n\n  function rectangleHeight(d) {\n    return d.height;\n  }\n\n  function number$1(_) {\n    return typeof _ === 'function' ? _ : () => +_;\n  }\n\n  function clamp(value, min, max) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  function vg_rect() {\n    var x = rectangleX,\n        y = rectangleY,\n        width = rectangleWidth,\n        height = rectangleHeight,\n        crTL = number$1(0),\n        crTR = crTL,\n        crBL = crTL,\n        crBR = crTL,\n        context = null;\n\n    function rectangle(_, x0, y0) {\n      var buffer,\n          x1 = x0 != null ? x0 : +x.call(this, _),\n          y1 = y0 != null ? y0 : +y.call(this, _),\n          w  = +width.call(this, _),\n          h  = +height.call(this, _),\n          s  = Math.min(w, h) / 2,\n          tl = clamp(+crTL.call(this, _), 0, s),\n          tr = clamp(+crTR.call(this, _), 0, s),\n          bl = clamp(+crBL.call(this, _), 0, s),\n          br = clamp(+crBR.call(this, _), 0, s);\n\n      if (!context) context = buffer = path();\n\n      if (tl <= 0 && tr <= 0 && bl <= 0 && br <= 0) {\n        context.rect(x1, y1, w, h);\n      } else {\n        var x2 = x1 + w,\n            y2 = y1 + h;\n        context.moveTo(x1 + tl, y1);\n        context.lineTo(x2 - tr, y1);\n        context.bezierCurveTo(x2 - C * tr, y1, x2, y1 + C * tr, x2, y1 + tr);\n        context.lineTo(x2, y2 - br);\n        context.bezierCurveTo(x2, y2 - C * br, x2 - C * br, y2, x2 - br, y2);\n        context.lineTo(x1 + bl, y2);\n        context.bezierCurveTo(x1 + C * bl, y2, x1, y2 - C * bl, x1, y2 - bl);\n        context.lineTo(x1, y1 + tl);\n        context.bezierCurveTo(x1, y1 + C * tl, x1 + C * tl, y1, x1 + tl, y1);\n        context.closePath();\n      }\n\n      if (buffer) {\n        context = null;\n        return buffer + '' || null;\n      }\n    }\n\n    rectangle.x = function(_) {\n      if (arguments.length) {\n        x = number$1(_);\n        return rectangle;\n      } else {\n        return x;\n      }\n    };\n\n    rectangle.y = function(_) {\n      if (arguments.length) {\n        y = number$1(_);\n        return rectangle;\n      } else {\n        return y;\n      }\n    };\n\n    rectangle.width = function(_) {\n      if (arguments.length) {\n        width = number$1(_);\n        return rectangle;\n      } else {\n        return width;\n      }\n    };\n\n    rectangle.height = function(_) {\n      if (arguments.length) {\n        height = number$1(_);\n        return rectangle;\n      } else {\n        return height;\n      }\n    };\n\n    rectangle.cornerRadius = function(tl, tr, br, bl) {\n      if (arguments.length) {\n        crTL = number$1(tl);\n        crTR = tr != null ? number$1(tr) : crTL;\n        crBR = br != null ? number$1(br) : crTL;\n        crBL = bl != null ? number$1(bl) : crTR;\n        return rectangle;\n      } else {\n        return crTL;\n      }\n    };\n\n    rectangle.context = function(_) {\n      if (arguments.length) {\n        context = _ == null ? null : _;\n        return rectangle;\n      } else {\n        return context;\n      }\n    };\n\n    return rectangle;\n  }\n\n  function vg_trail() {\n    var x,\n        y,\n        size,\n        defined,\n        context = null,\n        ready, x1, y1, r1;\n\n    function point(x2, y2, w2) {\n      var r2 = w2 / 2;\n\n      if (ready) {\n        var ux = y1 - y2,\n            uy = x2 - x1;\n\n        if (ux || uy) {\n          // get normal vector\n          var ud = Math.sqrt(ux * ux + uy * uy),\n              rx = (ux /= ud) * r1,\n              ry = (uy /= ud) * r1,\n              t = Math.atan2(uy, ux);\n\n          // draw segment\n          context.moveTo(x1 - rx, y1 - ry);\n          context.lineTo(x2 - ux * r2, y2 - uy * r2);\n          context.arc(x2, y2, r2, t - Math.PI, t);\n          context.lineTo(x1 + rx, y1 + ry);\n          context.arc(x1, y1, r1, t, t + Math.PI);\n        } else {\n          context.arc(x2, y2, r2, 0, Tau);\n        }\n        context.closePath();\n      } else {\n        ready = 1;\n      }\n      x1 = x2;\n      y1 = y2;\n      r1 = r2;\n    }\n\n    function trail(data) {\n      var i,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer;\n\n      if (context == null) context = buffer = path();\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) ready = 0;\n        }\n        if (defined0) point(+x(d, i, data), +y(d, i, data), +size(d, i, data));\n      }\n\n      if (buffer) {\n        context = null;\n        return buffer + '' || null;\n      }\n    }\n\n    trail.x = function(_) {\n      if (arguments.length) {\n        x = _;\n        return trail;\n      } else {\n        return x;\n      }\n    };\n\n    trail.y = function(_) {\n      if (arguments.length) {\n        y = _;\n        return trail;\n      } else {\n        return y;\n      }\n    };\n\n    trail.size = function(_) {\n      if (arguments.length) {\n        size = _;\n        return trail;\n      } else {\n        return size;\n      }\n    };\n\n    trail.defined = function(_) {\n      if (arguments.length) {\n        defined = _;\n        return trail;\n      } else {\n        return defined;\n      }\n    };\n\n    trail.context = function(_) {\n      if (arguments.length) {\n        if (_ == null) {\n          context = null;\n        } else {\n          context = _;\n        }\n        return trail;\n      } else {\n        return context;\n      }\n    };\n\n    return trail;\n  }\n\n  function value(a, b) {\n    return a != null ? a : b;\n  }\n\n  const x$1 =  item => item.x || 0,\n        y$1 =  item => item.y || 0,\n        w =  item => item.width || 0,\n        h =  item => item.height || 0,\n        xw = item => (item.x || 0) + (item.width || 0),\n        yh = item => (item.y || 0) + (item.height || 0),\n        sa = item => item.startAngle || 0,\n        ea = item => item.endAngle || 0,\n        pa = item => item.padAngle || 0,\n        ir = item => item.innerRadius || 0,\n        or = item => item.outerRadius || 0,\n        cr = item => item.cornerRadius || 0,\n        tl = item => value(item.cornerRadiusTopLeft, item.cornerRadius) || 0,\n        tr = item => value(item.cornerRadiusTopRight, item.cornerRadius) || 0,\n        br = item => value(item.cornerRadiusBottomRight, item.cornerRadius) || 0,\n        bl = item => value(item.cornerRadiusBottomLeft, item.cornerRadius) || 0,\n        sz = item => value(item.size, 64),\n        ts = item => item.size || 1,\n        def = item => !(item.defined === false),\n        type = item => symbols(item.shape || 'circle');\n\n  const arcShape    = d3_arc().startAngle(sa).endAngle(ea).padAngle(pa)\n                        .innerRadius(ir).outerRadius(or).cornerRadius(cr),\n        areavShape  = d3_area().x(x$1).y1(y$1).y0(yh).defined(def),\n        areahShape  = d3_area().y(y$1).x1(x$1).x0(xw).defined(def),\n        lineShape   = d3_line().x(x$1).y(y$1).defined(def),\n        rectShape   = vg_rect().x(x$1).y(y$1).width(w).height(h)\n                        .cornerRadius(tl, tr, br, bl),\n        symbolShape = d3_symbol().type(type).size(sz),\n        trailShape  = vg_trail().x(x$1).y(y$1).defined(def).size(ts);\n\n  function hasCornerRadius(item) {\n    return item.cornerRadius\n      || item.cornerRadiusTopLeft\n      || item.cornerRadiusTopRight\n      || item.cornerRadiusBottomRight\n      || item.cornerRadiusBottomLeft;\n  }\n\n  function arc(context, item) {\n    return arcShape.context(context)(item);\n  }\n\n  function area(context, items) {\n    var item = items[0],\n        interp = item.interpolate || 'linear';\n    return (item.orient === 'horizontal' ? areahShape : areavShape)\n      .curve(curves(interp, item.orient, item.tension))\n      .context(context)(items);\n  }\n\n  function line(context, items) {\n    var item = items[0],\n        interp = item.interpolate || 'linear';\n    return lineShape.curve(curves(interp, item.orient, item.tension))\n      .context(context)(items);\n  }\n\n  function rectangle(context, item, x, y) {\n    return rectShape.context(context)(item, x, y);\n  }\n\n  function shape(context, item) {\n    return (item.mark.shape || item.shape)\n      .context(context)(item);\n  }\n\n  function symbol(context, item) {\n    return symbolShape.context(context)(item);\n  }\n\n  function trail(context, items) {\n    return trailShape.context(context)(items);\n  }\n\n  function boundStroke(bounds, item, miter) {\n    if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {\n      const sw = item.strokeWidth != null ? +item.strokeWidth : 1;\n      bounds.expand(sw + (miter ? miterAdjustment(item, sw) : 0));\n    }\n    return bounds;\n  }\n\n  function miterAdjustment(item, strokeWidth) {\n    // TODO: more sophisticated adjustment? Or miter support in boundContext?\n    return item.strokeJoin && item.strokeJoin !== 'miter' ? 0 : strokeWidth;\n  }\n\n  var bounds, lx, ly,\n      circleThreshold = Tau - 1e-8;\n\n  function context(_) {\n    bounds = _;\n    return context;\n  }\n\n  function noop$1() {}\n\n  function add$1(x, y) { bounds.add(x, y); }\n\n  function addL(x, y) { add$1(lx = x, ly = y); }\n\n  function addX(x) { add$1(x, bounds.y1); }\n\n  function addY(y) { add$1(bounds.x1, y); }\n\n  context.beginPath = noop$1;\n\n  context.closePath = noop$1;\n\n  context.moveTo = addL;\n\n  context.lineTo = addL;\n\n  context.rect = function(x, y, w, h) {\n    add$1(x + w, y + h);\n    addL(x, y);\n  };\n\n  context.quadraticCurveTo = function(x1, y1, x2, y2) {\n    quadExtrema(lx, x1, x2, addX);\n    quadExtrema(ly, y1, y2, addY);\n    addL(x2, y2);\n  };\n\n  function quadExtrema(x0, x1, x2, cb) {\n    const t = (x0 - x1) / (x0 + x2 - 2 * x1);\n    if (0 < t && t < 1) cb(x0 + (x1 - x0) * t);\n  }\n\n  context.bezierCurveTo = function(x1, y1, x2, y2, x3, y3) {\n    cubicExtrema(lx, x1, x2, x3, addX);\n    cubicExtrema(ly, y1, y2, y3, addY);\n    addL(x3, y3);\n  };\n\n  function cubicExtrema(x0, x1, x2, x3, cb) {\n    const a = x3 - x0 + 3 * x1 - 3 * x2,\n          b = x0 + x2 - 2 * x1,\n          c = x0 - x1;\n\n    let t0 = 0, t1 = 0, r;\n\n    // solve for parameter t\n    if (Math.abs(a) > Epsilon) {\n      // quadratic equation\n      r = b * b + c * a;\n      if (r >= 0) {\n        r = Math.sqrt(r);\n        t0 = (-b + r) / a;\n        t1 = (-b - r) / a;\n      }\n    } else {\n      // linear equation\n      t0 = 0.5 * c / b;\n    }\n\n    // calculate position\n    if (0 < t0 && t0 < 1) cb(cubic(t0, x0, x1, x2, x3));\n    if (0 < t1 && t1 < 1) cb(cubic(t1, x0, x1, x2, x3));\n  }\n\n  function cubic(t, x0, x1, x2, x3) {\n    const s = 1 - t, s2 = s * s, t2 = t * t;\n    return (s2 * s * x0) + (3 * s2 * t * x1) + (3 * s * t2 * x2) + (t2 * t * x3);\n  }\n\n  context.arc = function(cx, cy, r, sa, ea, ccw) {\n    // store last point on path\n    lx = r * Math.cos(ea) + cx;\n    ly = r * Math.sin(ea) + cy;\n\n    if (Math.abs(ea - sa) > circleThreshold) {\n      // treat as full circle\n      add$1(cx - r, cy - r);\n      add$1(cx + r, cy + r);\n    } else {\n      const update = a => add$1(r * Math.cos(a) + cx, r * Math.sin(a) + cy);\n      let s, i;\n\n      // sample end points\n      update(sa);\n      update(ea);\n\n      // sample interior points aligned with 90 degrees\n      if (ea !== sa) {\n        sa = sa % Tau; if (sa < 0) sa += Tau;\n        ea = ea % Tau; if (ea < 0) ea += Tau;\n\n        if (ea < sa) {\n          ccw = !ccw; // flip direction\n          s = sa; sa = ea; ea = s; // swap end-points\n        }\n\n        if (ccw) {\n          ea -= Tau;\n          s = sa - (sa % HalfPi);\n          for (i=0; i<4 && s>ea; ++i, s-=HalfPi) update(s);\n        } else {\n          s = sa - (sa % HalfPi) + HalfPi;\n          for (i=0; i<4 && s<ea; ++i, s=s+HalfPi) update(s);\n        }\n      }\n    }\n  };\n\n  var context$1 = (context$1 = domCanvas(1,1))\n    ? context$1.getContext('2d')\n    : null;\n\n  const b = new Bounds();\n\n  function intersectPath(draw) {\n    return function(item, brush) {\n      // rely on (inaccurate) bounds intersection if no context\n      if (!context$1) return true;\n\n      // add path to offscreen graphics context\n      draw(context$1, item);\n\n      // get bounds intersection region\n      b.clear().union(item.bounds).intersect(brush).round();\n      const {x1, y1, x2, y2} = b;\n\n      // iterate over intersection region\n      // perform fine grained inclusion test\n      for (let y = y1; y <= y2; ++y) {\n        for (let x = x1; x <= x2; ++x) {\n          if (context$1.isPointInPath(x, y)) {\n            return true;\n          }\n        }\n      }\n\n      // false if no hits in intersection region\n      return false;\n    }\n  }\n\n  function intersectPoint(item, box) {\n    return box.contains(item.x || 0, item.y || 0);\n  }\n\n  function intersectRect(item, box) {\n    const x = item.x || 0,\n          y = item.y || 0,\n          w = item.width || 0,\n          h = item.height || 0;\n    return box.intersects(b.set(x, y, x + w, y + h));\n  }\n\n  function intersectRule(item, box) {\n    const x = item.x || 0,\n          y = item.y || 0,\n          x2 = item.x2 != null ? item.x2 : x,\n          y2 = item.y2 != null ? item.y2 : y;\n    return intersectBoxLine(box, x, y, x2, y2);\n  }\n\n  function intersectBoxLine(box, x, y, u, v) {\n    const {x1, y1, x2, y2} = box,\n          dx = u - x,\n          dy = v - y;\n\n    let t0 = 0, t1 = 1, p, q, r, e;\n\n    for (e=0; e<4; ++e) {\n      if (e === 0) { p = -dx; q = -(x1 - x); }\n      if (e === 1) { p =  dx; q =  (x2 - x); }\n      if (e === 2) { p = -dy; q = -(y1 - y); }\n      if (e === 3) { p =  dy; q =  (y2 - y); }\n\n      if (Math.abs(p) < 1e-10 && q < 0) return false;\n\n      r = q / p;\n\n      if (p < 0) {\n        if (r > t1) return false;\n        else if (r > t0) t0 = r;\n      } else if (p > 0) {\n        if (r < t0) return false;\n        else if (r < t1) t1 = r;\n      }\n    }\n\n    return true;\n  }\n\n  function blend(context, item) {\n    context.globalCompositeOperation = item.blend || 'source-over';\n  }\n\n  function v(value, dflt) {\n    return value == null ? dflt : value;\n  }\n\n  function addStops(gradient, stops) {\n    const n = stops.length;\n    for (let i=0; i<n; ++i) {\n      gradient.addColorStop(stops[i].offset, stops[i].color);\n    }\n    return gradient;\n  }\n\n  function gradient(context, spec, bounds) {\n    const w = bounds.width(),\n          h = bounds.height();\n    let gradient;\n\n\n    if (spec.gradient === 'radial') {\n      gradient = context.createRadialGradient(\n        bounds.x1 + v(spec.x1, 0.5) * w,\n        bounds.y1 + v(spec.y1, 0.5) * h,\n        Math.max(w, h) * v(spec.r1, 0),\n        bounds.x1 + v(spec.x2, 0.5) * w,\n        bounds.y1 + v(spec.y2, 0.5) * h,\n        Math.max(w, h) * v(spec.r2, 0.5)\n      );\n    } else { // linear gradient\n      const x1 = v(spec.x1, 0),\n            y1 = v(spec.y1, 0),\n            x2 = v(spec.x2, 1),\n            y2 = v(spec.y2, 0);\n\n      if (x1 === x2 || y1 === y2 || w === h) {\n        // axis aligned: use normal gradient\n        gradient = context.createLinearGradient(\n          bounds.x1 + x1 * w,\n          bounds.y1 + y1 * h,\n          bounds.x1 + x2 * w,\n          bounds.y1 + y2 * h\n        );\n      } else {\n        // not axis aligned: render gradient into a pattern (#2365)\n        // this allows us to use normalized bounding box coordinates\n        const image = domCanvas(Math.ceil(w), Math.ceil(h)),\n              ictx = image.getContext('2d');\n\n        ictx.scale(w, h);\n        ictx.fillStyle = addStops(\n          ictx.createLinearGradient(x1, y1, x2, y2),\n          spec.stops\n        );\n        ictx.fillRect(0, 0, w, h);\n\n        return context.createPattern(image, 'no-repeat');\n      }\n    }\n\n    return addStops(gradient, spec.stops);\n  }\n\n  function color(context, item, value) {\n    return isGradient(value)\n      ? gradient(context, value, item.bounds)\n      : value;\n  }\n\n  function fill(context, item, opacity) {\n    opacity *= (item.fillOpacity==null ? 1 : item.fillOpacity);\n    if (opacity > 0) {\n      context.globalAlpha = opacity;\n      context.fillStyle = color(context, item, item.fill);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  var Empty$1 = [];\n\n  function stroke(context, item, opacity) {\n    var lw = (lw = item.strokeWidth) != null ? lw : 1;\n\n    if (lw <= 0) return false;\n\n    opacity *= (item.strokeOpacity==null ? 1 : item.strokeOpacity);\n    if (opacity > 0) {\n      context.globalAlpha = opacity;\n      context.strokeStyle = color(context, item, item.stroke);\n\n      context.lineWidth = lw;\n      context.lineCap = item.strokeCap || 'butt';\n      context.lineJoin = item.strokeJoin || 'miter';\n      context.miterLimit = item.strokeMiterLimit || 10;\n\n      if (context.setLineDash) {\n        context.setLineDash(item.strokeDash || Empty$1);\n        context.lineDashOffset = item.strokeDashOffset || 0;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function compare$1(a, b) {\n    return a.zindex - b.zindex || a.index - b.index;\n  }\n\n  function zorder(scene) {\n    if (!scene.zdirty) return scene.zitems;\n\n    var items = scene.items,\n        output = [], item, i, n;\n\n    for (i=0, n=items.length; i<n; ++i) {\n      item = items[i];\n      item.index = i;\n      if (item.zindex) output.push(item);\n    }\n\n    scene.zdirty = false;\n    return scene.zitems = output.sort(compare$1);\n  }\n\n  function visit(scene, visitor) {\n    var items = scene.items, i, n;\n    if (!items || !items.length) return;\n\n    var zitems = zorder(scene);\n\n    if (zitems && zitems.length) {\n      for (i=0, n=items.length; i<n; ++i) {\n        if (!items[i].zindex) visitor(items[i]);\n      }\n      items = zitems;\n    }\n\n    for (i=0, n=items.length; i<n; ++i) {\n      visitor(items[i]);\n    }\n  }\n\n  function pickVisit(scene, visitor) {\n    var items = scene.items, hit, i;\n    if (!items || !items.length) return null;\n\n    var zitems = zorder(scene);\n    if (zitems && zitems.length) items = zitems;\n\n    for (i=items.length; --i >= 0;) {\n      if (hit = visitor(items[i])) return hit;\n    }\n\n    if (items === zitems) {\n      for (items=scene.items, i=items.length; --i >= 0;) {\n        if (!items[i].zindex) {\n          if (hit = visitor(items[i])) return hit;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  function drawAll(path) {\n    return function(context, scene, bounds) {\n      visit(scene, function(item) {\n        if (!bounds || bounds.intersects(item.bounds)) {\n          drawPath(path, context, item, item);\n        }\n      });\n    };\n  }\n\n  function drawOne(path) {\n    return function(context, scene, bounds) {\n      if (scene.items.length && (!bounds || bounds.intersects(scene.bounds))) {\n        drawPath(path, context, scene.items[0], scene.items);\n      }\n    };\n  }\n\n  function drawPath(path, context, item, items) {\n    var opacity = item.opacity == null ? 1 : item.opacity;\n    if (opacity === 0) return;\n\n    if (path(context, items)) return;\n\n    blend(context, item);\n\n    if (item.fill && fill(context, item, opacity)) {\n      context.fill();\n    }\n\n    if (item.stroke && stroke(context, item, opacity)) {\n      context.stroke();\n    }\n  }\n\n  function pick(test) {\n    test = test || truthy;\n\n    return function(context, scene, x, y, gx, gy) {\n      x *= context.pixelRatio;\n      y *= context.pixelRatio;\n\n      return pickVisit(scene, function(item) {\n        var b = item.bounds;\n        // first hit test against bounding box\n        if ((b && !b.contains(gx, gy)) || !b) return;\n        // if in bounding box, perform more careful test\n        if (test(context, item, x, y, gx, gy)) return item;\n      });\n    };\n  }\n\n  function hitPath(path, filled) {\n    return function(context, o, x, y) {\n      var item = Array.isArray(o) ? o[0] : o,\n          fill = (filled == null) ? item.fill : filled,\n          stroke = item.stroke && context.isPointInStroke, lw, lc;\n\n      if (stroke) {\n        lw = item.strokeWidth;\n        lc = item.strokeCap;\n        context.lineWidth = lw != null ? lw : 1;\n        context.lineCap   = lc != null ? lc : 'butt';\n      }\n\n      return path(context, o) ? false :\n        (fill && context.isPointInPath(x, y)) ||\n        (stroke && context.isPointInStroke(x, y));\n    };\n  }\n\n  function pickPath(path) {\n    return pick(hitPath(path));\n  }\n\n  function translate(x, y) {\n    return 'translate(' + x + ',' + y + ')';\n  }\n\n  function rotate(a) {\n    return 'rotate(' + a + ')';\n  }\n\n  function scale$1(scaleX, scaleY){\n    return 'scale('+ scaleX + ',' + scaleY+')';\n  }\n\n  function translateItem(item) {\n    return translate(item.x || 0, item.y || 0);\n  }\n\n  function transformItem(item) {\n    return translate(item.x || 0, item.y || 0)\n      + (item.angle ? ' ' + rotate(item.angle) : '')\n      + (item.scaleX || item.scaleY ? ' ' + scale$1(item.scaleX || 1, item.scaleY || 1) : '');   \n  }\n\n  function markItemPath(type, shape, isect) {\n\n    function attr(emit, item) {\n      emit('transform', transformItem(item));\n      emit('d', shape(null, item));\n    }\n\n    function bound(bounds, item) {\n      var x = item.x || 0,\n          y = item.y || 0;\n\n      shape(context(bounds), item);\n      boundStroke(bounds, item).translate(x, y);\n      if (item.angle) {\n        bounds.rotate(item.angle * DegToRad, x, y);\n      }\n\n      return bounds;\n    }\n\n    function draw(context, item) {\n      var x = item.x || 0,\n          y = item.y || 0,\n          a = item.angle || 0;\n\n      context.translate(x, y);\n      if (a) context.rotate(a *= DegToRad);\n      context.beginPath();\n      shape(context, item);\n      if (a) context.rotate(-a);\n      context.translate(-x, -y);\n    }\n\n    return {\n      type:   type,\n      tag:    'path',\n      nested: false,\n      attr:   attr,\n      bound:  bound,\n      draw:   drawAll(draw),\n      pick:   pickPath(draw),\n      isect:  isect || intersectPath(draw)\n    };\n\n  }\n\n  var arc$1 = markItemPath('arc', arc);\n\n  function pickArea(a, p) {\n    var v = a[0].orient === 'horizontal' ? p[1] : p[0],\n        z = a[0].orient === 'horizontal' ? 'y' : 'x',\n        i = a.length,\n        min = +Infinity, hit, d;\n\n    while (--i >= 0) {\n      if (a[i].defined === false) continue;\n      d = Math.abs(a[i][z] - v);\n      if (d < min) {\n        min = d;\n        hit = a[i];\n      }\n    }\n\n    return hit;\n  }\n\n  function pickLine(a, p) {\n    var t = Math.pow(a[0].strokeWidth || 1, 2),\n        i = a.length, dx, dy, dd;\n\n    while (--i >= 0) {\n      if (a[i].defined === false) continue;\n      dx = a[i].x - p[0];\n      dy = a[i].y - p[1];\n      dd = dx * dx + dy * dy;\n      if (dd < t) return a[i];\n    }\n\n    return null;\n  }\n\n  function pickTrail(a, p) {\n    var i = a.length, dx, dy, dd;\n\n    while (--i >= 0) {\n      if (a[i].defined === false) continue;\n      dx = a[i].x - p[0];\n      dy = a[i].y - p[1];\n      dd = dx * dx + dy * dy;\n      dx = a[i].size || 1;\n      if (dd < dx*dx) return a[i];\n    }\n\n    return null;\n  }\n\n  function markMultiItemPath(type, shape, tip) {\n\n    function attr(emit, item) {\n      var items = item.mark.items;\n      if (items.length) emit('d', shape(null, items));\n    }\n\n    function bound(bounds, mark) {\n      var items = mark.items;\n      if (items.length === 0) {\n        return bounds;\n      } else {\n        shape(context(bounds), items);\n        return boundStroke(bounds, items[0]);\n      }\n    }\n\n    function draw(context, items) {\n      context.beginPath();\n      shape(context, items);\n    }\n\n    var hit = hitPath(draw);\n\n    function pick(context, scene, x, y, gx, gy) {\n      var items = scene.items,\n          b = scene.bounds;\n\n      if (!items || !items.length || b && !b.contains(gx, gy)) {\n        return null;\n      }\n\n      x *= context.pixelRatio;\n      y *= context.pixelRatio;\n      return hit(context, items, x, y) ? items[0] : null;\n    }\n\n    return {\n      type:   type,\n      tag:    'path',\n      nested: true,\n      attr:   attr,\n      bound:  bound,\n      draw:   drawOne(draw),\n      pick:   pick,\n      isect:  intersectPoint,\n      tip:    tip\n    };\n\n  }\n\n  var area$1 = markMultiItemPath('area', area, pickArea);\n\n  function clip(context, scene) {\n    var clip = scene.clip;\n\n    context.save();\n\n    if (isFunction(clip)) {\n      context.beginPath();\n      clip(context);\n      context.clip();\n    } else {\n      clipGroup(context, scene.group);\n    }\n  }\n\n  function clipGroup(context, group) {\n    context.beginPath();\n    hasCornerRadius(group)\n      ? rectangle(context, group, 0, 0)\n      : context.rect(0, 0, group.width || 0, group.height || 0);\n    context.clip();\n  }\n\n  var clip_id = 1;\n\n  function resetSVGClipId() {\n    clip_id = 1;\n  }\n\n  function clip$1(renderer, item, size) {\n    var clip = item.clip,\n        defs = renderer._defs,\n        id = item.clip_id || (item.clip_id = 'clip' + clip_id++),\n        c = defs.clipping[id] || (defs.clipping[id] = {id: id});\n\n    if (isFunction(clip)) {\n      c.path = clip(null);\n    } else if (hasCornerRadius(size)) {\n      c.path = rectangle(null, size, 0, 0);\n    } else {\n      c.width = size.width || 0;\n      c.height = size.height || 0;\n    }\n\n    return 'url(#' + id + ')';\n  }\n\n  function offset$1(item) {\n    var sw = (sw = item.strokeWidth) != null ? sw : 1;\n    return item.strokeOffset != null ? item.strokeOffset\n      : item.stroke && sw > 0.5 && sw < 1.5 ? 0.5 - Math.abs(sw - 1)\n      : 0;\n  }\n\n  function attr(emit, item) {\n    emit('transform', translateItem(item));\n  }\n\n  function emitRectangle(emit, item) {\n    var off = offset$1(item);\n    emit('d', rectangle(null, item, off, off));\n  }\n\n  function background(emit, item) {\n    emit('class', 'background');\n    emitRectangle(emit, item);\n  }\n\n  function foreground(emit, item) {\n    emit('class', 'foreground');\n    if (item.strokeForeground) {\n      emitRectangle(emit, item);\n    } else {\n      emit('d', '');\n    }\n  }\n\n  function content(emit, item, renderer) {\n    var url = item.clip ? clip$1(renderer, item, item) : null;\n    emit('clip-path', url);\n  }\n\n  function bound(bounds, group) {\n    if (!group.clip && group.items) {\n      var items = group.items;\n      for (var j=0, m=items.length; j<m; ++j) {\n        bounds.union(items[j].bounds);\n      }\n    }\n\n    if ((group.clip || group.width || group.height) && !group.noBound) {\n      bounds.add(0, 0).add(group.width || 0, group.height || 0);\n    }\n\n    boundStroke(bounds, group);\n\n    return bounds.translate(group.x || 0, group.y || 0);\n  }\n\n  function rectanglePath(context, group, x, y) {\n    var off = offset$1(group);\n    context.beginPath();\n    rectangle(context, group, (x || 0) + off, (y || 0) + off);\n  }\n\n  var hitBackground = hitPath(rectanglePath);\n  var hitForeground = hitPath(rectanglePath, false);\n\n  function draw(context, scene, bounds) {\n    var renderer = this;\n\n    visit(scene, function(group) {\n      var gx = group.x || 0,\n          gy = group.y || 0,\n          fore = group.strokeForeground,\n          opacity = group.opacity == null ? 1 : group.opacity;\n\n      // draw group background\n      if ((group.stroke || group.fill) && opacity) {\n        rectanglePath(context, group, gx, gy);\n        blend(context, group);\n        if (group.fill && fill(context, group, opacity)) {\n          context.fill();\n        }\n        if (group.stroke && !fore && stroke(context, group, opacity)) {\n          context.stroke();\n        }\n      }\n\n      // setup graphics context, set clip and bounds\n      context.save();\n      context.translate(gx, gy);\n      if (group.clip) clipGroup(context, group);\n      if (bounds) bounds.translate(-gx, -gy);\n\n      // draw group contents\n      visit(group, function(item) {\n        renderer.draw(context, item, bounds);\n      });\n\n      // restore graphics context\n      if (bounds) bounds.translate(gx, gy);\n      context.restore();\n\n      // draw group foreground\n      if (fore && group.stroke && opacity) {\n        rectanglePath(context, group, gx, gy);\n        blend(context, group);\n        if (stroke(context, group, opacity)) {\n          context.stroke();\n        }\n      }\n    });\n  }\n\n  function pick$1(context, scene, x, y, gx, gy) {\n    if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {\n      return null;\n    }\n\n    var handler = this,\n        cx = x * context.pixelRatio,\n        cy = y * context.pixelRatio;\n\n    return pickVisit(scene, function(group) {\n      var hit, fore, ix, dx, dy, dw, dh, b, c;\n\n      // first hit test bounding box\n      b = group.bounds;\n      if (b && !b.contains(gx, gy)) return;\n\n      // passed bounds check, test rectangular clip\n      dx = group.x || 0;\n      dy = group.y || 0;\n      dw = dx + (group.width || 0);\n      dh = dy + (group.height || 0);\n      c = group.clip;\n      if (c && (gx < dx || gx > dw || gy < dx || gy > dh)) return;\n\n      // adjust coordinate system\n      context.save();\n      context.translate(dx, dy);\n      dx = gx - dx;\n      dy = gy - dy;\n\n      // test background for rounded corner clip\n      if (c && hasCornerRadius(group) && !hitBackground(context, group, cx, cy)) {\n        context.restore();\n        return null;\n      }\n\n      fore = group.strokeForeground;\n      ix = scene.interactive !== false;\n\n      // hit test against group foreground\n      if (ix && fore && group.stroke\n          && hitForeground(context, group, cx, cy)) {\n        context.restore();\n        return group;\n      }\n\n      // hit test against contained marks\n      hit = pickVisit(group, function(mark) {\n        return pickMark(mark, dx, dy)\n          ? handler.pick(mark, x, y, dx, dy)\n          : null;\n      });\n\n      // hit test against group background\n      if (!hit && ix && (group.fill || (!fore && group.stroke))\n          && hitBackground(context, group, cx, cy)) {\n        hit = group;\n      }\n\n      // restore state and return\n      context.restore();\n      return hit || null;\n    });\n  }\n\n  function pickMark(mark, x, y) {\n    return (mark.interactive !== false || mark.marktype === 'group')\n      && mark.bounds && mark.bounds.contains(x, y);\n  }\n\n  var group = {\n    type:       'group',\n    tag:        'g',\n    nested:     false,\n    attr:       attr,\n    bound:      bound,\n    draw:       draw,\n    pick:       pick$1,\n    isect:      intersectRect,\n    content:    content,\n    background: background,\n    foreground: foreground\n  };\n\n  function getImage(item, renderer) {\n    var image = item.image;\n    if (!image || item.url && item.url !== image.url) {\n      image = {complete: false, width: 0, height: 0};\n      renderer.loadImage(item.url).then(image => {\n        item.image = image;\n        item.image.url = item.url;\n      });\n    }\n    return image;\n  }\n\n  function imageWidth(item, image) {\n    return item.width != null ? item.width\n      : !image || !image.width ? 0\n      : item.aspect !== false && item.height ? item.height * image.width / image.height\n      : image.width;\n  }\n\n  function imageHeight(item, image) {\n    return item.height != null ? item.height\n      : !image || !image.height ? 0\n      : item.aspect !== false && item.width ? item.width * image.height / image.width\n      : image.height;\n  }\n\n  function imageXOffset(align, w) {\n    return align === 'center' ? w / 2 : align === 'right' ? w : 0;\n  }\n\n  function imageYOffset(baseline, h) {\n    return baseline === 'middle' ? h / 2 : baseline === 'bottom' ? h : 0;\n  }\n\n  function attr$1(emit, item, renderer) {\n    var image = getImage(item, renderer),\n        x = item.x || 0,\n        y = item.y || 0,\n        w = imageWidth(item, image),\n        h = imageHeight(item, image),\n        a = item.aspect === false ? 'none' : 'xMidYMid';\n\n    x -= imageXOffset(item.align, w);\n    y -= imageYOffset(item.baseline, h);\n\n    if (!image.src && image.toDataURL) {\n      emit('href', image.toDataURL(), 'http://www.w3.org/1999/xlink', 'xlink:href');\n    } else {\n      emit('href', image.src || '', 'http://www.w3.org/1999/xlink', 'xlink:href');\n    }\n    emit('transform', translate(x, y));\n    emit('width', w);\n    emit('height', h);\n    emit('preserveAspectRatio', a);\n  }\n\n  function bound$1(bounds, item) {\n    var image = item.image,\n        x = item.x || 0,\n        y = item.y || 0,\n        w = imageWidth(item, image),\n        h = imageHeight(item, image);\n\n    x -= imageXOffset(item.align, w);\n    y -= imageYOffset(item.baseline, h);\n\n    return bounds.set(x, y, x + w, y + h);\n  }\n\n  function draw$1(context, scene, bounds) {\n    var renderer = this;\n\n    visit(scene, function(item) {\n      if (bounds && !bounds.intersects(item.bounds)) return; // bounds check\n\n      var image = getImage(item, renderer),\n          x = item.x || 0,\n          y = item.y || 0,\n          w = imageWidth(item, image),\n          h = imageHeight(item, image),\n          opacity, ar0, ar1, t;\n\n      x -= imageXOffset(item.align, w);\n      y -= imageYOffset(item.baseline, h);\n\n      if (item.aspect !== false) {\n        ar0 = image.width / image.height;\n        ar1 = item.width / item.height;\n        if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {\n          if (ar1 < ar0) {\n            t = w / ar0;\n            y += (h - t) / 2;\n            h = t;\n          } else {\n            t = h * ar0;\n            x += (w - t) / 2;\n            w = t;\n          }\n        }\n      }\n\n      if (image.complete || image.toDataURL) {\n        blend(context, item);\n        context.globalAlpha = (opacity = item.opacity) != null ? opacity : 1;\n        context.imageSmoothingEnabled = item.smooth !== false;\n        context.drawImage(image, x, y, w, h);\n      }\n    });\n  }\n\n  var image = {\n    type:     'image',\n    tag:      'image',\n    nested:   false,\n    attr:     attr$1,\n    bound:    bound$1,\n    draw:     draw$1,\n    pick:     pick(),\n    isect:    truthy, // bounds check is sufficient\n    get:      getImage,\n    xOffset:  imageXOffset,\n    yOffset:  imageYOffset\n  };\n\n  var line$1 = markMultiItemPath('line', line, pickLine);\n\n  function attr$2(emit, item) {\n    var sx = item.scaleX || 1,\n        sy = item.scaleY || 1;\n    if (sx !== 1 || sy !== 1) {\n      emit('vector-effect', 'non-scaling-stroke');\n    }\n    emit('transform', transformItem(item));\n    emit('d', item.path);\n  }\n\n  function path$1(context, item) {\n    var path = item.path;\n    if (path == null) return true;\n\n    var x = item.x || 0,\n        y = item.y || 0,\n        sx = item.scaleX || 1,\n        sy = item.scaleY || 1,\n        a = (item.angle || 0) * DegToRad,\n        cache = item.pathCache;\n\n    if (!cache || cache.path !== path) {\n      (item.pathCache = cache = pathParse(path)).path = path;\n    }\n\n    if (a && context.rotate && context.translate) {\n      context.translate(x, y);\n      context.rotate(a);\n      pathRender(context, cache, 0, 0, sx, sy);\n      context.rotate(-a);\n      context.translate(-x, -y);\n    } else {\n      pathRender(context, cache, x, y, sx, sy);\n    }\n  }\n\n  function bound$2(bounds, item) {\n    path$1(context(bounds), item)\n      ? bounds.set(0, 0, 0, 0)\n      : boundStroke(bounds, item, true);\n\n    if (item.angle) {\n      bounds.rotate(item.angle * DegToRad, item.x || 0, item.y || 0);\n    }\n\n    return bounds;\n  }\n\n  var path$2 = {\n    type:   'path',\n    tag:    'path',\n    nested: false,\n    attr:   attr$2,\n    bound:  bound$2,\n    draw:   drawAll(path$1),\n    pick:   pickPath(path$1),\n    isect:  intersectPath(path$1)\n  };\n\n  function attr$3(emit, item) {\n    emit('d', rectangle(null, item));\n  }\n\n  function bound$3(bounds, item) {\n    var x, y;\n    return boundStroke(bounds.set(\n      x = item.x || 0,\n      y = item.y || 0,\n      (x + item.width) || 0,\n      (y + item.height) || 0\n    ), item);\n  }\n\n  function draw$2(context, item) {\n    context.beginPath();\n    rectangle(context, item);\n  }\n\n  var rect = {\n    type:   'rect',\n    tag:    'path',\n    nested: false,\n    attr:   attr$3,\n    bound:  bound$3,\n    draw:   drawAll(draw$2),\n    pick:   pickPath(draw$2),\n    isect:  intersectRect\n  };\n\n  function attr$4(emit, item) {\n    emit('transform', translateItem(item));\n    emit('x2', item.x2 != null ? item.x2 - (item.x || 0) : 0);\n    emit('y2', item.y2 != null ? item.y2 - (item.y || 0) : 0);\n  }\n\n  function bound$4(bounds, item) {\n    var x1, y1;\n    return boundStroke(bounds.set(\n      x1 = item.x || 0,\n      y1 = item.y || 0,\n      item.x2 != null ? item.x2 : x1,\n      item.y2 != null ? item.y2 : y1\n    ), item);\n  }\n\n  function path$3(context, item, opacity) {\n    var x1, y1, x2, y2;\n\n    if (item.stroke && stroke(context, item, opacity)) {\n      x1 = item.x || 0;\n      y1 = item.y || 0;\n      x2 = item.x2 != null ? item.x2 : x1;\n      y2 = item.y2 != null ? item.y2 : y1;\n      context.beginPath();\n      context.moveTo(x1, y1);\n      context.lineTo(x2, y2);\n      return true;\n    }\n    return false;\n  }\n\n  function draw$3(context, scene, bounds) {\n    visit(scene, function(item) {\n      if (bounds && !bounds.intersects(item.bounds)) return; // bounds check\n      var opacity = item.opacity == null ? 1 : item.opacity;\n      if (opacity && path$3(context, item, opacity)) {\n        blend(context, item);\n        context.stroke();\n      }\n    });\n  }\n\n  function hit(context, item, x, y) {\n    if (!context.isPointInStroke) return false;\n    return path$3(context, item, 1) && context.isPointInStroke(x, y);\n  }\n\n  var rule = {\n    type:   'rule',\n    tag:    'line',\n    nested: false,\n    attr:   attr$4,\n    bound:  bound$4,\n    draw:   draw$3,\n    pick:   pick(hit),\n    isect:  intersectRule\n  };\n\n  var shape$1 = markItemPath('shape', shape);\n\n  var symbol$1 = markItemPath('symbol', symbol, intersectPoint);\n\n  // memoize text width measurement\n  const widthCache = lruCache();\n\n  var textMetrics = {\n    height: fontSize,\n    measureWidth: measureWidth,\n    estimateWidth: estimateWidth,\n    width: estimateWidth,\n    canvas: useCanvas\n  };\n\n  useCanvas(true);\n\n  function useCanvas(use) {\n    textMetrics.width = (use && context$1) ? measureWidth : estimateWidth;\n  }\n\n  // make dumb, simple estimate if no canvas is available\n  function estimateWidth(item, text) {\n    return _estimateWidth(textValue(item, text), fontSize(item));\n  }\n\n  function _estimateWidth(text, currentFontHeight) {\n    return ~~(0.8 * text.length * currentFontHeight);\n  }\n\n  // measure text width if canvas is available\n  function measureWidth(item, text) {\n    return fontSize(item) <= 0 || !(text = textValue(item, text)) ? 0\n      : _measureWidth(text, font(item));\n  }\n\n  function _measureWidth(text, currentFont) {\n    const key = `(${currentFont}) ${text}`;\n    let width = widthCache.get(key);\n    if (width === undefined) {\n      context$1.font = currentFont;\n      width = context$1.measureText(text).width;\n      widthCache.set(key, width);\n    }\n    return width;\n  }\n\n  function fontSize(item) {\n    return item.fontSize != null ? (+item.fontSize || 0) : 11;\n  }\n\n  function lineHeight(item) {\n    return item.lineHeight != null ? item.lineHeight : (fontSize(item) + 2);\n  }\n\n  function lineArray(_) {\n    return isArray(_) ? _.length > 1 ? _ : _[0] : _;\n  }\n\n  function textLines(item) {\n    return lineArray(\n      item.lineBreak && item.text && !isArray(item.text)\n        ? item.text.split(item.lineBreak)\n        : item.text\n    );\n  }\n\n  function multiLineOffset(item) {\n    const tl = textLines(item);\n    return (isArray(tl) ? (tl.length - 1) : 0) * lineHeight(item);\n  }\n\n  function textValue(item, line) {\n    const text = line == null ? '' : (line + '').trim();\n    return item.limit > 0 && text.length ? truncate$1(item, text) : text;\n  }\n\n  function widthGetter(item) {\n    if (textMetrics.width === measureWidth) {\n      // we are using canvas\n      const currentFont = font(item);\n      return text => _measureWidth(text, currentFont);\n    } else {\n      // we are relying on estimates\n      const currentFontHeight = fontSize(item);\n      return text => _estimateWidth(text, currentFontHeight);\n    }\n  }\n\n  function truncate$1(item, text) {\n    var limit = +item.limit,\n        width = widthGetter(item);\n\n    if (width(text) < limit) return text;\n\n    var ellipsis = item.ellipsis || '\\u2026',\n        rtl = item.dir === 'rtl',\n        lo = 0,\n        hi = text.length, mid;\n\n    limit -= width(ellipsis);\n\n    if (rtl) {\n      while (lo < hi) {\n        mid = (lo + hi >>> 1);\n        if (width(text.slice(mid)) > limit) lo = mid + 1;\n        else hi = mid;\n      }\n      return ellipsis + text.slice(lo);\n    } else {\n      while (lo < hi) {\n        mid = 1 + (lo + hi >>> 1);\n        if (width(text.slice(0, mid)) < limit) lo = mid;\n        else hi = mid - 1;\n      }\n      return text.slice(0, lo) + ellipsis;\n    }\n  }\n\n  function fontFamily(item, quote) {\n    var font = item.font;\n    return (quote && font\n      ? String(font).replace(/\"/g, '\\'')\n      : font) || 'sans-serif';\n  }\n\n  function font(item, quote) {\n    return '' +\n      (item.fontStyle ? item.fontStyle + ' ' : '') +\n      (item.fontVariant ? item.fontVariant + ' ' : '') +\n      (item.fontWeight ? item.fontWeight + ' ' : '') +\n      fontSize(item) + 'px ' +\n      fontFamily(item, quote);\n  }\n\n  function offset$2(item) {\n    // perform our own font baseline calculation\n    // why? not all browsers support SVG 1.1 'alignment-baseline' :(\n    // this also ensures consistent layout across renderers\n    var baseline = item.baseline,\n        h = fontSize(item);\n\n    return Math.round(\n      baseline === 'top'         ?  0.79 * h :\n      baseline === 'middle'      ?  0.30 * h :\n      baseline === 'bottom'      ? -0.21 * h :\n      baseline === 'line-top'    ?  0.29 * h + 0.5 * lineHeight(item) :\n      baseline === 'line-bottom' ?  0.29 * h - 0.5 * lineHeight(item) : 0\n    );\n  }\n\n  var textAlign = {\n    'left':   'start',\n    'center': 'middle',\n    'right':  'end'\n  };\n\n  var tempBounds = new Bounds();\n\n  function anchorPoint(item) {\n    var x = item.x || 0,\n        y = item.y || 0,\n        r = item.radius || 0, t;\n\n    if (r) {\n      t = (item.theta || 0) - HalfPi;\n      x += r * Math.cos(t);\n      y += r * Math.sin(t);\n    }\n\n    tempBounds.x1 = x;\n    tempBounds.y1 = y;\n    return tempBounds;\n  }\n\n  function attr$5(emit, item) {\n    var dx = item.dx || 0,\n        dy = (item.dy || 0) + offset$2(item),\n        p = anchorPoint(item),\n        x = p.x1,\n        y = p.y1,\n        a = item.angle || 0, t;\n\n    emit('text-anchor', textAlign[item.align] || 'start');\n\n    if (a) {\n      t = translate(x, y) + ' ' + rotate(a);\n      if (dx || dy) t += ' ' + translate(dx, dy);\n    } else {\n      t = translate(x + dx, y + dy);\n    }\n    emit('transform', t);\n  }\n\n  function bound$5(bounds, item, mode) {\n    var h = textMetrics.height(item),\n        a = item.align,\n        p = anchorPoint(item),\n        x = p.x1,\n        y = p.y1,\n        dx = item.dx || 0,\n        dy = (item.dy || 0) + offset$2(item) - Math.round(0.8*h), // use 4/5 offset\n        tl = textLines(item),\n        w;\n\n    // get dimensions\n    if (isArray(tl)) {\n      // multi-line text\n      h += lineHeight(item) * (tl.length - 1);\n      w = tl.reduce((w, t) => Math.max(w, textMetrics.width(item, t)), 0);\n    } else {\n      // single-line text\n      w = textMetrics.width(item, tl);\n    }\n\n    // horizontal alignment\n    if (a === 'center') {\n      dx -= (w / 2);\n    } else if (a === 'right') {\n      dx -= w;\n    }\n\n    bounds.set(dx+=x, dy+=y, dx+w, dy+h);\n\n    if (item.angle && !mode) {\n      bounds.rotate(item.angle * DegToRad, x, y);\n    } else if (mode === 2) {\n      return bounds.rotatedPoints(item.angle * DegToRad, x, y);\n    }\n    return bounds;\n  }\n\n  function draw$4(context, scene, bounds) {\n    visit(scene, function(item) {\n      var opacity = item.opacity == null ? 1 : item.opacity,\n          p, x, y, i, lh, tl, str;\n\n      if (bounds && !bounds.intersects(item.bounds) || // bounds check\n          opacity === 0 || item.fontSize <= 0 ||\n          item.text == null || item.text.length === 0) return;\n\n      context.font = font(item);\n      context.textAlign = item.align || 'left';\n\n      p = anchorPoint(item);\n      x = p.x1,\n      y = p.y1;\n\n      if (item.angle) {\n        context.save();\n        context.translate(x, y);\n        context.rotate(item.angle * DegToRad);\n        x = y = 0; // reset x, y\n      }\n      x += (item.dx || 0);\n      y += (item.dy || 0) + offset$2(item);\n\n      tl = textLines(item);\n      blend(context, item);\n      if (isArray(tl)) {\n        lh = lineHeight(item);\n        for (i=0; i<tl.length; ++i) {\n          str = textValue(item, tl[i]);\n          if (item.fill && fill(context, item, opacity)) {\n            context.fillText(str, x, y);\n          }\n          if (item.stroke && stroke(context, item, opacity)) {\n            context.strokeText(str, x, y);\n          }\n          y += lh;\n        }\n      } else {\n        str = textValue(item, tl);\n        if (item.fill && fill(context, item, opacity)) {\n          context.fillText(str, x, y);\n        }\n        if (item.stroke && stroke(context, item, opacity)) {\n          context.strokeText(str, x, y);\n        }\n      }\n\n      if (item.angle) context.restore();\n    });\n  }\n\n  function hit$1(context, item, x, y, gx, gy) {\n    if (item.fontSize <= 0) return false;\n    if (!item.angle) return true; // bounds sufficient if no rotation\n\n    // project point into space of unrotated bounds\n    var p = anchorPoint(item),\n        ax = p.x1,\n        ay = p.y1,\n        b = bound$5(tempBounds, item, 1),\n        a = -item.angle * DegToRad,\n        cos = Math.cos(a),\n        sin = Math.sin(a),\n        px = cos * gx - sin * gy + (ax - cos * ax + sin * ay),\n        py = sin * gx + cos * gy + (ay - sin * ax - cos * ay);\n\n    return b.contains(px, py);\n  }\n\n  function intersectText(item, box) {\n    var p = bound$5(tempBounds, item, 2);\n    return intersectBoxLine(box, p[0], p[1], p[2], p[3])\n        || intersectBoxLine(box, p[0], p[1], p[4], p[5])\n        || intersectBoxLine(box, p[4], p[5], p[6], p[7])\n        || intersectBoxLine(box, p[2], p[3], p[6], p[7]);\n  }\n\n  var text = {\n    type:   'text',\n    tag:    'text',\n    nested: false,\n    attr:   attr$5,\n    bound:  bound$5,\n    draw:   draw$4,\n    pick:   pick(hit$1),\n    isect:  intersectText\n  };\n\n  var trail$1 = markMultiItemPath('trail', trail, pickTrail);\n\n  var Marks = {\n    arc:     arc$1,\n    area:    area$1,\n    group:   group,\n    image:   image,\n    line:    line$1,\n    path:    path$2,\n    rect:    rect,\n    rule:    rule,\n    shape:   shape$1,\n    symbol:  symbol$1,\n    text:    text,\n    trail:   trail$1\n  };\n\n  function boundItem(item, func, opt) {\n    var type = Marks[item.mark.marktype],\n        bound = func || type.bound;\n    if (type.nested) item = item.mark;\n\n    return bound(item.bounds || (item.bounds = new Bounds()), item, opt);\n  }\n\n  var DUMMY = {mark: null};\n\n  function boundMark(mark, bounds, opt) {\n    var type  = Marks[mark.marktype],\n        bound = type.bound,\n        items = mark.items,\n        hasItems = items && items.length,\n        i, n, item, b;\n\n    if (type.nested) {\n      if (hasItems) {\n        item = items[0];\n      } else {\n        // no items, fake it\n        DUMMY.mark = mark;\n        item = DUMMY;\n      }\n      b = boundItem(item, bound, opt);\n      bounds = bounds && bounds.union(b) || b;\n      return bounds;\n    }\n\n    bounds = bounds\n      || mark.bounds && mark.bounds.clear()\n      || new Bounds();\n\n    if (hasItems) {\n      for (i=0, n=items.length; i<n; ++i) {\n        bounds.union(boundItem(items[i], bound, opt));\n      }\n    }\n\n    return mark.bounds = bounds;\n  }\n\n  var keys = [\n    'marktype', 'name', 'role', 'interactive', 'clip', 'items', 'zindex',\n    'x', 'y', 'width', 'height', 'align', 'baseline',             // layout\n    'fill', 'fillOpacity', 'opacity', 'blend',                    // fill\n    'stroke', 'strokeOpacity', 'strokeWidth', 'strokeCap',        // stroke\n    'strokeDash', 'strokeDashOffset',                             // stroke dash\n    'strokeForeground', 'strokeOffset',                           // group\n    'startAngle', 'endAngle', 'innerRadius', 'outerRadius',       // arc\n    'cornerRadius', 'padAngle',                                   // arc, rect\n    'cornerRadiusTopLeft', 'cornerRadiusTopRight',                // rect, group\n    'cornerRadiusBottomLeft', 'cornerRadiusBottomRight',\n    'interpolate', 'tension', 'orient', 'defined',                // area, line\n    'url', 'aspect', 'smooth',                                    // image\n    'path', 'scaleX', 'scaleY',                                   // path\n    'x2', 'y2',                                                   // rule\n    'size', 'shape',                                              // symbol\n    'text', 'angle', 'theta', 'radius', 'dir', 'dx', 'dy',        // text\n    'ellipsis', 'limit', 'lineBreak', 'lineHeight',\n    'font', 'fontSize', 'fontWeight', 'fontStyle', 'fontVariant'  // font\n  ];\n\n  function sceneToJSON(scene, indent) {\n    return JSON.stringify(scene, keys, indent);\n  }\n\n  function sceneFromJSON(json) {\n    var scene = (typeof json === 'string' ? JSON.parse(json) : json);\n    return initialize(scene);\n  }\n\n  function initialize(scene) {\n    var type = scene.marktype,\n        items = scene.items,\n        parent, i, n;\n\n    if (items) {\n      for (i=0, n=items.length; i<n; ++i) {\n        parent = type ? 'mark' : 'group';\n        items[i][parent] = scene;\n        if (items[i].zindex) items[i][parent].zdirty = true;\n        if ('group' === (type || parent)) initialize(items[i]);\n      }\n    }\n\n    if (type) boundMark(scene);\n    return scene;\n  }\n\n  function Scenegraph(scene) {\n    if (arguments.length) {\n      this.root = sceneFromJSON(scene);\n    } else {\n      this.root = createMark({\n        marktype: 'group',\n        name: 'root',\n        role: 'frame'\n      });\n      this.root.items = [new GroupItem(this.root)];\n    }\n  }\n\n  var prototype$I = Scenegraph.prototype;\n\n  prototype$I.toJSON = function(indent) {\n    return sceneToJSON(this.root, indent || 0);\n  };\n\n  prototype$I.mark = function(markdef, group, index) {\n    group = group || this.root.items[0];\n    var mark = createMark(markdef, group);\n    group.items[index] = mark;\n    if (mark.zindex) mark.group.zdirty = true;\n    return mark;\n  };\n\n  function createMark(def, group) {\n    return {\n      bounds:      new Bounds(),\n      clip:        !!def.clip,\n      group:       group,\n      interactive: def.interactive === false ? false : true,\n      items:       [],\n      marktype:    def.marktype,\n      name:        def.name || undefined,\n      role:        def.role || undefined,\n      zindex:      def.zindex || 0\n    };\n  }\n\n  // create a new DOM element\n  function domCreate(doc, tag, ns) {\n    if (!doc && typeof document !== 'undefined' && document.createElement) {\n      doc = document;\n    }\n    return doc\n      ? (ns ? doc.createElementNS(ns, tag) : doc.createElement(tag))\n      : null;\n  }\n\n  // find first child element with matching tag\n  function domFind(el, tag) {\n    tag = tag.toLowerCase();\n    var nodes = el.childNodes, i = 0, n = nodes.length;\n    for (; i<n; ++i) if (nodes[i].tagName.toLowerCase() === tag) {\n      return nodes[i];\n    }\n  }\n\n  // retrieve child element at given index\n  // create & insert if doesn't exist or if tags do not match\n  function domChild(el, index, tag, ns) {\n    var a = el.childNodes[index], b;\n    if (!a || a.tagName.toLowerCase() !== tag.toLowerCase()) {\n      b = a || null;\n      a = domCreate(el.ownerDocument, tag, ns);\n      el.insertBefore(a, b);\n    }\n    return a;\n  }\n\n  // remove all child elements at or above the given index\n  function domClear(el, index) {\n    var nodes = el.childNodes,\n        curr = nodes.length;\n    while (curr > index) el.removeChild(nodes[--curr]);\n    return el;\n  }\n\n  // generate css class name for mark\n  function cssClass(mark) {\n    return 'mark-' + mark.marktype\n      + (mark.role ? ' role-' + mark.role : '')\n      + (mark.name ? ' ' + mark.name : '');\n  }\n\n  function point$4(event, el) {\n    var rect = el.getBoundingClientRect();\n    return [\n      event.clientX - rect.left - (el.clientLeft || 0),\n      event.clientY - rect.top - (el.clientTop || 0)\n    ];\n  }\n\n  function resolveItem(item, event, el, origin) {\n    var mark = item && item.mark,\n        mdef, p;\n\n    if (mark && (mdef = Marks[mark.marktype]).tip) {\n      p = point$4(event, el);\n      p[0] -= origin[0];\n      p[1] -= origin[1];\n      while (item = item.mark.group) {\n        p[0] -= item.x || 0;\n        p[1] -= item.y || 0;\n      }\n      item = mdef.tip(mark.items, p);\n    }\n\n    return item;\n  }\n\n  /**\n   * Create a new Handler instance.\n   * @param {object} [customLoader] - Optional loader instance for\n   *   href URL sanitization. If not specified, a standard loader\n   *   instance will be generated.\n   * @param {function} [customTooltip] - Optional tooltip handler\n   *   function for custom tooltip display.\n   * @constructor\n   */\n  function Handler(customLoader, customTooltip) {\n    this._active = null;\n    this._handlers = {};\n    this._loader = customLoader || loader();\n    this._tooltip = customTooltip || defaultTooltip;\n  }\n\n  // The default tooltip display handler.\n  // Sets the HTML title attribute on the visualization container.\n  function defaultTooltip(handler, event, item, value) {\n    handler.element().setAttribute('title', value || '');\n  }\n\n  var prototype$J = Handler.prototype;\n\n  /**\n   * Initialize a new Handler instance.\n   * @param {DOMElement} el - The containing DOM element for the display.\n   * @param {Array<number>} origin - The origin of the display, in pixels.\n   *   The coordinate system will be translated to this point.\n   * @param {object} [obj] - Optional context object that should serve as\n   *   the \"this\" context for event callbacks.\n   * @return {Handler} - This handler instance.\n   */\n  prototype$J.initialize = function(el, origin, obj) {\n    this._el = el;\n    this._obj = obj || null;\n    return this.origin(origin);\n  };\n\n  /**\n   * Returns the parent container element for a visualization.\n   * @return {DOMElement} - The containing DOM element.\n   */\n  prototype$J.element = function() {\n    return this._el;\n  };\n\n  /**\n   * Returns the scene element (e.g., canvas or SVG) of the visualization\n   * Subclasses must override if the first child is not the scene element.\n   * @return {DOMElement} - The scene (e.g., canvas or SVG) element.\n   */\n  prototype$J.canvas = function() {\n    return this._el && this._el.firstChild;\n  };\n\n  /**\n   * Get / set the origin coordinates of the visualization.\n   */\n  prototype$J.origin = function(origin) {\n    if (arguments.length) {\n      this._origin = origin || [0, 0];\n      return this;\n    } else {\n      return this._origin.slice();\n    }\n  };\n\n  /**\n   * Get / set the scenegraph root.\n   */\n  prototype$J.scene = function(scene) {\n    if (!arguments.length) return this._scene;\n    this._scene = scene;\n    return this;\n  };\n\n  /**\n   * Add an event handler. Subclasses should override this method.\n   */\n  prototype$J.on = function(/*type, handler*/) {};\n\n  /**\n   * Remove an event handler. Subclasses should override this method.\n   */\n  prototype$J.off = function(/*type, handler*/) {};\n\n  /**\n   * Utility method for finding the array index of an event handler.\n   * @param {Array} h - An array of registered event handlers.\n   * @param {string} type - The event type.\n   * @param {function} handler - The event handler instance to find.\n   * @return {number} - The handler's array index or -1 if not registered.\n   */\n  prototype$J._handlerIndex = function(h, type, handler) {\n    for (var i = h ? h.length : 0; --i>=0;) {\n      if (h[i].type === type && (!handler || h[i].handler === handler)) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  /**\n   * Returns an array with registered event handlers.\n   * @param {string} [type] - The event type to query. Any annotations\n   *   are ignored; for example, for the argument \"click.foo\", \".foo\" will\n   *   be ignored and the method returns all \"click\" handlers. If type is\n   *   null or unspecified, this method returns handlers for all types.\n   * @return {Array} - A new array containing all registered event handlers.\n   */\n  prototype$J.handlers = function(type) {\n    var h = this._handlers, a = [], k;\n    if (type) {\n      a.push.apply(a, h[this.eventName(type)]);\n    } else {\n      for (k in h) { a.push.apply(a, h[k]); }\n    }\n    return a;\n  };\n\n  /**\n   * Parses an event name string to return the specific event type.\n   * For example, given \"click.foo\" returns \"click\"\n   * @param {string} name - The input event type string.\n   * @return {string} - A string with the event type only.\n   */\n  prototype$J.eventName = function(name) {\n    var i = name.indexOf('.');\n    return i < 0 ? name : name.slice(0,i);\n  };\n\n  /**\n   * Handle hyperlink navigation in response to an item.href value.\n   * @param {Event} event - The event triggering hyperlink navigation.\n   * @param {Item} item - The scenegraph item.\n   * @param {string} href - The URL to navigate to.\n   */\n  prototype$J.handleHref = function(event, item, href) {\n    this._loader\n      .sanitize(href, {context:'href'})\n      .then(function(opt) {\n        var e = new MouseEvent(event.type, event),\n            a = domCreate(null, 'a');\n        for (var name in opt) a.setAttribute(name, opt[name]);\n        a.dispatchEvent(e);\n      })\n      .catch(function() { /* do nothing */ });\n  };\n\n  /**\n   * Handle tooltip display in response to an item.tooltip value.\n   * @param {Event} event - The event triggering tooltip display.\n   * @param {Item} item - The scenegraph item.\n   * @param {boolean} show - A boolean flag indicating whether\n   *   to show or hide a tooltip for the given item.\n   */\n  prototype$J.handleTooltip = function(event, item, show) {\n    if (item && item.tooltip != null) {\n      item = resolveItem(item, event, this.canvas(), this._origin);\n      var value = (show && item && item.tooltip) || null;\n      this._tooltip.call(this._obj, this, event, item, value);\n    }\n  };\n\n  /**\n   * Returns the size of a scenegraph item and its position relative\n   * to the viewport.\n   * @param {Item} item - The scenegraph item.\n   * @return {object} - A bounding box object (compatible with the\n   *   DOMRect type) consisting of x, y, width, heigh, top, left,\n   *   right, and bottom properties.\n   */\n  prototype$J.getItemBoundingClientRect = function(item) {\n    if (!(el = this.canvas())) return;\n\n    var el, rect = el.getBoundingClientRect(),\n        origin = this._origin,\n        itemBounds = item.bounds,\n        x = itemBounds.x1 + origin[0] + rect.left,\n        y = itemBounds.y1 + origin[1] + rect.top,\n        w = itemBounds.width(),\n        h = itemBounds.height();\n\n    // translate coordinate for each parent group\n    while (item.mark && (item = item.mark.group)) {\n      x += item.x || 0;\n      y += item.y || 0;\n    }\n\n    // return DOMRect-compatible bounding box\n    return {\n      x:      x,\n      y:      y,\n      width:  w,\n      height: h,\n      left:   x,\n      top:    y,\n      right:  x + w,\n      bottom: y + h\n    };\n  };\n\n  /**\n   * Create a new Renderer instance.\n   * @param {object} [loader] - Optional loader instance for\n   *   image and href URL sanitization. If not specified, a\n   *   standard loader instance will be generated.\n   * @constructor\n   */\n  function Renderer(loader) {\n    this._el = null;\n    this._bgcolor = null;\n    this._loader = new ResourceLoader(loader);\n  }\n\n  var prototype$K = Renderer.prototype;\n\n  /**\n   * Initialize a new Renderer instance.\n   * @param {DOMElement} el - The containing DOM element for the display.\n   * @param {number} width - The coordinate width of the display, in pixels.\n   * @param {number} height - The coordinate height of the display, in pixels.\n   * @param {Array<number>} origin - The origin of the display, in pixels.\n   *   The coordinate system will be translated to this point.\n   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply\n   *   the width and height to determine the final pixel size.\n   * @return {Renderer} - This renderer instance.\n   */\n  prototype$K.initialize = function(el, width, height, origin, scaleFactor) {\n    this._el = el;\n    return this.resize(width, height, origin, scaleFactor);\n  };\n\n  /**\n   * Returns the parent container element for a visualization.\n   * @return {DOMElement} - The containing DOM element.\n   */\n  prototype$K.element = function() {\n    return this._el;\n  };\n\n  /**\n   * Returns the scene element (e.g., canvas or SVG) of the visualization\n   * Subclasses must override if the first child is not the scene element.\n   * @return {DOMElement} - The scene (e.g., canvas or SVG) element.\n   */\n  prototype$K.canvas = function() {\n    return this._el && this._el.firstChild;\n  };\n\n  /**\n   * Get / set the background color.\n   */\n  prototype$K.background = function(bgcolor) {\n    if (arguments.length === 0) return this._bgcolor;\n    this._bgcolor = bgcolor;\n    return this;\n  };\n\n  /**\n   * Resize the display.\n   * @param {number} width - The new coordinate width of the display, in pixels.\n   * @param {number} height - The new coordinate height of the display, in pixels.\n   * @param {Array<number>} origin - The new origin of the display, in pixels.\n   *   The coordinate system will be translated to this point.\n   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply\n   *   the width and height to determine the final pixel size.\n   * @return {Renderer} - This renderer instance;\n   */\n  prototype$K.resize = function(width, height, origin, scaleFactor) {\n    this._width = width;\n    this._height = height;\n    this._origin = origin || [0, 0];\n    this._scale = scaleFactor || 1;\n    return this;\n  };\n\n  /**\n   * Report a dirty item whose bounds should be redrawn.\n   * This base class method does nothing. Subclasses that perform\n   * incremental should implement this method.\n   * @param {Item} item - The dirty item whose bounds should be redrawn.\n   */\n  prototype$K.dirty = function(/*item*/) {\n  };\n\n  /**\n   * Render an input scenegraph, potentially with a set of dirty items.\n   * This method will perform an immediate rendering with available resources.\n   * The renderer may also need to perform image loading to perform a complete\n   * render. This process can lead to asynchronous re-rendering of the scene\n   * after this method returns. To receive notification when rendering is\n   * complete, use the renderAsync method instead.\n   * @param {object} scene - The root mark of a scenegraph to render.\n   * @return {Renderer} - This renderer instance.\n   */\n  prototype$K.render = function(scene) {\n    var r = this;\n\n    // bind arguments into a render call, and cache it\n    // this function may be subsequently called for async redraw\n    r._call = function() { r._render(scene); };\n\n    // invoke the renderer\n    r._call();\n\n    // clear the cached call for garbage collection\n    // async redraws will stash their own copy\n    r._call = null;\n\n    return r;\n  };\n\n  /**\n   * Internal rendering method. Renderer subclasses should override this\n   * method to actually perform rendering.\n   * @param {object} scene - The root mark of a scenegraph to render.\n   */\n  prototype$K._render = function(/*scene*/) {\n    // subclasses to override\n  };\n\n  /**\n   * Asynchronous rendering method. Similar to render, but returns a Promise\n   * that resolves when all rendering is completed. Sometimes a renderer must\n   * perform image loading to get a complete rendering. The returned\n   * Promise will not resolve until this process completes.\n   * @param {object} scene - The root mark of a scenegraph to render.\n   * @return {Promise} - A Promise that resolves when rendering is complete.\n   */\n  prototype$K.renderAsync = function(scene) {\n    var r = this.render(scene);\n    return this._ready\n      ? this._ready.then(function() { return r; })\n      : Promise.resolve(r);\n  };\n\n  /**\n   * Internal method for asynchronous resource loading.\n   * Proxies method calls to the ImageLoader, and tracks loading\n   * progress to invoke a re-render once complete.\n   * @param {string} method - The method name to invoke on the ImageLoader.\n   * @param {string} uri - The URI for the requested resource.\n   * @return {Promise} - A Promise that resolves to the requested resource.\n   */\n  prototype$K._load = function(method, uri) {\n    var r = this,\n        p = r._loader[method](uri);\n\n    if (!r._ready) {\n      // re-render the scene when loading completes\n      var call = r._call;\n      r._ready = r._loader.ready()\n        .then(function(redraw) {\n          if (redraw) call();\n          r._ready = null;\n        });\n    }\n\n    return p;\n  };\n\n  /**\n   * Sanitize a URL to include as a hyperlink in the rendered scene.\n   * This method proxies a call to ImageLoader.sanitizeURL, but also tracks\n   * image loading progress and invokes a re-render once complete.\n   * @param {string} uri - The URI string to sanitize.\n   * @return {Promise} - A Promise that resolves to the sanitized URL.\n   */\n  prototype$K.sanitizeURL = function(uri) {\n    return this._load('sanitizeURL', uri);\n  };\n\n  /**\n   * Requests an image to include in the rendered scene.\n   * This method proxies a call to ImageLoader.loadImage, but also tracks\n   * image loading progress and invokes a re-render once complete.\n   * @param {string} uri - The URI string of the image.\n   * @return {Promise} - A Promise that resolves to the loaded Image.\n   */\n  prototype$K.loadImage = function(uri) {\n    return this._load('loadImage', uri);\n  };\n\n  var Events = [\n    'keydown',\n    'keypress',\n    'keyup',\n    'dragenter',\n    'dragleave',\n    'dragover',\n    'mousedown',\n    'mouseup',\n    'mousemove',\n    'mouseout',\n    'mouseover',\n    'click',\n    'dblclick',\n    'wheel',\n    'mousewheel',\n    'touchstart',\n    'touchmove',\n    'touchend'\n  ];\n\n  var TooltipShowEvent = 'mousemove';\n\n  var TooltipHideEvent = 'mouseout';\n\n  var HrefEvent = 'click';\n\n  function CanvasHandler(loader, tooltip) {\n    Handler.call(this, loader, tooltip);\n    this._down = null;\n    this._touch = null;\n    this._first = true;\n  }\n\n  var prototype$L = inherits(CanvasHandler, Handler);\n\n  prototype$L.initialize = function(el, origin, obj) {\n    // add event listeners\n    var canvas = this._canvas = el && domFind(el, 'canvas');\n    if (canvas) {\n      var that = this;\n      this.events.forEach(function(type) {\n        canvas.addEventListener(type, function(evt) {\n          if (prototype$L[type]) {\n            prototype$L[type].call(that, evt);\n          } else {\n            that.fire(type, evt);\n          }\n        });\n      });\n    }\n\n    return Handler.prototype.initialize.call(this, el, origin, obj);\n  };\n\n  // return the backing canvas instance\n  prototype$L.canvas = function() {\n    return this._canvas;\n  };\n\n  // retrieve the current canvas context\n  prototype$L.context = function() {\n    return this._canvas.getContext('2d');\n  };\n\n  // supported events\n  prototype$L.events = Events;\n\n  // to keep old versions of firefox happy\n  prototype$L.DOMMouseScroll = function(evt) {\n    this.fire('mousewheel', evt);\n  };\n\n  function move(moveEvent, overEvent, outEvent) {\n    return function(evt) {\n      var a = this._active,\n          p = this.pickEvent(evt);\n\n      if (p === a) {\n        // active item and picked item are the same\n        this.fire(moveEvent, evt); // fire move\n      } else {\n        // active item and picked item are different\n        if (!a || !a.exit) {\n          // fire out for prior active item\n          // suppress if active item was removed from scene\n          this.fire(outEvent, evt);\n        }\n        this._active = p;          // set new active item\n        this.fire(overEvent, evt); // fire over for new active item\n        this.fire(moveEvent, evt); // fire move for new active item\n      }\n    };\n  }\n\n  function inactive(type) {\n    return function(evt) {\n      this.fire(type, evt);\n      this._active = null;\n    };\n  }\n\n  prototype$L.mousemove = move('mousemove', 'mouseover', 'mouseout');\n  prototype$L.dragover  = move('dragover', 'dragenter', 'dragleave');\n\n  prototype$L.mouseout  = inactive('mouseout');\n  prototype$L.dragleave = inactive('dragleave');\n\n  prototype$L.mousedown = function(evt) {\n    this._down = this._active;\n    this.fire('mousedown', evt);\n  };\n\n  prototype$L.click = function(evt) {\n    if (this._down === this._active) {\n      this.fire('click', evt);\n      this._down = null;\n    }\n  };\n\n  prototype$L.touchstart = function(evt) {\n    this._touch = this.pickEvent(evt.changedTouches[0]);\n\n    if (this._first) {\n      this._active = this._touch;\n      this._first = false;\n    }\n\n    this.fire('touchstart', evt, true);\n  };\n\n  prototype$L.touchmove = function(evt) {\n    this.fire('touchmove', evt, true);\n  };\n\n  prototype$L.touchend = function(evt) {\n    this.fire('touchend', evt, true);\n    this._touch = null;\n  };\n\n  // fire an event\n  prototype$L.fire = function(type, evt, touch) {\n    var a = touch ? this._touch : this._active,\n        h = this._handlers[type], i, len;\n\n    // set event type relative to scenegraph items\n    evt.vegaType = type;\n\n    // handle hyperlinks and tooltips first\n    if (type === HrefEvent && a && a.href) {\n      this.handleHref(evt, a, a.href);\n    } else if (type === TooltipShowEvent || type === TooltipHideEvent) {\n      this.handleTooltip(evt, a, type !== TooltipHideEvent);\n    }\n\n    // invoke all registered handlers\n    if (h) {\n      for (i=0, len=h.length; i<len; ++i) {\n        h[i].handler.call(this._obj, evt, a);\n      }\n    }\n  };\n\n  // add an event handler\n  prototype$L.on = function(type, handler) {\n    var name = this.eventName(type),\n        h = this._handlers,\n        i = this._handlerIndex(h[name], type, handler);\n\n    if (i < 0) {\n      (h[name] || (h[name] = [])).push({\n        type:    type,\n        handler: handler\n      });\n    }\n\n    return this;\n  };\n\n  // remove an event handler\n  prototype$L.off = function(type, handler) {\n    var name = this.eventName(type),\n        h = this._handlers[name],\n        i = this._handlerIndex(h, type, handler);\n\n    if (i >= 0) {\n      h.splice(i, 1);\n    }\n\n    return this;\n  };\n\n  prototype$L.pickEvent = function(evt) {\n    var p = point$4(evt, this._canvas),\n        o = this._origin;\n    return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);\n  };\n\n  // find the scenegraph item at the current mouse position\n  // x, y -- the absolute x, y mouse coordinates on the canvas element\n  // gx, gy -- the relative coordinates within the current group\n  prototype$L.pick = function(scene, x, y, gx, gy) {\n    var g = this.context(),\n        mark = Marks[scene.marktype];\n    return mark.pick.call(this, g, scene, x, y, gx, gy);\n  };\n\n  function devicePixelRatio() {\n    return typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1;\n  }\n\n  var pixelRatio = devicePixelRatio();\n\n  function resize(canvas, width, height, origin, scaleFactor, opt) {\n    const inDOM = typeof HTMLElement !== 'undefined'\n                && canvas instanceof HTMLElement\n                && canvas.parentNode != null,\n          context = canvas.getContext('2d'),\n          ratio = inDOM ? pixelRatio : scaleFactor;\n\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n\n    for (const key in opt) {\n      context[key] = opt[key];\n    }\n\n    if (inDOM && ratio !== 1) {\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n    }\n\n    context.pixelRatio = ratio;\n    context.setTransform(\n      ratio, 0, 0, ratio,\n      ratio * origin[0],\n      ratio * origin[1]\n    );\n\n    return canvas;\n  }\n\n  function CanvasRenderer(loader) {\n    Renderer.call(this, loader);\n    this._redraw = false;\n    this._dirty = new Bounds();\n  }\n\n  var prototype$M = inherits(CanvasRenderer, Renderer),\n      base = Renderer.prototype,\n      tempBounds$1 = new Bounds();\n\n  prototype$M.initialize = function(el, width, height, origin, scaleFactor, options) {\n    this._options = options;\n    this._canvas = domCanvas(1, 1, options && options.type); // instantiate a small canvas\n\n    if (el) {\n      domClear(el, 0).appendChild(this._canvas);\n      this._canvas.setAttribute('class', 'marks');\n    }\n    // this method will invoke resize to size the canvas appropriately\n    return base.initialize.call(this, el, width, height, origin, scaleFactor);\n  };\n\n  prototype$M.resize = function(width, height, origin, scaleFactor) {\n    base.resize.call(this, width, height, origin, scaleFactor);\n    resize(this._canvas, this._width, this._height,\n      this._origin, this._scale, this._options && this._options.context);\n    this._redraw = true;\n    return this;\n  };\n\n  prototype$M.canvas = function() {\n    return this._canvas;\n  };\n\n  prototype$M.context = function() {\n    return this._canvas ? this._canvas.getContext('2d') : null;\n  };\n\n  prototype$M.dirty = function(item) {\n    var b = translate$1(item.bounds, item.mark.group);\n    this._dirty.union(b);\n  };\n\n  function clipToBounds(g, b, origin) {\n    // expand bounds by 1 pixel, then round to pixel boundaries\n    b.expand(1).round();\n\n    // align to base pixel grid in case of non-integer scaling (#2425)\n    if (g.pixelRatio % 1) {\n      b.scale(g.pixelRatio).round().scale(1 / g.pixelRatio);\n    }\n\n    // to avoid artifacts translate if origin has fractional pixels\n    b.translate(-(origin[0] % 1), -(origin[1] % 1));\n\n    // set clip path\n    g.beginPath();\n    g.rect(b.x1, b.y1, b.width(), b.height());\n    g.clip();\n\n    return b;\n  }\n\n  function viewBounds(origin, width, height) {\n    return tempBounds$1\n      .set(0, 0, width, height)\n      .translate(-origin[0], -origin[1]);\n  }\n\n  function translate$1(bounds, group) {\n    if (group == null) return bounds;\n    var b = tempBounds$1.clear().union(bounds);\n    for (; group != null; group = group.mark.group) {\n      b.translate(group.x || 0, group.y || 0);\n    }\n    return b;\n  }\n\n  prototype$M._render = function(scene) {\n    var g = this.context(),\n        o = this._origin,\n        w = this._width,\n        h = this._height,\n        b = this._dirty;\n\n    // setup\n    g.save();\n    if (this._redraw || b.empty()) {\n      this._redraw = false;\n      b = viewBounds(o, w, h).expand(1);\n    } else {\n      b = clipToBounds(g, b.intersect(viewBounds(o, w, h)), o);\n    }\n\n    this.clear(-o[0], -o[1], w, h);\n\n    // render\n    this.draw(g, scene, b);\n\n    // takedown\n    g.restore();\n\n    this._dirty.clear();\n    return this;\n  };\n\n  prototype$M.draw = function(ctx, scene, bounds) {\n    var mark = Marks[scene.marktype];\n    if (scene.clip) clip(ctx, scene);\n    mark.draw.call(this, ctx, scene, bounds);\n    if (scene.clip) ctx.restore();\n  };\n\n  prototype$M.clear = function(x, y, w, h) {\n    var g = this.context();\n    g.clearRect(x, y, w, h);\n    if (this._bgcolor != null) {\n      g.fillStyle = this._bgcolor;\n      g.fillRect(x, y, w, h);\n    }\n  };\n\n  function SVGHandler(loader, tooltip) {\n    Handler.call(this, loader, tooltip);\n    var h = this;\n    h._hrefHandler = listener(h, function(evt, item) {\n      if (item && item.href) h.handleHref(evt, item, item.href);\n    });\n    h._tooltipHandler = listener(h, function(evt, item) {\n      h.handleTooltip(evt, item, evt.type !== TooltipHideEvent);\n    });\n  }\n\n  var prototype$N = inherits(SVGHandler, Handler);\n\n  prototype$N.initialize = function(el, origin, obj) {\n    var svg = this._svg;\n    if (svg) {\n      svg.removeEventListener(HrefEvent, this._hrefHandler);\n      svg.removeEventListener(TooltipShowEvent, this._tooltipHandler);\n      svg.removeEventListener(TooltipHideEvent, this._tooltipHandler);\n    }\n    this._svg = svg = el && domFind(el, 'svg');\n    if (svg) {\n      svg.addEventListener(HrefEvent, this._hrefHandler);\n      svg.addEventListener(TooltipShowEvent, this._tooltipHandler);\n      svg.addEventListener(TooltipHideEvent, this._tooltipHandler);\n    }\n    return Handler.prototype.initialize.call(this, el, origin, obj);\n  };\n\n  prototype$N.canvas = function() {\n    return this._svg;\n  };\n\n  // wrap an event listener for the SVG DOM\n  function listener(context, handler) {\n    return function(evt) {\n      var target = evt.target,\n          item = target.__data__;\n      evt.vegaType = evt.type;\n      item = Array.isArray(item) ? item[0] : item;\n      handler.call(context._obj, evt, item);\n    };\n  }\n\n  // add an event handler\n  prototype$N.on = function(type, handler) {\n    var name = this.eventName(type),\n        h = this._handlers,\n        i = this._handlerIndex(h[name], type, handler);\n\n    if (i < 0) {\n      var x = {\n        type:     type,\n        handler:  handler,\n        listener: listener(this, handler)\n      };\n\n      (h[name] || (h[name] = [])).push(x);\n      if (this._svg) {\n        this._svg.addEventListener(name, x.listener);\n      }\n    }\n\n    return this;\n  };\n\n  // remove an event handler\n  prototype$N.off = function(type, handler) {\n    var name = this.eventName(type),\n        h = this._handlers[name],\n        i = this._handlerIndex(h, type, handler);\n\n    if (i >= 0) {\n      if (this._svg) {\n        this._svg.removeEventListener(name, h[i].listener);\n      }\n      h.splice(i, 1);\n    }\n\n    return this;\n  };\n\n  // generate string for an opening xml tag\n  // tag: the name of the xml tag\n  // attr: hash of attribute name-value pairs to include\n  // raw: additional raw string to include in tag markup\n  function openTag(tag, attr, raw) {\n    var s = '<' + tag, key, val;\n    if (attr) {\n      for (key in attr) {\n        val = attr[key];\n        if (val != null) {\n          s += ' ' + key + '=\"' + val + '\"';\n        }\n      }\n    }\n    if (raw) s += ' ' + raw;\n    return s + '>';\n  }\n\n  // generate string for closing xml tag\n  // tag: the name of the xml tag\n  function closeTag(tag) {\n    return '</' + tag + '>';\n  }\n\n  var metadata = {\n    'version': '1.1',\n    'xmlns': 'http://www.w3.org/2000/svg',\n    'xmlns:xlink': 'http://www.w3.org/1999/xlink'\n  };\n\n  var styles = {\n    'fill':             'fill',\n    'fillOpacity':      'fill-opacity',\n    'stroke':           'stroke',\n    'strokeOpacity':    'stroke-opacity',\n    'strokeWidth':      'stroke-width',\n    'strokeCap':        'stroke-linecap',\n    'strokeJoin':       'stroke-linejoin',\n    'strokeDash':       'stroke-dasharray',\n    'strokeDashOffset': 'stroke-dashoffset',\n    'strokeMiterLimit': 'stroke-miterlimit',\n    'opacity':          'opacity',\n    'blend':            'mix-blend-mode'\n  };\n\n  var styleProperties = Object.keys(styles);\n\n  var ns = metadata.xmlns;\n\n  function SVGRenderer(loader) {\n    Renderer.call(this, loader);\n    this._dirtyID = 0;\n    this._dirty = [];\n    this._svg = null;\n    this._root = null;\n    this._defs = null;\n  }\n\n  var prototype$O = inherits(SVGRenderer, Renderer);\n  var base$1 = Renderer.prototype;\n\n  prototype$O.initialize = function(el, width, height, padding) {\n    if (el) {\n      this._svg = domChild(el, 0, 'svg', ns);\n      this._svg.setAttribute('class', 'marks');\n      domClear(el, 1);\n      // set the svg root group\n      this._root = domChild(this._svg, 0, 'g', ns);\n      domClear(this._svg, 1);\n    }\n\n    // create the svg definitions cache\n    this._defs = {\n      gradient: {},\n      clipping: {}\n    };\n\n    // set background color if defined\n    this.background(this._bgcolor);\n\n    return base$1.initialize.call(this, el, width, height, padding);\n  };\n\n  prototype$O.background = function(bgcolor) {\n    if (arguments.length && this._svg) {\n      this._svg.style.setProperty('background-color', bgcolor);\n    }\n    return base$1.background.apply(this, arguments);\n  };\n\n  prototype$O.resize = function(width, height, origin, scaleFactor) {\n    base$1.resize.call(this, width, height, origin, scaleFactor);\n\n    if (this._svg) {\n      this._svg.setAttribute('width', this._width * this._scale);\n      this._svg.setAttribute('height', this._height * this._scale);\n      this._svg.setAttribute('viewBox', '0 0 ' + this._width + ' ' + this._height);\n      this._root.setAttribute('transform', 'translate(' + this._origin + ')');\n    }\n\n    this._dirty = [];\n\n    return this;\n  };\n\n  prototype$O.canvas = function() {\n    return this._svg;\n  };\n\n  prototype$O.svg = function() {\n    if (!this._svg) return null;\n\n    var attr = {\n      class:   'marks',\n      width:   this._width * this._scale,\n      height:  this._height * this._scale,\n      viewBox: '0 0 ' + this._width + ' ' + this._height\n    };\n    for (var key in metadata) {\n      attr[key] = metadata[key];\n    }\n\n    var bg = !this._bgcolor ? ''\n      : (openTag('rect', {\n          width:  this._width,\n          height: this._height,\n          style:  'fill: ' + this._bgcolor + ';'\n        }) + closeTag('rect'));\n\n    return openTag('svg', attr) + bg + this._svg.innerHTML + closeTag('svg');\n  };\n\n\n  // -- Render entry point --\n\n  prototype$O._render = function(scene) {\n    // perform spot updates and re-render markup\n    if (this._dirtyCheck()) {\n      if (this._dirtyAll) this._resetDefs();\n      this.draw(this._root, scene);\n      domClear(this._root, 1);\n    }\n\n    this.updateDefs();\n\n    this._dirty = [];\n    ++this._dirtyID;\n\n    return this;\n  };\n\n  // -- Manage SVG definitions ('defs') block --\n\n  prototype$O.updateDefs = function() {\n    var svg = this._svg,\n        defs = this._defs,\n        el = defs.el,\n        index = 0, id;\n\n    for (id in defs.gradient) {\n      if (!el) defs.el = (el = domChild(svg, 0, 'defs', ns));\n      index = updateGradient(el, defs.gradient[id], index);\n    }\n\n    for (id in defs.clipping) {\n      if (!el) defs.el = (el = domChild(svg, 0, 'defs', ns));\n      index = updateClipping(el, defs.clipping[id], index);\n    }\n\n    // clean-up\n    if (el) {\n      if (index === 0) {\n        svg.removeChild(el);\n        defs.el = null;\n      } else {\n        domClear(el, index);\n      }\n    }\n  };\n\n  function updateGradient(el, grad, index) {\n    var i, n, stop;\n\n    if (grad.gradient === 'radial') {\n      // SVG radial gradients automatically transform to normalized bbox\n      // coordinates, in a way that is cumbersome to replicate in canvas.\n      // We wrap the radial gradient in a pattern element, allowing us to\n      // maintain a circular gradient that matches what canvas provides.\n      var pt = domChild(el, index++, 'pattern', ns);\n      pt.setAttribute('id', patternPrefix + grad.id);\n      pt.setAttribute('viewBox', '0,0,1,1');\n      pt.setAttribute('width', '100%');\n      pt.setAttribute('height', '100%');\n      pt.setAttribute('preserveAspectRatio', 'xMidYMid slice');\n\n      pt = domChild(pt, 0, 'rect', ns);\n      pt.setAttribute('width', '1');\n      pt.setAttribute('height', '1');\n      pt.setAttribute('fill', 'url(' + href() + '#' + grad.id + ')');\n\n      el = domChild(el, index++, 'radialGradient', ns);\n      el.setAttribute('id', grad.id);\n      el.setAttribute('fx', grad.x1);\n      el.setAttribute('fy', grad.y1);\n      el.setAttribute('fr', grad.r1);\n      el.setAttribute('cx', grad.x2);\n      el.setAttribute('cy', grad.y2);\n      el.setAttribute( 'r', grad.r2);\n    } else {\n      el = domChild(el, index++, 'linearGradient', ns);\n      el.setAttribute('id', grad.id);\n      el.setAttribute('x1', grad.x1);\n      el.setAttribute('x2', grad.x2);\n      el.setAttribute('y1', grad.y1);\n      el.setAttribute('y2', grad.y2);\n    }\n\n    for (i=0, n=grad.stops.length; i<n; ++i) {\n      stop = domChild(el, i, 'stop', ns);\n      stop.setAttribute('offset', grad.stops[i].offset);\n      stop.setAttribute('stop-color', grad.stops[i].color);\n    }\n    domClear(el, i);\n\n    return index;\n  }\n\n  function updateClipping(el, clip, index) {\n    var mask;\n\n    el = domChild(el, index, 'clipPath', ns);\n    el.setAttribute('id', clip.id);\n\n    if (clip.path) {\n      mask = domChild(el, 0, 'path', ns);\n      mask.setAttribute('d', clip.path);\n    } else {\n      mask = domChild(el, 0, 'rect', ns);\n      mask.setAttribute('x', 0);\n      mask.setAttribute('y', 0);\n      mask.setAttribute('width', clip.width);\n      mask.setAttribute('height', clip.height);\n    }\n    domClear(el, 1);\n\n    return index + 1;\n  }\n\n  prototype$O._resetDefs = function() {\n    var def = this._defs;\n    def.gradient = {};\n    def.clipping = {};\n  };\n\n\n  // -- Manage rendering of items marked as dirty --\n\n  prototype$O.dirty = function(item) {\n    if (item.dirty !== this._dirtyID) {\n      item.dirty = this._dirtyID;\n      this._dirty.push(item);\n    }\n  };\n\n  prototype$O.isDirty = function(item) {\n    return this._dirtyAll\n      || !item._svg\n      || item.dirty === this._dirtyID;\n  };\n\n  prototype$O._dirtyCheck = function() {\n    this._dirtyAll = true;\n    var items = this._dirty;\n    if (!items.length || !this._dirtyID) return true;\n\n    var id = ++this._dirtyID,\n        item, mark, type, mdef, i, n, o;\n\n    for (i=0, n=items.length; i<n; ++i) {\n      item = items[i];\n      mark = item.mark;\n\n      if (mark.marktype !== type) {\n        // memoize mark instance lookup\n        type = mark.marktype;\n        mdef = Marks[type];\n      }\n\n      if (mark.zdirty && mark.dirty !== id) {\n        this._dirtyAll = false;\n        dirtyParents(item, id);\n        mark.items.forEach(function(i) { i.dirty = id; });\n      }\n      if (mark.zdirty) continue; // handle in standard drawing pass\n\n      if (item.exit) { // EXIT\n        if (mdef.nested && mark.items.length) {\n          // if nested mark with remaining points, update instead\n          o = mark.items[0];\n          if (o._svg) this._update(mdef, o._svg, o);\n        } else if (item._svg) {\n          // otherwise remove from DOM\n          o = item._svg.parentNode;\n          if (o) o.removeChild(item._svg);\n        }\n        item._svg = null;\n        continue;\n      }\n\n      item = (mdef.nested ? mark.items[0] : item);\n      if (item._update === id) continue; // already visited\n\n      if (!item._svg || !item._svg.ownerSVGElement) {\n        // ENTER\n        this._dirtyAll = false;\n        dirtyParents(item, id);\n      } else {\n        // IN-PLACE UPDATE\n        this._update(mdef, item._svg, item);\n      }\n      item._update = id;\n    }\n    return !this._dirtyAll;\n  };\n\n  function dirtyParents(item, id) {\n    for (; item && item.dirty !== id; item=item.mark.group) {\n      item.dirty = id;\n      if (item.mark && item.mark.dirty !== id) {\n        item.mark.dirty = id;\n      } else return;\n    }\n  }\n\n\n  // -- Construct & maintain scenegraph to SVG mapping ---\n\n  // Draw a mark container.\n  prototype$O.draw = function(el, scene, prev) {\n    if (!this.isDirty(scene)) return scene._svg;\n\n    var renderer = this,\n        svg = this._svg,\n        mdef = Marks[scene.marktype],\n        events = scene.interactive === false ? 'none' : null,\n        isGroup = mdef.tag === 'g',\n        sibling = null,\n        i = 0,\n        parent;\n\n    parent = bind(scene, el, prev, 'g', svg);\n    parent.setAttribute('class', cssClass(scene));\n    if (!isGroup) {\n      parent.style.setProperty('pointer-events', events);\n    }\n    if (scene.clip) {\n      parent.setAttribute('clip-path', clip$1(renderer, scene, scene.group));\n    } else {\n      parent.removeAttribute('clip-path');\n    }\n\n    function process(item) {\n      var dirty = renderer.isDirty(item),\n          node = bind(item, parent, sibling, mdef.tag, svg);\n\n      if (dirty) {\n        renderer._update(mdef, node, item);\n        if (isGroup) recurse(renderer, node, item);\n      }\n\n      sibling = node;\n      ++i;\n    }\n\n    if (mdef.nested) {\n      if (scene.items.length) process(scene.items[0]);\n    } else {\n      visit(scene, process);\n    }\n\n    domClear(parent, i);\n    return parent;\n  };\n\n  // Recursively process group contents.\n  function recurse(renderer, el, group) {\n    el = el.lastChild.previousSibling;\n    var prev, idx = 0;\n\n    visit(group, function(item) {\n      prev = renderer.draw(el, item, prev);\n      ++idx;\n    });\n\n    // remove any extraneous DOM elements\n    domClear(el, 1 + idx);\n  }\n\n  // Bind a scenegraph item to an SVG DOM element.\n  // Create new SVG elements as needed.\n  function bind(item, el, sibling, tag, svg) {\n    var node = item._svg, doc;\n\n    // create a new dom node if needed\n    if (!node) {\n      doc = el.ownerDocument;\n      node = domCreate(doc, tag, ns);\n      item._svg = node;\n\n      if (item.mark) {\n        node.__data__ = item;\n        node.__values__ = {fill: 'default'};\n\n        // if group, create background, content, and foreground elements\n        if (tag === 'g') {\n          var bg = domCreate(doc, 'path', ns);\n          node.appendChild(bg);\n          bg.__data__ = item;\n\n          var cg = domCreate(doc, 'g', ns);\n          node.appendChild(cg);\n          cg.__data__ = item;\n\n          var fg = domCreate(doc, 'path', ns);\n          node.appendChild(fg);\n          fg.__data__ = item;\n          fg.__values__ = {fill: 'default'};\n        }\n      }\n    }\n\n    // (re-)insert if (a) not contained in SVG or (b) sibling order has changed\n    if (node.ownerSVGElement !== svg || siblingCheck(node, sibling)) {\n      el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);\n    }\n\n    return node;\n  }\n\n  function siblingCheck(node, sibling) {\n    return node.parentNode\n      && node.parentNode.childNodes.length > 1\n      && node.previousSibling != sibling; // treat null/undefined the same\n  }\n\n\n  // -- Set attributes & styles on SVG elements ---\n\n  var element = null, // temp var for current SVG element\n      values = null;  // temp var for current values hash\n\n  // Extra configuration for certain mark types\n  var mark_extras = {\n    group: function(mdef, el, item) {\n      var fg, bg;\n\n      element = fg = el.childNodes[2];\n      values = fg.__values__;\n      mdef.foreground(emit, item, this);\n\n      values = el.__values__; // use parent's values hash\n      element = el.childNodes[1];\n      mdef.content(emit, item, this);\n\n      element = bg = el.childNodes[0];\n      mdef.background(emit, item, this);\n\n      var value = item.mark.interactive === false ? 'none' : null;\n      if (value !== values.events) {\n        fg.style.setProperty('pointer-events', value);\n        bg.style.setProperty('pointer-events', value);\n        values.events = value;\n      }\n\n      if (item.strokeForeground && item.stroke) {\n        const fill = item.fill;\n        fg.style.removeProperty('display');\n\n        // set style of background\n        this.style(bg, item);\n        bg.style.removeProperty('stroke');\n\n        // set style of foreground\n        if (fill) item.fill = null;\n        values = fg.__values__;\n        this.style(fg, item);\n        if (fill) item.fill = fill;\n\n        // leave element null to prevent downstream styling\n        element = null;\n      } else {\n        // ensure foreground is ignored\n        fg.style.setProperty('display', 'none');\n        fg.style.setProperty('fill', 'none');\n      }\n    },\n    image: function(mdef, el, item) {\n      if (item.smooth === false) {\n        setStyle(el, 'image-rendering', 'optimizeSpeed');\n        setStyle(el, 'image-rendering', 'pixelated');\n      } else {\n        setStyle(el, 'image-rendering', null);\n      }\n    },\n    text: function(mdef, el, item) {\n      var tl = textLines(item),\n          key, value, doc, lh;\n\n      if (isArray(tl)) {\n        // multi-line text\n        value = tl.map(_ => textValue(item, _));\n        key = value.join('\\n'); // content cache key\n\n        if (key !== values.text) {\n          domClear(el, 0);\n          doc = el.ownerDocument;\n          lh = lineHeight(item);\n          value.forEach((t, i) => {\n            const ts = domCreate(doc, 'tspan', ns);\n            ts.__data__ = item; // data binding\n            ts.textContent = t;\n            if (i) {\n              ts.setAttribute('x', 0);\n              ts.setAttribute('dy', lh);\n            }\n            el.appendChild(ts);\n          });\n          values.text = key;\n        }\n      } else {\n        // single-line text\n        value = textValue(item, tl);\n        if (value !== values.text) {\n          el.textContent = value;\n          values.text = value;\n        }\n      }\n\n      setStyle(el, 'font-family', fontFamily(item));\n      setStyle(el, 'font-size', fontSize(item) + 'px');\n      setStyle(el, 'font-style', item.fontStyle);\n      setStyle(el, 'font-variant', item.fontVariant);\n      setStyle(el, 'font-weight', item.fontWeight);\n    }\n  };\n\n  function setStyle(el, name, value) {\n    if (value !== values[name]) {\n      if (value == null) {\n        el.style.removeProperty(name);\n      } else {\n        el.style.setProperty(name, value + '');\n      }\n      values[name] = value;\n    }\n  }\n\n  prototype$O._update = function(mdef, el, item) {\n    // set dom element and values cache\n    // provides access to emit method\n    element = el;\n    values = el.__values__;\n\n    // apply svg attributes\n    mdef.attr(emit, item, this);\n\n    // some marks need special treatment\n    var extra = mark_extras[mdef.type];\n    if (extra) extra.call(this, mdef, el, item);\n\n    // apply svg css styles\n    // note: element may be modified by 'extra' method\n    if (element) this.style(element, item);\n  };\n\n  function emit(name, value, ns) {\n    // early exit if value is unchanged\n    if (value === values[name]) return;\n\n    if (value != null) {\n      // if value is provided, update DOM attribute\n      if (ns) {\n        element.setAttributeNS(ns, name, value);\n      } else {\n        element.setAttribute(name, value);\n      }\n    } else {\n      // else remove DOM attribute\n      if (ns) {\n        element.removeAttributeNS(ns, name);\n      } else {\n        element.removeAttribute(name);\n      }\n    }\n\n    // note current value for future comparison\n    values[name] = value;\n  }\n\n  prototype$O.style = function(el, o) {\n    if (o == null) return;\n    var i, n, prop, name, value;\n\n    for (i=0, n=styleProperties.length; i<n; ++i) {\n      prop = styleProperties[i];\n      value = o[prop];\n\n      if (prop === 'font') {\n        value = fontFamily(o);\n      }\n\n      if (value === values[prop]) continue;\n\n      name = styles[prop];\n      if (value == null) {\n        if (name === 'fill') {\n          el.style.setProperty(name, 'none');\n        } else {\n          el.style.removeProperty(name);\n        }\n      } else {\n        if (isGradient(value)) {\n          value = gradientRef(value, this._defs.gradient, href());\n        }\n        el.style.setProperty(name, value + '');\n      }\n\n      values[prop] = value;\n    }\n  };\n\n  function href() {\n    var loc;\n    return typeof window === 'undefined' ? ''\n      : (loc = window.location).hash ? loc.href.slice(0, -loc.hash.length)\n      : loc.href;\n  }\n\n  function SVGStringRenderer(loader) {\n    Renderer.call(this, loader);\n\n    this._text = {\n      head: '',\n      bg:   '',\n      root: '',\n      foot: '',\n      defs: '',\n      body: ''\n    };\n\n    this._defs = {\n      gradient: {},\n      clipping: {}\n    };\n  }\n\n  var prototype$P = inherits(SVGStringRenderer, Renderer);\n  var base$2 = Renderer.prototype;\n\n  prototype$P.resize = function(width, height, origin, scaleFactor) {\n    base$2.resize.call(this, width, height, origin, scaleFactor);\n    var o = this._origin,\n        t = this._text;\n\n    var attr = {\n      class:   'marks',\n      width:   this._width * this._scale,\n      height:  this._height * this._scale,\n      viewBox: '0 0 ' + this._width + ' ' + this._height\n    };\n    for (var key in metadata) {\n      attr[key] = metadata[key];\n    }\n\n    t.head = openTag('svg', attr);\n\n    var bg = this._bgcolor;\n    if (bg === 'transparent' || bg === 'none') bg = null;\n\n    if (bg) {\n      t.bg = openTag('rect', {\n        width:  this._width,\n        height: this._height,\n        style:  'fill: ' + bg + ';'\n      }) + closeTag('rect');\n    } else {\n      t.bg = '';\n    }\n\n    t.root = openTag('g', {\n      transform: 'translate(' + o + ')'\n    });\n\n    t.foot = closeTag('g') + closeTag('svg');\n\n    return this;\n  };\n\n  prototype$P.background = function() {\n    var rv = base$2.background.apply(this, arguments);\n    if (arguments.length && this._text.head) {\n      this.resize(this._width, this._height, this._origin, this._scale);\n    }\n    return rv;\n  };\n\n  prototype$P.svg = function() {\n    var t = this._text;\n    return t.head + t.bg + t.defs + t.root + t.body + t.foot;\n  };\n\n  prototype$P._render = function(scene) {\n    this._text.body = this.mark(scene);\n    this._text.defs = this.buildDefs();\n    return this;\n  };\n\n  prototype$P.buildDefs = function() {\n    var all = this._defs,\n        defs = '',\n        i, id, def, tag, stops;\n\n    for (id in all.gradient) {\n      def = all.gradient[id];\n      stops = def.stops;\n\n      if (def.gradient === 'radial') {\n        // SVG radial gradients automatically transform to normalized bbox\n        // coordinates, in a way that is cumbersome to replicate in canvas.\n        // We wrap the radial gradient in a pattern element, allowing us to\n        // maintain a circular gradient that matches what canvas provides.\n\n        defs += openTag(tag = 'pattern', {\n          id: patternPrefix + id,\n          viewBox: '0,0,1,1',\n          width: '100%',\n          height: '100%',\n          preserveAspectRatio: 'xMidYMid slice'\n        });\n\n        defs += openTag('rect', {\n          width: '1',\n          height: '1',\n          fill: 'url(#' + id + ')'\n        }) + closeTag('rect');\n\n        defs += closeTag(tag);\n\n        defs += openTag(tag = 'radialGradient', {\n          id: id,\n          fx: def.x1,\n          fy: def.y1,\n          fr: def.r1,\n          cx: def.x2,\n          cy: def.y2,\n           r: def.r2\n        });\n      } else {\n        defs += openTag(tag = 'linearGradient', {\n          id: id,\n          x1: def.x1,\n          x2: def.x2,\n          y1: def.y1,\n          y2: def.y2\n        });\n      }\n\n      for (i=0; i<stops.length; ++i) {\n        defs += openTag('stop', {\n          offset: stops[i].offset,\n          'stop-color': stops[i].color\n        }) + closeTag('stop');\n      }\n\n      defs += closeTag(tag);\n    }\n\n    for (id in all.clipping) {\n      def = all.clipping[id];\n\n      defs += openTag('clipPath', {id: id});\n\n      if (def.path) {\n        defs += openTag('path', {\n          d: def.path\n        }) + closeTag('path');\n      } else {\n        defs += openTag('rect', {\n          x: 0,\n          y: 0,\n          width: def.width,\n          height: def.height\n        }) + closeTag('rect');\n      }\n\n      defs += closeTag('clipPath');\n    }\n\n    return (defs.length > 0) ? openTag('defs') + defs + closeTag('defs') : '';\n  };\n\n  var object$1;\n\n  function emit$1(name, value, ns, prefixed) {\n    object$1[prefixed || name] = value;\n  }\n\n  prototype$P.attributes = function(attr, item) {\n    object$1 = {};\n    attr(emit$1, item, this);\n    return object$1;\n  };\n\n  prototype$P.href = function(item) {\n    var that = this,\n        href = item.href,\n        attr;\n\n    if (href) {\n      if (attr = that._hrefs && that._hrefs[href]) {\n        return attr;\n      } else {\n        that.sanitizeURL(href).then(function(attr) {\n          // rewrite to use xlink namespace\n          // note that this will be deprecated in SVG 2.0\n          attr['xlink:href'] = attr.href;\n          attr.href = null;\n          (that._hrefs || (that._hrefs = {}))[href] = attr;\n        });\n      }\n    }\n    return null;\n  };\n\n  prototype$P.mark = function(scene) {\n    var renderer = this,\n        mdef = Marks[scene.marktype],\n        tag  = mdef.tag,\n        defs = this._defs,\n        str = '',\n        style;\n\n    if (tag !== 'g' && scene.interactive === false) {\n      style = 'style=\"pointer-events: none;\"';\n    }\n\n    // render opening group tag\n    str += openTag('g', {\n      'class': cssClass(scene),\n      'clip-path': scene.clip ? clip$1(renderer, scene, scene.group) : null\n    }, style);\n\n    // render contained elements\n    function process(item) {\n      var href = renderer.href(item);\n      if (href) str += openTag('a', href);\n\n      style = (tag !== 'g') ? applyStyles(item, scene, tag, defs) : null;\n      str += openTag(tag, renderer.attributes(mdef.attr, item), style);\n\n      if (tag === 'text') {\n        const tl = textLines(item);\n        if (isArray(tl)) {\n          // multi-line text\n          const attrs = {x: 0, dy: lineHeight(item)};\n          for (let i=0; i<tl.length; ++i) {\n            str += openTag('tspan', i ? attrs: null)\n              + escape_text(textValue(item, tl[i]))\n              + closeTag('tspan');\n          }\n        } else {\n          // single-line text\n          str += escape_text(textValue(item, tl));\n        }\n      } else if (tag === 'g') {\n        const fore = item.strokeForeground,\n              fill = item.fill,\n              stroke = item.stroke;\n\n        if (fore && stroke) {\n          item.stroke = null;\n        }\n\n        str += openTag('path', renderer.attributes(mdef.background, item),\n          applyStyles(item, scene, 'bgrect', defs)) + closeTag('path');\n\n        str += openTag('g', renderer.attributes(mdef.content, item))\n          + renderer.markGroup(item)\n          + closeTag('g');\n\n        if (fore && stroke) {\n          if (fill) item.fill = null;\n          item.stroke = stroke;\n\n          str += openTag('path', renderer.attributes(mdef.foreground, item),\n            applyStyles(item, scene, 'bgrect', defs)) + closeTag('path');\n\n          if (fill) item.fill = fill;\n        } else {\n          str += openTag('path', renderer.attributes(mdef.foreground, item),\n            applyStyles({}, scene, 'bgfore', defs)) + closeTag('path');\n        }\n      }\n\n      str += closeTag(tag);\n      if (href) str += closeTag('a');\n    }\n\n    if (mdef.nested) {\n      if (scene.items && scene.items.length) process(scene.items[0]);\n    } else {\n      visit(scene, process);\n    }\n\n    // render closing group tag\n    return str + closeTag('g');\n  };\n\n  prototype$P.markGroup = function(scene) {\n    var renderer = this,\n        str = '';\n\n    visit(scene, function(item) {\n      str += renderer.mark(item);\n    });\n\n    return str;\n  };\n\n  function applyStyles(o, mark, tag, defs) {\n    if (o == null) return '';\n    var i, n, prop, name, value, s = '';\n\n    if (tag === 'bgrect' && mark.interactive === false) {\n      s += 'pointer-events: none; ';\n    }\n\n    if (tag === 'bgfore') {\n      if (mark.interactive === false) {\n        s += 'pointer-events: none; ';\n      }\n      s += 'display: none; ';\n    }\n\n    if (tag === 'image') {\n      if (o.smooth === false) {\n        s += 'image-rendering: optimizeSpeed; image-rendering: pixelated; ';\n      }\n    }\n\n    if (tag === 'text') {\n      s += 'font-family: ' + fontFamily(o) + '; ';\n      s += 'font-size: ' + fontSize(o) + 'px; ';\n      if (o.fontStyle) s += 'font-style: ' + o.fontStyle + '; ';\n      if (o.fontVariant) s += 'font-variant: ' + o.fontVariant + '; ';\n      if (o.fontWeight) s += 'font-weight: ' + o.fontWeight + '; ';\n    }\n\n    for (i=0, n=styleProperties.length; i<n; ++i) {\n      prop = styleProperties[i];\n      name = styles[prop];\n      value = o[prop];\n\n      if (value == null) {\n        if (name === 'fill') {\n          s += 'fill: none; ';\n        }\n      } else if (value === 'transparent' && (name === 'fill' || name === 'stroke')) {\n        // transparent is not a legal SVG value, so map to none instead\n        s += name + ': none; ';\n      } else {\n        if (isGradient(value)) {\n          value = gradientRef(value, defs.gradient, '');\n        }\n        s += name + ': ' + value + '; ';\n      }\n    }\n\n    return s ? 'style=\"' + s.trim() + '\"' : null;\n  }\n\n  function escape_text(s) {\n    return s.replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n  }\n\n  var Canvas = 'canvas';\n  var PNG = 'png';\n  var SVG = 'svg';\n  var None$2 = 'none';\n\n  var RenderType = {\n    Canvas: Canvas,\n    PNG:    PNG,\n    SVG:    SVG,\n    None:   None$2\n  };\n\n  var modules = {};\n\n  modules[Canvas] = modules[PNG] = {\n    renderer: CanvasRenderer,\n    headless: CanvasRenderer,\n    handler:  CanvasHandler\n  };\n\n  modules[SVG] = {\n    renderer: SVGRenderer,\n    headless: SVGStringRenderer,\n    handler:  SVGHandler\n  };\n\n  modules[None$2] = {};\n\n  function renderModule(name, _) {\n    name = String(name || '').toLowerCase();\n    if (arguments.length > 1) {\n      modules[name] = _;\n      return this;\n    } else {\n      return modules[name];\n    }\n  }\n\n  function intersect$1(scene, bounds, filter) {\n    const hits = [], // intersection results\n          box = new Bounds().union(bounds), // defensive copy\n          type = scene.marktype;\n\n    return type ? intersectMark(scene, box, filter, hits)\n      : type === 'group' ? intersectGroup(scene, box, filter, hits)\n      : error('Intersect scene must be mark node or group item.');\n  }\n\n  function intersectMark(mark, box, filter, hits) {\n    if (visitMark(mark, box, filter)) {\n      const items = mark.items,\n            type = mark.marktype,\n            n = items.length;\n\n      let i = 0;\n\n      if (type === 'group') {\n        for (; i<n; ++i) {\n          intersectGroup(items[i], box, filter, hits);\n        }\n      } else {\n        for (const test = Marks[type].isect; i<n; ++i) {\n          let item = items[i];\n          if (intersectItem(item, box, test)) hits.push(item);\n        }\n      }\n    }\n    return hits;\n  }\n\n  function visitMark(mark, box, filter) {\n    // process if bounds intersect and if\n    // (1) mark is a group mark (so we must recurse), or\n    // (2) mark is interactive and passes filter\n    return mark.bounds && box.intersects(mark.bounds) && (\n      mark.marktype === 'group' ||\n      mark.interactive !== false && (!filter || filter(mark))\n    );\n  }\n\n  function intersectGroup(group, box, filter, hits) {\n    // test intersect against group\n    // skip groups by default unless filter says otherwise\n    if ((filter && filter(group.mark)) &&\n        intersectItem(group, box, Marks.group.isect)) {\n      hits.push(group);\n    }\n\n    // recursively test children marks\n    // translate box to group coordinate space\n    const marks = group.items,\n          n = marks && marks.length;\n\n    if (n) {\n      const x = group.x || 0,\n            y = group.y || 0;\n      box.translate(-x, -y);\n      for (let i=0; i<n; ++i) {\n        intersectMark(marks[i], box, filter, hits);\n      }\n      box.translate(x, y);\n    }\n\n    return hits;\n  }\n\n  function intersectItem(item, box, test) {\n    // test bounds enclosure, bounds intersection, then detailed test\n    const bounds = item.bounds;\n    return box.encloses(bounds) || (box.intersects(bounds) && test(item, box));\n  }\n\n  var clipBounds = new Bounds();\n\n  function boundClip(mark) {\n    var clip = mark.clip;\n\n    if (isFunction(clip)) {\n      clip(context(clipBounds.clear()));\n    } else if (clip) {\n      clipBounds.set(0, 0, mark.group.width, mark.group.height);\n    } else return;\n\n    mark.bounds.intersect(clipBounds);\n  }\n\n  var TOLERANCE = 1e-9;\n\n  function sceneEqual(a, b, key) {\n    return (a === b) ? true\n      : (key === 'path') ? pathEqual(a, b)\n      : (a instanceof Date && b instanceof Date) ? +a === +b\n      : (isNumber(a) && isNumber(b)) ? Math.abs(a - b) <= TOLERANCE\n      : (!a || !b || !isObject(a) && !isObject(b)) ? a == b\n      : (a == null || b == null) ? false\n      : objectEqual(a, b);\n  }\n\n  function pathEqual(a, b) {\n    return sceneEqual(pathParse(a), pathParse(b));\n  }\n\n  function objectEqual(a, b) {\n    var ka = Object.keys(a),\n        kb = Object.keys(b),\n        key, i;\n\n    if (ka.length !== kb.length) return false;\n\n    ka.sort();\n    kb.sort();\n\n    for (i = ka.length - 1; i >= 0; i--) {\n      if (ka[i] != kb[i]) return false;\n    }\n\n    for (i = ka.length - 1; i >= 0; i--) {\n      key = ka[i];\n      if (!sceneEqual(a[key], b[key], key)) return false;\n    }\n\n    return typeof a === typeof b;\n  }\n\n  /**\n   * Calculate bounding boxes for scenegraph items.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.mark - The scenegraph mark instance to bound.\n   */\n  function Bound(params) {\n    Transform.call(this, null, params);\n  }\n\n  var prototype$Q = inherits(Bound, Transform);\n\n  prototype$Q.transform = function(_, pulse) {\n    var view = pulse.dataflow,\n        mark = _.mark,\n        type = mark.marktype,\n        entry = Marks[type],\n        bound = entry.bound,\n        markBounds = mark.bounds, rebound;\n\n    if (entry.nested) {\n      // multi-item marks have a single bounds instance\n      if (mark.items.length) view.dirty(mark.items[0]);\n      markBounds = boundItem$1(mark, bound);\n      mark.items.forEach(function(item) {\n        item.bounds.clear().union(markBounds);\n      });\n    }\n\n    else if (type === Group || _.modified()) {\n      // operator parameters modified -> re-bound all items\n      // updates group bounds in response to modified group content\n      pulse.visit(pulse.MOD, function(item) { view.dirty(item); });\n      markBounds.clear();\n      mark.items.forEach(function(item) {\n        markBounds.union(boundItem$1(item, bound));\n      });\n\n      // force reflow for axes/legends/titles to propagate any layout changes\n      switch (mark.role) {\n        case AxisRole:\n        case LegendRole:\n        case TitleRole:\n          pulse.reflow();\n      }\n    }\n\n    else {\n      // incrementally update bounds, re-bound mark as needed\n      rebound = pulse.changed(pulse.REM);\n\n      pulse.visit(pulse.ADD, function(item) {\n        markBounds.union(boundItem$1(item, bound));\n      });\n\n      pulse.visit(pulse.MOD, function(item) {\n        rebound = rebound || markBounds.alignsWith(item.bounds);\n        view.dirty(item);\n        markBounds.union(boundItem$1(item, bound));\n      });\n\n      if (rebound) {\n        markBounds.clear();\n        mark.items.forEach(function(item) { markBounds.union(item.bounds); });\n      }\n    }\n\n    // ensure mark bounds do not exceed any clipping region\n    boundClip(mark);\n\n    return pulse.modifies('bounds');\n  };\n\n  function boundItem$1(item, bound, opt) {\n    return bound(item.bounds.clear(), item, opt);\n  }\n\n  var COUNTER_NAME = ':vega_identifier:';\n\n  /**\n   * Adds a unique identifier to all added tuples.\n   * This transform creates a new signal that serves as an id counter.\n   * As a result, the id counter is shared across all instances of this\n   * transform, generating unique ids across multiple data streams. In\n   * addition, this signal value can be included in a snapshot of the\n   * dataflow state, enabling correct resumption of id allocation.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.as - The field name for the generated identifier.\n   */\n  function Identifier(params) {\n    Transform.call(this, 0, params);\n  }\n\n  Identifier.Definition = {\n    \"type\": \"Identifier\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"as\", \"type\": \"string\", \"required\": true }\n    ]\n  };\n\n  var prototype$R = inherits(Identifier, Transform);\n\n  prototype$R.transform = function(_, pulse) {\n    var counter = getCounter(pulse.dataflow),\n        id = counter.value,\n        as = _.as;\n\n    pulse.visit(pulse.ADD, function(t) {\n      if (!t[as]) t[as] = ++id;\n    });\n\n    counter.set(this.value = id);\n    return pulse;\n  };\n\n  function getCounter(view) {\n    var counter = view._signals[COUNTER_NAME];\n    if (!counter) {\n      view._signals[COUNTER_NAME] = (counter = view.add(0));\n    }\n    return counter;\n  }\n\n  /**\n   * Bind scenegraph items to a scenegraph mark instance.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.markdef - The mark definition for creating the mark.\n   *   This is an object of legal scenegraph mark properties which *must* include\n   *   the 'marktype' property.\n   */\n  function Mark(params) {\n    Transform.call(this, null, params);\n  }\n\n  var prototype$S = inherits(Mark, Transform);\n\n  prototype$S.transform = function(_, pulse) {\n    var mark = this.value;\n\n    // acquire mark on first invocation, bind context and group\n    if (!mark) {\n      mark = pulse.dataflow.scenegraph().mark(_.markdef, lookup$1(_), _.index);\n      mark.group.context = _.context;\n      if (!_.context.group) _.context.group = mark.group;\n      mark.source = this.source; // point to upstream collector\n      mark.clip = _.clip;\n      mark.interactive = _.interactive;\n      this.value = mark;\n    }\n\n    // initialize entering items\n    var Init = mark.marktype === Group ? GroupItem : Item;\n    pulse.visit(pulse.ADD, function(item) { Init.call(item, mark); });\n\n    // update clipping and/or interactive status\n    if (_.modified('clip') || _.modified('interactive')) {\n      mark.clip = _.clip;\n      mark.interactive = !!_.interactive;\n      mark.zdirty = true; // force scenegraph re-eval\n      pulse.reflow();\n    }\n\n    // bind items array to scenegraph mark\n    mark.items = pulse.source;\n    return pulse;\n  };\n\n  function lookup$1(_) {\n    var g = _.groups, p = _.parent;\n    return g && g.size === 1 ? g.get(Object.keys(g.object)[0])\n      : g && p ? g.lookup(p)\n      : null;\n  }\n\n  /**\n   * Analyze items for overlap, changing opacity to hide items with\n   * overlapping bounding boxes. This transform will preserve at least\n   * two items (e.g., first and last) even if overlap persists.\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - A comparator\n   *   function for sorting items.\n   * @param {object} [params.method] - The overlap removal method to apply.\n   *   One of 'parity' (default, hide every other item until there is no\n   *   more overlap) or 'greedy' (sequentially scan and hide and items that\n   *   overlap with the last visible item).\n   * @param {object} [params.boundScale] - A scale whose range should be used\n   *   to bound the items. Items exceeding the bounds of the scale range\n   *   will be treated as overlapping. If null or undefined, no bounds check\n   *   will be applied.\n   * @param {object} [params.boundOrient] - The orientation of the scale\n   *   (top, bottom, left, or right) used to bound items. This parameter is\n   *   ignored if boundScale is null or undefined.\n   * @param {object} [params.boundTolerance] - The tolerance in pixels for\n   *   bound inclusion testing (default 1). This specifies by how many pixels\n   *   an item's bounds may exceed the scale range bounds and not be culled.\n   * @constructor\n   */\n  function Overlap(params) {\n    Transform.call(this, null, params);\n  }\n\n  var prototype$T = inherits(Overlap, Transform);\n\n  var methods = {\n    parity: function(items) {\n      return items.filter((item, i) => i % 2 ? (item.opacity = 0) : 1);\n    },\n    greedy: function(items, sep) {\n      var a;\n      return items.filter((b, i) => {\n        if (!i || !intersect$2(a.bounds, b.bounds, sep)) {\n          a = b;\n          return 1;\n        } else {\n          return b.opacity = 0;\n        }\n      });\n    }\n  };\n\n  // compute bounding box intersection\n  // including padding pixels of separation\n  function intersect$2(a, b, sep) {\n    return sep > Math.max(\n      b.x1 - a.x2,\n      a.x1 - b.x2,\n      b.y1 - a.y2,\n      a.y1 - b.y2\n    );\n  }\n\n  function hasOverlap(items, pad) {\n    for (var i=1, n=items.length, a=items[0].bounds, b; i<n; a=b, ++i) {\n      if (intersect$2(a, b = items[i].bounds, pad)) return true;\n    }\n  }\n\n  function hasBounds(item) {\n    var b = item.bounds;\n    return b.width() > 1 && b.height() > 1;\n  }\n\n  function boundTest(scale, orient, tolerance) {\n    var range = scale.range(),\n        b = new Bounds();\n\n    if (orient === Top || orient === Bottom) {\n      b.set(range[0], -Infinity, range[1], +Infinity);\n    } else {\n      b.set(-Infinity, range[0], +Infinity, range[1]);\n    }\n    b.expand(tolerance || 1);\n\n    return item => b.encloses(item.bounds);\n  }\n\n  // reset all items to be fully opaque\n  function reset(source) {\n    source.forEach(item => item.opacity = 1);\n    return source;\n  }\n\n  // add all tuples to mod, fork pulse if parameters were modified\n  // fork prevents cross-stream tuple pollution (e.g., pulse from scale)\n  function reflow(pulse, _) {\n    return pulse.reflow(_.modified()).modifies('opacity');\n  }\n\n  prototype$T.transform = function(_, pulse) {\n    var reduce = methods[_.method] || methods.parity,\n        source = pulse.materialize(pulse.SOURCE).source,\n        sep = _.separation || 0,\n        items, test, bounds;\n\n    if (!source || !source.length) return;\n\n    if (!_.method) {\n      // early exit if method is falsy\n      if (_.modified('method')) {\n        reset(source);\n        pulse = reflow(pulse, _);\n      }\n      return pulse;\n    }\n\n    // skip labels with no content\n    source = source.filter(hasBounds);\n\n    // early exit, nothing to do\n    if (!source.length) return;\n\n    if (_.sort) {\n      source = source.slice().sort(_.sort);\n    }\n\n    items = reset(source);\n    pulse = reflow(pulse, _);\n\n    if (items.length >= 3 && hasOverlap(items, sep)) {\n      do {\n        items = reduce(items, sep);\n      } while (items.length >= 3 && hasOverlap(items, sep));\n\n      if (items.length < 3 && !peek(source).opacity) {\n        if (items.length > 1) peek(items).opacity = 0;\n        peek(source).opacity = 1;\n      }\n    }\n\n    if (_.boundScale && _.boundTolerance >= 0) {\n      test = boundTest(_.boundScale, _.boundOrient, +_.boundTolerance);\n      source.forEach(item => {\n        if (!test(item)) item.opacity = 0;\n      });\n    }\n\n    // re-calculate mark bounds\n    bounds = items[0].mark.bounds.clear();\n    source.forEach(item => {\n      if (item.opacity) bounds.union(item.bounds);\n    });\n\n    return pulse;\n  };\n\n  /**\n   * Queue modified scenegraph items for rendering.\n   * @constructor\n   */\n  function Render(params) {\n    Transform.call(this, null, params);\n  }\n\n  var prototype$U = inherits(Render, Transform);\n\n  prototype$U.transform = function(_, pulse) {\n    var view = pulse.dataflow;\n\n    pulse.visit(pulse.ALL, function(item) { view.dirty(item); });\n\n    // set z-index dirty flag as needed\n    if (pulse.fields && pulse.fields['zindex']) {\n      var item = pulse.source && pulse.source[0];\n      if (item) item.mark.zdirty = true;\n    }\n  };\n\n  const tempBounds$2 = new Bounds();\n\n  function set(item, property, value) {\n    return item[property] === value ? 0\n      : (item[property] = value, 1);\n  }\n\n  function isYAxis(mark) {\n    var orient = mark.items[0].datum.orient;\n    return orient === Left || orient === Right;\n  }\n\n  function axisIndices(datum) {\n    var index = +datum.grid;\n    return [\n      datum.ticks  ? index++ : -1, // ticks index\n      datum.labels ? index++ : -1, // labels index\n      index + (+datum.domain)      // title index\n    ];\n  }\n\n  function axisLayout(view, axis, width, height) {\n    var item = axis.items[0],\n        datum = item.datum,\n        orient = datum.orient,\n        delta = datum.translate != null ? datum.translate : 0.5,\n        indices = axisIndices(datum),\n        range = item.range,\n        offset = item.offset,\n        position = item.position,\n        minExtent = item.minExtent,\n        maxExtent = item.maxExtent,\n        title = datum.title && item.items[indices[2]].items[0],\n        titlePadding = item.titlePadding,\n        bounds = item.bounds,\n        dl = title && multiLineOffset(title),\n        x = 0, y = 0, i, s;\n\n    tempBounds$2.clear().union(bounds);\n    bounds.clear();\n    if ((i=indices[0]) > -1) bounds.union(item.items[i].bounds);\n    if ((i=indices[1]) > -1) bounds.union(item.items[i].bounds);\n\n    // position axis group and title\n    switch (orient) {\n      case Top:\n        x = position || 0;\n        y = -offset;\n        s = Math.max(minExtent, Math.min(maxExtent, -bounds.y1));\n        bounds.add(0, -s).add(range, 0);\n        if (title) axisTitleLayout(view, title, s, titlePadding, dl, 0, -1, bounds);\n        break;\n      case Left:\n        x = -offset;\n        y = position || 0;\n        s = Math.max(minExtent, Math.min(maxExtent, -bounds.x1));\n        bounds.add(-s, 0).add(0, range);\n        if (title) axisTitleLayout(view, title, s, titlePadding, dl, 1, -1, bounds);\n        break;\n      case Right:\n        x = width + offset;\n        y = position || 0;\n        s = Math.max(minExtent, Math.min(maxExtent, bounds.x2));\n        bounds.add(0, 0).add(s, range);\n        if (title) axisTitleLayout(view, title, s, titlePadding, dl, 1, 1, bounds);\n        break;\n      case Bottom:\n        x = position || 0;\n        y = height + offset;\n        s = Math.max(minExtent, Math.min(maxExtent, bounds.y2));\n        bounds.add(0, 0).add(range, s);\n        if (title) axisTitleLayout(view, title, s, titlePadding, 0, 0, 1, bounds);\n        break;\n      default:\n        x = item.x;\n        y = item.y;\n    }\n\n    // update bounds\n    boundStroke(bounds.translate(x, y), item);\n\n    if (set(item, 'x', x + delta) | set(item, 'y', y + delta)) {\n      item.bounds = tempBounds$2;\n      view.dirty(item);\n      item.bounds = bounds;\n      view.dirty(item);\n    }\n\n    return item.mark.bounds.clear().union(bounds);\n  }\n\n  function axisTitleLayout(view, title, offset, pad, dl, isYAxis, sign, bounds) {\n    const b = title.bounds;\n\n    if (title.auto) {\n      const v = sign * (offset + dl + pad);\n      let dx = 0, dy = 0;\n\n      view.dirty(title);\n      isYAxis\n        ? dx = (title.x || 0) - (title.x = v)\n        : dy = (title.y || 0) - (title.y = v);\n      title.mark.bounds.clear().union(b.translate(-dx, -dy));\n      view.dirty(title);\n    }\n\n    bounds.union(b);\n  }\n\n  function gridLayoutGroups(group) {\n    var groups = group.items,\n        n = groups.length,\n        i = 0, mark, items;\n\n    var views = {\n      marks:      [],\n      rowheaders: [],\n      rowfooters: [],\n      colheaders: [],\n      colfooters: [],\n      rowtitle: null,\n      coltitle: null\n    };\n\n    // layout axes, gather legends, collect bounds\n    for (; i<n; ++i) {\n      mark = groups[i];\n      items = mark.items;\n      if (mark.marktype === Group) {\n        switch (mark.role) {\n          case AxisRole:\n          case LegendRole:\n          case TitleRole:\n            break;\n          case RowHeader: views.rowheaders.push(...items); break;\n          case RowFooter: views.rowfooters.push(...items); break;\n          case ColHeader: views.colheaders.push(...items); break;\n          case ColFooter: views.colfooters.push(...items); break;\n          case RowTitle:  views.rowtitle = items[0]; break;\n          case ColTitle:  views.coltitle = items[0]; break;\n          default:        views.marks.push(...items);\n        }\n      }\n    }\n\n    return views;\n  }\n\n  function bboxFlush(item) {\n    return new Bounds().set(0, 0, item.width || 0, item.height || 0);\n  }\n\n  function bboxFull(item) {\n    var b = item.bounds.clone();\n    return b.empty()\n      ? b.set(0, 0, 0, 0)\n      : b.translate(-(item.x || 0), -(item.y || 0));\n  }\n\n  function get$2(opt, key, d) {\n    var v = isObject(opt) ? opt[key] : opt;\n    return v != null ? v : (d !== undefined ? d : 0);\n  }\n\n  function offsetValue(v) {\n    return v < 0 ? Math.ceil(-v) : 0;\n  }\n\n  function gridLayout(view, groups, opt) {\n    var dirty = !opt.nodirty,\n        bbox = opt.bounds === Flush ? bboxFlush : bboxFull,\n        bounds = tempBounds$2.set(0, 0, 0, 0),\n        alignCol = get$2(opt.align, Column),\n        alignRow = get$2(opt.align, Row),\n        padCol = get$2(opt.padding, Column),\n        padRow = get$2(opt.padding, Row),\n        ncols = opt.columns || groups.length,\n        nrows = ncols < 0 ? 1 : Math.ceil(groups.length / ncols),\n        n = groups.length,\n        xOffset = Array(n), xExtent = Array(ncols), xMax = 0,\n        yOffset = Array(n), yExtent = Array(nrows), yMax = 0,\n        dx = Array(n), dy = Array(n), boxes = Array(n),\n        m, i, c, r, b, g, px, py, x, y, offset;\n\n    for (i=0; i<ncols; ++i) xExtent[i] = 0;\n    for (i=0; i<nrows; ++i) yExtent[i] = 0;\n\n    // determine offsets for each group\n    for (i=0; i<n; ++i) {\n      g = groups[i];\n      b = boxes[i] = bbox(g);\n      g.x = g.x || 0; dx[i] = 0;\n      g.y = g.y || 0; dy[i] = 0;\n      c = i % ncols;\n      r = ~~(i / ncols);\n      xMax = Math.max(xMax, px = Math.ceil(b.x2));\n      yMax = Math.max(yMax, py = Math.ceil(b.y2));\n      xExtent[c] = Math.max(xExtent[c], px);\n      yExtent[r] = Math.max(yExtent[r], py);\n      xOffset[i] = padCol + offsetValue(b.x1);\n      yOffset[i] = padRow + offsetValue(b.y1);\n      if (dirty) view.dirty(groups[i]);\n    }\n\n    // set initial alignment offsets\n    for (i=0; i<n; ++i) {\n      if (i % ncols === 0) xOffset[i] = 0;\n      if (i < ncols) yOffset[i] = 0;\n    }\n\n    // enforce column alignment constraints\n    if (alignCol === Each) {\n      for (c=1; c<ncols; ++c) {\n        for (offset=0, i=c; i<n; i += ncols) {\n          if (offset < xOffset[i]) offset = xOffset[i];\n        }\n        for (i=c; i<n; i += ncols) {\n          xOffset[i] = offset + xExtent[c-1];\n        }\n      }\n    } else if (alignCol === All) {\n      for (offset=0, i=0; i<n; ++i) {\n        if (i % ncols && offset < xOffset[i]) offset = xOffset[i];\n      }\n      for (i=0; i<n; ++i) {\n        if (i % ncols) xOffset[i] = offset + xMax;\n      }\n    } else {\n      for (alignCol=false, c=1; c<ncols; ++c) {\n        for (i=c; i<n; i += ncols) {\n          xOffset[i] += xExtent[c-1];\n        }\n      }\n    }\n\n    // enforce row alignment constraints\n    if (alignRow === Each) {\n      for (r=1; r<nrows; ++r) {\n        for (offset=0, i=r*ncols, m=i+ncols; i<m; ++i) {\n          if (offset < yOffset[i]) offset = yOffset[i];\n        }\n        for (i=r*ncols; i<m; ++i) {\n          yOffset[i] = offset + yExtent[r-1];\n        }\n      }\n    } else if (alignRow === All) {\n      for (offset=0, i=ncols; i<n; ++i) {\n        if (offset < yOffset[i]) offset = yOffset[i];\n      }\n      for (i=ncols; i<n; ++i) {\n        yOffset[i] = offset + yMax;\n      }\n    } else {\n      for (alignRow=false, r=1; r<nrows; ++r) {\n        for (i=r*ncols, m=i+ncols; i<m; ++i) {\n          yOffset[i] += yExtent[r-1];\n        }\n      }\n    }\n\n    // perform horizontal grid layout\n    for (x=0, i=0; i<n; ++i) {\n      x = xOffset[i] + (i % ncols ? x : 0);\n      dx[i] += x - groups[i].x;\n    }\n\n    // perform vertical grid layout\n    for (c=0; c<ncols; ++c) {\n      for (y=0, i=c; i<n; i += ncols) {\n        y += yOffset[i];\n        dy[i] += y - groups[i].y;\n      }\n    }\n\n    // perform horizontal centering\n    if (alignCol && get$2(opt.center, Column) && nrows > 1) {\n      for (i=0; i<n; ++i) {\n        b = alignCol === All ? xMax : xExtent[i % ncols];\n        x = b - boxes[i].x2 - groups[i].x - dx[i];\n        if (x > 0) dx[i] += x / 2;\n      }\n    }\n\n    // perform vertical centering\n    if (alignRow && get$2(opt.center, Row) && ncols !== 1) {\n      for (i=0; i<n; ++i) {\n        b = alignRow === All ? yMax : yExtent[~~(i / ncols)];\n        y = b - boxes[i].y2 - groups[i].y - dy[i];\n        if (y > 0) dy[i] += y / 2;\n      }\n    }\n\n    // position grid relative to anchor\n    for (i=0; i<n; ++i) {\n      bounds.union(boxes[i].translate(dx[i], dy[i]));\n    }\n    x = get$2(opt.anchor, X);\n    y = get$2(opt.anchor, Y);\n    switch (get$2(opt.anchor, Column)) {\n      case End:    x -= bounds.width(); break;\n      case Middle: x -= bounds.width() / 2;\n    }\n    switch (get$2(opt.anchor, Row)) {\n      case End:    y -= bounds.height(); break;\n      case Middle: y -= bounds.height() / 2;\n    }\n    x = Math.round(x);\n    y = Math.round(y);\n\n    // update mark positions, bounds, dirty\n    bounds.clear();\n    for (i=0; i<n; ++i) {\n      groups[i].mark.bounds.clear();\n    }\n    for (i=0; i<n; ++i) {\n      g = groups[i];\n      g.x += (dx[i] += x);\n      g.y += (dy[i] += y);\n      bounds.union(g.mark.bounds.union(g.bounds.translate(dx[i], dy[i])));\n      if (dirty) view.dirty(g);\n    }\n\n    return bounds;\n  }\n\n  function trellisLayout(view, group, opt) {\n    var views = gridLayoutGroups(group),\n        groups = views.marks,\n        bbox = opt.bounds === Flush ? boundFlush : boundFull,\n        off = opt.offset,\n        ncols = opt.columns || groups.length,\n        nrows = ncols < 0 ? 1 : Math.ceil(groups.length / ncols),\n        cells = nrows * ncols,\n        x, y, x2, y2, anchor, band, offset;\n\n    // -- initial grid layout\n    const bounds = gridLayout(view, groups, opt);\n\n    // -- layout grid headers and footers --\n\n    // perform row header layout\n    if (views.rowheaders) {\n      band = get$2(opt.headerBand, Row, null);\n      x = layoutHeaders(view, views.rowheaders, groups, ncols, nrows, -get$2(off, 'rowHeader'), min$2, 0, bbox, 'x1', 0, ncols, 1, band);\n    }\n\n    // perform column header layout\n    if (views.colheaders) {\n      band = get$2(opt.headerBand, Column, null);\n      y = layoutHeaders(view, views.colheaders, groups, ncols, ncols, -get$2(off, 'columnHeader'), min$2, 1, bbox, 'y1', 0, 1, ncols, band);\n    }\n\n    // perform row footer layout\n    if (views.rowfooters) {\n      band = get$2(opt.footerBand, Row, null);\n      x2 = layoutHeaders(view, views.rowfooters, groups, ncols, nrows,  get$2(off, 'rowFooter'), max$2, 0, bbox, 'x2', ncols-1, ncols, 1, band);\n    }\n\n    // perform column footer layout\n    if (views.colfooters) {\n      band = get$2(opt.footerBand, Column, null);\n      y2 = layoutHeaders(view, views.colfooters, groups, ncols, ncols,  get$2(off, 'columnFooter'), max$2, 1, bbox, 'y2', cells-ncols, 1, ncols, band);\n    }\n\n    // perform row title layout\n    if (views.rowtitle) {\n      anchor = get$2(opt.titleAnchor, Row);\n      offset = get$2(off, 'rowTitle');\n      offset = anchor === End ? x2 + offset : x - offset;\n      band = get$2(opt.titleBand, Row, 0.5);\n      layoutTitle(view, views.rowtitle, offset, 0, bounds, band);\n    }\n\n    // perform column title layout\n    if (views.coltitle) {\n      anchor = get$2(opt.titleAnchor, Column);\n      offset = get$2(off, 'columnTitle');\n      offset = anchor === End ? y2 + offset : y - offset;\n      band = get$2(opt.titleBand, Column, 0.5);\n      layoutTitle(view, views.coltitle, offset, 1, bounds, band);\n    }\n  }\n\n  function boundFlush(item, field) {\n    return field === 'x1' ? (item.x || 0)\n      : field === 'y1' ? (item.y || 0)\n      : field === 'x2' ? (item.x || 0) + (item.width || 0)\n      : field === 'y2' ? (item.y || 0) + (item.height || 0)\n      : undefined;\n  }\n\n  function boundFull(item, field) {\n    return item.bounds[field];\n  }\n\n  // aggregation functions for grid margin determination\n  function min$2(a, b) { return Math.floor(Math.min(a, b)); }\n  function max$2(a, b) { return Math.ceil(Math.max(a, b)); }\n\n  function layoutHeaders(view, headers, groups, ncols, limit, offset, agg, isX, bound, bf, start, stride, back, band) {\n    var n = groups.length,\n        init = 0,\n        edge = 0,\n        i, j, k, m, b, h, g, x, y;\n\n    // if no groups, early exit and return 0\n    if (!n) return init;\n\n    // compute margin\n    for (i=start; i<n; i+=stride) {\n      if (groups[i]) init = agg(init, bound(groups[i], bf));\n    }\n\n    // if no headers, return margin calculation\n    if (!headers.length) return init;\n\n    // check if number of headers exceeds number of rows or columns\n    if (headers.length > limit) {\n      view.warn('Grid headers exceed limit: ' + limit);\n      headers = headers.slice(0, limit);\n    }\n\n    // apply offset\n    init += offset;\n\n    // clear mark bounds for all headers\n    for (j=0, m=headers.length; j<m; ++j) {\n      view.dirty(headers[j]);\n      headers[j].mark.bounds.clear();\n    }\n\n    // layout each header\n    for (i=start, j=0, m=headers.length; j<m; ++j, i+=stride) {\n      h = headers[j];\n      b = h.mark.bounds;\n\n      // search for nearest group to align to\n      // necessary if table has empty cells\n      for (k=i; k >= 0 && (g = groups[k]) == null; k-=back);\n\n      // assign coordinates and update bounds\n      if (isX) {\n        x = band == null ? g.x : Math.round(g.bounds.x1 + band * g.bounds.width());\n        y = init;\n      } else {\n        x = init;\n        y = band == null ? g.y : Math.round(g.bounds.y1 + band * g.bounds.height());\n      }\n      b.union(h.bounds.translate(x - (h.x || 0), y - (h.y || 0)));\n      h.x = x;\n      h.y = y;\n      view.dirty(h);\n\n      // update current edge of layout bounds\n      edge = agg(edge, b[bf]);\n    }\n\n    return edge;\n  }\n\n  function layoutTitle(view, g, offset, isX, bounds, band) {\n    if (!g) return;\n    view.dirty(g);\n\n    // compute title coordinates\n    var x = offset, y = offset;\n    isX\n      ? (x = Math.round(bounds.x1 + band * bounds.width()))\n      : (y = Math.round(bounds.y1 + band * bounds.height()));\n\n    // assign coordinates and update bounds\n    g.bounds.translate(x - (g.x || 0), y - (g.y || 0));\n    g.mark.bounds.clear().union(g.bounds);\n    g.x = x;\n    g.y = y;\n\n    // queue title for redraw\n    view.dirty(g);\n  }\n\n  // utility for looking up legend layout configuration\n  function lookup$2(config, orient) {\n    const opt = config[orient] || {};\n    return (key, d) => opt[key] != null ? opt[key]\n      : config[key] != null ? config[key]\n      : d;\n  }\n\n  // if legends specify offset directly, use the maximum specified value\n  function offsets(legends, value) {\n    var max = -Infinity;\n    legends.forEach(item => {\n      if (item.offset != null) max = Math.max(max, item.offset);\n    });\n    return max > -Infinity ? max : value;\n  }\n\n  function legendParams(g, orient, config, xb, yb, w, h) {\n    const _ = lookup$2(config, orient),\n          offset = offsets(g, _('offset', 0)),\n          anchor = _('anchor', Start),\n          mult = anchor === End ? 1 : anchor === Middle ? 0.5 : 0;\n\n    const p = {\n      align:   Each,\n      bounds:  _('bounds', Flush),\n      columns: _('direction') === 'vertical' ? 1 : g.length,\n      padding: _('margin', 8),\n      center:  _('center'),\n      nodirty: true\n    };\n\n    switch (orient) {\n      case Left:\n        p.anchor = {\n          x: Math.floor(xb.x1) - offset, column: End,\n          y: mult * (h || xb.height() + 2 * xb.y1), row: anchor\n        };\n        break;\n      case Right:\n        p.anchor = {\n          x: Math.ceil(xb.x2) + offset,\n          y: mult * (h || xb.height() + 2 * xb.y1), row: anchor\n        };\n        break;\n      case Top:\n        p.anchor = {\n          y: Math.floor(yb.y1) - offset, row: End,\n          x: mult * (w || yb.width() + 2 * yb.x1), column: anchor\n        };\n        break;\n      case Bottom:\n        p.anchor = {\n          y: Math.ceil(yb.y2) + offset,\n          x: mult * (w || yb.width() + 2 * yb.x1), column: anchor\n        };\n        break;\n      case TopLeft:\n        p.anchor = {x: offset, y: offset};\n        break;\n      case TopRight:\n        p.anchor = {x: w - offset, y: offset, column: End};\n        break;\n      case BottomLeft:\n        p.anchor = {x: offset, y: h - offset, row: End};\n        break;\n      case BottomRight:\n        p.anchor = {x: w - offset, y: h - offset, column: End, row: End};\n        break;\n    }\n\n    return p;\n  }\n\n  function legendLayout(view, legend) {\n    var item = legend.items[0],\n        datum = item.datum,\n        orient = item.orient,\n        bounds = item.bounds,\n        x = item.x, y = item.y, w, h;\n\n    // cache current bounds for later comparison\n    item._bounds\n      ? item._bounds.clear().union(bounds)\n      : item._bounds = bounds.clone();\n    bounds.clear();\n\n    // adjust legend to accommodate padding and title\n    legendGroupLayout(view, item, item.items[0].items[0]);\n\n    // aggregate bounds to determine size, and include origin\n    bounds = legendBounds(item, bounds);\n    w = 2 * item.padding;\n    h = 2 * item.padding;\n    if (!bounds.empty()) {\n      w = Math.ceil(bounds.width() + w);\n      h = Math.ceil(bounds.height() + h);\n    }\n\n    if (datum.type === Symbols) {\n      legendEntryLayout(item.items[0].items[0].items[0].items);\n    }\n\n    if (orient !== None$1) {\n      item.x = x = 0;\n      item.y = y = 0;\n    }\n    item.width = w;\n    item.height = h;\n    boundStroke(bounds.set(x, y, x + w, y + h), item);\n    item.mark.bounds.clear().union(bounds);\n\n    return item;\n  }\n\n  function legendBounds(item, b) {\n    // aggregate item bounds\n    item.items.forEach(_ => b.union(_.bounds));\n\n    // anchor to legend origin\n    b.x1 = item.padding;\n    b.y1 = item.padding;\n\n    return b;\n  }\n\n  function legendGroupLayout(view, item, entry) {\n    var pad = item.padding,\n        ex = pad - entry.x,\n        ey = pad - entry.y;\n\n    if (!item.datum.title) {\n      if (ex || ey) translate$2(view, entry, ex, ey);\n    } else {\n      var title = item.items[1].items[0],\n          anchor = title.anchor,\n          tpad = item.titlePadding || 0,\n          tx = pad - title.x,\n          ty = pad - title.y;\n\n      switch (title.orient) {\n        case Left:\n          ex += Math.ceil(title.bounds.width()) + tpad;\n          break;\n        case Right:\n        case Bottom:\n          break;\n        default:\n          ey += title.bounds.height() + tpad;\n      }\n      if (ex || ey) translate$2(view, entry, ex, ey);\n\n      switch (title.orient) {\n        case Left:\n          ty += legendTitleOffset(item, entry, title, anchor, 1, 1);\n          break;\n        case Right:\n          tx += legendTitleOffset(item, entry, title, End, 0, 0) + tpad;\n          ty += legendTitleOffset(item, entry, title, anchor, 1, 1);\n          break;\n        case Bottom:\n          tx += legendTitleOffset(item, entry, title, anchor, 0, 0);\n          ty += legendTitleOffset(item, entry, title, End, -1, 0, 1) + tpad;\n          break;\n        default:\n          tx += legendTitleOffset(item, entry, title, anchor, 0, 0);\n      }\n      if (tx || ty) translate$2(view, title, tx, ty);\n\n      // translate legend if title pushes into negative coordinates\n      if ((tx = Math.round(title.bounds.x1 - pad)) < 0) {\n        translate$2(view, entry, -tx, 0);\n        translate$2(view, title, -tx, 0);\n      }\n    }\n  }\n\n  function legendTitleOffset(item, entry, title, anchor, y, lr, noBar) {\n    const grad = item.datum.type !== 'symbol',\n          vgrad = title.datum.vgrad,\n          e = grad && (lr || !vgrad) && !noBar ? entry.items[0] : entry,\n          s = e.bounds[y ? 'y2' : 'x2'] - item.padding,\n          u = vgrad && lr ? s : 0,\n          v = vgrad && lr ? 0 : s,\n          o = y <= 0 ? 0 : multiLineOffset(title);\n\n    return Math.round(anchor === Start ? u\n      : anchor === End ? (v - o)\n      : 0.5 * (s - o));\n  }\n\n  function translate$2(view, item, dx, dy) {\n    item.x += dx;\n    item.y += dy;\n    item.bounds.translate(dx, dy);\n    item.mark.bounds.translate(dx, dy);\n    view.dirty(item);\n  }\n\n  function legendEntryLayout(entries) {\n    // get max widths for each column\n    var widths = entries.reduce(function(w, g) {\n      w[g.column] = Math.max(g.bounds.x2 - g.x, w[g.column] || 0);\n      return w;\n    }, {});\n\n    // set dimensions of legend entry groups\n    entries.forEach(function(g) {\n      g.width  = widths[g.column];\n      g.height = g.bounds.y2 - g.y;\n    });\n  }\n\n  function titleLayout(view, mark, width, height, viewBounds) {\n    var group = mark.items[0],\n        frame = group.frame,\n        orient = group.orient,\n        anchor = group.anchor,\n        offset = group.offset,\n        padding = group.padding,\n        title = group.items[0].items[0],\n        subtitle = group.items[1] && group.items[1].items[0],\n        end = (orient === Left || orient === Right) ? height : width,\n        start = 0, x = 0, y = 0, sx = 0, sy = 0, pos;\n\n    if (frame !== Group) {\n      orient === Left ? (start = viewBounds.y2, end = viewBounds.y1)\n        : orient === Right ? (start = viewBounds.y1, end = viewBounds.y2)\n        : (start = viewBounds.x1, end = viewBounds.x2);\n    } else if (orient === Left) {\n      start = height, end = 0;\n    }\n\n    pos = (anchor === Start) ? start\n      : (anchor === End) ? end\n      : (start + end) / 2;\n\n    if (subtitle && subtitle.text) {\n      // position subtitle\n      switch (orient) {\n        case Top:\n        case Bottom:\n          sy = title.bounds.height() + padding;\n          break;\n        case Left:\n          sx = title.bounds.width() + padding;\n          break;\n        case Right:\n          sx = -title.bounds.width() - padding;\n          break;\n      }\n\n      tempBounds$2.clear().union(subtitle.bounds);\n      tempBounds$2.translate(sx - (subtitle.x || 0), sy - (subtitle.y || 0));\n      if (set(subtitle, 'x', sx) | set(subtitle, 'y', sy)) {\n        view.dirty(subtitle);\n        subtitle.bounds.clear().union(tempBounds$2);\n        subtitle.mark.bounds.clear().union(tempBounds$2);\n        view.dirty(subtitle);\n      }\n\n      tempBounds$2.clear().union(subtitle.bounds);\n    } else {\n      tempBounds$2.clear();\n    }\n    tempBounds$2.union(title.bounds);\n\n    // position title group\n    switch (orient) {\n      case Top:\n        x = pos;\n        y = viewBounds.y1 - tempBounds$2.height() - offset;\n        break;\n      case Left:\n        x = viewBounds.x1 - tempBounds$2.width() - offset;\n        y = pos;\n        break;\n      case Right:\n        x = viewBounds.x2 + tempBounds$2.width() + offset;\n        y = pos;\n        break;\n      case Bottom:\n        x = pos;\n        y = viewBounds.y2 + offset;\n        break;\n      default:\n        x = group.x;\n        y = group.y;\n    }\n\n    if (set(group, 'x', x) | set(group, 'y', y)) {\n      tempBounds$2.translate(x, y);\n      view.dirty(group);\n      group.bounds.clear().union(tempBounds$2);\n      mark.bounds.clear().union(tempBounds$2);\n      view.dirty(group);\n    }\n    return group.bounds;\n  }\n\n  /**\n   * Layout view elements such as axes and legends.\n   * Also performs size adjustments.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.mark - Scenegraph mark of groups to layout.\n   */\n  function ViewLayout(params) {\n    Transform.call(this, null, params);\n  }\n\n  var prototype$V = inherits(ViewLayout, Transform);\n\n  prototype$V.transform = function(_, pulse) {\n    // TODO incremental update, output?\n    var view = pulse.dataflow;\n    _.mark.items.forEach(function(group) {\n      if (_.layout) trellisLayout(view, group, _.layout);\n      layoutGroup(view, group, _);\n    });\n    if (_.modified()) pulse.reflow();\n    return pulse;\n  };\n\n  function layoutGroup(view, group, _) {\n    var items = group.items,\n        width = Math.max(0, group.width || 0),\n        height = Math.max(0, group.height || 0),\n        viewBounds = new Bounds().set(0, 0, width, height),\n        xBounds = viewBounds.clone(),\n        yBounds = viewBounds.clone(),\n        legends = [], title,\n        mark, orient, b, i, n;\n\n    // layout axes, gather legends, collect bounds\n    for (i=0, n=items.length; i<n; ++i) {\n      mark = items[i];\n      switch (mark.role) {\n        case AxisRole:\n          b = isYAxis(mark) ? xBounds : yBounds;\n          b.union(axisLayout(view, mark, width, height));\n          break;\n        case TitleRole:\n          title = mark;\n          break;\n        case LegendRole:\n          legends.push(legendLayout(view, mark));\n          break;\n        case FrameRole:\n        case ScopeRole:\n        case RowHeader:\n        case RowFooter:\n        case RowTitle:\n        case ColHeader:\n        case ColFooter:\n        case ColTitle:\n          xBounds.union(mark.bounds);\n          yBounds.union(mark.bounds);\n          break;\n        default:\n          viewBounds.union(mark.bounds);\n      }\n    }\n\n    // layout legends, adjust viewBounds\n    if (legends.length) {\n      // group legends by orient\n      const l = {};\n      legends.forEach(item => {\n        orient = item.orient || Right;\n        if (orient !== None$1) (l[orient] || (l[orient] = [])).push(item);\n      });\n\n      // perform grid layout for each orient group\n      for (let orient in l) {\n        const g = l[orient];\n        gridLayout(view, g, legendParams(\n          g, orient, _.legends, xBounds, yBounds, width, height\n        ));\n      }\n\n      // update view bounds\n      legends.forEach(item => {\n        const b = item.bounds;\n\n        if (!b.equals(item._bounds)) {\n          item.bounds = item._bounds;\n          view.dirty(item); // dirty previous location\n          item.bounds = b;\n          view.dirty(item);\n        }\n\n        if (_.autosize && _.autosize.type === Fit) {\n          // For autosize fit, incorporate the orthogonal dimension only.\n          // Legends that overrun the chart area will then be clipped;\n          // otherwise the chart area gets reduced to nothing!\n          switch(item.orient) {\n            case Left:\n            case Right:\n              viewBounds.add(b.x1, 0).add(b.x2, 0);\n              break;\n            case Top:\n            case Bottom:\n              viewBounds.add(0, b.y1).add(0, b.y2);\n          }\n        } else {\n          viewBounds.union(b);\n        }\n      });\n    }\n\n    // combine bounding boxes\n    viewBounds.union(xBounds).union(yBounds);\n\n    // layout title, adjust bounds\n    if (title) {\n      viewBounds.union(titleLayout(view, title, width, height, viewBounds));\n    }\n\n    // override aggregated view bounds if content is clipped\n    if (group.clip) {\n      viewBounds.set(0, 0, group.width || 0, group.height || 0);\n    }\n\n    // perform size adjustment\n    viewSizeLayout(view, group, viewBounds, _);\n  }\n\n  function viewSizeLayout(view, group, viewBounds, _) {\n    const auto = _.autosize || {},\n          type = auto.type;\n\n    if (view._autosize < 1 || !type) return;\n\n    let viewWidth = view._width,\n        viewHeight = view._height,\n        width  = Math.max(0, group.width || 0),\n        left   = Math.max(0, Math.ceil(-viewBounds.x1)),\n        right  = Math.max(0, Math.ceil(viewBounds.x2 - width)),\n        height = Math.max(0, group.height || 0),\n        top    = Math.max(0, Math.ceil(-viewBounds.y1)),\n        bottom = Math.max(0, Math.ceil(viewBounds.y2 - height));\n\n    if (auto.contains === Padding) {\n      const padding = view.padding();\n      viewWidth -= padding.left + padding.right;\n      viewHeight -= padding.top + padding.bottom;\n    }\n\n    if (type === None$1) {\n      left = 0;\n      top = 0;\n      width = viewWidth;\n      height = viewHeight;\n    }\n\n    else if (type === Fit) {\n      width = Math.max(0, viewWidth - left - right);\n      height = Math.max(0, viewHeight - top - bottom);\n    }\n\n    else if (type === FitX) {\n      width = Math.max(0, viewWidth - left - right);\n      viewHeight = height + top + bottom;\n    }\n\n    else if (type === FitY) {\n      viewWidth = width + left + right;\n      height = Math.max(0, viewHeight - top - bottom);\n    }\n\n    else if (type === Pad) {\n      viewWidth = width + left + right;\n      viewHeight = height + top + bottom;\n    }\n\n    view._resizeView(\n      viewWidth, viewHeight,\n      width, height,\n      [left, top],\n      auto.resize\n    );\n  }\n\n\n\n  var vtx = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    bound: Bound,\n    identifier: Identifier,\n    mark: Mark,\n    overlap: Overlap,\n    render: Render,\n    viewlayout: ViewLayout\n  });\n\n  function bandSpace(count, paddingInner, paddingOuter) {\n    var space = count - paddingInner + paddingOuter * 2;\n    return count ? (space > 0 ? space : 1) : 0;\n  }\n\n  const Identity = 'identity';\n\n  const Linear$1 = 'linear';\n  const Log = 'log';\n  const Pow = 'pow';\n  const Sqrt = 'sqrt';\n  const Symlog = 'symlog';\n\n  const Time = 'time';\n  const UTC = 'utc';\n\n  const Sequential = 'sequential';\n  const Diverging = 'diverging';\n\n  const Quantile$1 = 'quantile';\n  const Quantize = 'quantize';\n  const Threshold = 'threshold';\n\n  const Ordinal = 'ordinal';\n  const Point = 'point';\n  const Band = 'band';\n  const BinOrdinal = 'bin-ordinal';\n\n  // categories\n  const Continuous = 'continuous';\n  const Discrete = 'discrete';\n  const Discretizing = 'discretizing';\n  const Interpolating = 'interpolating';\n  const Temporal = 'temporal';\n\n  function invertRange(scale) {\n    return function(_) {\n      var lo = _[0],\n          hi = _[1],\n          t;\n\n      if (hi < lo) {\n        t = lo;\n        lo = hi;\n        hi = t;\n      }\n\n      return [\n        scale.invert(lo),\n        scale.invert(hi)\n      ];\n    }\n  }\n\n  function invertRangeExtent(scale) {\n    return function(_) {\n      var range = scale.range(),\n          lo = _[0],\n          hi = _[1],\n          min = -1, max, t, i, n;\n\n      if (hi < lo) {\n        t = lo;\n        lo = hi;\n        hi = t;\n      }\n\n      for (i=0, n=range.length; i<n; ++i) {\n        if (range[i] >= lo && range[i] <= hi) {\n          if (min < 0) min = i;\n          max = i;\n        }\n      }\n\n      if (min < 0) return undefined;\n\n      lo = scale.invertExtent(range[min]);\n      hi = scale.invertExtent(range[max]);\n\n      return [\n        lo[0] === undefined ? lo[1] : lo[0],\n        hi[1] === undefined ? hi[0] : hi[1]\n      ];\n    }\n  }\n\n  function initRange(domain, range) {\n    switch (arguments.length) {\n      case 0: break;\n      case 1: this.range(domain); break;\n      default: this.range(range).domain(domain); break;\n    }\n    return this;\n  }\n\n  function initInterpolator(domain, interpolator) {\n    switch (arguments.length) {\n      case 0: break;\n      case 1: {\n        if (typeof domain === \"function\") this.interpolator(domain);\n        else this.range(domain);\n        break;\n      }\n      default: {\n        this.domain(domain);\n        if (typeof interpolator === \"function\") this.interpolator(interpolator);\n        else this.range(interpolator);\n        break;\n      }\n    }\n    return this;\n  }\n\n  const implicit = Symbol(\"implicit\");\n\n  function ordinal() {\n    var index = new Map(),\n        domain = [],\n        range = [],\n        unknown = implicit;\n\n    function scale(d) {\n      var key = d + \"\", i = index.get(key);\n      if (!i) {\n        if (unknown !== implicit) return unknown;\n        index.set(key, i = domain.push(d));\n      }\n      return range[(i - 1) % range.length];\n    }\n\n    scale.domain = function(_) {\n      if (!arguments.length) return domain.slice();\n      domain = [], index = new Map();\n      for (const value of _) {\n        const key = value + \"\";\n        if (index.has(key)) continue;\n        index.set(key, domain.push(value));\n      }\n      return scale;\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = Array.from(_), scale) : range.slice();\n    };\n\n    scale.unknown = function(_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    scale.copy = function() {\n      return ordinal(domain, range).unknown(unknown);\n    };\n\n    initRange.apply(scale, arguments);\n\n    return scale;\n  }\n\n  function define(constructor, factory, prototype) {\n    constructor.prototype = factory.prototype = prototype;\n    prototype.constructor = constructor;\n  }\n\n  function extend$1(parent, definition) {\n    var prototype = Object.create(parent.prototype);\n    for (var key in definition) prototype[key] = definition[key];\n    return prototype;\n  }\n\n  function Color() {}\n\n  var darker = 0.7;\n  var brighter = 1 / darker;\n\n  var reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n      reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n      reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n      reHex = /^#([0-9a-f]{3,8})$/,\n      reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n      reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n      reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n      reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n      reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n      reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n\n  var named = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32\n  };\n\n  define(Color, color$1, {\n    copy: function(channels) {\n      return Object.assign(new this.constructor, this, channels);\n    },\n    displayable: function() {\n      return this.rgb().displayable();\n    },\n    hex: color_formatHex, // Deprecated! Use color.formatHex.\n    formatHex: color_formatHex,\n    formatHsl: color_formatHsl,\n    formatRgb: color_formatRgb,\n    toString: color_formatRgb\n  });\n\n  function color_formatHex() {\n    return this.rgb().formatHex();\n  }\n\n  function color_formatHsl() {\n    return hslConvert(this).formatHsl();\n  }\n\n  function color_formatRgb() {\n    return this.rgb().formatRgb();\n  }\n\n  function color$1(format) {\n    var m, l;\n    format = (format + \"\").trim().toLowerCase();\n    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n        : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n        : l === 8 ? new Rgb(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n        : l === 4 ? new Rgb((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n        : null) // invalid hex\n        : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n        : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n        : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n        : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n        : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n        : null;\n  }\n\n  function rgbn(n) {\n    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n  }\n\n  function rgba(r, g, b, a) {\n    if (a <= 0) r = g = b = NaN;\n    return new Rgb(r, g, b, a);\n  }\n\n  function rgbConvert(o) {\n    if (!(o instanceof Color)) o = color$1(o);\n    if (!o) return new Rgb;\n    o = o.rgb();\n    return new Rgb(o.r, o.g, o.b, o.opacity);\n  }\n\n  function rgb(r, g, b, opacity) {\n    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n  }\n\n  function Rgb(r, g, b, opacity) {\n    this.r = +r;\n    this.g = +g;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n\n  define(Rgb, rgb, extend$1(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    rgb: function() {\n      return this;\n    },\n    displayable: function() {\n      return (-0.5 <= this.r && this.r < 255.5)\n          && (-0.5 <= this.g && this.g < 255.5)\n          && (-0.5 <= this.b && this.b < 255.5)\n          && (0 <= this.opacity && this.opacity <= 1);\n    },\n    hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n    formatHex: rgb_formatHex,\n    formatRgb: rgb_formatRgb,\n    toString: rgb_formatRgb\n  }));\n\n  function rgb_formatHex() {\n    return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n  }\n\n  function rgb_formatRgb() {\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"rgb(\" : \"rgba(\")\n        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n        + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n        + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n\n  function hex(value) {\n    value = Math.max(0, Math.min(255, Math.round(value) || 0));\n    return (value < 16 ? \"0\" : \"\") + value.toString(16);\n  }\n\n  function hsla(h, s, l, a) {\n    if (a <= 0) h = s = l = NaN;\n    else if (l <= 0 || l >= 1) h = s = NaN;\n    else if (s <= 0) h = NaN;\n    return new Hsl(h, s, l, a);\n  }\n\n  function hslConvert(o) {\n    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Color)) o = color$1(o);\n    if (!o) return new Hsl;\n    if (o instanceof Hsl) return o;\n    o = o.rgb();\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        h = NaN,\n        s = max - min,\n        l = (max + min) / 2;\n    if (s) {\n      if (r === max) h = (g - b) / s + (g < b) * 6;\n      else if (g === max) h = (b - r) / s + 2;\n      else h = (r - g) / s + 4;\n      s /= l < 0.5 ? max + min : 2 - max - min;\n      h *= 60;\n    } else {\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new Hsl(h, s, l, o.opacity);\n  }\n\n  function hsl(h, s, l, opacity) {\n    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hsl(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Hsl, hsl, extend$1(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function() {\n      var h = this.h % 360 + (this.h < 0) * 360,\n          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n          l = this.l,\n          m2 = l + (l < 0.5 ? l : 1 - l) * s,\n          m1 = 2 * l - m2;\n      return new Rgb(\n        hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n        hsl2rgb(h, m1, m2),\n        hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n        this.opacity\n      );\n    },\n    displayable: function() {\n      return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n          && (0 <= this.l && this.l <= 1)\n          && (0 <= this.opacity && this.opacity <= 1);\n    },\n    formatHsl: function() {\n      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n      return (a === 1 ? \"hsl(\" : \"hsla(\")\n          + (this.h || 0) + \", \"\n          + (this.s || 0) * 100 + \"%, \"\n          + (this.l || 0) * 100 + \"%\"\n          + (a === 1 ? \")\" : \", \" + a + \")\");\n    }\n  }));\n\n  /* From FvD 13.37, CSS Color Module Level 3 */\n  function hsl2rgb(h, m1, m2) {\n    return (h < 60 ? m1 + (m2 - m1) * h / 60\n        : h < 180 ? m2\n        : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n        : m1) * 255;\n  }\n\n  var deg2rad = Math.PI / 180;\n  var rad2deg = 180 / Math.PI;\n\n  // https://observablehq.com/@mbostock/lab-and-rgb\n  var K = 18,\n      Xn = 0.96422,\n      Yn = 1,\n      Zn = 0.82521,\n      t0$2 = 4 / 29,\n      t1$1 = 6 / 29,\n      t2 = 3 * t1$1 * t1$1,\n      t3 = t1$1 * t1$1 * t1$1;\n\n  function labConvert(o) {\n    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n    if (o instanceof Hcl) return hcl2lab(o);\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var r = rgb2lrgb(o.r),\n        g = rgb2lrgb(o.g),\n        b = rgb2lrgb(o.b),\n        y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;\n    if (r === g && g === b) x = z = y; else {\n      x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\n      z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\n    }\n    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n  }\n\n  function lab(l, a, b, opacity) {\n    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n  }\n\n  function Lab(l, a, b, opacity) {\n    this.l = +l;\n    this.a = +a;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n\n  define(Lab, lab, extend$1(Color, {\n    brighter: function(k) {\n      return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    darker: function(k) {\n      return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    rgb: function() {\n      var y = (this.l + 16) / 116,\n          x = isNaN(this.a) ? y : y + this.a / 500,\n          z = isNaN(this.b) ? y : y - this.b / 200;\n      x = Xn * lab2xyz(x);\n      y = Yn * lab2xyz(y);\n      z = Zn * lab2xyz(z);\n      return new Rgb(\n        lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),\n        lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),\n        lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),\n        this.opacity\n      );\n    }\n  }));\n\n  function xyz2lab(t) {\n    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0$2;\n  }\n\n  function lab2xyz(t) {\n    return t > t1$1 ? t * t * t : t2 * (t - t0$2);\n  }\n\n  function lrgb2rgb(x) {\n    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n  }\n\n  function rgb2lrgb(x) {\n    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n  }\n\n  function hclConvert(o) {\n    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n    if (!(o instanceof Lab)) o = labConvert(o);\n    if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);\n    var h = Math.atan2(o.b, o.a) * rad2deg;\n    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n  }\n\n  function hcl(h, c, l, opacity) {\n    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hcl(h, c, l, opacity) {\n    this.h = +h;\n    this.c = +c;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  function hcl2lab(o) {\n    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);\n    var h = o.h * deg2rad;\n    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n  }\n\n  define(Hcl, hcl, extend$1(Color, {\n    brighter: function(k) {\n      return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);\n    },\n    darker: function(k) {\n      return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);\n    },\n    rgb: function() {\n      return hcl2lab(this).rgb();\n    }\n  }));\n\n  var A = -0.14861,\n      B = +1.78277,\n      C$1 = -0.29227,\n      D = -0.90649,\n      E = +1.97294,\n      ED = E * D,\n      EB = E * B,\n      BC_DA = B * C$1 - D * A;\n\n  function cubehelixConvert(o) {\n    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n        bl = b - l,\n        k = (E * (g - l) - C$1 * bl) / D,\n        s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n        h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\n    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n  }\n\n  function cubehelix(h, s, l, opacity) {\n    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Cubehelix(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Cubehelix, cubehelix, extend$1(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function() {\n      var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\n          l = +this.l,\n          a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n          cosh = Math.cos(h),\n          sinh = Math.sin(h);\n      return new Rgb(\n        255 * (l + a * (A * cosh + B * sinh)),\n        255 * (l + a * (C$1 * cosh + D * sinh)),\n        255 * (l + a * (E * cosh)),\n        this.opacity\n      );\n    }\n  }));\n\n  function basis(t1, v0, v1, v2, v3) {\n    var t2 = t1 * t1, t3 = t2 * t1;\n    return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n        + (4 - 6 * t2 + 3 * t3) * v1\n        + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n        + t3 * v3) / 6;\n  }\n\n  function basis$1(values) {\n    var n = values.length - 1;\n    return function(t) {\n      var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n          v1 = values[i],\n          v2 = values[i + 1],\n          v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n          v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n      return basis((t - i / n) * n, v0, v1, v2, v3);\n    };\n  }\n\n  function basisClosed(values) {\n    var n = values.length;\n    return function(t) {\n      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n          v0 = values[(i + n - 1) % n],\n          v1 = values[i % n],\n          v2 = values[(i + 1) % n],\n          v3 = values[(i + 2) % n];\n      return basis((t - i / n) * n, v0, v1, v2, v3);\n    };\n  }\n\n  function constant$2(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function linear(a, d) {\n    return function(t) {\n      return a + t * d;\n    };\n  }\n\n  function exponential(a, b, y) {\n    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n      return Math.pow(a + t * b, y);\n    };\n  }\n\n  function hue(a, b) {\n    var d = b - a;\n    return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);\n  }\n\n  function gamma(y) {\n    return (y = +y) === 1 ? nogamma : function(a, b) {\n      return b - a ? exponential(a, b, y) : constant$2(isNaN(a) ? b : a);\n    };\n  }\n\n  function nogamma(a, b) {\n    var d = b - a;\n    return d ? linear(a, d) : constant$2(isNaN(a) ? b : a);\n  }\n\n  var rgb$1 = (function rgbGamma(y) {\n    var color = gamma(y);\n\n    function rgb$1(start, end) {\n      var r = color((start = rgb(start)).r, (end = rgb(end)).r),\n          g = color(start.g, end.g),\n          b = color(start.b, end.b),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function(t) {\n        start.r = r(t);\n        start.g = g(t);\n        start.b = b(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    rgb$1.gamma = rgbGamma;\n\n    return rgb$1;\n  })(1);\n\n  function rgbSpline(spline) {\n    return function(colors) {\n      var n = colors.length,\n          r = new Array(n),\n          g = new Array(n),\n          b = new Array(n),\n          i, color;\n      for (i = 0; i < n; ++i) {\n        color = rgb(colors[i]);\n        r[i] = color.r || 0;\n        g[i] = color.g || 0;\n        b[i] = color.b || 0;\n      }\n      r = spline(r);\n      g = spline(g);\n      b = spline(b);\n      color.opacity = 1;\n      return function(t) {\n        color.r = r(t);\n        color.g = g(t);\n        color.b = b(t);\n        return color + \"\";\n      };\n    };\n  }\n\n  var rgbBasis = rgbSpline(basis$1);\n  var rgbBasisClosed = rgbSpline(basisClosed);\n\n  function numberArray(a, b) {\n    if (!b) b = [];\n    var n = a ? Math.min(b.length, a.length) : 0,\n        c = b.slice(),\n        i;\n    return function(t) {\n      for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n      return c;\n    };\n  }\n\n  function isNumberArray(x) {\n    return ArrayBuffer.isView(x) && !(x instanceof DataView);\n  }\n\n  function array$1(a, b) {\n    return (isNumberArray(b) ? numberArray : genericArray)(a, b);\n  }\n\n  function genericArray(a, b) {\n    var nb = b ? b.length : 0,\n        na = a ? Math.min(nb, a.length) : 0,\n        x = new Array(na),\n        c = new Array(nb),\n        i;\n\n    for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);\n    for (; i < nb; ++i) c[i] = b[i];\n\n    return function(t) {\n      for (i = 0; i < na; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n\n  function date(a, b) {\n    var d = new Date;\n    return a = +a, b = +b, function(t) {\n      return d.setTime(a * (1 - t) + b * t), d;\n    };\n  }\n\n  function interpolateNumber(a, b) {\n    return a = +a, b = +b, function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n\n  function object$2(a, b) {\n    var i = {},\n        c = {},\n        k;\n\n    if (a === null || typeof a !== \"object\") a = {};\n    if (b === null || typeof b !== \"object\") b = {};\n\n    for (k in b) {\n      if (k in a) {\n        i[k] = interpolate(a[k], b[k]);\n      } else {\n        c[k] = b[k];\n      }\n    }\n\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n\n  var reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n      reB = new RegExp(reA.source, \"g\");\n\n  function zero$1(b) {\n    return function() {\n      return b;\n    };\n  }\n\n  function one$1(b) {\n    return function(t) {\n      return b(t) + \"\";\n    };\n  }\n\n  function string(a, b) {\n    var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n        am, // current match in a\n        bm, // current match in b\n        bs, // string preceding current number in b, if any\n        i = -1, // index in s\n        s = [], // string constants and placeholders\n        q = []; // number interpolators\n\n    // Coerce inputs to strings.\n    a = a + \"\", b = b + \"\";\n\n    // Interpolate pairs of numbers in a & b.\n    while ((am = reA.exec(a))\n        && (bm = reB.exec(b))) {\n      if ((bs = bm.index) > bi) { // a string precedes the next number in b\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; // coalesce with previous string\n        else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n        if (s[i]) s[i] += bm; // coalesce with previous string\n        else s[++i] = bm;\n      } else { // interpolate non-matching numbers\n        s[++i] = null;\n        q.push({i: i, x: interpolateNumber(am, bm)});\n      }\n      bi = reB.lastIndex;\n    }\n\n    // Add remains of b.\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n\n    // Special optimization for only a single match.\n    // Otherwise, interpolate each of the numbers and rejoin the string.\n    return s.length < 2 ? (q[0]\n        ? one$1(q[0].x)\n        : zero$1(b))\n        : (b = q.length, function(t) {\n            for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n            return s.join(\"\");\n          });\n  }\n\n  function interpolate(a, b) {\n    var t = typeof b, c;\n    return b == null || t === \"boolean\" ? constant$2(b)\n        : (t === \"number\" ? interpolateNumber\n        : t === \"string\" ? ((c = color$1(b)) ? (b = c, rgb$1) : string)\n        : b instanceof color$1 ? rgb$1\n        : b instanceof Date ? date\n        : isNumberArray(b) ? numberArray\n        : Array.isArray(b) ? genericArray\n        : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object$2\n        : interpolateNumber)(a, b);\n  }\n\n  function discrete(range) {\n    var n = range.length;\n    return function(t) {\n      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n    };\n  }\n\n  function hue$1(a, b) {\n    var i = hue(+a, +b);\n    return function(t) {\n      var x = i(t);\n      return x - 360 * Math.floor(x / 360);\n    };\n  }\n\n  function interpolateRound(a, b) {\n    return a = +a, b = +b, function(t) {\n      return Math.round(a * (1 - t) + b * t);\n    };\n  }\n\n  var degrees = 180 / Math.PI;\n\n  var identity$2 = {\n    translateX: 0,\n    translateY: 0,\n    rotate: 0,\n    skewX: 0,\n    scaleX: 1,\n    scaleY: 1\n  };\n\n  function decompose(a, b, c, d, e, f) {\n    var scaleX, scaleY, skewX;\n    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n    return {\n      translateX: e,\n      translateY: f,\n      rotate: Math.atan2(b, a) * degrees,\n      skewX: Math.atan(skewX) * degrees,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  var cssNode,\n      cssRoot,\n      cssView,\n      svgNode;\n\n  function parseCss(value) {\n    if (value === \"none\") return identity$2;\n    if (!cssNode) cssNode = document.createElement(\"DIV\"), cssRoot = document.documentElement, cssView = document.defaultView;\n    cssNode.style.transform = value;\n    value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue(\"transform\");\n    cssRoot.removeChild(cssNode);\n    value = value.slice(7, -1).split(\",\");\n    return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);\n  }\n\n  function parseSvg(value) {\n    if (value == null) return identity$2;\n    if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    svgNode.setAttribute(\"transform\", value);\n    if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;\n    value = value.matrix;\n    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n  }\n\n  function interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n    function pop(s) {\n      return s.length ? s.pop() + \" \" : \"\";\n    }\n\n    function translate(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\n      } else if (xb || yb) {\n        s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n      }\n    }\n\n    function rotate(a, b, s, q) {\n      if (a !== b) {\n        if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n        q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: interpolateNumber(a, b)});\n      } else if (b) {\n        s.push(pop(s) + \"rotate(\" + b + degParen);\n      }\n    }\n\n    function skewX(a, b, s, q) {\n      if (a !== b) {\n        q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: interpolateNumber(a, b)});\n      } else if (b) {\n        s.push(pop(s) + \"skewX(\" + b + degParen);\n      }\n    }\n\n    function scale(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\n      } else if (xb !== 1 || yb !== 1) {\n        s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n      }\n    }\n\n    return function(a, b) {\n      var s = [], // string constants and placeholders\n          q = []; // number interpolators\n      a = parse(a), b = parse(b);\n      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n      rotate(a.rotate, b.rotate, s, q);\n      skewX(a.skewX, b.skewX, s, q);\n      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n      a = b = null; // gc\n      return function(t) {\n        var i = -1, n = q.length, o;\n        while (++i < n) s[(o = q[i]).i] = o.x(t);\n        return s.join(\"\");\n      };\n    };\n  }\n\n  var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\n  var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n\n  var rho = Math.SQRT2,\n      rho2 = 2,\n      rho4 = 4,\n      epsilon2 = 1e-12;\n\n  function cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n\n  function sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n\n  function tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n\n  // p0 = [ux0, uy0, w0]\n  // p1 = [ux1, uy1, w1]\n  function zoom$1(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\n        ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\n        dx = ux1 - ux0,\n        dy = uy1 - uy0,\n        d2 = dx * dx + dy * dy,\n        i,\n        S;\n\n    // Special case for u0 ≅ u1.\n    if (d2 < epsilon2) {\n      S = Math.log(w1 / w0) / rho;\n      i = function(t) {\n        return [\n          ux0 + t * dx,\n          uy0 + t * dy,\n          w0 * Math.exp(rho * t * S)\n        ];\n      };\n    }\n\n    // General case.\n    else {\n      var d1 = Math.sqrt(d2),\n          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / rho;\n      i = function(t) {\n        var s = t * S,\n            coshr0 = cosh(r0),\n            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n        return [\n          ux0 + u * dx,\n          uy0 + u * dy,\n          w0 * coshr0 / cosh(rho * s + r0)\n        ];\n      };\n    }\n\n    i.duration = S * 1000;\n\n    return i;\n  }\n\n  function hsl$1(hue) {\n    return function(start, end) {\n      var h = hue((start = hsl(start)).h, (end = hsl(end)).h),\n          s = nogamma(start.s, end.s),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n  }\n\n  var hsl$2 = hsl$1(hue);\n  var hslLong = hsl$1(nogamma);\n\n  function lab$1(start, end) {\n    var l = nogamma((start = lab(start)).l, (end = lab(end)).l),\n        a = nogamma(start.a, end.a),\n        b = nogamma(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.l = l(t);\n      start.a = a(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  function hcl$1(hue) {\n    return function(start, end) {\n      var h = hue((start = hcl(start)).h, (end = hcl(end)).h),\n          c = nogamma(start.c, end.c),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.c = c(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n  }\n\n  var hcl$2 = hcl$1(hue);\n  var hclLong = hcl$1(nogamma);\n\n  function cubehelix$1(hue) {\n    return (function cubehelixGamma(y) {\n      y = +y;\n\n      function cubehelix$1(start, end) {\n        var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),\n            s = nogamma(start.s, end.s),\n            l = nogamma(start.l, end.l),\n            opacity = nogamma(start.opacity, end.opacity);\n        return function(t) {\n          start.h = h(t);\n          start.s = s(t);\n          start.l = l(Math.pow(t, y));\n          start.opacity = opacity(t);\n          return start + \"\";\n        };\n      }\n\n      cubehelix$1.gamma = cubehelixGamma;\n\n      return cubehelix$1;\n    })(1);\n  }\n\n  var cubehelix$2 = cubehelix$1(hue);\n  var cubehelixLong = cubehelix$1(nogamma);\n\n  function piecewise(interpolate, values) {\n    var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);\n    while (i < n) I[i] = interpolate(v, v = values[++i]);\n    return function(t) {\n      var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));\n      return I[i](t - i);\n    };\n  }\n\n  function quantize(interpolator, n) {\n    var samples = new Array(n);\n    for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n    return samples;\n  }\n\n\n\n  var $$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    interpolate: interpolate,\n    interpolateArray: array$1,\n    interpolateBasis: basis$1,\n    interpolateBasisClosed: basisClosed,\n    interpolateDate: date,\n    interpolateDiscrete: discrete,\n    interpolateHue: hue$1,\n    interpolateNumber: interpolateNumber,\n    interpolateNumberArray: numberArray,\n    interpolateObject: object$2,\n    interpolateRound: interpolateRound,\n    interpolateString: string,\n    interpolateTransformCss: interpolateTransformCss,\n    interpolateTransformSvg: interpolateTransformSvg,\n    interpolateZoom: zoom$1,\n    interpolateRgb: rgb$1,\n    interpolateRgbBasis: rgbBasis,\n    interpolateRgbBasisClosed: rgbBasisClosed,\n    interpolateHsl: hsl$2,\n    interpolateHslLong: hslLong,\n    interpolateLab: lab$1,\n    interpolateHcl: hcl$2,\n    interpolateHclLong: hclLong,\n    interpolateCubehelix: cubehelix$2,\n    interpolateCubehelixLong: cubehelixLong,\n    piecewise: piecewise,\n    quantize: quantize\n  });\n\n  function constant$3(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function number$2(x) {\n    return +x;\n  }\n\n  var unit = [0, 1];\n\n  function identity$3(x) {\n    return x;\n  }\n\n  function normalize(a, b) {\n    return (b -= (a = +a))\n        ? function(x) { return (x - a) / b; }\n        : constant$3(isNaN(b) ? NaN : 0.5);\n  }\n\n  function clamper(a, b) {\n    var t;\n    if (a > b) t = a, a = b, b = t;\n    return function(x) { return Math.max(a, Math.min(b, x)); };\n  }\n\n  // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n  // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\n  function bimap(domain, range, interpolate) {\n    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n    if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n    else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n    return function(x) { return r0(d0(x)); };\n  }\n\n  function polymap(domain, range, interpolate) {\n    var j = Math.min(domain.length, range.length) - 1,\n        d = new Array(j),\n        r = new Array(j),\n        i = -1;\n\n    // Reverse descending domains.\n    if (domain[j] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n\n    while (++i < j) {\n      d[i] = normalize(domain[i], domain[i + 1]);\n      r[i] = interpolate(range[i], range[i + 1]);\n    }\n\n    return function(x) {\n      var i = bisectRight(domain, x, 1, j) - 1;\n      return r[i](d[i](x));\n    };\n  }\n\n  function copy(source, target) {\n    return target\n        .domain(source.domain())\n        .range(source.range())\n        .interpolate(source.interpolate())\n        .clamp(source.clamp())\n        .unknown(source.unknown());\n  }\n\n  function transformer() {\n    var domain = unit,\n        range = unit,\n        interpolate$1 = interpolate,\n        transform,\n        untransform,\n        unknown,\n        clamp = identity$3,\n        piecewise,\n        output,\n        input;\n\n    function rescale() {\n      var n = Math.min(domain.length, range.length);\n      if (clamp !== identity$3) clamp = clamper(domain[0], domain[n - 1]);\n      piecewise = n > 2 ? polymap : bimap;\n      output = input = null;\n      return scale;\n    }\n\n    function scale(x) {\n      return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate$1)))(transform(clamp(x)));\n    }\n\n    scale.invert = function(y) {\n      return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain = Array.from(_, number$2), rescale()) : domain.slice();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n    };\n\n    scale.rangeRound = function(_) {\n      return range = Array.from(_), interpolate$1 = interpolateRound, rescale();\n    };\n\n    scale.clamp = function(_) {\n      return arguments.length ? (clamp = _ ? true : identity$3, rescale()) : clamp !== identity$3;\n    };\n\n    scale.interpolate = function(_) {\n      return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;\n    };\n\n    scale.unknown = function(_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    return function(t, u) {\n      transform = t, untransform = u;\n      return rescale();\n    };\n  }\n\n  function continuous() {\n    return transformer()(identity$3, identity$3);\n  }\n\n  // Computes the decimal coefficient and exponent of the specified number x with\n  // significant digits p, where x is positive and p is in [1, 21] or undefined.\n  // For example, formatDecimal(1.23) returns [\"123\", 0].\n  function formatDecimal(x, p) {\n    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n    var i, coefficient = x.slice(0, i);\n\n    // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n    // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n    return [\n      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n      +x.slice(i + 1)\n    ];\n  }\n\n  function exponent(x) {\n    return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n  }\n\n  function formatGroup(grouping, thousands) {\n    return function(value, width) {\n      var i = value.length,\n          t = [],\n          j = 0,\n          g = grouping[0],\n          length = 0;\n\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = grouping[j = (j + 1) % grouping.length];\n      }\n\n      return t.reverse().join(thousands);\n    };\n  }\n\n  function formatNumerals(numerals) {\n    return function(value) {\n      return value.replace(/[0-9]/g, function(i) {\n        return numerals[+i];\n      });\n    };\n  }\n\n  // [[fill]align][sign][symbol][0][width][,][.precision][~][type]\n  var re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\n  function formatSpecifier(specifier) {\n    if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n    var match;\n    return new FormatSpecifier({\n      fill: match[1],\n      align: match[2],\n      sign: match[3],\n      symbol: match[4],\n      zero: match[5],\n      width: match[6],\n      comma: match[7],\n      precision: match[8] && match[8].slice(1),\n      trim: match[9],\n      type: match[10]\n    });\n  }\n\n  formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\n  function FormatSpecifier(specifier) {\n    this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n    this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n    this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n    this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n    this.zero = !!specifier.zero;\n    this.width = specifier.width === undefined ? undefined : +specifier.width;\n    this.comma = !!specifier.comma;\n    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n    this.trim = !!specifier.trim;\n    this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n  }\n\n  FormatSpecifier.prototype.toString = function() {\n    return this.fill\n        + this.align\n        + this.sign\n        + this.symbol\n        + (this.zero ? \"0\" : \"\")\n        + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n        + (this.comma ? \",\" : \"\")\n        + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n        + (this.trim ? \"~\" : \"\")\n        + this.type;\n  };\n\n  // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\n  function formatTrim(s) {\n    out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n      switch (s[i]) {\n        case \".\": i0 = i1 = i; break;\n        case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n        default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n      }\n    }\n    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n  }\n\n  var prefixExponent;\n\n  function formatPrefixAuto(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1],\n        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n        n = coefficient.length;\n    return i === n ? coefficient\n        : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n        : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n        : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n  }\n\n  function formatRounded(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1];\n    return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n        : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n        : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n  }\n\n  var formatTypes = {\n    \"%\": function(x, p) { return (x * 100).toFixed(p); },\n    \"b\": function(x) { return Math.round(x).toString(2); },\n    \"c\": function(x) { return x + \"\"; },\n    \"d\": function(x) { return Math.round(x).toString(10); },\n    \"e\": function(x, p) { return x.toExponential(p); },\n    \"f\": function(x, p) { return x.toFixed(p); },\n    \"g\": function(x, p) { return x.toPrecision(p); },\n    \"o\": function(x) { return Math.round(x).toString(8); },\n    \"p\": function(x, p) { return formatRounded(x * 100, p); },\n    \"r\": formatRounded,\n    \"s\": formatPrefixAuto,\n    \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n    \"x\": function(x) { return Math.round(x).toString(16); }\n  };\n\n  function identity$4(x) {\n    return x;\n  }\n\n  var map = Array.prototype.map,\n      prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\n  function formatLocale$1(locale) {\n    var group = locale.grouping === undefined || locale.thousands === undefined ? identity$4 : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n        currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n        currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n        decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n        numerals = locale.numerals === undefined ? identity$4 : formatNumerals(map.call(locale.numerals, String)),\n        percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n        minus = locale.minus === undefined ? \"-\" : locale.minus + \"\",\n        nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n    function newFormat(specifier) {\n      specifier = formatSpecifier(specifier);\n\n      var fill = specifier.fill,\n          align = specifier.align,\n          sign = specifier.sign,\n          symbol = specifier.symbol,\n          zero = specifier.zero,\n          width = specifier.width,\n          comma = specifier.comma,\n          precision = specifier.precision,\n          trim = specifier.trim,\n          type = specifier.type;\n\n      // The \"n\" type is an alias for \",g\".\n      if (type === \"n\") comma = true, type = \"g\";\n\n      // The \"\" type, and any invalid type, is an alias for \".12~g\".\n      else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n      // If zero fill is specified, padding goes after sign and before digits.\n      if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n      // Compute the prefix and suffix.\n      // For SI-prefix, the suffix is lazily computed.\n      var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n          suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n      // What format function should we use?\n      // Is this an integer type?\n      // Can this type generate exponential notation?\n      var formatType = formatTypes[type],\n          maybeSuffix = /[defgprs%]/.test(type);\n\n      // Set the default precision if not specified,\n      // or clamp the specified precision to the supported range.\n      // For significant precision, it must be in [1, 21].\n      // For fixed precision, it must be in [0, 20].\n      precision = precision === undefined ? 6\n          : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n          : Math.max(0, Math.min(20, precision));\n\n      function format(value) {\n        var valuePrefix = prefix,\n            valueSuffix = suffix,\n            i, n, c;\n\n        if (type === \"c\") {\n          valueSuffix = formatType(value) + valueSuffix;\n          value = \"\";\n        } else {\n          value = +value;\n\n          // Perform the initial formatting.\n          var valueNegative = value < 0;\n          value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n          // Trim insignificant zeros.\n          if (trim) value = formatTrim(value);\n\n          // If a negative value rounds to zero during formatting, treat as positive.\n          if (valueNegative && +value === 0) valueNegative = false;\n\n          // Compute the prefix and suffix.\n          valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n\n          valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n          // Break the formatted value into the integer “value” part that can be\n          // grouped, and fractional or exponential “suffix” part that is not.\n          if (maybeSuffix) {\n            i = -1, n = value.length;\n            while (++i < n) {\n              if (c = value.charCodeAt(i), 48 > c || c > 57) {\n                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n                value = value.slice(0, i);\n                break;\n              }\n            }\n          }\n        }\n\n        // If the fill character is not \"0\", grouping is applied before padding.\n        if (comma && !zero) value = group(value, Infinity);\n\n        // Compute the padding.\n        var length = valuePrefix.length + value.length + valueSuffix.length,\n            padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n        // If the fill character is \"0\", grouping is applied after padding.\n        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n        // Reconstruct the final output based on the desired alignment.\n        switch (align) {\n          case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n          case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n          case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n          default: value = padding + valuePrefix + value + valueSuffix; break;\n        }\n\n        return numerals(value);\n      }\n\n      format.toString = function() {\n        return specifier + \"\";\n      };\n\n      return format;\n    }\n\n    function formatPrefix(specifier, value) {\n      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n          e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n          k = Math.pow(10, -e),\n          prefix = prefixes[8 + e / 3];\n      return function(value) {\n        return f(k * value) + prefix;\n      };\n    }\n\n    return {\n      format: newFormat,\n      formatPrefix: formatPrefix\n    };\n  }\n\n  var locale$1;\n  var format$1;\n  var formatPrefix;\n\n  defaultLocale$1({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [3],\n    currency: [\"$\", \"\"],\n    minus: \"-\"\n  });\n\n  function defaultLocale$1(definition) {\n    locale$1 = formatLocale$1(definition);\n    format$1 = locale$1.format;\n    formatPrefix = locale$1.formatPrefix;\n    return locale$1;\n  }\n\n  function precisionFixed(step) {\n    return Math.max(0, -exponent(Math.abs(step)));\n  }\n\n  function precisionPrefix(step, value) {\n    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n  }\n\n  function precisionRound(step, max) {\n    step = Math.abs(step), max = Math.abs(max) - step;\n    return Math.max(0, exponent(max) - exponent(step)) + 1;\n  }\n\n  function spanFormat(start, stop, count, specifier) {\n    var step = tickStep(start, stop, count),\n        precision;\n    specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n    switch (specifier.type) {\n      case \"s\": {\n        var value = Math.max(Math.abs(start), Math.abs(stop));\n        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n        return formatPrefix(specifier, value);\n      }\n      case \"\":\n      case \"e\":\n      case \"g\":\n      case \"p\":\n      case \"r\": {\n        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n        break;\n      }\n      case \"f\":\n      case \"%\": {\n        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n        break;\n      }\n    }\n    return format$1(specifier);\n  }\n\n  function linearish(scale) {\n    var domain = scale.domain;\n\n    scale.ticks = function(count) {\n      var d = domain();\n      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      var d = domain();\n      return spanFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n    };\n\n    scale.nice = function(count) {\n      if (count == null) count = 10;\n\n      var d = domain(),\n          i0 = 0,\n          i1 = d.length - 1,\n          start = d[i0],\n          stop = d[i1],\n          step;\n\n      if (stop < start) {\n        step = start, start = stop, stop = step;\n        step = i0, i0 = i1, i1 = step;\n      }\n\n      step = tickIncrement(start, stop, count);\n\n      if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n        step = tickIncrement(start, stop, count);\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n        step = tickIncrement(start, stop, count);\n      }\n\n      if (step > 0) {\n        d[i0] = Math.floor(start / step) * step;\n        d[i1] = Math.ceil(stop / step) * step;\n        domain(d);\n      } else if (step < 0) {\n        d[i0] = Math.ceil(start * step) / step;\n        d[i1] = Math.floor(stop * step) / step;\n        domain(d);\n      }\n\n      return scale;\n    };\n\n    return scale;\n  }\n\n  function linear$1() {\n    var scale = continuous();\n\n    scale.copy = function() {\n      return copy(scale, linear$1());\n    };\n\n    initRange.apply(scale, arguments);\n\n    return linearish(scale);\n  }\n\n  function identity$5(domain) {\n    var unknown;\n\n    function scale(x) {\n      return isNaN(x = +x) ? unknown : x;\n    }\n\n    scale.invert = scale;\n\n    scale.domain = scale.range = function(_) {\n      return arguments.length ? (domain = Array.from(_, number$2), scale) : domain.slice();\n    };\n\n    scale.unknown = function(_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    scale.copy = function() {\n      return identity$5(domain).unknown(unknown);\n    };\n\n    domain = arguments.length ? Array.from(domain, number$2) : [0, 1];\n\n    return linearish(scale);\n  }\n\n  function nice(domain, interval) {\n    domain = domain.slice();\n\n    var i0 = 0,\n        i1 = domain.length - 1,\n        x0 = domain[i0],\n        x1 = domain[i1],\n        t;\n\n    if (x1 < x0) {\n      t = i0, i0 = i1, i1 = t;\n      t = x0, x0 = x1, x1 = t;\n    }\n\n    domain[i0] = interval.floor(x0);\n    domain[i1] = interval.ceil(x1);\n    return domain;\n  }\n\n  function transformLog(x) {\n    return Math.log(x);\n  }\n\n  function transformExp(x) {\n    return Math.exp(x);\n  }\n\n  function transformLogn(x) {\n    return -Math.log(-x);\n  }\n\n  function transformExpn(x) {\n    return -Math.exp(-x);\n  }\n\n  function pow10(x) {\n    return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n  }\n\n  function powp(base) {\n    return base === 10 ? pow10\n        : base === Math.E ? Math.exp\n        : function(x) { return Math.pow(base, x); };\n  }\n\n  function logp(base) {\n    return base === Math.E ? Math.log\n        : base === 10 && Math.log10\n        || base === 2 && Math.log2\n        || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n  }\n\n  function reflect(f) {\n    return function(x) {\n      return -f(-x);\n    };\n  }\n\n  function loggish(transform) {\n    var scale = transform(transformLog, transformExp),\n        domain = scale.domain,\n        base = 10,\n        logs,\n        pows;\n\n    function rescale() {\n      logs = logp(base), pows = powp(base);\n      if (domain()[0] < 0) {\n        logs = reflect(logs), pows = reflect(pows);\n        transform(transformLogn, transformExpn);\n      } else {\n        transform(transformLog, transformExp);\n      }\n      return scale;\n    }\n\n    scale.base = function(_) {\n      return arguments.length ? (base = +_, rescale()) : base;\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n\n    scale.ticks = function(count) {\n      var d = domain(),\n          u = d[0],\n          v = d[d.length - 1],\n          r;\n\n      if (r = v < u) i = u, u = v, v = i;\n\n      var i = logs(u),\n          j = logs(v),\n          p,\n          k,\n          t,\n          n = count == null ? 10 : +count,\n          z = [];\n\n      if (!(base % 1) && j - i < n) {\n        i = Math.floor(i), j = Math.ceil(j);\n        if (u > 0) for (; i <= j; ++i) {\n          for (k = 1, p = pows(i); k < base; ++k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        } else for (; i <= j; ++i) {\n          for (k = base - 1, p = pows(i); k >= 1; --k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        }\n        if (z.length * 2 < n) z = ticks(u, v, n);\n      } else {\n        z = ticks(i, j, Math.min(j - i, n)).map(pows);\n      }\n\n      return r ? z.reverse() : z;\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n      if (typeof specifier !== \"function\") specifier = format$1(specifier);\n      if (count === Infinity) return specifier;\n      if (count == null) count = 10;\n      var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n      return function(d) {\n        var i = d / pows(Math.round(logs(d)));\n        if (i * base < base - 0.5) i *= base;\n        return i <= k ? specifier(d) : \"\";\n      };\n    };\n\n    scale.nice = function() {\n      return domain(nice(domain(), {\n        floor: function(x) { return pows(Math.floor(logs(x))); },\n        ceil: function(x) { return pows(Math.ceil(logs(x))); }\n      }));\n    };\n\n    return scale;\n  }\n\n  function log$2() {\n    var scale = loggish(transformer()).domain([1, 10]);\n\n    scale.copy = function() {\n      return copy(scale, log$2()).base(scale.base());\n    };\n\n    initRange.apply(scale, arguments);\n\n    return scale;\n  }\n\n  function transformSymlog(c) {\n    return function(x) {\n      return Math.sign(x) * Math.log1p(Math.abs(x / c));\n    };\n  }\n\n  function transformSymexp(c) {\n    return function(x) {\n      return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n    };\n  }\n\n  function symlogish(transform) {\n    var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));\n\n    scale.constant = function(_) {\n      return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\n    };\n\n    return linearish(scale);\n  }\n\n  function symlog$1() {\n    var scale = symlogish(transformer());\n\n    scale.copy = function() {\n      return copy(scale, symlog$1()).constant(scale.constant());\n    };\n\n    return initRange.apply(scale, arguments);\n  }\n\n  function transformPow(exponent) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n    };\n  }\n\n  function transformSqrt(x) {\n    return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);\n  }\n\n  function transformSquare(x) {\n    return x < 0 ? -x * x : x * x;\n  }\n\n  function powish(transform) {\n    var scale = transform(identity$3, identity$3),\n        exponent = 1;\n\n    function rescale() {\n      return exponent === 1 ? transform(identity$3, identity$3)\n          : exponent === 0.5 ? transform(transformSqrt, transformSquare)\n          : transform(transformPow(exponent), transformPow(1 / exponent));\n    }\n\n    scale.exponent = function(_) {\n      return arguments.length ? (exponent = +_, rescale()) : exponent;\n    };\n\n    return linearish(scale);\n  }\n\n  function pow$1() {\n    var scale = powish(transformer());\n\n    scale.copy = function() {\n      return copy(scale, pow$1()).exponent(scale.exponent());\n    };\n\n    initRange.apply(scale, arguments);\n\n    return scale;\n  }\n\n  function sqrt$1() {\n    return pow$1.apply(null, arguments).exponent(0.5);\n  }\n\n  function quantile$1() {\n    var domain = [],\n        range = [],\n        thresholds = [],\n        unknown;\n\n    function rescale() {\n      var i = 0, n = Math.max(1, range.length);\n      thresholds = new Array(n - 1);\n      while (++i < n) thresholds[i - 1] = quantile(domain, i / n);\n      return scale;\n    }\n\n    function scale(x) {\n      return isNaN(x = +x) ? unknown : range[bisectRight(thresholds, x)];\n    }\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN] : [\n        i > 0 ? thresholds[i - 1] : domain[0],\n        i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n      ];\n    };\n\n    scale.domain = function(_) {\n      if (!arguments.length) return domain.slice();\n      domain = [];\n      for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n      domain.sort(ascending);\n      return rescale();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n    };\n\n    scale.unknown = function(_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    scale.quantiles = function() {\n      return thresholds.slice();\n    };\n\n    scale.copy = function() {\n      return quantile$1()\n          .domain(domain)\n          .range(range)\n          .unknown(unknown);\n    };\n\n    return initRange.apply(scale, arguments);\n  }\n\n  function quantize$1() {\n    var x0 = 0,\n        x1 = 1,\n        n = 1,\n        domain = [0.5],\n        range = [0, 1],\n        unknown;\n\n    function scale(x) {\n      return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;\n    }\n\n    function rescale() {\n      var i = -1;\n      domain = new Array(n);\n      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n      return scale;\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();\n    };\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN]\n          : i < 1 ? [x0, domain[0]]\n          : i >= n ? [domain[n - 1], x1]\n          : [domain[i - 1], domain[i]];\n    };\n\n    scale.unknown = function(_) {\n      return arguments.length ? (unknown = _, scale) : scale;\n    };\n\n    scale.thresholds = function() {\n      return domain.slice();\n    };\n\n    scale.copy = function() {\n      return quantize$1()\n          .domain([x0, x1])\n          .range(range)\n          .unknown(unknown);\n    };\n\n    return initRange.apply(linearish(scale), arguments);\n  }\n\n  function threshold() {\n    var domain = [0.5],\n        range = [0, 1],\n        unknown,\n        n = 1;\n\n    function scale(x) {\n      return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n    };\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return [domain[i - 1], domain[i]];\n    };\n\n    scale.unknown = function(_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    scale.copy = function() {\n      return threshold()\n          .domain(domain)\n          .range(range)\n          .unknown(unknown);\n    };\n\n    return initRange.apply(scale, arguments);\n  }\n\n  var durationSecond$2 = 1000,\n      durationMinute$2 = durationSecond$2 * 60,\n      durationHour$2 = durationMinute$2 * 60,\n      durationDay$2 = durationHour$2 * 24,\n      durationWeek$2 = durationDay$2 * 7,\n      durationMonth$1 = durationDay$2 * 30,\n      durationYear$1 = durationDay$2 * 365;\n\n  function date$1(t) {\n    return new Date(t);\n  }\n\n  function number$3(t) {\n    return t instanceof Date ? +t : +new Date(+t);\n  }\n\n  function calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n    var scale = continuous(),\n        invert = scale.invert,\n        domain = scale.domain;\n\n    var formatMillisecond = format(\".%L\"),\n        formatSecond = format(\":%S\"),\n        formatMinute = format(\"%I:%M\"),\n        formatHour = format(\"%I %p\"),\n        formatDay = format(\"%a %d\"),\n        formatWeek = format(\"%b %d\"),\n        formatMonth = format(\"%B\"),\n        formatYear = format(\"%Y\");\n\n    var tickIntervals = [\n      [second,  1,      durationSecond$2],\n      [second,  5,  5 * durationSecond$2],\n      [second, 15, 15 * durationSecond$2],\n      [second, 30, 30 * durationSecond$2],\n      [minute,  1,      durationMinute$2],\n      [minute,  5,  5 * durationMinute$2],\n      [minute, 15, 15 * durationMinute$2],\n      [minute, 30, 30 * durationMinute$2],\n      [  hour,  1,      durationHour$2  ],\n      [  hour,  3,  3 * durationHour$2  ],\n      [  hour,  6,  6 * durationHour$2  ],\n      [  hour, 12, 12 * durationHour$2  ],\n      [   day,  1,      durationDay$2   ],\n      [   day,  2,  2 * durationDay$2   ],\n      [  week,  1,      durationWeek$2  ],\n      [ month,  1,      durationMonth$1 ],\n      [ month,  3,  3 * durationMonth$1 ],\n      [  year,  1,      durationYear$1  ]\n    ];\n\n    function tickFormat(date) {\n      return (second(date) < date ? formatMillisecond\n          : minute(date) < date ? formatSecond\n          : hour(date) < date ? formatMinute\n          : day(date) < date ? formatHour\n          : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n          : year(date) < date ? formatMonth\n          : formatYear)(date);\n    }\n\n    function tickInterval(interval, start, stop) {\n      if (interval == null) interval = 10;\n\n      // If a desired tick count is specified, pick a reasonable tick interval\n      // based on the extent of the domain and a rough estimate of tick size.\n      // Otherwise, assume interval is already a time interval and use it.\n      if (typeof interval === \"number\") {\n        var target = Math.abs(stop - start) / interval,\n            i = bisector(function(i) { return i[2]; }).right(tickIntervals, target),\n            step;\n        if (i === tickIntervals.length) {\n          step = tickStep(start / durationYear$1, stop / durationYear$1, interval);\n          interval = year;\n        } else if (i) {\n          i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n          step = i[1];\n          interval = i[0];\n        } else {\n          step = Math.max(tickStep(start, stop, interval), 1);\n          interval = millisecond;\n        }\n        return interval.every(step);\n      }\n\n      return interval;\n    }\n\n    scale.invert = function(y) {\n      return new Date(invert(y));\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? domain(Array.from(_, number$3)) : domain().map(date$1);\n    };\n\n    scale.ticks = function(interval) {\n      var d = domain(),\n          t0 = d[0],\n          t1 = d[d.length - 1],\n          r = t1 < t0,\n          t;\n      if (r) t = t0, t0 = t1, t1 = t;\n      t = tickInterval(interval, t0, t1);\n      t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n      return r ? t.reverse() : t;\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      return specifier == null ? tickFormat : format(specifier);\n    };\n\n    scale.nice = function(interval) {\n      var d = domain();\n      return (interval = tickInterval(interval, d[0], d[d.length - 1]))\n          ? domain(nice(d, interval))\n          : scale;\n    };\n\n    scale.copy = function() {\n      return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n    };\n\n    return scale;\n  }\n\n  function time() {\n    return initRange.apply(calendar(year, month, sunday, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\n  }\n\n  function utcTime() {\n    return initRange.apply(calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);\n  }\n\n  function transformer$1() {\n    var x0 = 0,\n        x1 = 1,\n        t0,\n        t1,\n        k10,\n        transform,\n        interpolator = identity$3,\n        clamp = false,\n        unknown;\n\n    function scale(x) {\n      return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\n    };\n\n    scale.clamp = function(_) {\n      return arguments.length ? (clamp = !!_, scale) : clamp;\n    };\n\n    scale.interpolator = function(_) {\n      return arguments.length ? (interpolator = _, scale) : interpolator;\n    };\n\n    function range(interpolate) {\n      return function(_) {\n        var r0, r1;\n        return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];\n      };\n    }\n\n    scale.range = range(interpolate);\n\n    scale.rangeRound = range(interpolateRound);\n\n    scale.unknown = function(_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    return function(t) {\n      transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\n      return scale;\n    };\n  }\n\n  function copy$1(source, target) {\n    return target\n        .domain(source.domain())\n        .interpolator(source.interpolator())\n        .clamp(source.clamp())\n        .unknown(source.unknown());\n  }\n\n  function sequential() {\n    var scale = linearish(transformer$1()(identity$3));\n\n    scale.copy = function() {\n      return copy$1(scale, sequential());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n\n  function sequentialLog() {\n    var scale = loggish(transformer$1()).domain([1, 10]);\n\n    scale.copy = function() {\n      return copy$1(scale, sequentialLog()).base(scale.base());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n\n  function sequentialSymlog() {\n    var scale = symlogish(transformer$1());\n\n    scale.copy = function() {\n      return copy$1(scale, sequentialSymlog()).constant(scale.constant());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n\n  function sequentialPow() {\n    var scale = powish(transformer$1());\n\n    scale.copy = function() {\n      return copy$1(scale, sequentialPow()).exponent(scale.exponent());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n\n  function sequentialSqrt() {\n    return sequentialPow.apply(null, arguments).exponent(0.5);\n  }\n\n  function transformer$2() {\n    var x0 = 0,\n        x1 = 0.5,\n        x2 = 1,\n        s = 1,\n        t0,\n        t1,\n        t2,\n        k10,\n        k21,\n        interpolator = identity$3,\n        transform,\n        clamp = false,\n        unknown;\n\n    function scale(x) {\n      return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];\n    };\n\n    scale.clamp = function(_) {\n      return arguments.length ? (clamp = !!_, scale) : clamp;\n    };\n\n    scale.interpolator = function(_) {\n      return arguments.length ? (interpolator = _, scale) : interpolator;\n    };\n\n    function range(interpolate) {\n      return function(_) {\n        var r0, r1, r2;\n        return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];\n      };\n    }\n\n    scale.range = range(interpolate);\n\n    scale.rangeRound = range(interpolateRound);\n\n    scale.unknown = function(_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    return function(t) {\n      transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;\n      return scale;\n    };\n  }\n\n  function diverging() {\n    var scale = linearish(transformer$2()(identity$3));\n\n    scale.copy = function() {\n      return copy$1(scale, diverging());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n\n  function divergingLog() {\n    var scale = loggish(transformer$2()).domain([0.1, 1, 10]);\n\n    scale.copy = function() {\n      return copy$1(scale, divergingLog()).base(scale.base());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n\n  function divergingSymlog() {\n    var scale = symlogish(transformer$2());\n\n    scale.copy = function() {\n      return copy$1(scale, divergingSymlog()).constant(scale.constant());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n\n  function divergingPow() {\n    var scale = powish(transformer$2());\n\n    scale.copy = function() {\n      return copy$1(scale, divergingPow()).exponent(scale.exponent());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n\n  function divergingSqrt() {\n    return divergingPow.apply(null, arguments).exponent(0.5);\n  }\n\n  function band() {\n    var scale = ordinal().unknown(undefined),\n        domain = scale.domain,\n        ordinalRange = scale.range,\n        range = [0, 1],\n        step,\n        bandwidth,\n        round = false,\n        paddingInner = 0,\n        paddingOuter = 0,\n        align = 0.5;\n\n    delete scale.unknown;\n\n    function rescale() {\n      var n = domain().length,\n          reverse = range[1] < range[0],\n          start = range[reverse - 0],\n          stop = range[1 - reverse],\n          space = bandSpace(n, paddingInner, paddingOuter);\n\n      step = (stop - start) / (space || 1);\n      if (round) {\n        step = Math.floor(step);\n      }\n      start += (stop - start - step * (n - paddingInner)) * align;\n      bandwidth = step * (1 - paddingInner);\n      if (round) {\n        start = Math.round(start);\n        bandwidth = Math.round(bandwidth);\n      }\n      var values = sequence(n).map(function(i) { return start + step * i; });\n      return ordinalRange(reverse ? values.reverse() : values);\n    }\n\n    scale.domain = function(_) {\n      if (arguments.length) {\n        domain(_);\n        return rescale();\n      } else {\n        return domain();\n      }\n    };\n\n    scale.range = function(_) {\n      if (arguments.length) {\n        range = [+_[0], +_[1]];\n        return rescale();\n      } else {\n        return range.slice();\n      }\n    };\n\n    scale.rangeRound = function(_) {\n      range = [+_[0], +_[1]];\n      round = true;\n      return rescale();\n    };\n\n    scale.bandwidth = function() {\n      return bandwidth;\n    };\n\n    scale.step = function() {\n      return step;\n    };\n\n    scale.round = function(_) {\n      if (arguments.length) {\n        round = !!_;\n        return rescale();\n      } else {\n        return round;\n      }\n    };\n\n    scale.padding = function(_) {\n      if (arguments.length) {\n        paddingOuter = Math.max(0, Math.min(1, _));\n        paddingInner = paddingOuter;\n        return rescale();\n      } else {\n        return paddingInner;\n      }\n    };\n\n    scale.paddingInner = function(_) {\n      if (arguments.length) {\n        paddingInner = Math.max(0, Math.min(1, _));\n        return rescale();\n      } else {\n        return paddingInner;\n      }\n    };\n\n    scale.paddingOuter = function(_) {\n      if (arguments.length) {\n        paddingOuter = Math.max(0, Math.min(1, _));\n        return rescale();\n      } else {\n        return paddingOuter;\n      }\n    };\n\n    scale.align = function(_) {\n      if (arguments.length) {\n        align = Math.max(0, Math.min(1, _));\n        return rescale();\n      } else {\n        return align;\n      }\n    };\n\n    scale.invertRange = function(_) {\n      // bail if range has null or undefined values\n      if (_[0] == null || _[1] == null) return;\n\n      var lo = +_[0],\n          hi = +_[1],\n          reverse = range[1] < range[0],\n          values = reverse ? ordinalRange().reverse() : ordinalRange(),\n          n = values.length - 1, a, b, t;\n\n      // bail if either range endpoint is invalid\n      if (lo !== lo || hi !== hi) return;\n\n      // order range inputs, bail if outside of scale range\n      if (hi < lo) {\n        t = lo;\n        lo = hi;\n        hi = t;\n      }\n      if (hi < values[0] || lo > range[1-reverse]) return;\n\n      // binary search to index into scale range\n      a = Math.max(0, bisectRight(values, lo) - 1);\n      b = lo===hi ? a : bisectRight(values, hi) - 1;\n\n      // increment index a if lo is within padding gap\n      if (lo - values[a] > bandwidth + 1e-10) ++a;\n\n      if (reverse) {\n        // map + swap\n        t = a;\n        a = n - b;\n        b = n - t;\n      }\n      return (a > b) ? undefined : domain().slice(a, b+1);\n    };\n\n    scale.invert = function(_) {\n      var value = scale.invertRange([_, _]);\n      return value ? value[0] : value;\n    };\n\n    scale.copy = function() {\n      return band()\n          .domain(domain())\n          .range(range)\n          .round(round)\n          .paddingInner(paddingInner)\n          .paddingOuter(paddingOuter)\n          .align(align);\n    };\n\n    return rescale();\n  }\n\n  function pointish(scale) {\n    var copy = scale.copy;\n\n    scale.padding = scale.paddingOuter;\n    delete scale.paddingInner;\n\n    scale.copy = function() {\n      return pointish(copy());\n    };\n\n    return scale;\n  }\n\n  function point$5() {\n    return pointish(band().paddingInner(1));\n  }\n\n  var map$1 = Array.prototype.map;\n\n  function numbers$2(_) {\n    return map$1.call(_, function(x) { return +x; });\n  }\n\n  var slice = Array.prototype.slice;\n\n  function scaleBinOrdinal() {\n    var domain = [],\n        range = [];\n\n    function scale(x) {\n      return x == null || x !== x\n        ? undefined\n        : range[(bisectRight(domain, x) - 1) % range.length];\n    }\n\n    scale.domain = function(_) {\n      if (arguments.length) {\n        domain = numbers$2(_);\n        return scale;\n      } else {\n        return domain.slice();\n      }\n    };\n\n    scale.range = function(_) {\n      if (arguments.length) {\n        range = slice.call(_);\n        return scale;\n      } else {\n        return range.slice();\n      }\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      return spanFormat(domain[0], peek(domain), count == null ? 10 : count, specifier);\n    };\n\n    scale.copy = function() {\n      return scaleBinOrdinal().domain(scale.domain()).range(scale.range());\n    };\n\n    return scale;\n  }\n\n  // scale registry\n  const scales = {};\n\n  /**\n   * Augment scales with their type and needed inverse methods.\n   */\n  function create(type, constructor, metadata) {\n    const ctr = function scale() {\n      var s = constructor();\n\n      if (!s.invertRange) {\n        s.invertRange = s.invert ? invertRange(s)\n          : s.invertExtent ? invertRangeExtent(s)\n          : undefined;\n      }\n\n      s.type = type;\n      return s;\n    };\n\n    ctr.metadata = toSet(array(metadata));\n\n    return ctr;\n  }\n\n  function scale$2(type, scale, metadata) {\n    if (arguments.length > 1) {\n      scales[type] = create(type, scale, metadata);\n      return this;\n    } else {\n      return isValidScaleType(type) ? scales[type] : undefined;\n    }\n  }\n\n  // identity scale\n  scale$2(Identity, identity$5);\n\n  // continuous scales\n  scale$2(Linear$1, linear$1, Continuous);\n  scale$2(Log, log$2, [Continuous, Log]);\n  scale$2(Pow, pow$1, Continuous);\n  scale$2(Sqrt, sqrt$1, Continuous);\n  scale$2(Symlog, symlog$1, Continuous);\n  scale$2(Time, time, [Continuous, Temporal]);\n  scale$2(UTC, utcTime, [Continuous, Temporal]);\n\n  // sequential scales\n  scale$2(Sequential, sequential, [Continuous, Interpolating]); // backwards compat\n  scale$2(`${Sequential}-${Linear$1}`, sequential, [Continuous, Interpolating]);\n  scale$2(`${Sequential}-${Log}`, sequentialLog, [Continuous, Interpolating, Log]);\n  scale$2(`${Sequential}-${Pow}`, sequentialPow, [Continuous, Interpolating]);\n  scale$2(`${Sequential}-${Sqrt}`, sequentialSqrt, [Continuous, Interpolating]);\n  scale$2(`${Sequential}-${Symlog}`, sequentialSymlog, [Continuous, Interpolating]);\n\n  // diverging scales\n  scale$2(`${Diverging}-${Linear$1}`, diverging, [Continuous, Interpolating]);\n  scale$2(`${Diverging}-${Log}`, divergingLog, [Continuous, Interpolating, Log]);\n  scale$2(`${Diverging}-${Pow}`, divergingPow, [Continuous, Interpolating]);\n  scale$2(`${Diverging}-${Sqrt}`, divergingSqrt, [Continuous, Interpolating]);\n  scale$2(`${Diverging}-${Symlog}`, divergingSymlog, [Continuous, Interpolating]);\n\n  // discretizing scales\n  scale$2(Quantile$1, quantile$1, [Discretizing, Quantile$1]);\n  scale$2(Quantize, quantize$1, Discretizing);\n  scale$2(Threshold, threshold, Discretizing);\n\n  // discrete scales\n  scale$2(BinOrdinal, scaleBinOrdinal, [Discrete, Discretizing]);\n  scale$2(Ordinal, ordinal, Discrete);\n  scale$2(Band, band, Discrete);\n  scale$2(Point, point$5, Discrete);\n\n  function isValidScaleType(type) {\n    return hasOwnProperty(scales, type);\n  }\n\n  function hasType(key, type) {\n    const s = scales[key];\n    return s && s.metadata[type];\n  }\n\n  function isContinuous(key) {\n    return hasType(key, Continuous);\n  }\n\n  function isDiscrete(key) {\n    return hasType(key, Discrete);\n  }\n\n  function isDiscretizing(key) {\n    return hasType(key, Discretizing);\n  }\n\n  function isLogarithmic(key) {\n    return hasType(key, Log);\n  }\n\n  function isInterpolating(key) {\n    return hasType(key, Interpolating);\n  }\n\n  function isQuantile(key) {\n    return hasType(key, Quantile$1);\n  }\n\n  const scaleProps = ['clamp', 'base', 'constant', 'exponent'];\n\n  function interpolateRange(interpolator, range) {\n    var start = range[0],\n        span = peek(range) - start;\n    return function(i) { return interpolator(start + i * span); };\n  }\n\n  function interpolateColors(colors, type, gamma) {\n    return piecewise(interpolate$1(type || 'rgb', gamma), colors);\n  }\n\n  function quantizeInterpolator(interpolator, count) {\n    var samples = new Array(count),\n        n = count + 1;\n    for (var i = 0; i < count;) samples[i] = interpolator(++i / n);\n    return samples;\n  }\n\n  function scaleFraction(scale, min, max) {\n    var delta = max - min, i, t, s;\n\n    if (!delta || !Number.isFinite(delta)) {\n      return constant(0.5);\n    } else {\n      i = (t = scale.type).indexOf('-');\n      t = i < 0 ? t : t.slice(i + 1);\n      s = scale$2(t)().domain([min, max]).range([0, 1]);\n      scaleProps.forEach(m => scale[m] ? s[m](scale[m]()) : 0);\n      return s;\n    }\n  }\n\n  function interpolate$1(type, gamma) {\n    var interp = $$1[method(type)];\n    return (gamma != null && interp && interp.gamma)\n      ? interp.gamma(gamma)\n      : interp;\n  }\n\n  function method(type) {\n    return 'interpolate' + type.toLowerCase()\n      .split('-')\n      .map(function(s) { return s[0].toUpperCase() + s.slice(1); })\n      .join('');\n  }\n\n  const continuous$1 = {\n    blues: 'cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90',\n    greens: 'd3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429',\n    greys: 'e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e',\n    oranges: 'fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303',\n    purples: 'e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c',\n    reds: 'fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13',\n\n    blueGreen: 'd5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429',\n    bluePurple: 'ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71',\n    greenBlue: 'd3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1',\n    orangeRed: 'fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403',\n    purpleBlue: 'dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281',\n    purpleBlueGreen: 'dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353',\n    purpleRed: 'dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a',\n    redPurple: 'fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174',\n    yellowGreen: 'e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034',\n    yellowOrangeBrown: 'feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204',\n    yellowOrangeRed: 'fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225',\n\n    blueOrange: '134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07',\n    brownBlueGreen: '704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147',\n    purpleGreen: '5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29',\n    purpleOrange: '4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07',\n    redBlue: '8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85',\n    redGrey: '8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434',\n    yellowGreenBlue: 'eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185',\n    redYellowBlue: 'a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695',\n    redYellowGreen: 'a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837',\n    pinkYellowGreen: '8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419',\n    spectral: '9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2',\n\n    viridis: '440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725',\n    magma: '0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf',\n    inferno: '0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4',\n    plasma: '0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921',\n\n    rainbow: '6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa',\n    sinebow: 'ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040',\n\n    browns: 'eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632',\n    tealBlues: 'bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985',\n    teals: 'bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667',\n    warmGreys: 'dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e',\n\n    goldGreen: 'f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36',\n    goldOrange: 'f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26',\n    goldRed: 'f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e',\n\n    lightGreyRed: 'efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b',\n    lightGreyTeal: 'e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc',\n    lightMulti: 'e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c',\n    lightOrange: 'f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b',\n    lightTealBlue: 'e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988',\n\n    darkBlue: '3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff',\n    darkGold: '3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff',\n    darkGreen: '3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa',\n    darkMulti: '3737371f5287197d8c29a86995ce3fffe800ffffff',\n    darkRed: '3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c'\n  };\n\n  const discrete$1 = {\n    category10: '1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf',\n    category20: '1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5',\n    category20b: '393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6',\n    category20c: '3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9',\n    tableau10: '4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac',\n    tableau20: '4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5',\n    accent: '7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666',\n    dark2: '1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666',\n    paired: 'a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928',\n    pastel1: 'fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2',\n    pastel2: 'b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc',\n    set1: 'e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999',\n    set2: '66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3',\n    set3: '8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f'\n  };\n\n  function colors(palette) {\n    var n = palette.length / 6 | 0, c = new Array(n), i = 0;\n    while (i < n) c[i] = '#' + palette.slice(i * 6, ++i * 6);\n    return c;\n  }\n\n  function apply(_, f) {\n    for (let k in _) scheme(k, f(_[k]));\n  }\n\n  const schemes = {};\n  apply(discrete$1, colors);\n  apply(continuous$1, _ => interpolateColors(colors(_)));\n\n  function scheme(name, scheme) {\n    name = name && name.toLowerCase();\n    if (arguments.length > 1) {\n      schemes[name] = scheme;\n      return this;\n    } else {\n      return schemes[name];\n    }\n  }\n\n  const defaultFormatter = value => isArray(value)\n    ? value.map(v => String(v))\n    : String(value);\n\n  /**\n   * Determine the tick count or interval function.\n   * @param {Scale} scale - The scale for which to generate tick values.\n   * @param {*} count - The desired tick count or interval specifier.\n   * @param {number} minStep - The desired minimum step between tick values.\n   * @return {*} - The tick count or interval function.\n   */\n  function tickCount(scale, count, minStep) {\n    var step;\n\n    if (isNumber(count)) {\n      if (scale.bins) {\n        count = Math.max(count, scale.bins.length);\n      }\n      if (minStep != null) {\n        count = Math.min(count, ~~(span(scale.domain()) / minStep) || 1);\n      }\n    }\n\n    if (isObject(count)) {\n      step = count.step;\n      count = count.interval;\n    }\n\n    if (isString(count)) {\n      count = scale.type === Time ? timeInterval(count)\n        : scale.type == UTC ? utcInterval(count)\n        : error('Only time and utc scales accept interval strings.');\n      if (step) count = count.every(step);\n    }\n\n    return count;\n  }\n\n  /**\n   * Filter a set of candidate tick values, ensuring that only tick values\n   * that lie within the scale range are included.\n   * @param {Scale} scale - The scale for which to generate tick values.\n   * @param {Array<*>} ticks - The candidate tick values.\n   * @param {*} count - The tick count or interval function.\n   * @return {Array<*>} - The filtered tick values.\n   */\n  function validTicks(scale, ticks, count) {\n    var range = scale.range(),\n        lo = Math.floor(range[0]),\n        hi = Math.ceil(peek(range));\n\n    if (lo > hi) {\n      range = hi;\n      hi = lo;\n      lo = range;\n    }\n\n    ticks = ticks.filter(function(v) {\n      v = scale(v);\n      return lo <= v && v <= hi;\n    });\n\n    if (count > 0 && ticks.length > 1) {\n      var endpoints = [ticks[0], peek(ticks)];\n      while (ticks.length > count && ticks.length >= 3) {\n        ticks = ticks.filter(function(_, i) { return !(i % 2); });\n      }\n      if (ticks.length < 3) {\n        ticks = endpoints;\n      }\n    }\n\n    return ticks;\n  }\n\n  /**\n   * Generate tick values for the given scale and approximate tick count or\n   * interval value. If the scale has a 'ticks' method, it will be used to\n   * generate the ticks, with the count argument passed as a parameter. If the\n   * scale lacks a 'ticks' method, the full scale domain will be returned.\n   * @param {Scale} scale - The scale for which to generate tick values.\n   * @param {*} [count] - The approximate number of desired ticks.\n   * @return {Array<*>} - The generated tick values.\n   */\n  function tickValues(scale, count) {\n    return scale.bins ? validTicks(scale, scale.bins)\n      : scale.ticks ? scale.ticks(count)\n      : scale.domain();\n  }\n\n  /**\n   * Generate a label format function for a scale. If the scale has a\n   * 'tickFormat' method, it will be used to generate the formatter, with the\n   * count and specifier arguments passed as parameters. If the scale lacks a\n   * 'tickFormat' method, the returned formatter performs simple string coercion.\n   * If the input scale is a logarithmic scale and the format specifier does not\n   * indicate a desired decimal precision, a special variable precision formatter\n   * that automatically trims trailing zeroes will be generated.\n   * @param {Scale} scale - The scale for which to generate the label formatter.\n   * @param {*} [count] - The approximate number of desired ticks.\n   * @param {string} [specifier] - The format specifier. Must be a legal d3\n   *   specifier string (see https://github.com/d3/d3-format#formatSpecifier) or\n   *   time multi-format specifier object.\n   * @return {function(*):string} - The generated label formatter.\n   */\n  function tickFormat(scale, count, specifier, formatType, noSkip) {\n    var type = scale.type,\n        format = (type === Time || formatType === Time) ? timeFormat$1(specifier)\n          : (type === UTC || formatType === UTC) ? utcFormat$1(specifier)\n          : scale.tickFormat ? scale.tickFormat(count, specifier)\n          : specifier ? format$1(specifier)\n          : defaultFormatter;\n\n    if (isLogarithmic(type)) {\n      var logfmt = variablePrecision(specifier);\n      format = noSkip || scale.bins ? logfmt : filter$1(format, logfmt);\n    }\n\n    return format;\n  }\n\n  function filter$1(sourceFormat, targetFormat) {\n    return _ => sourceFormat(_) ? targetFormat(_) : '';\n  }\n\n  function variablePrecision(specifier) {\n    var s = formatSpecifier(specifier || ',');\n\n    if (s.precision == null) {\n      s.precision = 12;\n      switch (s.type) {\n        case '%': s.precision -= 2; break;\n        case 'e': s.precision -= 1; break;\n      }\n      return trimZeroes(\n        format$1(s),          // number format\n        format$1('.1f')(1)[1] // decimal point character\n      );\n    } else {\n      return format$1(s);\n    }\n  }\n\n  function trimZeroes(format, decimalChar) {\n    return function(x) {\n      var str = format(x),\n          dec = str.indexOf(decimalChar),\n          idx, end;\n\n      if (dec < 0) return str;\n\n      idx = rightmostDigit(str, dec);\n      end = idx < str.length ? str.slice(idx) : '';\n      while (--idx > dec) if (str[idx] !== '0') { ++idx; break; }\n\n      return str.slice(0, idx) + end;\n    };\n  }\n\n  function rightmostDigit(str, dec) {\n    var i = str.lastIndexOf('e'), c;\n    if (i > 0) return i;\n    for (i=str.length; --i > dec;) {\n      c = str.charCodeAt(i);\n      if (c >= 48 && c <= 57) return i + 1; // is digit\n    }\n  }\n\n  /**\n   * Generates axis ticks for visualizing a spatial scale.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Scale} params.scale - The scale to generate ticks for.\n   * @param {*} [params.count=10] - The approximate number of ticks, or\n   *   desired tick interval, to use.\n   * @param {Array<*>} [params.values] - The exact tick values to use.\n   *   These must be legal domain values for the provided scale.\n   *   If provided, the count argument is ignored.\n   * @param {function(*):string} [params.formatSpecifier] - A format specifier\n   *   to use in conjunction with scale.tickFormat. Legal values are\n   *   any valid d3 4.0 format specifier.\n   * @param {function(*):string} [params.format] - The format function to use.\n   *   If provided, the formatSpecifier argument is ignored.\n   */\n  function AxisTicks(params) {\n    Transform.call(this, null, params);\n  }\n\n  var prototype$W = inherits(AxisTicks, Transform);\n\n  prototype$W.transform = function(_, pulse) {\n    if (this.value && !_.modified()) {\n      return pulse.StopPropagation;\n    }\n\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        ticks = this.value,\n        scale = _.scale,\n        tally = _.count == null ? (_.values ? _.values.length : 10) : _.count,\n        count = tickCount(scale, tally, _.minstep),\n        format = _.format || tickFormat(scale, count, _.formatSpecifier, _.formatType, !!_.values),\n        values = _.values ? validTicks(scale, _.values, count) : tickValues(scale, count);\n\n    if (ticks) out.rem = ticks;\n\n    ticks = values.map(function(value, i) {\n      return ingest({\n        index: i / (values.length - 1 || 1),\n        value: value,\n        label: format(value)\n      });\n    });\n\n    if (_.extra && ticks.length) {\n      // add an extra tick pegged to the initial domain value\n      // this is used to generate axes with 'binned' domains\n      ticks.push(ingest({\n        index: -1,\n        extra: {value: ticks[0].value},\n        label: ''\n      }));\n    }\n\n    out.source = ticks;\n    out.add = ticks;\n    this.value = ticks;\n\n    return out;\n  };\n\n  /**\n   * Joins a set of data elements against a set of visual items.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): object} [params.item] - An item generator function.\n   * @param {function(object): *} [params.key] - The key field associating data and visual items.\n   */\n  function DataJoin(params) {\n    Transform.call(this, null, params);\n  }\n\n  var prototype$X = inherits(DataJoin, Transform);\n\n  function defaultItemCreate() {\n    return ingest({});\n  }\n\n  function isExit(t) {\n    return t.exit;\n  }\n\n  prototype$X.transform = function(_, pulse) {\n    var df = pulse.dataflow,\n        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        item = _.item || defaultItemCreate,\n        key = _.key || tupleid,\n        map = this.value;\n\n    // prevent transient (e.g., hover) requests from\n    // cascading across marks derived from marks\n    if (isArray(out.encode)) {\n      out.encode = null;\n    }\n\n    if (map && (_.modified('key') || pulse.modified(key))) {\n      error('DataJoin does not support modified key function or fields.');\n    }\n\n    if (!map) {\n      pulse = pulse.addAll();\n      this.value = map = fastmap().test(isExit);\n      map.lookup = function(t) { return map.get(key(t)); };\n    }\n\n    pulse.visit(pulse.ADD, function(t) {\n      var k = key(t),\n          x = map.get(k);\n\n      if (x) {\n        if (x.exit) {\n          map.empty--;\n          out.add.push(x);\n        } else {\n          out.mod.push(x);\n        }\n      } else {\n        map.set(k, (x = item(t)));\n        out.add.push(x);\n      }\n\n      x.datum = t;\n      x.exit = false;\n    });\n\n    pulse.visit(pulse.MOD, function(t) {\n      var k = key(t),\n          x = map.get(k);\n\n      if (x) {\n        x.datum = t;\n        out.mod.push(x);\n      }\n    });\n\n    pulse.visit(pulse.REM, function(t) {\n      var k = key(t),\n          x = map.get(k);\n\n      if (t === x.datum && !x.exit) {\n        out.rem.push(x);\n        x.exit = true;\n        ++map.empty;\n      }\n    });\n\n    if (pulse.changed(pulse.ADD_MOD)) out.modifies('datum');\n\n    if (_.clean && map.empty > df.cleanThreshold) df.runAfter(map.clean);\n\n    return out;\n  };\n\n  /**\n   * Invokes encoding functions for visual items.\n   * @constructor\n   * @param {object} params - The parameters to the encoding functions. This\n   *   parameter object will be passed through to all invoked encoding functions.\n   * @param {object} [params.mod=false] - Flag indicating if tuples in the input\n   *   mod set that are unmodified by encoders should be included in the output.\n   * @param {object} param.encoders - The encoding functions\n   * @param {function(object, object): boolean} [param.encoders.update] - Update encoding set\n   * @param {function(object, object): boolean} [param.encoders.enter] - Enter encoding set\n   * @param {function(object, object): boolean} [param.encoders.exit] - Exit encoding set\n   */\n  function Encode(params) {\n    Transform.call(this, null, params);\n  }\n\n  var prototype$Y = inherits(Encode, Transform);\n\n  prototype$Y.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.ADD_REM),\n        fmod = _.mod || false,\n        encoders = _.encoders,\n        encode = pulse.encode;\n\n    // if an array, the encode directive includes additional sets\n    // that must be defined in order for the primary set to be invoked\n    // e.g., only run the update set if the hover set is defined\n    if (isArray(encode)) {\n      if (out.changed() || encode.every(function(e) { return encoders[e]; })) {\n        encode = encode[0];\n        out.encode = null; // consume targeted encode directive\n      } else {\n        return pulse.StopPropagation;\n      }\n    }\n\n    // marshall encoder functions\n    var reenter = encode === 'enter',\n        update = encoders.update || falsy,\n        enter = encoders.enter || falsy,\n        exit = encoders.exit || falsy,\n        set = (encode && !reenter ? encoders[encode] : update) || falsy;\n\n    if (pulse.changed(pulse.ADD)) {\n      pulse.visit(pulse.ADD, function(t) { enter(t, _); update(t, _); });\n      out.modifies(enter.output);\n      out.modifies(update.output);\n      if (set !== falsy && set !== update) {\n        pulse.visit(pulse.ADD, function(t) { set(t, _); });\n        out.modifies(set.output);\n      }\n    }\n\n    if (pulse.changed(pulse.REM) && exit !== falsy) {\n      pulse.visit(pulse.REM, function(t) { exit(t, _); });\n      out.modifies(exit.output);\n    }\n\n    if (reenter || set !== falsy) {\n      var flag = pulse.MOD | (_.modified() ? pulse.REFLOW : 0);\n      if (reenter) {\n        pulse.visit(flag, function(t) {\n          var mod = enter(t, _) || fmod;\n          if (set(t, _) || mod) out.mod.push(t);\n        });\n        if (out.mod.length) out.modifies(enter.output);\n      } else {\n        pulse.visit(flag, function(t) {\n          if (set(t, _) || fmod) out.mod.push(t);\n        });\n      }\n      if (out.mod.length) out.modifies(set.output);\n    }\n\n    return out.changed() ? out : pulse.StopPropagation;\n  };\n\n  var Symbols$1  = 'symbol';\n  var Discrete$1 = 'discrete';\n  var Gradient$1 = 'gradient';\n\n  const symbols$1 = {\n    [Quantile$1]:  'quantiles',\n    [Quantize]:  'thresholds',\n    [Threshold]: 'domain'\n  };\n\n  const formats$1 = {\n    [Quantile$1]:  'quantiles',\n    [Quantize]:  'domain'\n  };\n\n  function labelValues(scale, count) {\n    return scale.bins ? binValues(scale.bins)\n      : scale.type === Log ? logValues(scale, count)\n      : symbols$1[scale.type] ? thresholdValues(scale[symbols$1[scale.type]]())\n      : tickValues(scale, count);\n  }\n\n  function logValues(scale, count) {\n    var ticks = tickValues(scale, count),\n        base = scale.base(),\n        logb = Math.log(base),\n        k = Math.max(1, base * count / ticks.length);\n\n    // apply d3-scale's log format filter criteria\n    return ticks.filter(d => {\n      var i = d / Math.pow(base, Math.round(Math.log(d) / logb));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k;\n    });\n  }\n\n  function thresholdFormat(scale, specifier) {\n    var _ = scale[formats$1[scale.type]](),\n        n = _.length,\n        d = n > 1 ? _[1] - _[0] : _[0], i;\n\n    for (i=1; i<n; ++i) {\n      d = Math.min(d, _[i] - _[i-1]);\n    }\n\n    // 3 ticks times 10 for increased resolution\n    return spanFormat(0, d, 3 * 10, specifier);\n  }\n\n  function thresholdValues(thresholds) {\n    const values = [-Infinity].concat(thresholds);\n    values.max = +Infinity;\n\n    return values;\n  }\n\n  function binValues(bins) {\n    const values = bins.slice(0, -1);\n    values.max = peek(bins);\n\n    return values;\n  }\n\n  function isDiscreteRange(scale) {\n    return symbols$1[scale.type] || scale.bins;\n  }\n\n  function labelFormat(scale, count, type, specifier, formatType, noSkip) {\n    const format = formats$1[scale.type] && formatType !== Time && formatType !== UTC\n      ? thresholdFormat(scale, specifier)\n      : tickFormat(scale, count, specifier, formatType, noSkip);\n\n    return type === Symbols$1 && isDiscreteRange(scale) ? formatRange(format)\n      : type === Discrete$1 ? formatDiscrete(format)\n      : formatPoint(format);\n  }\n\n  function formatRange(format) {\n    return function(value, index, array) {\n      var limit = get$3(array[index + 1], get$3(array.max, +Infinity)),\n          lo = formatValue(value, format),\n          hi = formatValue(limit, format);\n      return lo && hi ? lo + ' \\u2013 ' + hi : hi ? '< ' + hi : '\\u2265 ' + lo;\n    };\n  }\n\n  function get$3(value, dflt) {\n    return value != null ? value : dflt;\n  }\n\n  function formatDiscrete(format) {\n    return function(value, index) {\n      return index ? format(value) : null;\n    }\n  }\n\n  function formatPoint(format) {\n    return function(value) {\n      return format(value);\n    };\n  }\n\n  function formatValue(value, format) {\n    return Number.isFinite(value) ? format(value) : null;\n  }\n\n  function labelFraction(scale) {\n    var domain = scale.domain(),\n        count = domain.length - 1,\n        lo = +domain[0],\n        hi = +peek(domain),\n        span = hi - lo;\n\n    if (scale.type === Threshold) {\n      var adjust = count ? span / count : 0.1;\n      lo -= adjust;\n      hi += adjust;\n      span = hi - lo;\n    }\n\n    return function(value) {\n      return (value - lo) / span;\n    };\n  }\n\n  /**\n   * Generates legend entries for visualizing a scale.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Scale} params.scale - The scale to generate items for.\n   * @param {*} [params.count=5] - The approximate number of items, or\n   *   desired tick interval, to use.\n   * @param {*} [params.limit] - The maximum number of entries to\n   *   include in a symbol legend.\n   * @param {Array<*>} [params.values] - The exact tick values to use.\n   *   These must be legal domain values for the provided scale.\n   *   If provided, the count argument is ignored.\n   * @param {string} [params.formatSpecifier] - A format specifier\n   *   to use in conjunction with scale.tickFormat. Legal values are\n   *   any valid D3 format specifier string.\n   * @param {function(*):string} [params.format] - The format function to use.\n   *   If provided, the formatSpecifier argument is ignored.\n   */\n  function LegendEntries(params) {\n    Transform.call(this, [], params);\n  }\n\n  var prototype$Z = inherits(LegendEntries, Transform);\n\n  prototype$Z.transform = function(_, pulse) {\n    if (this.value != null && !_.modified()) {\n      return pulse.StopPropagation;\n    }\n\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        items = this.value,\n        type  = _.type || Symbols$1,\n        scale = _.scale,\n        limit = +_.limit,\n        count = tickCount(scale, _.count == null ? 5 : _.count, _.minstep),\n        lskip = !!_.values || type === Symbols$1,\n        format = _.format || labelFormat(scale, count, type, _.formatSpecifier, _.formatType, lskip),\n        values = _.values || labelValues(scale, count),\n        domain, fraction, size, offset, ellipsis;\n\n    if (items) out.rem = items;\n\n    if (type === Symbols$1) {\n      if (limit && values.length > limit) {\n        pulse.dataflow.warn('Symbol legend count exceeds limit, filtering items.');\n        items = values.slice(0, limit - 1);\n        ellipsis = true;\n      } else {\n        items = values;\n      }\n\n      if (isFunction(size = _.size)) {\n        // if first value maps to size zero, remove from list (vega#717)\n        if (!_.values && scale(items[0]) === 0) {\n          items = items.slice(1);\n        }\n        // compute size offset for legend entries\n        offset = items.reduce(function(max, value) {\n          return Math.max(max, size(value, _));\n        }, 0);\n      } else {\n        size = constant(offset = size || 8);\n      }\n\n      items = items.map(function(value, index) {\n        return ingest({\n          index:  index,\n          label:  format(value, index, items),\n          value:  value,\n          offset: offset,\n          size:   size(value, _)\n        });\n      });\n\n      if (ellipsis) {\n        ellipsis = values[items.length];\n        items.push(ingest({\n          index:    items.length,\n          label:    `\\u2026${values.length-items.length} entries`,\n          value:    ellipsis,\n          offset:   offset,\n          size:     size(ellipsis, _)\n        }));\n      }\n    }\n\n    else if (type === Gradient$1) {\n      domain = scale.domain(),\n      fraction = scaleFraction(scale, domain[0], peek(domain));\n\n      // if automatic label generation produces 2 or fewer values,\n      // use the domain end points instead (fixes vega/vega#1364)\n      if (values.length < 3 && !_.values && domain[0] !== peek(domain)) {\n        values = [domain[0], peek(domain)];\n      }\n\n      items = values.map(function(value, index) {\n        return ingest({\n          index: index,\n          label: format(value, index, values),\n          value: value,\n          perc:  fraction(value)\n        });\n      });\n    }\n\n    else {\n      size = values.length - 1;\n      fraction = labelFraction(scale);\n\n      items = values.map(function(value, index) {\n        return ingest({\n          index: index,\n          label: format(value, index, values),\n          value: value,\n          perc:  index ? fraction(value) : 0,\n          perc2: index === size ? 1 : fraction(values[index+1])\n        });\n      });\n    }\n\n    out.source = items;\n    out.add = items;\n    this.value = items;\n\n    return out;\n  };\n\n  var Paths = fastmap({\n    'line': line$2,\n    'line-radial': lineR,\n    'arc': arc$2,\n    'arc-radial': arcR,\n    'curve': curve,\n    'curve-radial': curveR,\n    'orthogonal-horizontal': orthoX,\n    'orthogonal-vertical': orthoY,\n    'orthogonal-radial': orthoR,\n    'diagonal-horizontal': diagonalX,\n    'diagonal-vertical': diagonalY,\n    'diagonal-radial': diagonalR\n  });\n\n  function sourceX(t) { return t.source.x; }\n  function sourceY(t) { return t.source.y; }\n  function targetX(t) { return t.target.x; }\n  function targetY(t) { return t.target.y; }\n\n   /**\n    * Layout paths linking source and target elements.\n    * @constructor\n    * @param {object} params - The parameters for this operator.\n    */\n  function LinkPath(params) {\n    Transform.call(this, {}, params);\n  }\n\n  LinkPath.Definition = {\n    \"type\": \"LinkPath\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"sourceX\", \"type\": \"field\", \"default\": \"source.x\" },\n      { \"name\": \"sourceY\", \"type\": \"field\", \"default\": \"source.y\" },\n      { \"name\": \"targetX\", \"type\": \"field\", \"default\": \"target.x\" },\n      { \"name\": \"targetY\", \"type\": \"field\", \"default\": \"target.y\" },\n      { \"name\": \"orient\", \"type\": \"enum\", \"default\": \"vertical\",\n        \"values\": [\"horizontal\", \"vertical\", \"radial\"] },\n      { \"name\": \"shape\", \"type\": \"enum\", \"default\": \"line\",\n        \"values\": [\"line\", \"arc\", \"curve\", \"diagonal\", \"orthogonal\"] },\n      { \"name\": \"require\", \"type\": \"signal\" },\n      { \"name\": \"as\", \"type\": \"string\", \"default\": \"path\" }\n    ]\n  };\n\n  var prototype$_ = inherits(LinkPath, Transform);\n\n  prototype$_.transform = function(_, pulse) {\n    var sx = _.sourceX || sourceX,\n        sy = _.sourceY || sourceY,\n        tx = _.targetX || targetX,\n        ty = _.targetY || targetY,\n        as = _.as || 'path',\n        orient = _.orient || 'vertical',\n        shape = _.shape || 'line',\n        path = Paths.get(shape + '-' + orient) || Paths.get(shape);\n\n    if (!path) {\n      error('LinkPath unsupported type: ' + _.shape\n        + (_.orient ? '-' + _.orient : ''));\n    }\n\n    pulse.visit(pulse.SOURCE, function(t) {\n      t[as] = path(sx(t), sy(t), tx(t), ty(t));\n    });\n\n    return pulse.reflow(_.modified()).modifies(as);\n  };\n\n  // -- Link Path Generation Methods -----\n\n  function line$2(sx, sy, tx, ty) {\n    return 'M' + sx + ',' + sy +\n           'L' + tx + ',' + ty;\n  }\n\n  function lineR(sa, sr, ta, tr) {\n    return line$2(\n      sr * Math.cos(sa), sr * Math.sin(sa),\n      tr * Math.cos(ta), tr * Math.sin(ta)\n    );\n  }\n\n  function arc$2(sx, sy, tx, ty) {\n    var dx = tx - sx,\n        dy = ty - sy,\n        rr = Math.sqrt(dx * dx + dy * dy) / 2,\n        ra = 180 * Math.atan2(dy, dx) / Math.PI;\n    return 'M' + sx + ',' + sy +\n           'A' + rr + ',' + rr +\n           ' ' + ra + ' 0 1' +\n           ' ' + tx + ',' + ty;\n  }\n\n  function arcR(sa, sr, ta, tr) {\n    return arc$2(\n      sr * Math.cos(sa), sr * Math.sin(sa),\n      tr * Math.cos(ta), tr * Math.sin(ta)\n    );\n  }\n\n  function curve(sx, sy, tx, ty) {\n    var dx = tx - sx,\n        dy = ty - sy,\n        ix = 0.2 * (dx + dy),\n        iy = 0.2 * (dy - dx);\n    return 'M' + sx + ',' + sy +\n           'C' + (sx+ix) + ',' + (sy+iy) +\n           ' ' + (tx+iy) + ',' + (ty-ix) +\n           ' ' + tx + ',' + ty;\n  }\n\n  function curveR(sa, sr, ta, tr) {\n    return curve(\n      sr * Math.cos(sa), sr * Math.sin(sa),\n      tr * Math.cos(ta), tr * Math.sin(ta)\n    );\n  }\n\n  function orthoX(sx, sy, tx, ty) {\n    return 'M' + sx + ',' + sy +\n           'V' + ty + 'H' + tx;\n  }\n\n  function orthoY(sx, sy, tx, ty) {\n    return 'M' + sx + ',' + sy +\n           'H' + tx + 'V' + ty;\n  }\n\n  function orthoR(sa, sr, ta, tr) {\n    var sc = Math.cos(sa),\n        ss = Math.sin(sa),\n        tc = Math.cos(ta),\n        ts = Math.sin(ta),\n        sf = Math.abs(ta - sa) > Math.PI ? ta <= sa : ta > sa;\n    return 'M' + (sr*sc) + ',' + (sr*ss) +\n           'A' + sr + ',' + sr + ' 0 0,' + (sf?1:0) +\n           ' ' + (sr*tc) + ',' + (sr*ts) +\n           'L' + (tr*tc) + ',' + (tr*ts);\n  }\n\n  function diagonalX(sx, sy, tx, ty) {\n    var m = (sx + tx) / 2;\n    return 'M' + sx + ',' + sy +\n           'C' + m  + ',' + sy +\n           ' ' + m  + ',' + ty +\n           ' ' + tx + ',' + ty;\n  }\n\n  function diagonalY(sx, sy, tx, ty) {\n    var m = (sy + ty) / 2;\n    return 'M' + sx + ',' + sy +\n           'C' + sx + ',' + m +\n           ' ' + tx + ',' + m +\n           ' ' + tx + ',' + ty;\n  }\n\n  function diagonalR(sa, sr, ta, tr) {\n    var sc = Math.cos(sa),\n        ss = Math.sin(sa),\n        tc = Math.cos(ta),\n        ts = Math.sin(ta),\n        mr = (sr + tr) / 2;\n    return 'M' + (sr*sc) + ',' + (sr*ss) +\n           'C' + (mr*sc) + ',' + (mr*ss) +\n           ' ' + (mr*tc) + ',' + (mr*ts) +\n           ' ' + (tr*tc) + ',' + (tr*ts);\n  }\n\n  /**\n   * Pie and donut chart layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size pie segments.\n   * @param {number} [params.startAngle=0] - The start angle (in radians) of the layout.\n   * @param {number} [params.endAngle=2π] - The end angle (in radians) of the layout.\n   * @param {boolean} [params.sort] - Boolean flag for sorting sectors by value.\n   */\n  function Pie(params) {\n    Transform.call(this, null, params);\n  }\n\n  Pie.Definition = {\n    \"type\": \"Pie\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"startAngle\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"endAngle\", \"type\": \"number\", \"default\": 6.283185307179586 },\n      { \"name\": \"sort\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"startAngle\", \"endAngle\"] }\n    ]\n  };\n\n  var prototype$$ = inherits(Pie, Transform);\n\n  prototype$$.transform = function(_, pulse) {\n    var as = _.as || ['startAngle', 'endAngle'],\n        startAngle = as[0],\n        endAngle = as[1],\n        field = _.field || one,\n        start = _.startAngle || 0,\n        stop = _.endAngle != null ? _.endAngle : 2 * Math.PI,\n        data = pulse.source,\n        values = data.map(field),\n        n = values.length,\n        a = start,\n        k = (stop - start) / sum(values),\n        index = sequence(n),\n        i, t, v;\n\n    if (_.sort) {\n      index.sort(function(a, b) {\n        return values[a] - values[b];\n      });\n    }\n\n    for (i=0; i<n; ++i) {\n      v = values[index[i]];\n      t = data[index[i]];\n      t[startAngle] = a;\n      t[endAngle] = (a += v * k);\n    }\n\n    this.value = values;\n    return pulse.reflow(_.modified()).modifies(as);\n  };\n\n  var DEFAULT_COUNT = 5;\n\n  function includeZero(scale) {\n    const type = scale.type;\n    return !scale.bins && (\n      type === Linear$1 || type === Pow || type === Sqrt\n    );\n  }\n\n  function includePad(type) {\n    return isContinuous(type) && type !== Sequential;\n  }\n\n  var SKIP$2 = toSet([\n    'set', 'modified', 'clear', 'type', 'scheme', 'schemeExtent', 'schemeCount',\n    'domain', 'domainMin', 'domainMid', 'domainMax',\n    'domainRaw', 'domainImplicit', 'nice', 'zero', 'bins',\n    'range', 'rangeStep', 'round', 'reverse', 'interpolate', 'interpolateGamma'\n  ]);\n\n  /**\n   * Maintains a scale function mapping data values to visual channels.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function Scale(params) {\n    Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n\n  var prototype$10 = inherits(Scale, Transform);\n\n  prototype$10.transform = function(_, pulse) {\n    var df = pulse.dataflow,\n        scale = this.value,\n        key = scaleKey(_);\n\n    if (!scale || key !== scale.type) {\n      this.value = scale = scale$2(key)();\n    }\n\n    for (key in _) if (!SKIP$2[key]) {\n      // padding is a scale property for band/point but not others\n      if (key === 'padding' && includePad(scale.type)) continue;\n      // invoke scale property setter, raise warning if not found\n      isFunction(scale[key])\n        ? scale[key](_[key])\n        : df.warn('Unsupported scale property: ' + key);\n    }\n\n    configureRange(scale, _,\n      configureBins(scale, _, configureDomain(scale, _, df))\n    );\n\n    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n  };\n\n  function scaleKey(_) {\n    var t = _.type, d = '', n;\n\n    // backwards compatibility pre Vega 5.\n    if (t === Sequential) return Sequential + '-' + Linear$1;\n\n    if (isContinuousColor(_)) {\n      n = _.rawDomain ? _.rawDomain.length\n        : _.domain ? _.domain.length + +(_.domainMid != null)\n        : 0;\n      d = n === 2 ? Sequential + '-'\n        : n === 3 ? Diverging + '-'\n        : '';\n    }\n\n    return ((d + t) || Linear$1).toLowerCase();\n  }\n\n  function isContinuousColor(_) {\n    const t = _.type;\n    return isContinuous(t) && t !== Time && t !== UTC && (\n      _.scheme || _.range && _.range.length && _.range.every(isString)\n    );\n  }\n\n  function configureDomain(scale, _, df) {\n    // check raw domain, if provided use that and exit early\n    var raw = rawDomain(scale, _.domainRaw, df);\n    if (raw > -1) return raw;\n\n    var domain = _.domain,\n        type = scale.type,\n        zero = _.zero || (_.zero === undefined && includeZero(scale)),\n        n, mid;\n\n    if (!domain) return 0;\n\n    // adjust continuous domain for minimum pixel padding\n    if (includePad(type) && _.padding && domain[0] !== peek(domain)) {\n      domain = padDomain(type, domain, _.range, _.padding, _.exponent, _.constant);\n    }\n\n    // adjust domain based on zero, min, max settings\n    if (zero || _.domainMin != null || _.domainMax != null || _.domainMid != null) {\n      n = ((domain = domain.slice()).length - 1) || 1;\n      if (zero) {\n        if (domain[0] > 0) domain[0] = 0;\n        if (domain[n] < 0) domain[n] = 0;\n      }\n      if (_.domainMin != null) domain[0] = _.domainMin;\n      if (_.domainMax != null) domain[n] = _.domainMax;\n\n      if (_.domainMid != null) {\n        mid = _.domainMid;\n        if (mid < domain[0] || mid > domain[n]) {\n          df.warn('Scale domainMid exceeds domain min or max.', mid);\n        }\n        domain.splice(n, 0, mid);\n      }\n    }\n\n    // set the scale domain\n    scale.domain(domainCheck(type, domain, df));\n\n    // if ordinal scale domain is defined, prevent implicit\n    // domain construction as side-effect of scale lookup\n    if (type === Ordinal) {\n      scale.unknown(_.domainImplicit ? implicit : undefined);\n    }\n\n    // perform 'nice' adjustment as requested\n    if (_.nice && scale.nice) {\n      scale.nice((_.nice !== true && tickCount(scale, _.nice)) || null);\n    }\n\n    // return the cardinality of the domain\n    return domain.length;\n  }\n\n  function rawDomain(scale, raw, df) {\n    if (raw) {\n      scale.domain(domainCheck(scale.type, raw, df));\n      return raw.length;\n    } else {\n      return -1;\n    }\n  }\n\n  function padDomain(type, domain, range, pad, exponent, constant) {\n    var span = Math.abs(peek(range) - range[0]),\n        frac = span / (span - 2 * pad),\n        d = type === Log    ? zoomLog(domain, null, frac)\n          : type === Sqrt   ? zoomPow(domain, null, frac, 0.5)\n          : type === Pow    ? zoomPow(domain, null, frac, exponent || 1)\n          : type === Symlog ? zoomSymlog(domain, null, frac, constant || 1)\n          : zoomLinear(domain, null, frac);\n\n    domain = domain.slice();\n    domain[0] = d[0];\n    domain[domain.length-1] = d[1];\n    return domain;\n  }\n\n  function domainCheck(type, domain, df) {\n    if (isLogarithmic(type)) {\n      // sum signs of domain values\n      // if all pos or all neg, abs(sum) === domain.length\n      var s = Math.abs(domain.reduce(function(s, v) {\n        return s + (v < 0 ? -1 : v > 0 ? 1 : 0);\n      }, 0));\n\n      if (s !== domain.length) {\n        df.warn('Log scale domain includes zero: ' + $(domain));\n      }\n    }\n    return domain;\n  }\n\n  function configureBins(scale, _, count) {\n    let bins = _.bins;\n\n    if (bins && !isArray(bins)) {\n      // generate bin boundary array\n      let domain = scale.domain(),\n          lo = domain[0],\n          hi = peek(domain),\n          start = bins.start == null ? lo : bins.start,\n          stop = bins.stop == null ? hi : bins.stop,\n          step = bins.step;\n\n      if (!step) error('Scale bins parameter missing step property.');\n      if (start < lo) start = step * Math.ceil(lo / step);\n      if (stop > hi) stop = step * Math.floor(hi / step);\n      bins = sequence(start, stop + step / 2, step);\n    }\n\n    if (bins) {\n      // assign bin boundaries to scale instance\n      scale.bins = bins;\n    } else if (scale.bins) {\n      // no current bins, remove bins if previously set\n      delete scale.bins;\n    }\n\n    // special handling for bin-ordinal scales\n    if (scale.type === BinOrdinal) {\n      if (!bins) {\n        // the domain specifies the bins\n        scale.bins = scale.domain();\n      } else if (!_.domain && !_.domainRaw) {\n        // the bins specify the domain\n        scale.domain(bins);\n        count = bins.length;\n      }\n    }\n\n    // return domain cardinality\n    return count;\n  }\n\n  function configureRange(scale, _, count) {\n    var type = scale.type,\n        round = _.round || false,\n        range = _.range;\n\n    // if range step specified, calculate full range extent\n    if (_.rangeStep != null) {\n      range = configureRangeStep(type, _, count);\n    }\n\n    // else if a range scheme is defined, use that\n    else if (_.scheme) {\n      range = configureScheme(type, _, count);\n      if (isFunction(range)) {\n        if (scale.interpolator) {\n          return scale.interpolator(range);\n        } else {\n          error(`Scale type ${type} does not support interpolating color schemes.`);\n        }\n      }\n    }\n\n    // given a range array for an interpolating scale, convert to interpolator\n    if (range && isInterpolating(type)) {\n      return scale.interpolator(\n        interpolateColors(flip(range, _.reverse), _.interpolate, _.interpolateGamma)\n      );\n    }\n\n    // configure rounding / interpolation\n    if (range && _.interpolate && scale.interpolate) {\n      scale.interpolate(interpolate$1(_.interpolate, _.interpolateGamma));\n    } else if (isFunction(scale.round)) {\n      scale.round(round);\n    } else if (isFunction(scale.rangeRound)) {\n      scale.interpolate(round ? interpolateRound : interpolate);\n    }\n\n    if (range) scale.range(flip(range, _.reverse));\n  }\n\n  function configureRangeStep(type, _, count) {\n    if (type !== Band && type !== Point) {\n      error('Only band and point scales support rangeStep.');\n    }\n\n    // calculate full range based on requested step size and padding\n    var outer = (_.paddingOuter != null ? _.paddingOuter : _.padding) || 0,\n        inner = type === Point ? 1\n              : ((_.paddingInner != null ? _.paddingInner : _.padding) || 0);\n    return [0, _.rangeStep * bandSpace(count, inner, outer)];\n  }\n\n  function configureScheme(type, _, count) {\n    var extent = _.schemeExtent,\n        name, scheme$1;\n\n    if (isArray(_.scheme)) {\n      scheme$1 = interpolateColors(_.scheme, _.interpolate, _.interpolateGamma);\n    } else {\n      name = _.scheme.toLowerCase();\n      scheme$1 = scheme(name);\n      if (!scheme$1) error(`Unrecognized scheme name: ${_.scheme}`);\n    }\n\n    // determine size for potential discrete range\n    count = (type === Threshold) ? count + 1\n      : (type === BinOrdinal) ? count - 1\n      : (type === Quantile$1 || type === Quantize) ? (+_.schemeCount || DEFAULT_COUNT)\n      : count;\n\n    // adjust and/or quantize scheme as appropriate\n    return isInterpolating(type) ? adjustScheme(scheme$1, extent, _.reverse)\n      : isFunction(scheme$1) ? quantizeInterpolator(adjustScheme(scheme$1, extent), count)\n      : type === Ordinal ? scheme$1 : scheme$1.slice(0, count);\n  }\n\n  function adjustScheme(scheme, extent, reverse) {\n    return (isFunction(scheme) && (extent || reverse))\n      ? interpolateRange(scheme, flip(extent || [0, 1], reverse))\n      : scheme;\n  }\n\n  function flip(array, reverse) {\n    return reverse ? array.slice().reverse() : array;\n  }\n\n  /**\n   * Sorts scenegraph items in the pulse source array.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - A comparator\n   *   function for sorting tuples.\n   */\n  function SortItems(params) {\n    Transform.call(this, null, params);\n  }\n\n  var prototype$11 = inherits(SortItems, Transform);\n\n  prototype$11.transform = function(_, pulse) {\n    var mod = _.modified('sort')\n           || pulse.changed(pulse.ADD)\n           || pulse.modified(_.sort.fields)\n           || pulse.modified('datum');\n\n    if (mod) pulse.source.sort(stableCompare(_.sort));\n\n    this.modified(mod);\n    return pulse;\n  };\n\n  var Zero = 'zero',\n      Center = 'center',\n      Normalize = 'normalize',\n      DefOutput = ['y0', 'y1'];\n\n  /**\n   * Stack layout for visualization elements.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to stack.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {function(object,object): number} [params.sort] - A comparator for stack sorting.\n   * @param {string} [offset='zero'] - Stack baseline offset. One of 'zero', 'center', 'normalize'.\n   */\n  function Stack(params) {\n    Transform.call(this, null, params);\n  }\n\n  Stack.Definition = {\n    \"type\": \"Stack\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"sort\", \"type\": \"compare\" },\n      { \"name\": \"offset\", \"type\": \"enum\", \"default\": Zero, \"values\": [Zero, Center, Normalize] },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": DefOutput }\n    ]\n  };\n\n  var prototype$12 = inherits(Stack, Transform);\n\n  prototype$12.transform = function(_, pulse) {\n    var as = _.as || DefOutput,\n        y0 = as[0],\n        y1 = as[1],\n        sort = stableCompare(_.sort),\n        field = _.field || one,\n        stack = _.offset === Center ? stackCenter\n              : _.offset === Normalize ? stackNormalize\n              : stackZero,\n        groups, i, n, max;\n\n    // partition, sum, and sort the stack groups\n    groups = partition$2(pulse.source, _.groupby, sort, field);\n\n    // compute stack layouts per group\n    for (i=0, n=groups.length, max=groups.max; i<n; ++i) {\n      stack(groups[i], max, field, y0, y1);\n    }\n\n    return pulse.reflow(_.modified()).modifies(as);\n  };\n\n  function stackCenter(group, max, field, y0, y1) {\n    var last = (max - group.sum) / 2,\n        m = group.length,\n        j = 0, t;\n\n    for (; j<m; ++j) {\n      t = group[j];\n      t[y0] = last;\n      t[y1] = (last += Math.abs(field(t)));\n    }\n  }\n\n  function stackNormalize(group, max, field, y0, y1) {\n    var scale = 1 / group.sum,\n        last = 0,\n        m = group.length,\n        j = 0, v = 0, t;\n\n    for (; j<m; ++j) {\n      t = group[j];\n      t[y0] = last;\n      t[y1] = last = scale * (v += Math.abs(field(t)));\n    }\n  }\n\n  function stackZero(group, max, field, y0, y1) {\n    var lastPos = 0,\n        lastNeg = 0,\n        m = group.length,\n        j = 0, v, t;\n\n    for (; j<m; ++j) {\n      t = group[j];\n      v = +field(t);\n      if (v < 0) {\n        t[y0] = lastNeg;\n        t[y1] = (lastNeg += v);\n      } else {\n        t[y0] = lastPos;\n        t[y1] = (lastPos += v);\n      }\n    }\n  }\n\n  function partition$2(data, groupby, sort, field) {\n    var groups = [],\n        get = function(f) { return f(t); },\n        map, i, n, m, t, k, g, s, max;\n\n    // partition data points into stack groups\n    if (groupby == null) {\n      groups.push(data.slice());\n    } else {\n      for (map={}, i=0, n=data.length; i<n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n        if (!g) {\n          map[k] = (g = []);\n          groups.push(g);\n        }\n        g.push(t);\n      }\n    }\n\n    // compute sums of groups, sort groups as needed\n    for (k=0, max=0, m=groups.length; k<m; ++k) {\n      g = groups[k];\n      for (i=0, s=0, n=g.length; i<n; ++i) {\n        s += Math.abs(field(g[i]));\n      }\n      g.sum = s;\n      if (s > max) max = s;\n      if (sort) g.sort(sort);\n    }\n    groups.max = max;\n\n    return groups;\n  }\n\n\n\n  var encode = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    axisticks: AxisTicks,\n    datajoin: DataJoin,\n    encode: Encode,\n    legendentries: LegendEntries,\n    linkpath: LinkPath,\n    pie: Pie,\n    scale: Scale,\n    sortitems: SortItems,\n    stack: Stack,\n    validTicks: validTicks\n  });\n\n  function noop$2() {}\n\n  const cases = [\n    [],\n    [[[1.0, 1.5], [0.5, 1.0]]],\n    [[[1.5, 1.0], [1.0, 1.5]]],\n    [[[1.5, 1.0], [0.5, 1.0]]],\n    [[[1.0, 0.5], [1.5, 1.0]]],\n    [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],\n    [[[1.0, 0.5], [1.0, 1.5]]],\n    [[[1.0, 0.5], [0.5, 1.0]]],\n    [[[0.5, 1.0], [1.0, 0.5]]],\n    [[[1.0, 1.5], [1.0, 0.5]]],\n    [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],\n    [[[1.5, 1.0], [1.0, 0.5]]],\n    [[[0.5, 1.0], [1.5, 1.0]]],\n    [[[1.0, 1.5], [1.5, 1.0]]],\n    [[[0.5, 1.0], [1.0, 1.5]]],\n    []\n  ];\n\n  // Implementation adapted from d3/d3-contour. Thanks!\n  function contours() {\n    var dx = 1,\n        dy = 1,\n        smooth = smoothLinear;\n\n    function contours(values, tz) {\n      return tz.map(value => contour(values, value));\n    }\n\n    // Accumulate, smooth contour rings, assign holes to exterior rings.\n    // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\n    function contour(values, value) {\n      var polygons = [],\n          holes = [];\n\n      isorings(values, value, function(ring) {\n        smooth(ring, values, value);\n        if (area$2(ring) > 0) polygons.push([ring]);\n        else holes.push(ring);\n      });\n\n      holes.forEach(function(hole) {\n        for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\n          if (contains((polygon = polygons[i])[0], hole) !== -1) {\n            polygon.push(hole);\n            return;\n          }\n        }\n      });\n\n      return {\n        type: 'MultiPolygon',\n        value: value,\n        coordinates: polygons\n      };\n    }\n\n    // Marching squares with isolines stitched into rings.\n    // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\n    function isorings(values, value, callback) {\n      var fragmentByStart = new Array,\n          fragmentByEnd = new Array,\n          x, y, t0, t1, t2, t3;\n\n      // Special case for the first row (y = -1, t2 = t3 = 0).\n      x = y = -1;\n      t1 = values[0] >= value;\n      cases[t1 << 1].forEach(stitch);\n      while (++x < dx - 1) {\n        t0 = t1, t1 = values[x + 1] >= value;\n        cases[t0 | t1 << 1].forEach(stitch);\n      }\n      cases[t1 << 0].forEach(stitch);\n\n      // General case for the intermediate rows.\n      while (++y < dy - 1) {\n        x = -1;\n        t1 = values[y * dx + dx] >= value;\n        t2 = values[y * dx] >= value;\n        cases[t1 << 1 | t2 << 2].forEach(stitch);\n        while (++x < dx - 1) {\n          t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;\n          t3 = t2, t2 = values[y * dx + x + 1] >= value;\n          cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);\n        }\n        cases[t1 | t2 << 3].forEach(stitch);\n      }\n\n      // Special case for the last row (y = dy - 1, t0 = t1 = 0).\n      x = -1;\n      t2 = values[y * dx] >= value;\n      cases[t2 << 2].forEach(stitch);\n      while (++x < dx - 1) {\n        t3 = t2, t2 = values[y * dx + x + 1] >= value;\n        cases[t2 << 2 | t3 << 3].forEach(stitch);\n      }\n      cases[t2 << 3].forEach(stitch);\n\n      function stitch(line) {\n        var start = [line[0][0] + x, line[0][1] + y],\n            end = [line[1][0] + x, line[1][1] + y],\n            startIndex = index(start),\n            endIndex = index(end),\n            f, g;\n        if (f = fragmentByEnd[startIndex]) {\n          if (g = fragmentByStart[endIndex]) {\n            delete fragmentByEnd[f.end];\n            delete fragmentByStart[g.start];\n            if (f === g) {\n              f.ring.push(end);\n              callback(f.ring);\n            } else {\n              fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};\n            }\n          } else {\n            delete fragmentByEnd[f.end];\n            f.ring.push(end);\n            fragmentByEnd[f.end = endIndex] = f;\n          }\n        } else if (f = fragmentByStart[endIndex]) {\n          if (g = fragmentByEnd[startIndex]) {\n            delete fragmentByStart[f.start];\n            delete fragmentByEnd[g.end];\n            if (f === g) {\n              f.ring.push(end);\n              callback(f.ring);\n            } else {\n              fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};\n            }\n          } else {\n            delete fragmentByStart[f.start];\n            f.ring.unshift(start);\n            fragmentByStart[f.start = startIndex] = f;\n          }\n        } else {\n          fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};\n        }\n      }\n    }\n\n    function index(point) {\n      return point[0] * 2 + point[1] * (dx + 1) * 4;\n    }\n\n    function smoothLinear(ring, values, value) {\n      ring.forEach(function(point) {\n        var x = point[0],\n            y = point[1],\n            xt = x | 0,\n            yt = y | 0,\n            v0,\n            v1 = values[yt * dx + xt];\n        if (x > 0 && x < dx && xt === x) {\n          v0 = values[yt * dx + xt - 1];\n          point[0] = x + (value - v0) / (v1 - v0) - 0.5;\n        }\n        if (y > 0 && y < dy && yt === y) {\n          v0 = values[(yt - 1) * dx + xt];\n          point[1] = y + (value - v0) / (v1 - v0) - 0.5;\n        }\n      });\n    }\n\n    contours.contour = contour;\n\n    contours.size = function(_) {\n      if (!arguments.length) return [dx, dy];\n      var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\n      if (!(_0 > 0) || !(_1 > 0)) error('invalid size');\n      return dx = _0, dy = _1, contours;\n    };\n\n    contours.smooth = function(_) {\n      return arguments.length ? (smooth = _ ? smoothLinear : noop$2, contours) : smooth === smoothLinear;\n    };\n\n    return contours;\n  }\n\n  function area$2(ring) {\n    var i = 0,\n        n = ring.length,\n        area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n    while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n    return area;\n  }\n\n  function contains(ring, hole) {\n    var i = -1, n = hole.length, c;\n    while (++i < n) if (c = ringContains(ring, hole[i])) return c;\n    return 0;\n  }\n\n  function ringContains(ring, point) {\n    var x = point[0], y = point[1], contains = -1;\n    for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n      var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];\n      if (segmentContains(pi, pj, point)) return 0;\n      if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;\n    }\n    return contains;\n  }\n\n  function segmentContains(a, b, c) {\n    var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);\n  }\n\n  function collinear(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);\n  }\n\n  function within(p, q, r) {\n    return p <= q && q <= r || r <= q && q <= p;\n  }\n\n  function quantize$2(k, nice, zero) {\n    return function(values) {\n      var ex = extent(values),\n          start = zero ? Math.min(ex[0], 0) : ex[0],\n          stop = ex[1],\n          span = stop - start,\n          step = nice ? tickStep(start, stop, k) : (span / (k + 1));\n      return sequence(step, stop, step);\n    };\n  }\n\n  /**\n   * Generate isocontours (level sets) based on input raster grid data.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} [params.field] - The field with raster grid\n   *   data. If unspecified, the tuple itself is interpreted as a raster grid.\n   * @param {Array<number>} [params.thresholds] - Contour threshold array. If\n   *   specified, the levels, nice, resolve, and zero parameters are ignored.\n   * @param {number} [params.levels] - The desired number of contour levels.\n   * @param {boolean} [params.nice] - Boolean flag indicating if the contour\n   *   threshold values should be automatically aligned to \"nice\"\n   *   human-friendly values. Setting this flag may cause the number of\n   *   thresholds to deviate from the specified levels.\n   * @param {string} [params.resolve] - The method for resolving thresholds\n   *   across multiple input grids. If 'independent' (the default), threshold\n   *   calculation will be performed separately for each grid. If 'shared', a\n   *   single set of threshold values will be used for all input grids.\n   * @param {boolean} [params.zero] - Boolean flag indicating if the contour\n   *   threshold values should include zero.\n   * @param {boolean} [params.smooth] - Boolean flag indicating if the contour\n   *   polygons should be smoothed using linear interpolation. The default is\n   *   true. The parameter is ignored when using density estimation.\n   * @param {boolean} [params.scale] - Optional numerical value by which to\n   *   scale the output isocontour coordinates. This parameter can be useful\n   *   to scale the contours to match a desired output resolution.\n   * @param {string} [params.as='contour'] - The output field in which to store\n   *   the generated isocontour data (default 'contour').\n   */\n  function Isocontour(params) {\n    Transform.call(this, null, params);\n  }\n\n  Isocontour.Definition = {\n    \"type\": \"Isocontour\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"thresholds\", \"type\": \"number\", \"array\": true },\n      { \"name\": \"levels\", \"type\": \"number\" },\n      { \"name\": \"nice\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"resolve\", \"type\": \"enum\", \"values\": [\"shared\", \"independent\"], \"default\": \"independent\" },\n      { \"name\": \"zero\", \"type\": \"boolean\", \"default\": true },\n      { \"name\": \"smooth\", \"type\": \"boolean\", \"default\": true },\n      { \"name\": \"scale\", \"type\": \"number\", \"expr\": true },\n      { \"name\": \"translate\", \"type\": \"number\", \"array\": true, \"expr\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"null\": true, \"default\": \"contour\" }\n    ]\n  };\n\n  var prototype$13 = inherits(Isocontour, Transform);\n\n  prototype$13.transform = function(_, pulse) {\n    if (this.value && !pulse.changed() && !_.modified()) {\n      return pulse.StopPropagation;\n    }\n\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        source = pulse.materialize(pulse.SOURCE).source,\n        field = _.field || identity,\n        contour = contours().smooth(_.smooth !== false),\n        tz = _.thresholds || levels(source, field, _),\n        as = _.as === null ? null : _.as || 'contour',\n        values = [];\n\n    source.forEach(t => {\n      const grid = field(t);\n\n      // generate contour paths in GeoJSON format\n      const paths = contour.size([grid.width, grid.height])(\n        grid.values, isArray(tz) ? tz : tz(grid.values)\n      );\n\n      // adjust contour path coordinates as needed\n      transformPaths(paths, grid, t, _);\n\n      // ingest; copy source data properties to output\n      paths.forEach(p => {\n        values.push(rederive(t, ingest(as != null ? {[as]: p} : p)));\n      });\n    });\n\n    if (this.value) out.rem = this.value;\n    this.value = out.source = out.add = values;\n\n    return out;\n  };\n\n  function levels(values, f, _) {\n    const q = quantize$2(_.levels || 10, _.nice, _.zero !== false);\n    return _.resolve !== 'shared'\n      ? q\n      : q(values.map(t => max(f(t).values)));\n  }\n\n  function transformPaths(paths, grid, datum, _) {\n    let s = _.scale || grid.scale,\n        t = _.translate || grid.translate;\n    if (isFunction(s)) s = s(datum, _);\n    if (isFunction(t)) t = t(datum, _);\n    if ((s === 1 || s == null) && !t) return;\n\n    const sx = (isNumber(s) ? s : s[0]) || 1,\n          sy = (isNumber(s) ? s : s[1]) || 1,\n          tx = t && t[0] || 0,\n          ty = t && t[1] || 0;\n\n    paths.forEach(transform$2(grid, sx, sy, tx, ty));\n  }\n\n  function transform$2(grid, sx, sy, tx, ty) {\n    const x1 = grid.x1 || 0,\n          y1 = grid.y1 || 0,\n          flip = sx * sy < 0;\n\n    function transformPolygon(coordinates) {\n      coordinates.forEach(transformRing);\n    }\n\n    function transformRing(coordinates) {\n      if (flip) coordinates.reverse(); // maintain winding order\n      coordinates.forEach(transformPoint);\n    }\n\n    function transformPoint(coordinates) {\n      coordinates[0] = (coordinates[0] - x1) * sx + tx;\n      coordinates[1] = (coordinates[1] - y1) * sy + ty;\n    }\n\n    return function(geometry) {\n      geometry.coordinates.forEach(transformPolygon);\n      return geometry;\n    };\n  }\n\n  function radius(bw, data, f) {\n    const v = bw >= 0 ? bw : bandwidthNRD(data, f);\n    return Math.round((Math.sqrt(4 * v * v + 1) - 1) / 2);\n  }\n\n  function number$4(_) {\n    return isFunction(_) ? _ : constant(+_);\n  }\n\n  // Implementation adapted from d3/d3-contour. Thanks!\n  function density2D() {\n    var x = d => d[0],\n        y = d => d[1],\n        weight = one,\n        bandwidth = [-1, -1],\n        dx = 960,\n        dy = 500,\n        k = 2; // log2(cellSize)\n\n    function density(data, counts) {\n      const rx = radius(bandwidth[0], data, x) >> k, // blur x-radius\n            ry = radius(bandwidth[1], data, y) >> k, // blur y-radius\n            ox = rx ? rx + 2 : 0, // x-offset padding for blur\n            oy = ry ? ry + 2 : 0, // y-offset padding for blur\n            n = 2 * ox + (dx >> k), // grid width\n            m = 2 * oy + (dy >> k), // grid height\n            values0 = new Float32Array(n * m),\n            values1 = new Float32Array(n * m);\n\n      let values = values0;\n\n      data.forEach(d => {\n        const xi = ox + (+x(d) >> k),\n              yi = oy + (+y(d) >> k);\n\n        if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n          values0[xi + yi * n] += +weight(d);\n        }\n      });\n\n      if (rx > 0 && ry > 0) {\n        blurX(n, m, values0, values1, rx);\n        blurY(n, m, values1, values0, ry);\n        blurX(n, m, values0, values1, rx);\n        blurY(n, m, values1, values0, ry);\n        blurX(n, m, values0, values1, rx);\n        blurY(n, m, values1, values0, ry);\n      } else if (rx > 0) {\n        blurX(n, m, values0, values1, rx);\n        blurX(n, m, values1, values0, rx);\n        blurX(n, m, values0, values1, rx);\n        values = values1;\n      } else if (ry > 0) {\n        blurY(n, m, values0, values1, ry);\n        blurY(n, m, values1, values0, ry);\n        blurY(n, m, values0, values1, ry);\n        values = values1;\n      }\n\n      // scale density estimates\n      // density in points per square pixel or probability density\n      let s = counts ? Math.pow(2, -2 * k) : 1 / sum(values);\n      for (let i=0, sz=n*m; i<sz; ++i) values[i] *= s;\n\n      return {\n        values: values,\n        scale: 1 << k,\n        width: n,\n        height: m,\n        x1: ox,\n        y1: oy,\n        x2: ox + (dx >> k),\n        y2: oy + (dy >> k)\n      };\n    }\n\n    density.x = function(_) {\n      return arguments.length ? (x = number$4(_), density) : x;\n    };\n\n    density.y = function(_) {\n      return arguments.length ? (y = number$4(_), density) : y;\n    };\n\n    density.weight = function(_) {\n      return arguments.length ? (weight = number$4(_), density) : weight;\n    };\n\n    density.size = function(_) {\n      if (!arguments.length) return [dx, dy];\n      var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\n      if (!(_0 >= 0) && !(_0 >= 0)) error('invalid size');\n      return dx = _0, dy = _1, density;\n    };\n\n    density.cellSize = function(_) {\n      if (!arguments.length) return 1 << k;\n      if (!((_ = +_) >= 1)) error('invalid cell size');\n      k = Math.floor(Math.log(_) / Math.LN2);\n      return density;\n    };\n\n    density.bandwidth = function(_) {\n      if (!arguments.length) return bandwidth;\n      _ = array(_);\n      if (_.length === 1) _ = [+_[0], +_[0]];\n      if (_.length !== 2) error('invalid bandwidth');\n      return bandwidth = _, density;\n    };\n\n    return density;\n  }\n\n  function blurX(n, m, source, target, r) {\n    const w = (r << 1) + 1;\n    for (let j = 0; j < m; ++j) {\n      for (let i = 0, sr = 0; i < n + r; ++i) {\n        if (i < n) {\n          sr += source[i + j * n];\n        }\n        if (i >= r) {\n          if (i >= w) {\n            sr -= source[i - w + j * n];\n          }\n          target[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);\n        }\n      }\n    }\n  }\n\n  function blurY(n, m, source, target, r) {\n    const w = (r << 1) + 1;\n    for (let i = 0; i < n; ++i) {\n      for (let j = 0, sr = 0; j < m + r; ++j) {\n        if (j < m) {\n          sr += source[i + j * n];\n        }\n        if (j >= r) {\n          if (j >= w) {\n            sr -= source[i + (j - w) * n];\n          }\n          target[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);\n        }\n      }\n    }\n  }\n\n  /**\n   * Perform 2D kernel-density estimation of point data.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<number>} params.size - The [width, height] extent (in\n   *   units of input pixels) over which to perform density estimation.\n   * @param {function(object): number} params.x - The x-coordinate accessor.\n   * @param {function(object): number} params.y - The y-coordinate accessor.\n   * @param {function(object): number} [params.weight] - The weight accessor.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {number} [params.cellSize] - Contour density calculation cell size.\n   *   This parameter determines the level of spatial approximation. For example,\n   *   the default value of 4 maps to 2x reductions in both x- and y- dimensions.\n   *   A value of 1 will result in an output raster grid whose dimensions exactly\n   *   matches the size parameter.\n   * @param {Array<number>} [params.bandwidth] - The KDE kernel bandwidths,\n   *   in pixels. The input can be a two-element array specifying separate\n   *   x and y bandwidths, or a single-element array specifying both. If the\n   *   bandwidth is unspecified or less than zero, the bandwidth will be\n   *   automatically determined.\n   * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n   *   output values should be probability estimates (false, default) or\n   *   smoothed counts (true).\n   * @param {string} [params.as='grid'] - The output field in which to store\n   *   the generated raster grid (default 'grid').\n   */\n  function KDE2D(params) {\n    Transform.call(this, null, params);\n  }\n\n  KDE2D.Definition = {\n    \"type\": \"KDE2D\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2, \"required\": true },\n      { \"name\": \"x\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"y\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"weight\", \"type\": \"field\" },\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"cellSize\", \"type\": \"number\" },\n      { \"name\": \"bandwidth\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"counts\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"as\", \"type\": \"string\", \"default\": \"grid\"}\n    ]\n  };\n\n  var prototype$14 = inherits(KDE2D, Transform);\n\n  const PARAMS = ['x', 'y', 'weight', 'size', 'cellSize', 'bandwidth'];\n\n  function params(obj, _) {\n    PARAMS.forEach(param => _[param] != null ? obj[param](_[param]) : 0);\n    return obj;\n  }\n\n  prototype$14.transform = function(_, pulse) {\n    if (this.value && !pulse.changed() && !_.modified())\n      return pulse.StopPropagation;\n\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        source = pulse.materialize(pulse.SOURCE).source,\n        groups = partition$3(source, _.groupby),\n        names = (_.groupby || []).map(accessorName),\n        kde = params(density2D(), _),\n        as = _.as || 'grid',\n        values = [];\n\n    function set(t, vals) {\n      for (let i=0; i<names.length; ++i) t[names[i]] = vals[i];\n      return t;\n    }\n\n    // generate density raster grids\n    values = groups.map(g => ingest(\n      set({[as]: kde(g, _.counts)}, g.dims)\n    ));\n\n    if (this.value) out.rem = this.value;\n    this.value = out.source = out.add = values;\n\n    return out;\n  };\n\n  function partition$3(data, groupby) {\n    var groups = [],\n        get = f => f(t),\n        map, i, n, t, k, g;\n\n    // partition data points into groups\n    if (groupby == null) {\n      groups.push(data);\n    } else {\n      for (map={}, i=0, n=data.length; i<n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n        if (!g) {\n          map[k] = (g = []);\n          g.dims = k;\n          groups.push(g);\n        }\n        g.push(t);\n      }\n    }\n\n    return groups;\n  }\n\n  /**\n   * Generate contours based on kernel-density estimation of point data.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.\n   *  If the values parameter is provided, this must be the dimensions of the input data.\n   *  If density estimation is performed, this is the output view dimensions in pixels.\n   * @param {Array<number>} [params.values] - An array of numeric values representing an\n   *  width x height grid of values over which to compute contours. If unspecified, this\n   *  transform will instead attempt to compute contours for the kernel density estimate\n   *  using values drawn from data tuples in the input pulse.\n   * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.\n   * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.\n   * @param {function(object): number} [params.weight] - The data point weight accessor for density estimation.\n   * @param {number} [params.cellSize] - Contour density calculation cell size.\n   * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.\n   * @param {Array<number>} [params.thresholds] - Contour threshold array. If\n   *   this parameter is set, the count and nice parameters will be ignored.\n   * @param {number} [params.count] - The desired number of contours.\n   * @param {boolean} [params.nice] - Boolean flag indicating if the contour\n   *   threshold values should be automatically aligned to \"nice\"\n   *   human-friendly values. Setting this flag may cause the number of\n   *   thresholds to deviate from the specified count.\n   * @param {boolean} [params.smooth] - Boolean flag indicating if the contour\n   *   polygons should be smoothed using linear interpolation. The default is\n   *   true. The parameter is ignored when using density estimation.\n   */\n  function Contour(params) {\n    Transform.call(this, null, params);\n  }\n\n  Contour.Definition = {\n    \"type\": \"Contour\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2, \"required\": true },\n      { \"name\": \"values\", \"type\": \"number\", \"array\": true },\n      { \"name\": \"x\", \"type\": \"field\" },\n      { \"name\": \"y\", \"type\": \"field\" },\n      { \"name\": \"weight\", \"type\": \"field\" },\n      { \"name\": \"cellSize\", \"type\": \"number\" },\n      { \"name\": \"bandwidth\", \"type\": \"number\" },\n      { \"name\": \"count\", \"type\": \"number\" },\n      { \"name\": \"nice\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"thresholds\", \"type\": \"number\", \"array\": true },\n      { \"name\": \"smooth\", \"type\": \"boolean\", \"default\": true }\n    ]\n  };\n\n  var prototype$15 = inherits(Contour, Transform);\n\n  prototype$15.transform = function(_, pulse) {\n    if (this.value && !pulse.changed() && !_.modified()) {\n      return pulse.StopPropagation;\n    }\n\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        contour = contours().smooth(_.smooth !== false),\n        values = _.values,\n        thresh = _.thresholds || quantize$2(_.count || 10, _.nice, !!values),\n        size = _.size, grid, post;\n\n    if (!values) {\n      values = pulse.materialize(pulse.SOURCE).source;\n      grid = params(density2D(), _)(values, true);\n      post = transform$2(grid, grid.scale || 1, grid.scale || 1, 0, 0);\n      size = [grid.width, grid.height];\n      values = grid.values;\n    }\n\n    thresh = isArray(thresh) ? thresh : thresh(values);\n    values = contour.size(size)(values, thresh);\n    if (post) values.forEach(post);\n\n    if (this.value) out.rem = this.value;\n    this.value = out.source = out.add = (values || []).map(ingest);\n\n    return out;\n  };\n\n  var Feature = 'Feature';\n  var FeatureCollection = 'FeatureCollection';\n  var MultiPoint = 'MultiPoint';\n\n  /**\n   * Consolidate an array of [longitude, latitude] points or GeoJSON features\n   * into a combined GeoJSON object. This transform is particularly useful for\n   * combining geo data for a Projection's fit argument. The resulting GeoJSON\n   * data is available as this transform's value. Input pulses are unchanged.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.fields] - A two-element array\n   *   of field accessors for the longitude and latitude values.\n   * @param {function(object): *} params.geojson - A field accessor for\n   *   retrieving GeoJSON feature data.\n   */\n  function GeoJSON(params) {\n    Transform.call(this, null, params);\n  }\n\n  GeoJSON.Definition = {\n    \"type\": \"GeoJSON\",\n    \"metadata\": {},\n    \"params\": [\n      { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"length\": 2 },\n      { \"name\": \"geojson\", \"type\": \"field\" },\n    ]\n  };\n\n  var prototype$16 = inherits(GeoJSON, Transform);\n\n  prototype$16.transform = function(_, pulse) {\n    var features = this._features,\n        points = this._points,\n        fields = _.fields,\n        lon = fields && fields[0],\n        lat = fields && fields[1],\n        geojson = _.geojson || (!fields && identity),\n        flag = pulse.ADD,\n        mod;\n\n    mod = _.modified()\n      || pulse.changed(pulse.REM)\n      || pulse.modified(accessorFields(geojson))\n      || (lon && (pulse.modified(accessorFields(lon))))\n      || (lat && (pulse.modified(accessorFields(lat))));\n\n    if (!this.value || mod) {\n      flag = pulse.SOURCE;\n      this._features = (features = []);\n      this._points = (points = []);\n    }\n\n    if (geojson) {\n      pulse.visit(flag, function(t) {\n        features.push(geojson(t));\n      });\n    }\n\n    if (lon && lat) {\n      pulse.visit(flag, function(t) {\n        var x = lon(t),\n            y = lat(t);\n        if (x != null && y != null && (x = +x) === x && (y = +y) === y) {\n          points.push([x, y]);\n        }\n      });\n      features = features.concat({\n        type: Feature,\n        geometry: {\n          type: MultiPoint,\n          coordinates: points\n        }\n      });\n    }\n\n    this.value = {\n      type: FeatureCollection,\n      features: features\n    };\n  };\n\n  // Adds floating point numbers with twice the normal precision.\n  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n  // 305–363 (1997).\n  // Code adapted from GeographicLib by Charles F. F. Karney,\n  // http://geographiclib.sourceforge.net/\n\n  function adder() {\n    return new Adder;\n  }\n\n  function Adder() {\n    this.reset();\n  }\n\n  Adder.prototype = {\n    constructor: Adder,\n    reset: function() {\n      this.s = // rounded value\n      this.t = 0; // exact error\n    },\n    add: function(y) {\n      add$2(temp$1, y, this.t);\n      add$2(this, temp$1.s, this.s);\n      if (this.s) this.t += temp$1.t;\n      else this.s = temp$1.t;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n\n  var temp$1 = new Adder;\n\n  function add$2(adder, a, b) {\n    var x = adder.s = a + b,\n        bv = x - a,\n        av = x - bv;\n    adder.t = (a - av) + (b - bv);\n  }\n\n  var epsilon$3 = 1e-6;\n  var epsilon2$1 = 1e-12;\n  var pi$2 = Math.PI;\n  var halfPi$1 = pi$2 / 2;\n  var quarterPi = pi$2 / 4;\n  var tau$2 = pi$2 * 2;\n\n  var degrees$1 = 180 / pi$2;\n  var radians = pi$2 / 180;\n\n  var abs$1 = Math.abs;\n  var atan = Math.atan;\n  var atan2$1 = Math.atan2;\n  var cos$1 = Math.cos;\n  var ceil = Math.ceil;\n  var exp$1 = Math.exp;\n  var log$3 = Math.log;\n  var pow$2 = Math.pow;\n  var sin$1 = Math.sin;\n  var sign$1 = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\n  var sqrt$2 = Math.sqrt;\n  var tan = Math.tan;\n\n  function acos$1(x) {\n    return x > 1 ? 0 : x < -1 ? pi$2 : Math.acos(x);\n  }\n\n  function asin$1(x) {\n    return x > 1 ? halfPi$1 : x < -1 ? -halfPi$1 : Math.asin(x);\n  }\n\n  function noop$3() {}\n\n  function streamGeometry(geometry, stream) {\n    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n      streamGeometryType[geometry.type](geometry, stream);\n    }\n  }\n\n  var streamObjectType = {\n    Feature: function(object, stream) {\n      streamGeometry(object.geometry, stream);\n    },\n    FeatureCollection: function(object, stream) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) streamGeometry(features[i].geometry, stream);\n    }\n  };\n\n  var streamGeometryType = {\n    Sphere: function(object, stream) {\n      stream.sphere();\n    },\n    Point: function(object, stream) {\n      object = object.coordinates;\n      stream.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, stream) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, stream) {\n      streamLine(object.coordinates, stream, 0);\n    },\n    MultiLineString: function(object, stream) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) streamLine(coordinates[i], stream, 0);\n    },\n    Polygon: function(object, stream) {\n      streamPolygon(object.coordinates, stream);\n    },\n    MultiPolygon: function(object, stream) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) streamPolygon(coordinates[i], stream);\n    },\n    GeometryCollection: function(object, stream) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) streamGeometry(geometries[i], stream);\n    }\n  };\n\n  function streamLine(coordinates, stream, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    stream.lineStart();\n    while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n    stream.lineEnd();\n  }\n\n  function streamPolygon(coordinates, stream) {\n    var i = -1, n = coordinates.length;\n    stream.polygonStart();\n    while (++i < n) streamLine(coordinates[i], stream, 1);\n    stream.polygonEnd();\n  }\n\n  function geoStream(object, stream) {\n    if (object && streamObjectType.hasOwnProperty(object.type)) {\n      streamObjectType[object.type](object, stream);\n    } else {\n      streamGeometry(object, stream);\n    }\n  }\n\n  var areaRingSum = adder();\n\n  var areaSum = adder(),\n      lambda00,\n      phi00,\n      lambda0,\n      cosPhi0,\n      sinPhi0;\n\n  var areaStream = {\n    point: noop$3,\n    lineStart: noop$3,\n    lineEnd: noop$3,\n    polygonStart: function() {\n      areaRingSum.reset();\n      areaStream.lineStart = areaRingStart;\n      areaStream.lineEnd = areaRingEnd;\n    },\n    polygonEnd: function() {\n      var areaRing = +areaRingSum;\n      areaSum.add(areaRing < 0 ? tau$2 + areaRing : areaRing);\n      this.lineStart = this.lineEnd = this.point = noop$3;\n    },\n    sphere: function() {\n      areaSum.add(tau$2);\n    }\n  };\n\n  function areaRingStart() {\n    areaStream.point = areaPointFirst;\n  }\n\n  function areaRingEnd() {\n    areaPoint(lambda00, phi00);\n  }\n\n  function areaPointFirst(lambda, phi) {\n    areaStream.point = areaPoint;\n    lambda00 = lambda, phi00 = phi;\n    lambda *= radians, phi *= radians;\n    lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);\n  }\n\n  function areaPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n    // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    var dLambda = lambda - lambda0,\n        sdLambda = dLambda >= 0 ? 1 : -1,\n        adLambda = sdLambda * dLambda,\n        cosPhi = cos$1(phi),\n        sinPhi = sin$1(phi),\n        k = sinPhi0 * sinPhi,\n        u = cosPhi0 * cosPhi + k * cos$1(adLambda),\n        v = k * sdLambda * sin$1(adLambda);\n    areaRingSum.add(atan2$1(v, u));\n\n    // Advance the previous points.\n    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n  }\n\n  function area$3(object) {\n    areaSum.reset();\n    geoStream(object, areaStream);\n    return areaSum * 2;\n  }\n\n  function spherical(cartesian) {\n    return [atan2$1(cartesian[1], cartesian[0]), asin$1(cartesian[2])];\n  }\n\n  function cartesian(spherical) {\n    var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);\n    return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];\n  }\n\n  function cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n\n  function cartesianCross(a, b) {\n    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n  }\n\n  // TODO return a\n  function cartesianAddInPlace(a, b) {\n    a[0] += b[0], a[1] += b[1], a[2] += b[2];\n  }\n\n  function cartesianScale(vector, k) {\n    return [vector[0] * k, vector[1] * k, vector[2] * k];\n  }\n\n  // TODO return d\n  function cartesianNormalizeInPlace(d) {\n    var l = sqrt$2(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l, d[1] /= l, d[2] /= l;\n  }\n\n  var lambda0$1, phi0, lambda1, phi1, // bounds\n      lambda2, // previous lambda-coordinate\n      lambda00$1, phi00$1, // first point\n      p0, // previous 3D point\n      deltaSum = adder(),\n      ranges,\n      range;\n\n  var boundsStream = {\n    point: boundsPoint,\n    lineStart: boundsLineStart,\n    lineEnd: boundsLineEnd,\n    polygonStart: function() {\n      boundsStream.point = boundsRingPoint;\n      boundsStream.lineStart = boundsRingStart;\n      boundsStream.lineEnd = boundsRingEnd;\n      deltaSum.reset();\n      areaStream.polygonStart();\n    },\n    polygonEnd: function() {\n      areaStream.polygonEnd();\n      boundsStream.point = boundsPoint;\n      boundsStream.lineStart = boundsLineStart;\n      boundsStream.lineEnd = boundsLineEnd;\n      if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n      else if (deltaSum > epsilon$3) phi1 = 90;\n      else if (deltaSum < -epsilon$3) phi0 = -90;\n      range[0] = lambda0$1, range[1] = lambda1;\n    },\n    sphere: function() {\n      lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    }\n  };\n\n  function boundsPoint(lambda, phi) {\n    ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);\n    if (phi < phi0) phi0 = phi;\n    if (phi > phi1) phi1 = phi;\n  }\n\n  function linePoint(lambda, phi) {\n    var p = cartesian([lambda * radians, phi * radians]);\n    if (p0) {\n      var normal = cartesianCross(p0, p),\n          equatorial = [normal[1], -normal[0], 0],\n          inflection = cartesianCross(equatorial, normal);\n      cartesianNormalizeInPlace(inflection);\n      inflection = spherical(inflection);\n      var delta = lambda - lambda2,\n          sign = delta > 0 ? 1 : -1,\n          lambdai = inflection[0] * degrees$1 * sign,\n          phii,\n          antimeridian = abs$1(delta) > 180;\n      if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n        phii = inflection[1] * degrees$1;\n        if (phii > phi1) phi1 = phii;\n      } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n        phii = -inflection[1] * degrees$1;\n        if (phii < phi0) phi0 = phii;\n      } else {\n        if (phi < phi0) phi0 = phi;\n        if (phi > phi1) phi1 = phi;\n      }\n      if (antimeridian) {\n        if (lambda < lambda2) {\n          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n        }\n      } else {\n        if (lambda1 >= lambda0$1) {\n          if (lambda < lambda0$1) lambda0$1 = lambda;\n          if (lambda > lambda1) lambda1 = lambda;\n        } else {\n          if (lambda > lambda2) {\n            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n          } else {\n            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n          }\n        }\n      }\n    } else {\n      ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);\n    }\n    if (phi < phi0) phi0 = phi;\n    if (phi > phi1) phi1 = phi;\n    p0 = p, lambda2 = lambda;\n  }\n\n  function boundsLineStart() {\n    boundsStream.point = linePoint;\n  }\n\n  function boundsLineEnd() {\n    range[0] = lambda0$1, range[1] = lambda1;\n    boundsStream.point = boundsPoint;\n    p0 = null;\n  }\n\n  function boundsRingPoint(lambda, phi) {\n    if (p0) {\n      var delta = lambda - lambda2;\n      deltaSum.add(abs$1(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n    } else {\n      lambda00$1 = lambda, phi00$1 = phi;\n    }\n    areaStream.point(lambda, phi);\n    linePoint(lambda, phi);\n  }\n\n  function boundsRingStart() {\n    areaStream.lineStart();\n  }\n\n  function boundsRingEnd() {\n    boundsRingPoint(lambda00$1, phi00$1);\n    areaStream.lineEnd();\n    if (abs$1(deltaSum) > epsilon$3) lambda0$1 = -(lambda1 = 180);\n    range[0] = lambda0$1, range[1] = lambda1;\n    p0 = null;\n  }\n\n  // Finds the left-right distance between two longitudes.\n  // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n  // the distance between ±180° to be 360°.\n  function angle(lambda0, lambda1) {\n    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n  }\n\n  function rangeCompare(a, b) {\n    return a[0] - b[0];\n  }\n\n  function rangeContains(range, x) {\n    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n  }\n\n  function bounds$1(feature) {\n    var i, n, a, b, merged, deltaMax, delta;\n\n    phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);\n    ranges = [];\n    geoStream(feature, boundsStream);\n\n    // First, sort ranges by their minimum longitudes.\n    if (n = ranges.length) {\n      ranges.sort(rangeCompare);\n\n      // Then, merge any ranges that overlap.\n      for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n        b = ranges[i];\n        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n          if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n          if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n        } else {\n          merged.push(a = b);\n        }\n      }\n\n      // Finally, find the largest gap between the merged ranges.\n      // The final bounding box will be the inverse of this gap.\n      for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n        b = merged[i];\n        if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];\n      }\n    }\n\n    ranges = range = null;\n\n    return lambda0$1 === Infinity || phi0 === Infinity\n        ? [[NaN, NaN], [NaN, NaN]]\n        : [[lambda0$1, phi0], [lambda1, phi1]];\n  }\n\n  var W0, W1,\n      X0, Y0, Z0,\n      X1, Y1, Z1,\n      X2, Y2, Z2,\n      lambda00$2, phi00$2, // first point\n      x0, y0, z0; // previous point\n\n  var centroidStream = {\n    sphere: noop$3,\n    point: centroidPoint,\n    lineStart: centroidLineStart,\n    lineEnd: centroidLineEnd,\n    polygonStart: function() {\n      centroidStream.lineStart = centroidRingStart;\n      centroidStream.lineEnd = centroidRingEnd;\n    },\n    polygonEnd: function() {\n      centroidStream.lineStart = centroidLineStart;\n      centroidStream.lineEnd = centroidLineEnd;\n    }\n  };\n\n  // Arithmetic mean of Cartesian vectors.\n  function centroidPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi);\n    centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));\n  }\n\n  function centroidPointCartesian(x, y, z) {\n    ++W0;\n    X0 += (x - X0) / W0;\n    Y0 += (y - Y0) / W0;\n    Z0 += (z - Z0) / W0;\n  }\n\n  function centroidLineStart() {\n    centroidStream.point = centroidLinePointFirst;\n  }\n\n  function centroidLinePointFirst(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi);\n    x0 = cosPhi * cos$1(lambda);\n    y0 = cosPhi * sin$1(lambda);\n    z0 = sin$1(phi);\n    centroidStream.point = centroidLinePoint;\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidLinePoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi),\n        x = cosPhi * cos$1(lambda),\n        y = cosPhi * sin$1(lambda),\n        z = sin$1(phi),\n        w = atan2$1(sqrt$2((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n    W1 += w;\n    X1 += w * (x0 + (x0 = x));\n    Y1 += w * (y0 + (y0 = y));\n    Z1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidLineEnd() {\n    centroidStream.point = centroidPoint;\n  }\n\n  // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n  // J. Applied Mechanics 42, 239 (1975).\n  function centroidRingStart() {\n    centroidStream.point = centroidRingPointFirst;\n  }\n\n  function centroidRingEnd() {\n    centroidRingPoint(lambda00$2, phi00$2);\n    centroidStream.point = centroidPoint;\n  }\n\n  function centroidRingPointFirst(lambda, phi) {\n    lambda00$2 = lambda, phi00$2 = phi;\n    lambda *= radians, phi *= radians;\n    centroidStream.point = centroidRingPoint;\n    var cosPhi = cos$1(phi);\n    x0 = cosPhi * cos$1(lambda);\n    y0 = cosPhi * sin$1(lambda);\n    z0 = sin$1(phi);\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidRingPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi),\n        x = cosPhi * cos$1(lambda),\n        y = cosPhi * sin$1(lambda),\n        z = sin$1(phi),\n        cx = y0 * z - z0 * y,\n        cy = z0 * x - x0 * z,\n        cz = x0 * y - y0 * x,\n        m = sqrt$2(cx * cx + cy * cy + cz * cz),\n        w = asin$1(m), // line weight = angle\n        v = m && -w / m; // area weight multiplier\n    X2 += v * cx;\n    Y2 += v * cy;\n    Z2 += v * cz;\n    W1 += w;\n    X1 += w * (x0 + (x0 = x));\n    Y1 += w * (y0 + (y0 = y));\n    Z1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroid(object) {\n    W0 = W1 =\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    geoStream(object, centroidStream);\n\n    var x = X2,\n        y = Y2,\n        z = Z2,\n        m = x * x + y * y + z * z;\n\n    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n    if (m < epsilon2$1) {\n      x = X1, y = Y1, z = Z1;\n      // If the feature has zero length, fall back to arithmetic mean of point vectors.\n      if (W1 < epsilon$3) x = X0, y = Y0, z = Z0;\n      m = x * x + y * y + z * z;\n      // If the feature still has an undefined ccentroid, then return.\n      if (m < epsilon2$1) return [NaN, NaN];\n    }\n\n    return [atan2$1(y, x) * degrees$1, asin$1(z / sqrt$2(m)) * degrees$1];\n  }\n\n  function compose(a, b) {\n\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n\n    return compose;\n  }\n\n  function rotationIdentity(lambda, phi) {\n    return [abs$1(lambda) > pi$2 ? lambda + Math.round(-lambda / tau$2) * tau$2 : lambda, phi];\n  }\n\n  rotationIdentity.invert = rotationIdentity;\n\n  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n    return (deltaLambda %= tau$2) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n      : rotationLambda(deltaLambda))\n      : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n      : rotationIdentity);\n  }\n\n  function forwardRotationLambda(deltaLambda) {\n    return function(lambda, phi) {\n      return lambda += deltaLambda, [lambda > pi$2 ? lambda - tau$2 : lambda < -pi$2 ? lambda + tau$2 : lambda, phi];\n    };\n  }\n\n  function rotationLambda(deltaLambda) {\n    var rotation = forwardRotationLambda(deltaLambda);\n    rotation.invert = forwardRotationLambda(-deltaLambda);\n    return rotation;\n  }\n\n  function rotationPhiGamma(deltaPhi, deltaGamma) {\n    var cosDeltaPhi = cos$1(deltaPhi),\n        sinDeltaPhi = sin$1(deltaPhi),\n        cosDeltaGamma = cos$1(deltaGamma),\n        sinDeltaGamma = sin$1(deltaGamma);\n\n    function rotation(lambda, phi) {\n      var cosPhi = cos$1(phi),\n          x = cos$1(lambda) * cosPhi,\n          y = sin$1(lambda) * cosPhi,\n          z = sin$1(phi),\n          k = z * cosDeltaPhi + x * sinDeltaPhi;\n      return [\n        atan2$1(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n        asin$1(k * cosDeltaGamma + y * sinDeltaGamma)\n      ];\n    }\n\n    rotation.invert = function(lambda, phi) {\n      var cosPhi = cos$1(phi),\n          x = cos$1(lambda) * cosPhi,\n          y = sin$1(lambda) * cosPhi,\n          z = sin$1(phi),\n          k = z * cosDeltaGamma - y * sinDeltaGamma;\n      return [\n        atan2$1(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n        asin$1(k * cosDeltaPhi - x * sinDeltaPhi)\n      ];\n    };\n\n    return rotation;\n  }\n\n  function rotation(rotate) {\n    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n    }\n\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n    };\n\n    return forward;\n  }\n\n  // Generates a circle centered at [0°, 0°], with a given radius and precision.\n  function circleStream(stream, radius, delta, direction, t0, t1) {\n    if (!delta) return;\n    var cosRadius = cos$1(radius),\n        sinRadius = sin$1(radius),\n        step = direction * delta;\n    if (t0 == null) {\n      t0 = radius + direction * tau$2;\n      t1 = radius - step / 2;\n    } else {\n      t0 = circleRadius(cosRadius, t0);\n      t1 = circleRadius(cosRadius, t1);\n      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$2;\n    }\n    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n      point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);\n      stream.point(point[0], point[1]);\n    }\n  }\n\n  // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\n  function circleRadius(cosRadius, point) {\n    point = cartesian(point), point[0] -= cosRadius;\n    cartesianNormalizeInPlace(point);\n    var radius = acos$1(-point[1]);\n    return ((-point[2] < 0 ? -radius : radius) + tau$2 - epsilon$3) % tau$2;\n  }\n\n  function clipBuffer() {\n    var lines = [],\n        line;\n    return {\n      point: function(x, y) {\n        line.push([x, y]);\n      },\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      lineEnd: noop$3,\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      },\n      result: function() {\n        var result = lines;\n        lines = [];\n        line = null;\n        return result;\n      }\n    };\n  }\n\n  function pointEqual(a, b) {\n    return abs$1(a[0] - b[0]) < epsilon$3 && abs$1(a[1] - b[1]) < epsilon$3;\n  }\n\n  function Intersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other; // another intersection\n    this.e = entry; // is an entry?\n    this.v = false; // visited\n    this.n = this.p = null; // next & previous\n  }\n\n  // A generalized polygon clipping algorithm: given a polygon that has been cut\n  // into its visible line segments, and rejoins the segments by interpolating\n  // along the clip edge.\n  function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {\n    var subject = [],\n        clip = [],\n        i,\n        n;\n\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n], x;\n\n      // If the first and last points of a segment are coincident, then treat as a\n      // closed ring. TODO if all rings are closed, then the winding order of the\n      // exterior ring should be checked.\n      if (pointEqual(p0, p1)) {\n        stream.lineStart();\n        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n        stream.lineEnd();\n        return;\n      }\n\n      subject.push(x = new Intersection(p0, segment, null, true));\n      clip.push(x.o = new Intersection(p0, null, x, false));\n      subject.push(x = new Intersection(p1, segment, null, false));\n      clip.push(x.o = new Intersection(p1, null, x, true));\n    });\n\n    if (!subject.length) return;\n\n    clip.sort(compareIntersection);\n    link(subject);\n    link(clip);\n\n    for (i = 0, n = clip.length; i < n; ++i) {\n      clip[i].e = startInside = !startInside;\n    }\n\n    var start = subject[0],\n        points,\n        point;\n\n    while (1) {\n      // Find first unvisited intersection.\n      var current = start,\n          isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      stream.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, stream);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, stream);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      stream.lineEnd();\n    }\n  }\n\n  function link(array) {\n    if (!(n = array.length)) return;\n    var n,\n        i = 0,\n        a = array[0],\n        b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n\n  var sum$1 = adder();\n\n  function longitude(point) {\n    if (abs$1(point[0]) <= pi$2)\n      return point[0];\n    else\n      return sign$1(point[0]) * ((abs$1(point[0]) + pi$2) % tau$2 - pi$2);\n  }\n\n  function polygonContains(polygon, point) {\n    var lambda = longitude(point),\n        phi = point[1],\n        sinPhi = sin$1(phi),\n        normal = [sin$1(lambda), -cos$1(lambda), 0],\n        angle = 0,\n        winding = 0;\n\n    sum$1.reset();\n\n    if (sinPhi === 1) phi = halfPi$1 + epsilon$3;\n    else if (sinPhi === -1) phi = -halfPi$1 - epsilon$3;\n\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      if (!(m = (ring = polygon[i]).length)) continue;\n      var ring,\n          m,\n          point0 = ring[m - 1],\n          lambda0 = longitude(point0),\n          phi0 = point0[1] / 2 + quarterPi,\n          sinPhi0 = sin$1(phi0),\n          cosPhi0 = cos$1(phi0);\n\n      for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n        var point1 = ring[j],\n            lambda1 = longitude(point1),\n            phi1 = point1[1] / 2 + quarterPi,\n            sinPhi1 = sin$1(phi1),\n            cosPhi1 = cos$1(phi1),\n            delta = lambda1 - lambda0,\n            sign = delta >= 0 ? 1 : -1,\n            absDelta = sign * delta,\n            antimeridian = absDelta > pi$2,\n            k = sinPhi0 * sinPhi1;\n\n        sum$1.add(atan2$1(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));\n        angle += antimeridian ? delta + sign * tau$2 : delta;\n\n        // Are the longitudes either side of the point’s meridian (lambda),\n        // and are the latitudes smaller than the parallel (phi)?\n        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n          var arc = cartesianCross(cartesian(point0), cartesian(point1));\n          cartesianNormalizeInPlace(arc);\n          var intersection = cartesianCross(normal, arc);\n          cartesianNormalizeInPlace(intersection);\n          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);\n          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ delta >= 0 ? 1 : -1;\n          }\n        }\n      }\n    }\n\n    // First, determine whether the South pole is inside or outside:\n    //\n    // It is inside if:\n    // * the polygon winds around it in a clockwise direction.\n    // * the polygon does not (cumulatively) wind around it, but has a negative\n    //   (counter-clockwise) area.\n    //\n    // Second, count the (signed) number of times a segment crosses a lambda\n    // from the point to the South pole.  If it is zero, then the point is the\n    // same side as the South pole.\n\n    return (angle < -epsilon$3 || angle < epsilon$3 && sum$1 < -epsilon$3) ^ (winding & 1);\n  }\n\n  function ascending$1(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function bisector$1(compare) {\n    if (compare.length === 1) compare = ascendingComparator$1(compare);\n    return {\n      left: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1;\n          else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid;\n          else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n\n  function ascendingComparator$1(f) {\n    return function(d, x) {\n      return ascending$1(f(d), x);\n    };\n  }\n\n  var ascendingBisect$1 = bisector$1(ascending$1);\n\n  function range$1(start, stop, step) {\n    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n    var i = -1,\n        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n        range = new Array(n);\n\n    while (++i < n) {\n      range[i] = start + i * step;\n    }\n\n    return range;\n  }\n\n  function merge$1(arrays) {\n    var n = arrays.length,\n        m,\n        i = -1,\n        j = 0,\n        merged,\n        array;\n\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n\n    return merged;\n  }\n\n  function clip$2(pointVisible, clipLine, interpolate, start) {\n    return function(sink) {\n      var line = clipLine(sink),\n          ringBuffer = clipBuffer(),\n          ringSink = clipLine(ringBuffer),\n          polygonStarted = false,\n          polygon,\n          segments,\n          ring;\n\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = merge$1(segments);\n          var startInside = polygonContains(polygon, start);\n          if (segments.length) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n          } else if (startInside) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n            interpolate(null, null, 1, sink);\n            sink.lineEnd();\n          }\n          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          sink.polygonStart();\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n          sink.polygonEnd();\n        }\n      };\n\n      function point(lambda, phi) {\n        if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n      }\n\n      function pointLine(lambda, phi) {\n        line.point(lambda, phi);\n      }\n\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n\n      function pointRing(lambda, phi) {\n        ring.push([lambda, phi]);\n        ringSink.point(lambda, phi);\n      }\n\n      function ringStart() {\n        ringSink.lineStart();\n        ring = [];\n      }\n\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringSink.lineEnd();\n\n        var clean = ringSink.clean(),\n            ringSegments = ringBuffer.result(),\n            i, n = ringSegments.length, m,\n            segment,\n            point;\n\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n\n        if (!n) return;\n\n        // No intersections.\n        if (clean & 1) {\n          segment = ringSegments[0];\n          if ((m = segment.length - 1) > 0) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n            for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n            sink.lineEnd();\n          }\n          return;\n        }\n\n        // Rejoin connected segments.\n        // TODO reuse ringBuffer.rejoin()?\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n        segments.push(ringSegments.filter(validSegment));\n      }\n\n      return clip;\n    };\n  }\n\n  function validSegment(segment) {\n    return segment.length > 1;\n  }\n\n  // Intersections are sorted along the clip edge. For both antimeridian cutting\n  // and circle clipping, the same comparison is used.\n  function compareIntersection(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfPi$1 - epsilon$3 : halfPi$1 - a[1])\n         - ((b = b.x)[0] < 0 ? b[1] - halfPi$1 - epsilon$3 : halfPi$1 - b[1]);\n  }\n\n  var clipAntimeridian = clip$2(\n    function() { return true; },\n    clipAntimeridianLine,\n    clipAntimeridianInterpolate,\n    [-pi$2, -halfPi$1]\n  );\n\n  // Takes a line and cuts into visible segments. Return values: 0 - there were\n  // intersections or the line was empty; 1 - no intersections; 2 - there were\n  // intersections, and the first and last segments should be rejoined.\n  function clipAntimeridianLine(stream) {\n    var lambda0 = NaN,\n        phi0 = NaN,\n        sign0 = NaN,\n        clean; // no intersections\n\n    return {\n      lineStart: function() {\n        stream.lineStart();\n        clean = 1;\n      },\n      point: function(lambda1, phi1) {\n        var sign1 = lambda1 > 0 ? pi$2 : -pi$2,\n            delta = abs$1(lambda1 - lambda0);\n        if (abs$1(delta - pi$2) < epsilon$3) { // line crosses a pole\n          stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$1 : -halfPi$1);\n          stream.point(sign0, phi0);\n          stream.lineEnd();\n          stream.lineStart();\n          stream.point(sign1, phi0);\n          stream.point(lambda1, phi0);\n          clean = 0;\n        } else if (sign0 !== sign1 && delta >= pi$2) { // line crosses antimeridian\n          if (abs$1(lambda0 - sign0) < epsilon$3) lambda0 -= sign0 * epsilon$3; // handle degeneracies\n          if (abs$1(lambda1 - sign1) < epsilon$3) lambda1 -= sign1 * epsilon$3;\n          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n          stream.point(sign0, phi0);\n          stream.lineEnd();\n          stream.lineStart();\n          stream.point(sign1, phi0);\n          clean = 0;\n        }\n        stream.point(lambda0 = lambda1, phi0 = phi1);\n        sign0 = sign1;\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n        lambda0 = phi0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean; // if intersections, rejoin first and last segments\n      }\n    };\n  }\n\n  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n    var cosPhi0,\n        cosPhi1,\n        sinLambda0Lambda1 = sin$1(lambda0 - lambda1);\n    return abs$1(sinLambda0Lambda1) > epsilon$3\n        ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)\n            - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))\n            / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n        : (phi0 + phi1) / 2;\n  }\n\n  function clipAntimeridianInterpolate(from, to, direction, stream) {\n    var phi;\n    if (from == null) {\n      phi = direction * halfPi$1;\n      stream.point(-pi$2, phi);\n      stream.point(0, phi);\n      stream.point(pi$2, phi);\n      stream.point(pi$2, 0);\n      stream.point(pi$2, -phi);\n      stream.point(0, -phi);\n      stream.point(-pi$2, -phi);\n      stream.point(-pi$2, 0);\n      stream.point(-pi$2, phi);\n    } else if (abs$1(from[0] - to[0]) > epsilon$3) {\n      var lambda = from[0] < to[0] ? pi$2 : -pi$2;\n      phi = direction * lambda / 2;\n      stream.point(-lambda, phi);\n      stream.point(0, phi);\n      stream.point(lambda, phi);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function clipCircle(radius) {\n    var cr = cos$1(radius),\n        delta = 6 * radians,\n        smallRadius = cr > 0,\n        notHemisphere = abs$1(cr) > epsilon$3; // TODO optimise for this common case\n\n    function interpolate(from, to, direction, stream) {\n      circleStream(stream, radius, delta, direction, from, to);\n    }\n\n    function visible(lambda, phi) {\n      return cos$1(lambda) * cos$1(phi) > cr;\n    }\n\n    // Takes a line and cuts into visible segments. Return values used for polygon\n    // clipping: 0 - there were intersections or the line was empty; 1 - no\n    // intersections 2 - there were intersections, and the first and last segments\n    // should be rejoined.\n    function clipLine(stream) {\n      var point0, // previous point\n          c0, // code for previous point\n          v0, // visibility of previous point\n          v00, // visibility of first point\n          clean; // no intersections\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(lambda, phi) {\n          var point1 = [lambda, phi],\n              point2,\n              v = visible(lambda, phi),\n              c = smallRadius\n                ? v ? 0 : code(lambda, phi)\n                : v ? code(lambda + (lambda < 0 ? pi$2 : -pi$2), phi) : 0;\n          if (!point0 && (v00 = v0 = v)) stream.lineStart();\n          // Handle degeneracies.\n          // TODO ignore if not clipping polygons.\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n              point1[0] += epsilon$3;\n              point1[1] += epsilon$3;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              // outside going in\n              stream.lineStart();\n              point2 = intersect(point1, point0);\n              stream.point(point2[0], point2[1]);\n            } else {\n              // inside going out\n              point2 = intersect(point0, point1);\n              stream.point(point2[0], point2[1]);\n              stream.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            // If the codes for two points are different, or are both zero,\n            // and there this segment intersects with the small circle.\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                stream.lineStart();\n                stream.point(t[0][0], t[0][1]);\n                stream.point(t[1][0], t[1][1]);\n                stream.lineEnd();\n              } else {\n                stream.point(t[1][0], t[1][1]);\n                stream.lineEnd();\n                stream.lineStart();\n                stream.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !pointEqual(point0, point1))) {\n            stream.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) stream.lineEnd();\n          point0 = null;\n        },\n        // Rejoin first and last segments if there were intersections and the first\n        // and last points were visible.\n        clean: function() {\n          return clean | ((v00 && v0) << 1);\n        }\n      };\n    }\n\n    // Intersects the great circle between a and b with the clip circle.\n    function intersect(a, b, two) {\n      var pa = cartesian(a),\n          pb = cartesian(b);\n\n      // We have two planes, n1.p = d1 and n2.p = d2.\n      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n      var n1 = [1, 0, 0], // normal\n          n2 = cartesianCross(pa, pb),\n          n2n2 = cartesianDot(n2, n2),\n          n1n2 = n2[0], // cartesianDot(n1, n2),\n          determinant = n2n2 - n1n2 * n1n2;\n\n      // Two polar points.\n      if (!determinant) return !two && a;\n\n      var c1 =  cr * n2n2 / determinant,\n          c2 = -cr * n1n2 / determinant,\n          n1xn2 = cartesianCross(n1, n2),\n          A = cartesianScale(n1, c1),\n          B = cartesianScale(n2, c2);\n      cartesianAddInPlace(A, B);\n\n      // Solve |p(t)|^2 = 1.\n      var u = n1xn2,\n          w = cartesianDot(A, u),\n          uu = cartesianDot(u, u),\n          t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n      if (t2 < 0) return;\n\n      var t = sqrt$2(t2),\n          q = cartesianScale(u, (-w - t) / uu);\n      cartesianAddInPlace(q, A);\n      q = spherical(q);\n\n      if (!two) return q;\n\n      // Two intersection points.\n      var lambda0 = a[0],\n          lambda1 = b[0],\n          phi0 = a[1],\n          phi1 = b[1],\n          z;\n\n      if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n      var delta = lambda1 - lambda0,\n          polar = abs$1(delta - pi$2) < epsilon$3,\n          meridian = polar || delta < epsilon$3;\n\n      if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n      // Check that the first point is between a and b.\n      if (meridian\n          ? polar\n            ? phi0 + phi1 > 0 ^ q[1] < (abs$1(q[0] - lambda0) < epsilon$3 ? phi0 : phi1)\n            : phi0 <= q[1] && q[1] <= phi1\n          : delta > pi$2 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n        var q1 = cartesianScale(u, (-w + t) / uu);\n        cartesianAddInPlace(q1, A);\n        return [q, spherical(q1)];\n      }\n    }\n\n    // Generates a 4-bit vector representing the location of a point relative to\n    // the small circle's bounding box.\n    function code(lambda, phi) {\n      var r = smallRadius ? radius : pi$2 - radius,\n          code = 0;\n      if (lambda < -r) code |= 1; // left\n      else if (lambda > r) code |= 2; // right\n      if (phi < -r) code |= 4; // below\n      else if (phi > r) code |= 8; // above\n      return code;\n    }\n\n    return clip$2(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$2, radius - pi$2]);\n  }\n\n  function clipLine(a, b, x0, y0, x1, y1) {\n    var ax = a[0],\n        ay = a[1],\n        bx = b[0],\n        by = b[1],\n        t0 = 0,\n        t1 = 1,\n        dx = bx - ax,\n        dy = by - ay,\n        r;\n\n    r = x0 - ax;\n    if (!dx && r > 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dx > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = x1 - ax;\n    if (!dx && r < 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dx > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    r = y0 - ay;\n    if (!dy && r > 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dy > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = y1 - ay;\n    if (!dy && r < 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dy > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n    return true;\n  }\n\n  var clipMax = 1e9, clipMin = -clipMax;\n\n  // TODO Use d3-polygon’s polygonContains here for the ring check?\n  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\n  function clipRectangle(x0, y0, x1, y1) {\n\n    function visible(x, y) {\n      return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n    }\n\n    function interpolate(from, to, direction, stream) {\n      var a = 0, a1 = 0;\n      if (from == null\n          || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n          || comparePoint(from, to) < 0 ^ direction > 0) {\n        do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n        while ((a = (a + direction + 4) % 4) !== a1);\n      } else {\n        stream.point(to[0], to[1]);\n      }\n    }\n\n    function corner(p, direction) {\n      return abs$1(p[0] - x0) < epsilon$3 ? direction > 0 ? 0 : 3\n          : abs$1(p[0] - x1) < epsilon$3 ? direction > 0 ? 2 : 1\n          : abs$1(p[1] - y0) < epsilon$3 ? direction > 0 ? 1 : 0\n          : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n    }\n\n    function compareIntersection(a, b) {\n      return comparePoint(a.x, b.x);\n    }\n\n    function comparePoint(a, b) {\n      var ca = corner(a, 1),\n          cb = corner(b, 1);\n      return ca !== cb ? ca - cb\n          : ca === 0 ? b[1] - a[1]\n          : ca === 1 ? a[0] - b[0]\n          : ca === 2 ? a[1] - b[1]\n          : b[0] - a[0];\n    }\n\n    return function(stream) {\n      var activeStream = stream,\n          bufferStream = clipBuffer(),\n          segments,\n          polygon,\n          ring,\n          x__, y__, v__, // first point\n          x_, y_, v_, // previous point\n          first,\n          clean;\n\n      var clipStream = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: polygonStart,\n        polygonEnd: polygonEnd\n      };\n\n      function point(x, y) {\n        if (visible(x, y)) activeStream.point(x, y);\n      }\n\n      function polygonInside() {\n        var winding = 0;\n\n        for (var i = 0, n = polygon.length; i < n; ++i) {\n          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n            if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n            else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n          }\n        }\n\n        return winding;\n      }\n\n      // Buffer geometry within a polygon and then clip it en masse.\n      function polygonStart() {\n        activeStream = bufferStream, segments = [], polygon = [], clean = true;\n      }\n\n      function polygonEnd() {\n        var startInside = polygonInside(),\n            cleanInside = clean && startInside,\n            visible = (segments = merge$1(segments)).length;\n        if (cleanInside || visible) {\n          stream.polygonStart();\n          if (cleanInside) {\n            stream.lineStart();\n            interpolate(null, null, 1, stream);\n            stream.lineEnd();\n          }\n          if (visible) {\n            clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n          }\n          stream.polygonEnd();\n        }\n        activeStream = stream, segments = polygon = ring = null;\n      }\n\n      function lineStart() {\n        clipStream.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n\n      // TODO rather than special-case polygons, simply handle them separately.\n      // Ideally, coincident intersection points should be jittered to avoid\n      // clipping issues.\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferStream.rejoin();\n          segments.push(bufferStream.result());\n        }\n        clipStream.point = point;\n        if (v_) activeStream.lineEnd();\n      }\n\n      function linePoint(x, y) {\n        var v = visible(x, y);\n        if (polygon) ring.push([x, y]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n          }\n        } else {\n          if (v && v_) activeStream.point(x, y);\n          else {\n            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n            if (clipLine(a, b, x0, y0, x1, y1)) {\n              if (!v_) {\n                activeStream.lineStart();\n                activeStream.point(a[0], a[1]);\n              }\n              activeStream.point(b[0], b[1]);\n              if (!v) activeStream.lineEnd();\n              clean = false;\n            } else if (v) {\n              activeStream.lineStart();\n              activeStream.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n\n      return clipStream;\n    };\n  }\n\n  function graticuleX(y0, y1, dy) {\n    var y = range$1(y0, y1 - epsilon$3, dy).concat(y1);\n    return function(x) { return y.map(function(y) { return [x, y]; }); };\n  }\n\n  function graticuleY(x0, x1, dx) {\n    var x = range$1(x0, x1 - epsilon$3, dx).concat(x1);\n    return function(y) { return x.map(function(x) { return [x, y]; }); };\n  }\n\n  function graticule() {\n    var x1, x0, X1, X0,\n        y1, y0, Y1, Y0,\n        dx = 10, dy = dx, DX = 90, DY = 360,\n        x, y, X, Y,\n        precision = 2.5;\n\n    function graticule() {\n      return {type: \"MultiLineString\", coordinates: lines()};\n    }\n\n    function lines() {\n      return range$1(ceil(X0 / DX) * DX, X1, DX).map(X)\n          .concat(range$1(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n          .concat(range$1(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs$1(x % DX) > epsilon$3; }).map(x))\n          .concat(range$1(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs$1(y % DY) > epsilon$3; }).map(y));\n    }\n\n    graticule.lines = function() {\n      return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n    };\n\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [\n          X(X0).concat(\n          Y(Y1).slice(1),\n          X(X1).reverse().slice(1),\n          Y(Y0).reverse().slice(1))\n        ]\n      };\n    };\n\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.extentMinor();\n      return graticule.extentMajor(_).extentMinor(_);\n    };\n\n    graticule.extentMajor = function(_) {\n      if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.extentMinor = function(_) {\n      if (!arguments.length) return [[x0, y0], [x1, y1]];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.stepMinor();\n      return graticule.stepMajor(_).stepMinor(_);\n    };\n\n    graticule.stepMajor = function(_) {\n      if (!arguments.length) return [DX, DY];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n\n    graticule.stepMinor = function(_) {\n      if (!arguments.length) return [dx, dy];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = graticuleX(y0, y1, 90);\n      y = graticuleY(x0, x1, precision);\n      X = graticuleX(Y0, Y1, 90);\n      Y = graticuleY(X0, X1, precision);\n      return graticule;\n    };\n\n    return graticule\n        .extentMajor([[-180, -90 + epsilon$3], [180, 90 - epsilon$3]])\n        .extentMinor([[-180, -80 - epsilon$3], [180, 80 + epsilon$3]]);\n  }\n\n  function identity$6(x) {\n    return x;\n  }\n\n  var areaSum$1 = adder(),\n      areaRingSum$1 = adder(),\n      x00,\n      y00,\n      x0$1,\n      y0$1;\n\n  var areaStream$1 = {\n    point: noop$3,\n    lineStart: noop$3,\n    lineEnd: noop$3,\n    polygonStart: function() {\n      areaStream$1.lineStart = areaRingStart$1;\n      areaStream$1.lineEnd = areaRingEnd$1;\n    },\n    polygonEnd: function() {\n      areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$3;\n      areaSum$1.add(abs$1(areaRingSum$1));\n      areaRingSum$1.reset();\n    },\n    result: function() {\n      var area = areaSum$1 / 2;\n      areaSum$1.reset();\n      return area;\n    }\n  };\n\n  function areaRingStart$1() {\n    areaStream$1.point = areaPointFirst$1;\n  }\n\n  function areaPointFirst$1(x, y) {\n    areaStream$1.point = areaPoint$1;\n    x00 = x0$1 = x, y00 = y0$1 = y;\n  }\n\n  function areaPoint$1(x, y) {\n    areaRingSum$1.add(y0$1 * x - x0$1 * y);\n    x0$1 = x, y0$1 = y;\n  }\n\n  function areaRingEnd$1() {\n    areaPoint$1(x00, y00);\n  }\n\n  var x0$2 = Infinity,\n      y0$2 = x0$2,\n      x1 = -x0$2,\n      y1 = x1;\n\n  var boundsStream$1 = {\n    point: boundsPoint$1,\n    lineStart: noop$3,\n    lineEnd: noop$3,\n    polygonStart: noop$3,\n    polygonEnd: noop$3,\n    result: function() {\n      var bounds = [[x0$2, y0$2], [x1, y1]];\n      x1 = y1 = -(y0$2 = x0$2 = Infinity);\n      return bounds;\n    }\n  };\n\n  function boundsPoint$1(x, y) {\n    if (x < x0$2) x0$2 = x;\n    if (x > x1) x1 = x;\n    if (y < y0$2) y0$2 = y;\n    if (y > y1) y1 = y;\n  }\n\n  // TODO Enforce positive area for exterior, negative area for interior?\n\n  var X0$1 = 0,\n      Y0$1 = 0,\n      Z0$1 = 0,\n      X1$1 = 0,\n      Y1$1 = 0,\n      Z1$1 = 0,\n      X2$1 = 0,\n      Y2$1 = 0,\n      Z2$1 = 0,\n      x00$1,\n      y00$1,\n      x0$3,\n      y0$3;\n\n  var centroidStream$1 = {\n    point: centroidPoint$1,\n    lineStart: centroidLineStart$1,\n    lineEnd: centroidLineEnd$1,\n    polygonStart: function() {\n      centroidStream$1.lineStart = centroidRingStart$1;\n      centroidStream$1.lineEnd = centroidRingEnd$1;\n    },\n    polygonEnd: function() {\n      centroidStream$1.point = centroidPoint$1;\n      centroidStream$1.lineStart = centroidLineStart$1;\n      centroidStream$1.lineEnd = centroidLineEnd$1;\n    },\n    result: function() {\n      var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]\n          : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]\n          : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]\n          : [NaN, NaN];\n      X0$1 = Y0$1 = Z0$1 =\n      X1$1 = Y1$1 = Z1$1 =\n      X2$1 = Y2$1 = Z2$1 = 0;\n      return centroid;\n    }\n  };\n\n  function centroidPoint$1(x, y) {\n    X0$1 += x;\n    Y0$1 += y;\n    ++Z0$1;\n  }\n\n  function centroidLineStart$1() {\n    centroidStream$1.point = centroidPointFirstLine;\n  }\n\n  function centroidPointFirstLine(x, y) {\n    centroidStream$1.point = centroidPointLine;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function centroidPointLine(x, y) {\n    var dx = x - x0$3, dy = y - y0$3, z = sqrt$2(dx * dx + dy * dy);\n    X1$1 += z * (x0$3 + x) / 2;\n    Y1$1 += z * (y0$3 + y) / 2;\n    Z1$1 += z;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function centroidLineEnd$1() {\n    centroidStream$1.point = centroidPoint$1;\n  }\n\n  function centroidRingStart$1() {\n    centroidStream$1.point = centroidPointFirstRing;\n  }\n\n  function centroidRingEnd$1() {\n    centroidPointRing(x00$1, y00$1);\n  }\n\n  function centroidPointFirstRing(x, y) {\n    centroidStream$1.point = centroidPointRing;\n    centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\n  }\n\n  function centroidPointRing(x, y) {\n    var dx = x - x0$3,\n        dy = y - y0$3,\n        z = sqrt$2(dx * dx + dy * dy);\n\n    X1$1 += z * (x0$3 + x) / 2;\n    Y1$1 += z * (y0$3 + y) / 2;\n    Z1$1 += z;\n\n    z = y0$3 * x - x0$3 * y;\n    X2$1 += z * (x0$3 + x);\n    Y2$1 += z * (y0$3 + y);\n    Z2$1 += z * 3;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function PathContext(context) {\n    this._context = context;\n  }\n\n  PathContext.prototype = {\n    _radius: 4.5,\n    pointRadius: function(_) {\n      return this._radius = _, this;\n    },\n    polygonStart: function() {\n      this._line = 0;\n    },\n    polygonEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line === 0) this._context.closePath();\n      this._point = NaN;\n    },\n    point: function(x, y) {\n      switch (this._point) {\n        case 0: {\n          this._context.moveTo(x, y);\n          this._point = 1;\n          break;\n        }\n        case 1: {\n          this._context.lineTo(x, y);\n          break;\n        }\n        default: {\n          this._context.moveTo(x + this._radius, y);\n          this._context.arc(x, y, this._radius, 0, tau$2);\n          break;\n        }\n      }\n    },\n    result: noop$3\n  };\n\n  var lengthSum = adder(),\n      lengthRing,\n      x00$2,\n      y00$2,\n      x0$4,\n      y0$4;\n\n  var lengthStream = {\n    point: noop$3,\n    lineStart: function() {\n      lengthStream.point = lengthPointFirst;\n    },\n    lineEnd: function() {\n      if (lengthRing) lengthPoint(x00$2, y00$2);\n      lengthStream.point = noop$3;\n    },\n    polygonStart: function() {\n      lengthRing = true;\n    },\n    polygonEnd: function() {\n      lengthRing = null;\n    },\n    result: function() {\n      var length = +lengthSum;\n      lengthSum.reset();\n      return length;\n    }\n  };\n\n  function lengthPointFirst(x, y) {\n    lengthStream.point = lengthPoint;\n    x00$2 = x0$4 = x, y00$2 = y0$4 = y;\n  }\n\n  function lengthPoint(x, y) {\n    x0$4 -= x, y0$4 -= y;\n    lengthSum.add(sqrt$2(x0$4 * x0$4 + y0$4 * y0$4));\n    x0$4 = x, y0$4 = y;\n  }\n\n  function PathString() {\n    this._string = [];\n  }\n\n  PathString.prototype = {\n    _radius: 4.5,\n    _circle: circle$1(4.5),\n    pointRadius: function(_) {\n      if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n      return this;\n    },\n    polygonStart: function() {\n      this._line = 0;\n    },\n    polygonEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line === 0) this._string.push(\"Z\");\n      this._point = NaN;\n    },\n    point: function(x, y) {\n      switch (this._point) {\n        case 0: {\n          this._string.push(\"M\", x, \",\", y);\n          this._point = 1;\n          break;\n        }\n        case 1: {\n          this._string.push(\"L\", x, \",\", y);\n          break;\n        }\n        default: {\n          if (this._circle == null) this._circle = circle$1(this._radius);\n          this._string.push(\"M\", x, \",\", y, this._circle);\n          break;\n        }\n      }\n    },\n    result: function() {\n      if (this._string.length) {\n        var result = this._string.join(\"\");\n        this._string = [];\n        return result;\n      } else {\n        return null;\n      }\n    }\n  };\n\n  function circle$1(radius) {\n    return \"m0,\" + radius\n        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n        + \"z\";\n  }\n\n  function geoPath(projection, context) {\n    var pointRadius = 4.5,\n        projectionStream,\n        contextStream;\n\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        geoStream(object, projectionStream(contextStream));\n      }\n      return contextStream.result();\n    }\n\n    path.area = function(object) {\n      geoStream(object, projectionStream(areaStream$1));\n      return areaStream$1.result();\n    };\n\n    path.measure = function(object) {\n      geoStream(object, projectionStream(lengthStream));\n      return lengthStream.result();\n    };\n\n    path.bounds = function(object) {\n      geoStream(object, projectionStream(boundsStream$1));\n      return boundsStream$1.result();\n    };\n\n    path.centroid = function(object) {\n      geoStream(object, projectionStream(centroidStream$1));\n      return centroidStream$1.result();\n    };\n\n    path.projection = function(_) {\n      return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$6) : (projection = _).stream, path) : projection;\n    };\n\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return path;\n    };\n\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n\n    return path.projection(projection).context(context);\n  }\n\n  function transformer$3(methods) {\n    return function(stream) {\n      var s = new TransformStream;\n      for (var key in methods) s[key] = methods[key];\n      s.stream = stream;\n      return s;\n    };\n  }\n\n  function TransformStream() {}\n\n  TransformStream.prototype = {\n    constructor: TransformStream,\n    point: function(x, y) { this.stream.point(x, y); },\n    sphere: function() { this.stream.sphere(); },\n    lineStart: function() { this.stream.lineStart(); },\n    lineEnd: function() { this.stream.lineEnd(); },\n    polygonStart: function() { this.stream.polygonStart(); },\n    polygonEnd: function() { this.stream.polygonEnd(); }\n  };\n\n  function fit(projection, fitBounds, object) {\n    var clip = projection.clipExtent && projection.clipExtent();\n    projection.scale(150).translate([0, 0]);\n    if (clip != null) projection.clipExtent(null);\n    geoStream(object, projection.stream(boundsStream$1));\n    fitBounds(boundsStream$1.result());\n    if (clip != null) projection.clipExtent(clip);\n    return projection;\n  }\n\n  function fitExtent(projection, extent, object) {\n    return fit(projection, function(b) {\n      var w = extent[1][0] - extent[0][0],\n          h = extent[1][1] - extent[0][1],\n          k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n          x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n          y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n      projection.scale(150 * k).translate([x, y]);\n    }, object);\n  }\n\n  function fitSize(projection, size, object) {\n    return fitExtent(projection, [[0, 0], size], object);\n  }\n\n  function fitWidth(projection, width, object) {\n    return fit(projection, function(b) {\n      var w = +width,\n          k = w / (b[1][0] - b[0][0]),\n          x = (w - k * (b[1][0] + b[0][0])) / 2,\n          y = -k * b[0][1];\n      projection.scale(150 * k).translate([x, y]);\n    }, object);\n  }\n\n  function fitHeight(projection, height, object) {\n    return fit(projection, function(b) {\n      var h = +height,\n          k = h / (b[1][1] - b[0][1]),\n          x = -k * b[0][0],\n          y = (h - k * (b[1][1] + b[0][1])) / 2;\n      projection.scale(150 * k).translate([x, y]);\n    }, object);\n  }\n\n  var maxDepth = 16, // maximum depth of subdivision\n      cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)\n\n  function resample(project, delta2) {\n    return +delta2 ? resample$1(project, delta2) : resampleNone(project);\n  }\n\n  function resampleNone(project) {\n    return transformer$3({\n      point: function(x, y) {\n        x = project(x, y);\n        this.stream.point(x[0], x[1]);\n      }\n    });\n  }\n\n  function resample$1(project, delta2) {\n\n    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0,\n          dy = y1 - y0,\n          d2 = dx * dx + dy * dy;\n      if (d2 > 4 * delta2 && depth--) {\n        var a = a0 + a1,\n            b = b0 + b1,\n            c = c0 + c1,\n            m = sqrt$2(a * a + b * b + c * c),\n            phi2 = asin$1(c /= m),\n            lambda2 = abs$1(abs$1(c) - 1) < epsilon$3 || abs$1(lambda0 - lambda1) < epsilon$3 ? (lambda0 + lambda1) / 2 : atan2$1(b, a),\n            p = project(lambda2, phi2),\n            x2 = p[0],\n            y2 = p[1],\n            dx2 = x2 - x0,\n            dy2 = y2 - y0,\n            dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > delta2 // perpendicular projected distance\n            || abs$1((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n            || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    return function(stream) {\n      var lambda00, x00, y00, a00, b00, c00, // first point\n          lambda0, x0, y0, a0, b0, c0; // previous point\n\n      var resampleStream = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n        polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n      };\n\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n\n      function lineStart() {\n        x0 = NaN;\n        resampleStream.point = linePoint;\n        stream.lineStart();\n      }\n\n      function linePoint(lambda, phi) {\n        var c = cartesian([lambda, phi]), p = project(lambda, phi);\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n\n      function lineEnd() {\n        resampleStream.point = point;\n        stream.lineEnd();\n      }\n\n      function ringStart() {\n        lineStart();\n        resampleStream.point = ringPoint;\n        resampleStream.lineEnd = ringEnd;\n      }\n\n      function ringPoint(lambda, phi) {\n        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resampleStream.point = linePoint;\n      }\n\n      function ringEnd() {\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n        resampleStream.lineEnd = lineEnd;\n        lineEnd();\n      }\n\n      return resampleStream;\n    };\n  }\n\n  var transformRadians = transformer$3({\n    point: function(x, y) {\n      this.stream.point(x * radians, y * radians);\n    }\n  });\n\n  function transformRotate(rotate) {\n    return transformer$3({\n      point: function(x, y) {\n        var r = rotate(x, y);\n        return this.stream.point(r[0], r[1]);\n      }\n    });\n  }\n\n  function scaleTranslate(k, dx, dy) {\n    function transform(x, y) {\n      return [dx + k * x, dy - k * y];\n    }\n    transform.invert = function(x, y) {\n      return [(x - dx) / k, (dy - y) / k];\n    };\n    return transform;\n  }\n\n  function scaleTranslateRotate(k, dx, dy, alpha) {\n    var cosAlpha = cos$1(alpha),\n        sinAlpha = sin$1(alpha),\n        a = cosAlpha * k,\n        b = sinAlpha * k,\n        ai = cosAlpha / k,\n        bi = sinAlpha / k,\n        ci = (sinAlpha * dy - cosAlpha * dx) / k,\n        fi = (sinAlpha * dx + cosAlpha * dy) / k;\n    function transform(x, y) {\n      return [a * x - b * y + dx, dy - b * x - a * y];\n    }\n    transform.invert = function(x, y) {\n      return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n    };\n    return transform;\n  }\n\n  function projection(project) {\n    return projectionMutator(function() { return project; })();\n  }\n\n  function projectionMutator(projectAt) {\n    var project,\n        k = 150, // scale\n        x = 480, y = 250, // translate\n        lambda = 0, phi = 0, // center\n        deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n        alpha = 0, // post-rotate\n        theta = null, preclip = clipAntimeridian, // pre-clip angle\n        x0 = null, y0, x1, y1, postclip = identity$6, // post-clip extent\n        delta2 = 0.5, // precision\n        projectResample,\n        projectTransform,\n        projectRotateTransform,\n        cache,\n        cacheStream;\n\n    function projection(point) {\n      return projectRotateTransform(point[0] * radians, point[1] * radians);\n    }\n\n    function invert(point) {\n      point = projectRotateTransform.invert(point[0], point[1]);\n      return point && [point[0] * degrees$1, point[1] * degrees$1];\n    }\n\n    projection.stream = function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n    };\n\n    projection.preclip = function(_) {\n      return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n    };\n\n    projection.postclip = function(_) {\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n    };\n\n    projection.clipAngle = function(_) {\n      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;\n    };\n\n    projection.clipExtent = function(_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$6) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    };\n\n    projection.scale = function(_) {\n      return arguments.length ? (k = +_, recenter()) : k;\n    };\n\n    projection.translate = function(_) {\n      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n    };\n\n    projection.center = function(_) {\n      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];\n    };\n\n    projection.rotate = function(_) {\n      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];\n    };\n\n    projection.angle = function(_) {\n      return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees$1;\n    };\n\n    projection.precision = function(_) {\n      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$2(delta2);\n    };\n\n    projection.fitExtent = function(extent, object) {\n      return fitExtent(projection, extent, object);\n    };\n\n    projection.fitSize = function(size, object) {\n      return fitSize(projection, size, object);\n    };\n\n    projection.fitWidth = function(width, object) {\n      return fitWidth(projection, width, object);\n    };\n\n    projection.fitHeight = function(height, object) {\n      return fitHeight(projection, height, object);\n    };\n\n    function recenter() {\n      var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n          transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n      rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n      projectTransform = compose(project, transform);\n      projectRotateTransform = compose(rotate, projectTransform);\n      projectResample = resample(projectTransform, delta2);\n      return reset();\n    }\n\n    function reset() {\n      cache = cacheStream = null;\n      return projection;\n    }\n\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return recenter();\n    };\n  }\n\n  function conicProjection(projectAt) {\n    var phi0 = 0,\n        phi1 = pi$2 / 3,\n        m = projectionMutator(projectAt),\n        p = m(phi0, phi1);\n\n    p.parallels = function(_) {\n      return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];\n    };\n\n    return p;\n  }\n\n  function cylindricalEqualAreaRaw(phi0) {\n    var cosPhi0 = cos$1(phi0);\n\n    function forward(lambda, phi) {\n      return [lambda * cosPhi0, sin$1(phi) / cosPhi0];\n    }\n\n    forward.invert = function(x, y) {\n      return [x / cosPhi0, asin$1(y * cosPhi0)];\n    };\n\n    return forward;\n  }\n\n  function conicEqualAreaRaw(y0, y1) {\n    var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;\n\n    // Are the parallels symmetrical around the Equator?\n    if (abs$1(n) < epsilon$3) return cylindricalEqualAreaRaw(y0);\n\n    var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt$2(c) / n;\n\n    function project(x, y) {\n      var r = sqrt$2(c - 2 * n * sin$1(y)) / n;\n      return [r * sin$1(x *= n), r0 - r * cos$1(x)];\n    }\n\n    project.invert = function(x, y) {\n      var r0y = r0 - y;\n      return [atan2$1(x, abs$1(r0y)) / n * sign$1(r0y), asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n    };\n\n    return project;\n  }\n\n  function geoConicEqualArea() {\n    return conicProjection(conicEqualAreaRaw)\n        .scale(155.424)\n        .center([0, 33.6442]);\n  }\n\n  function geoAlbers() {\n    return geoConicEqualArea()\n        .parallels([29.5, 45.5])\n        .scale(1070)\n        .translate([480, 250])\n        .rotate([96, 0])\n        .center([-0.6, 38.7]);\n  }\n\n  // The projections must have mutually exclusive clip regions on the sphere,\n  // as this will avoid emitting interleaving lines and polygons.\n  function multiplex(streams) {\n    var n = streams.length;\n    return {\n      point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n      sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n      lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n      lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n      polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n      polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n    };\n  }\n\n  // A composite projection for the United States, configured by default for\n  // 960×500. The projection also works quite well at 960×600 if you change the\n  // scale to 1285 and adjust the translate accordingly. The set of standard\n  // parallels for each region comes from USGS, which is published here:\n  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\n  function geoAlbersUsa() {\n    var cache,\n        cacheStream,\n        lower48 = geoAlbers(), lower48Point,\n        alaska = geoConicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n        hawaii = geoConicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n        point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      return point = null,\n          (lower48Point.point(x, y), point)\n          || (alaskaPoint.point(x, y), point)\n          || (hawaiiPoint.point(x, y), point);\n    }\n\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(),\n          t = lower48.translate(),\n          x = (coordinates[0] - t[0]) / k,\n          y = (coordinates[1] - t[1]) / k;\n      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n          : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n          : lower48).invert(coordinates);\n    };\n\n    albersUsa.stream = function(stream) {\n      return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n    };\n\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n      return reset();\n    };\n\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n\n      lower48Point = lower48\n          .translate(_)\n          .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n          .stream(pointStream);\n\n      alaskaPoint = alaska\n          .translate([x - 0.307 * k, y + 0.201 * k])\n          .clipExtent([[x - 0.425 * k + epsilon$3, y + 0.120 * k + epsilon$3], [x - 0.214 * k - epsilon$3, y + 0.234 * k - epsilon$3]])\n          .stream(pointStream);\n\n      hawaiiPoint = hawaii\n          .translate([x - 0.205 * k, y + 0.212 * k])\n          .clipExtent([[x - 0.214 * k + epsilon$3, y + 0.166 * k + epsilon$3], [x - 0.115 * k - epsilon$3, y + 0.234 * k - epsilon$3]])\n          .stream(pointStream);\n\n      return reset();\n    };\n\n    albersUsa.fitExtent = function(extent, object) {\n      return fitExtent(albersUsa, extent, object);\n    };\n\n    albersUsa.fitSize = function(size, object) {\n      return fitSize(albersUsa, size, object);\n    };\n\n    albersUsa.fitWidth = function(width, object) {\n      return fitWidth(albersUsa, width, object);\n    };\n\n    albersUsa.fitHeight = function(height, object) {\n      return fitHeight(albersUsa, height, object);\n    };\n\n    function reset() {\n      cache = cacheStream = null;\n      return albersUsa;\n    }\n\n    return albersUsa.scale(1070);\n  }\n\n  function azimuthalRaw(scale) {\n    return function(x, y) {\n      var cx = cos$1(x),\n          cy = cos$1(y),\n          k = scale(cx * cy);\n      return [\n        k * cy * sin$1(x),\n        k * sin$1(y)\n      ];\n    }\n  }\n\n  function azimuthalInvert(angle) {\n    return function(x, y) {\n      var z = sqrt$2(x * x + y * y),\n          c = angle(z),\n          sc = sin$1(c),\n          cc = cos$1(c);\n      return [\n        atan2$1(x * sc, z * cc),\n        asin$1(z && y * sc / z)\n      ];\n    }\n  }\n\n  var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n    return sqrt$2(2 / (1 + cxcy));\n  });\n\n  azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n    return 2 * asin$1(z / 2);\n  });\n\n  function geoAzimuthalEqualArea() {\n    return projection(azimuthalEqualAreaRaw)\n        .scale(124.75)\n        .clipAngle(180 - 1e-3);\n  }\n\n  var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n    return (c = acos$1(c)) && c / sin$1(c);\n  });\n\n  azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n    return z;\n  });\n\n  function geoAzimuthalEquidistant() {\n    return projection(azimuthalEquidistantRaw)\n        .scale(79.4188)\n        .clipAngle(180 - 1e-3);\n  }\n\n  function mercatorRaw(lambda, phi) {\n    return [lambda, log$3(tan((halfPi$1 + phi) / 2))];\n  }\n\n  mercatorRaw.invert = function(x, y) {\n    return [x, 2 * atan(exp$1(y)) - halfPi$1];\n  };\n\n  function geoMercator() {\n    return mercatorProjection(mercatorRaw)\n        .scale(961 / tau$2);\n  }\n\n  function mercatorProjection(project) {\n    var m = projection(project),\n        center = m.center,\n        scale = m.scale,\n        translate = m.translate,\n        clipExtent = m.clipExtent,\n        x0 = null, y0, x1, y1; // clip extent\n\n    m.scale = function(_) {\n      return arguments.length ? (scale(_), reclip()) : scale();\n    };\n\n    m.translate = function(_) {\n      return arguments.length ? (translate(_), reclip()) : translate();\n    };\n\n    m.center = function(_) {\n      return arguments.length ? (center(_), reclip()) : center();\n    };\n\n    m.clipExtent = function(_) {\n      return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    };\n\n    function reclip() {\n      var k = pi$2 * scale(),\n          t = m(rotation(m.rotate()).invert([0, 0]));\n      return clipExtent(x0 == null\n          ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n          ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n          : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n    }\n\n    return reclip();\n  }\n\n  function tany(y) {\n    return tan((halfPi$1 + y) / 2);\n  }\n\n  function conicConformalRaw(y0, y1) {\n    var cy0 = cos$1(y0),\n        n = y0 === y1 ? sin$1(y0) : log$3(cy0 / cos$1(y1)) / log$3(tany(y1) / tany(y0)),\n        f = cy0 * pow$2(tany(y0), n) / n;\n\n    if (!n) return mercatorRaw;\n\n    function project(x, y) {\n      if (f > 0) { if (y < -halfPi$1 + epsilon$3) y = -halfPi$1 + epsilon$3; }\n      else { if (y > halfPi$1 - epsilon$3) y = halfPi$1 - epsilon$3; }\n      var r = f / pow$2(tany(y), n);\n      return [r * sin$1(n * x), f - r * cos$1(n * x)];\n    }\n\n    project.invert = function(x, y) {\n      var fy = f - y, r = sign$1(n) * sqrt$2(x * x + fy * fy);\n      return [atan2$1(x, abs$1(fy)) / n * sign$1(fy), 2 * atan(pow$2(f / r, 1 / n)) - halfPi$1];\n    };\n\n    return project;\n  }\n\n  function geoConicConformal() {\n    return conicProjection(conicConformalRaw)\n        .scale(109.5)\n        .parallels([30, 30]);\n  }\n\n  function equirectangularRaw(lambda, phi) {\n    return [lambda, phi];\n  }\n\n  equirectangularRaw.invert = equirectangularRaw;\n\n  function geoEquirectangular() {\n    return projection(equirectangularRaw)\n        .scale(152.63);\n  }\n\n  function conicEquidistantRaw(y0, y1) {\n    var cy0 = cos$1(y0),\n        n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),\n        g = cy0 / n + y0;\n\n    if (abs$1(n) < epsilon$3) return equirectangularRaw;\n\n    function project(x, y) {\n      var gy = g - y, nx = n * x;\n      return [gy * sin$1(nx), g - gy * cos$1(nx)];\n    }\n\n    project.invert = function(x, y) {\n      var gy = g - y;\n      return [atan2$1(x, abs$1(gy)) / n * sign$1(gy), g - sign$1(n) * sqrt$2(x * x + gy * gy)];\n    };\n\n    return project;\n  }\n\n  function geoConicEquidistant() {\n    return conicProjection(conicEquidistantRaw)\n        .scale(131.154)\n        .center([0, 13.9389]);\n  }\n\n  var A1 = 1.340264,\n      A2 = -0.081106,\n      A3 = 0.000893,\n      A4 = 0.003796,\n      M = sqrt$2(3) / 2,\n      iterations = 12;\n\n  function equalEarthRaw(lambda, phi) {\n    var l = asin$1(M * sin$1(phi)), l2 = l * l, l6 = l2 * l2 * l2;\n    return [\n      lambda * cos$1(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\n      l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\n    ];\n  }\n\n  equalEarthRaw.invert = function(x, y) {\n    var l = y, l2 = l * l, l6 = l2 * l2 * l2;\n    for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n      fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n      fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n      l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n      if (abs$1(delta) < epsilon2$1) break;\n    }\n    return [\n      M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos$1(l),\n      asin$1(sin$1(l) / M)\n    ];\n  };\n\n  function geoEqualEarth() {\n    return projection(equalEarthRaw)\n        .scale(177.158);\n  }\n\n  function gnomonicRaw(x, y) {\n    var cy = cos$1(y), k = cos$1(x) * cy;\n    return [cy * sin$1(x) / k, sin$1(y) / k];\n  }\n\n  gnomonicRaw.invert = azimuthalInvert(atan);\n\n  function geoGnomonic() {\n    return projection(gnomonicRaw)\n        .scale(144.049)\n        .clipAngle(60);\n  }\n\n  function scaleTranslate$1(kx, ky, tx, ty) {\n    return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity$6 : transformer$3({\n      point: function(x, y) {\n        this.stream.point(x * kx + tx, y * ky + ty);\n      }\n    });\n  }\n\n  function geoIdentity() {\n    var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity$6, // scale, translate and reflect\n        x0 = null, y0, x1, y1, // clip extent\n        postclip = identity$6,\n        cache,\n        cacheStream,\n        projection;\n\n    function reset() {\n      cache = cacheStream = null;\n      return projection;\n    }\n\n    return projection = {\n      stream: function(stream) {\n        return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));\n      },\n      postclip: function(_) {\n        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n      },\n      clipExtent: function(_) {\n        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$6) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n      },\n      scale: function(_) {\n        return arguments.length ? (transform = scaleTranslate$1((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n      },\n      translate: function(_) {\n        return arguments.length ? (transform = scaleTranslate$1(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n      },\n      reflectX: function(_) {\n        return arguments.length ? (transform = scaleTranslate$1(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n      },\n      reflectY: function(_) {\n        return arguments.length ? (transform = scaleTranslate$1(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n      },\n      fitExtent: function(extent, object) {\n        return fitExtent(projection, extent, object);\n      },\n      fitSize: function(size, object) {\n        return fitSize(projection, size, object);\n      },\n      fitWidth: function(width, object) {\n        return fitWidth(projection, width, object);\n      },\n      fitHeight: function(height, object) {\n        return fitHeight(projection, height, object);\n      }\n    };\n  }\n\n  function naturalEarth1Raw(lambda, phi) {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    return [\n      lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n      phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n    ];\n  }\n\n  naturalEarth1Raw.invert = function(x, y) {\n    var phi = y, i = 25, delta;\n    do {\n      var phi2 = phi * phi, phi4 = phi2 * phi2;\n      phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n          (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n    } while (abs$1(delta) > epsilon$3 && --i > 0);\n    return [\n      x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n      phi\n    ];\n  };\n\n  function geoNaturalEarth1() {\n    return projection(naturalEarth1Raw)\n        .scale(175.295);\n  }\n\n  function orthographicRaw(x, y) {\n    return [cos$1(y) * sin$1(x), sin$1(y)];\n  }\n\n  orthographicRaw.invert = azimuthalInvert(asin$1);\n\n  function geoOrthographic() {\n    return projection(orthographicRaw)\n        .scale(249.5)\n        .clipAngle(90 + epsilon$3);\n  }\n\n  function stereographicRaw(x, y) {\n    var cy = cos$1(y), k = 1 + cos$1(x) * cy;\n    return [cy * sin$1(x) / k, sin$1(y) / k];\n  }\n\n  stereographicRaw.invert = azimuthalInvert(function(z) {\n    return 2 * atan(z);\n  });\n\n  function geoStereographic() {\n    return projection(stereographicRaw)\n        .scale(250)\n        .clipAngle(142);\n  }\n\n  function transverseMercatorRaw(lambda, phi) {\n    return [log$3(tan((halfPi$1 + phi) / 2)), -lambda];\n  }\n\n  transverseMercatorRaw.invert = function(x, y) {\n    return [-y, 2 * atan(exp$1(x)) - halfPi$1];\n  };\n\n  function geoTransverseMercator() {\n    var m = mercatorProjection(transverseMercatorRaw),\n        center = m.center,\n        rotate = m.rotate;\n\n    m.center = function(_) {\n      return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n    };\n\n    m.rotate = function(_) {\n      return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n    };\n\n    return rotate([0, 0, 90])\n        .scale(159.155);\n  }\n\n  var abs$2 = Math.abs;\n  var cos$2 = Math.cos;\n  var sin$2 = Math.sin;\n\n  var epsilon$4 = 1e-6;\n  var pi$3 = Math.PI;\n  var halfPi$2 = pi$3 / 2;\n  var sqrt2 = sqrt$3(2);\n\n  function asin$2(x) {\n    return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);\n  }\n\n  function sqrt$3(x) {\n    return x > 0 ? Math.sqrt(x) : 0;\n  }\n\n  function mollweideBromleyTheta(cp, phi) {\n    var cpsinPhi = cp * sin$2(phi), i = 30, delta;\n    do phi -= delta = (phi + sin$2(phi) - cpsinPhi) / (1 + cos$2(phi));\n    while (abs$2(delta) > epsilon$4 && --i > 0);\n    return phi / 2;\n  }\n\n  function mollweideBromleyRaw(cx, cy, cp) {\n\n    function forward(lambda, phi) {\n      return [cx * lambda * cos$2(phi = mollweideBromleyTheta(cp, phi)), cy * sin$2(phi)];\n    }\n\n    forward.invert = function(x, y) {\n      return y = asin$2(y / cy), [x / (cx * cos$2(y)), asin$2((2 * y + sin$2(2 * y)) / cp)];\n    };\n\n    return forward;\n  }\n\n  var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi$2, sqrt2, pi$3);\n\n  function geoMollweide() {\n    return projection(mollweideRaw)\n        .scale(169.529);\n  }\n\n  var defaultPath = geoPath();\n\n  var projectionProperties = [\n    // standard properties in d3-geo\n    'clipAngle',\n    'clipExtent',\n    'scale',\n    'translate',\n    'center',\n    'rotate',\n    'parallels',\n    'precision',\n    'reflectX',\n    'reflectY',\n\n    // extended properties in d3-geo-projections\n    'coefficient',\n    'distance',\n    'fraction',\n    'lobes',\n    'parallel',\n    'radius',\n    'ratio',\n    'spacing',\n    'tilt'\n  ];\n\n  /**\n   * Augment projections with their type and a copy method.\n   */\n  function create$1(type, constructor) {\n    return function projection() {\n      var p = constructor();\n\n      p.type = type;\n\n      p.path = geoPath().projection(p);\n\n      p.copy = p.copy || function() {\n        var c = projection();\n        projectionProperties.forEach(function(prop) {\n          if (p[prop]) c[prop](p[prop]());\n        });\n        c.path.pointRadius(p.path.pointRadius());\n        return c;\n      };\n\n      return p;\n    };\n  }\n\n  function projection$1(type, proj) {\n    if (!type || typeof type !== 'string') {\n      throw new Error('Projection type must be a name string.');\n    }\n    type = type.toLowerCase();\n    if (arguments.length > 1) {\n      projections[type] = create$1(type, proj);\n      return this;\n    } else {\n      return projections[type] || null;\n    }\n  }\n\n  function getProjectionPath(proj) {\n    return (proj && proj.path) || defaultPath;\n  }\n\n  var projections = {\n    // base d3-geo projection types\n    albers:               geoAlbers,\n    albersusa:            geoAlbersUsa,\n    azimuthalequalarea:   geoAzimuthalEqualArea,\n    azimuthalequidistant: geoAzimuthalEquidistant,\n    conicconformal:       geoConicConformal,\n    conicequalarea:       geoConicEqualArea,\n    conicequidistant:     geoConicEquidistant,\n    equalEarth:           geoEqualEarth,\n    equirectangular:      geoEquirectangular,\n    gnomonic:             geoGnomonic,\n    identity:             geoIdentity,\n    mercator:             geoMercator,\n    mollweide:            geoMollweide,\n    naturalEarth1:        geoNaturalEarth1,\n    orthographic:         geoOrthographic,\n    stereographic:        geoStereographic,\n    transversemercator:   geoTransverseMercator\n  };\n\n  for (var key$1 in projections) {\n    projection$1(key$1, projections[key$1]);\n  }\n\n  /**\n   * Map GeoJSON data to an SVG path string.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(number, number): *} params.projection - The cartographic\n   *   projection to apply.\n   * @param {function(object): *} [params.field] - The field with GeoJSON data,\n   *   or null if the tuple itself is a GeoJSON feature.\n   * @param {string} [params.as='path'] - The output field in which to store\n   *   the generated path data (default 'path').\n   */\n  function GeoPath(params) {\n    Transform.call(this, null, params);\n  }\n\n  GeoPath.Definition = {\n    \"type\": \"GeoPath\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"projection\", \"type\": \"projection\" },\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"pointRadius\", \"type\": \"number\", \"expr\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"default\": \"path\" }\n    ]\n  };\n\n  var prototype$17 = inherits(GeoPath, Transform);\n\n  prototype$17.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        path = this.value,\n        field = _.field || identity,\n        as = _.as || 'path',\n        flag = out.SOURCE;\n\n    function set(t) { t[as] = path(field(t)); }\n\n    if (!path || _.modified()) {\n      // parameters updated, reset and reflow\n      this.value = path = getProjectionPath(_.projection);\n      out.materialize().reflow();\n    } else {\n      flag = field === identity || pulse.modified(field.fields)\n        ? out.ADD_MOD\n        : out.ADD;\n    }\n\n    var prev = initPath(path, _.pointRadius);\n    out.visit(flag, set);\n    path.pointRadius(prev);\n\n    return out.modifies(as);\n  };\n\n  function initPath(path, pointRadius) {\n    var prev = path.pointRadius();\n    path.context(null);\n    if (pointRadius != null) {\n      path.pointRadius(pointRadius);\n    }\n    return prev;\n  }\n\n  /**\n   * Geo-code a longitude/latitude point to an x/y coordinate.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(number, number): *} params.projection - The cartographic\n   *   projection to apply.\n   * @param {Array<function(object): *>} params.fields - A two-element array of\n   *   field accessors for the longitude and latitude values.\n   * @param {Array<string>} [params.as] - A two-element array of field names\n   *   under which to store the result. Defaults to ['x','y'].\n   */\n  function GeoPoint(params) {\n    Transform.call(this, null, params);\n  }\n\n  GeoPoint.Definition = {\n    \"type\": \"GeoPoint\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"projection\", \"type\": \"projection\", \"required\": true },\n      { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true, \"length\": 2 },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"x\", \"y\"] }\n    ]\n  };\n\n  var prototype$18 = inherits(GeoPoint, Transform);\n\n  prototype$18.transform = function(_, pulse) {\n    var proj = _.projection,\n        lon = _.fields[0],\n        lat = _.fields[1],\n        as = _.as || ['x', 'y'],\n        x = as[0],\n        y = as[1],\n        mod;\n\n    function set(t) {\n      var xy = proj([lon(t), lat(t)]);\n      if (xy) {\n        t[x] = xy[0];\n        t[y] = xy[1];\n      } else {\n        t[x] = undefined;\n        t[y] = undefined;\n      }\n    }\n\n    if (_.modified()) {\n      // parameters updated, reflow\n      pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);\n    } else {\n      mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);\n      pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);\n    }\n\n    return pulse.modifies(as);\n  };\n\n  /**\n   * Annotate items with a geopath shape generator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(number, number): *} params.projection - The cartographic\n   *   projection to apply.\n   * @param {function(object): *} [params.field] - The field with GeoJSON data,\n   *   or null if the tuple itself is a GeoJSON feature.\n   * @param {string} [params.as='shape'] - The output field in which to store\n   *   the generated path data (default 'shape').\n   */\n  function GeoShape(params) {\n    Transform.call(this, null, params);\n  }\n\n  GeoShape.Definition = {\n    \"type\": \"GeoShape\",\n    \"metadata\": {\"modifies\": true, \"nomod\": true},\n    \"params\": [\n      { \"name\": \"projection\", \"type\": \"projection\" },\n      { \"name\": \"field\", \"type\": \"field\", \"default\": \"datum\" },\n      { \"name\": \"pointRadius\", \"type\": \"number\", \"expr\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"default\": \"shape\" }\n    ]\n  };\n\n  var prototype$19 = inherits(GeoShape, Transform);\n\n  prototype$19.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        shape = this.value,\n        as = _.as || 'shape',\n        flag = out.ADD;\n\n    if (!shape || _.modified()) {\n      // parameters updated, reset and reflow\n      this.value = shape = shapeGenerator(\n        getProjectionPath(_.projection),\n        _.field || field('datum'),\n        _.pointRadius\n      );\n      out.materialize().reflow();\n      flag = out.SOURCE;\n    }\n\n    out.visit(flag, function(t) { t[as] = shape; });\n\n    return out.modifies(as);\n  };\n\n  function shapeGenerator(path, field, pointRadius) {\n    var shape = pointRadius == null\n      ? function(_) { return path(field(_)); }\n      : function(_) {\n        var prev = path.pointRadius(),\n            value = path.pointRadius(pointRadius)(field(_));\n        path.pointRadius(prev);\n        return value;\n      };\n    shape.context = function(_) {\n      path.context(_);\n      return shape;\n    };\n\n    return shape;\n  }\n\n  /**\n   * GeoJSON feature generator for creating graticules.\n   * @constructor\n   */\n  function Graticule(params) {\n    Transform.call(this, [], params);\n    this.generator = graticule();\n  }\n\n  Graticule.Definition = {\n    \"type\": \"Graticule\",\n    \"metadata\": {\"changes\": true, \"generates\": true},\n    \"params\": [\n      { \"name\": \"extent\", \"type\": \"array\", \"array\": true, \"length\": 2,\n        \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} },\n      { \"name\": \"extentMajor\", \"type\": \"array\", \"array\": true, \"length\": 2,\n        \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} },\n      { \"name\": \"extentMinor\", \"type\": \"array\", \"array\": true, \"length\": 2,\n        \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} },\n      { \"name\": \"step\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"stepMajor\", \"type\": \"number\", \"array\": true, \"length\": 2, \"default\": [90, 360] },\n      { \"name\": \"stepMinor\", \"type\": \"number\", \"array\": true, \"length\": 2, \"default\": [10, 10] },\n      { \"name\": \"precision\", \"type\": \"number\", \"default\": 2.5 }\n    ]\n  };\n\n  var prototype$1a = inherits(Graticule, Transform);\n\n  prototype$1a.transform = function(_, pulse) {\n    var src = this.value,\n        gen = this.generator, t;\n\n    if (!src.length || _.modified()) {\n      for (var prop in _) {\n        if (isFunction(gen[prop])) {\n          gen[prop](_[prop]);\n        }\n      }\n    }\n\n    t = gen();\n    if (src.length) {\n      pulse.mod.push(replace(src[0], t));\n    } else {\n      pulse.add.push(ingest(t));\n    }\n    src[0] = t;\n\n    return pulse;\n  };\n\n  /**\n   * Render a heatmap image for input raster grid data.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} [params.field] - The field with raster grid\n   *   data. If unspecified, the tuple itself is interpreted as a raster grid.\n   * @param {string} [params.color] - A constant color value or function for\n   *   individual pixel color. If a function, it will be invoked with an input\n   *   object that includes $x, $y, $value, and $max fields for the grid.\n   * @param {number} [params.opacity] - A constant opacity value or function for\n   *   individual pixel opacity. If a function, it will be invoked with an input\n   *   object that includes $x, $y, $value, and $max fields for the grid.\n   * @param {string} [params.resolve] - The method for resolving maximum values\n   *   across multiple input grids. If 'independent' (the default), maximum\n   *   calculation will be performed separately for each grid. If 'shared',\n   *   a single global maximum will be used for all input grids.\n   * @param {string} [params.as='image'] - The output field in which to store\n   *   the generated bitmap canvas images (default 'image').\n   */\n  function Heatmap(params) {\n    Transform.call(this, null, params);\n  }\n\n  Heatmap.Definition = {\n    \"type\": \"heatmap\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"color\", \"type\": \"string\", \"expr\": true},\n      { \"name\": \"opacity\", \"type\": \"number\", \"expr\": true},\n      { \"name\": \"resolve\", \"type\": \"enum\", \"values\": [\"shared\", \"independent\"], \"default\": \"independent\" },\n      { \"name\": \"as\", \"type\": \"string\", \"default\": \"image\" }\n    ]\n  };\n\n  var prototype$1b = inherits(Heatmap, Transform);\n\n  prototype$1b.transform = function(_, pulse) {\n    if (!pulse.changed() && !_.modified()) {\n      return pulse.StopPropagation;\n    }\n\n    var source = pulse.materialize(pulse.SOURCE).source,\n        shared = _.resolve === 'shared',\n        field = _.field || identity,\n        opacity = opacity_(_.opacity, _),\n        color = color_(_.color, _),\n        as = _.as || 'image',\n        obj = {\n          $x: 0, $y: 0, $value: 0,\n          $max: shared ? max(source.map(t => max(field(t).values))) : 0\n        };\n\n    source.forEach(t => {\n      const v = field(t);\n\n      // build proxy data object\n      const o = extend({}, t, obj);\n      // set maximum value if not globally shared\n      if (!shared) o.$max = max(v.values || []);\n\n      // generate canvas image\n      // optimize color/opacity if not pixel-dependent\n      t[as] = toCanvas(v, o,\n        color.dep ? color : constant(color(o)),\n        opacity.dep ? opacity : constant(opacity(o))\n      );\n    });\n\n    return pulse.reflow(true).modifies(as);\n  };\n\n  // get image color function\n  function color_(color, _) {\n    let f;\n    if (isFunction(color)) {\n      f = obj => rgb(color(obj, _));\n      f.dep = dependency(color);\n    } else {\n      // default to mid-grey\n      f = constant(rgb(color || '#888'));\n    }\n    return f;\n  }\n\n  // get image opacity function\n  function opacity_(opacity, _) {\n    let f;\n    if (isFunction(opacity)) {\n      f = obj => opacity(obj, _);\n      f.dep = dependency(opacity);\n    } else if (opacity) {\n      f = constant(opacity);\n    } else {\n      // default to [0, max] opacity gradient\n      f = obj => (obj.$value / obj.$max) || 0;\n      f.dep = true;\n    }\n    return f;\n  }\n\n  // check if function depends on individual pixel data\n  function dependency(f) {\n    if (!isFunction(f)) return false;\n    const set = toSet(accessorFields(f));\n    return set.$x || set.$y || set.$value || set.$max;\n  }\n\n  // render raster grid to canvas\n  function toCanvas(grid, obj, color, opacity) {\n    const n = grid.width,\n          m = grid.height,\n          x1 = grid.x1 || 0,\n          y1 = grid.y1 || 0,\n          x2 = grid.x2 || n,\n          y2 = grid.y2 || m,\n          val = grid.values,\n          value = val ? i => val[i] : zero,\n          can = domCanvas(x2 - x1, y2 - y1),\n          ctx = can.getContext('2d'),\n          img = ctx.getImageData(0, 0, x2 - x1, y2 - y1),\n          pix = img.data;\n\n    for (let j=y1, k=0; j<y2; ++j) {\n      obj.$y = j - y1;\n      for (let i=x1, r=j*n; i<x2; ++i, k+=4) {\n        obj.$x = i - x1;\n        obj.$value = value(i + r);\n\n        const v = color(obj);\n        pix[k+0] = v.r;\n        pix[k+1] = v.g;\n        pix[k+2] = v.b;\n        pix[k+3] = ~~(255 * opacity(obj));\n      }\n    }\n\n    ctx.putImageData(img, 0, 0);\n    return can;\n  }\n\n  /**\n   * Maintains a cartographic projection.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function Projection(params) {\n    Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n\n  var prototype$1c = inherits(Projection, Transform);\n\n  prototype$1c.transform = function(_, pulse) {\n    var proj = this.value;\n\n    if (!proj || _.modified('type')) {\n      this.value = (proj = create$2(_.type));\n      projectionProperties.forEach(function(prop) {\n        if (_[prop] != null) set$1(proj, prop, _[prop]);\n      });\n    } else {\n      projectionProperties.forEach(function(prop) {\n        if (_.modified(prop)) set$1(proj, prop, _[prop]);\n      });\n    }\n\n    if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);\n    if (_.fit) fit$1(proj, _);\n\n    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n  };\n\n  function fit$1(proj, _) {\n    var data = collectGeoJSON(_.fit);\n    _.extent ? proj.fitExtent(_.extent, data)\n      : _.size ? proj.fitSize(_.size, data) : 0;\n  }\n\n  function create$2(type) {\n    var constructor = projection$1((type || 'mercator').toLowerCase());\n    if (!constructor) error('Unrecognized projection type: ' + type);\n    return constructor();\n  }\n\n  function set$1(proj, key, value) {\n     if (isFunction(proj[key])) proj[key](value);\n  }\n\n  function collectGeoJSON(data) {\n    data = array(data);\n    return data.length === 1 ? data[0]\n      : {\n          type: FeatureCollection,\n          features: data.reduce((a, f) => a.concat(featurize(f)), [])\n        };\n  }\n\n  function featurize(f) {\n    return f.type === FeatureCollection\n      ? f.features\n      : array(f).filter(d => d != null).map(\n          d => d.type === Feature ? d : {type: Feature, geometry: d}\n        );\n  }\n\n\n\n  var geo = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    contour: Contour,\n    geojson: GeoJSON,\n    geopath: GeoPath,\n    geopoint: GeoPoint,\n    geoshape: GeoShape,\n    graticule: Graticule,\n    heatmap: Heatmap,\n    isocontour: Isocontour,\n    kde2d: KDE2D,\n    projection: Projection\n  });\n\n  function forceCenter(x, y) {\n    var nodes;\n\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n\n    function force() {\n      var i,\n          n = nodes.length,\n          node,\n          sx = 0,\n          sy = 0;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], sx += node.x, sy += node.y;\n      }\n\n      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n        node = nodes[i], node.x -= sx, node.y -= sy;\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = +_, force) : x;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = +_, force) : y;\n    };\n\n    return force;\n  }\n\n  function tree_add(d) {\n    var x = +this._x.call(null, d),\n        y = +this._y.call(null, d);\n    return add$3(this.cover(x, y), x, y, d);\n  }\n\n  function add$3(tree, x, y, d) {\n    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n    var parent,\n        node = tree._root,\n        leaf = {data: d},\n        x0 = tree._x0,\n        y0 = tree._y0,\n        x1 = tree._x1,\n        y1 = tree._y1,\n        xm,\n        ym,\n        xp,\n        yp,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return tree._root = leaf, tree;\n\n    // Find the existing leaf for the new point, or add it.\n    while (node.length) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n    }\n\n    // Is the new point is exactly coincident with the existing point?\n    xp = +tree._x.call(null, node.data);\n    yp = +tree._y.call(null, node.data);\n    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n    // Otherwise, split the leaf node until the old and new point are separated.\n    do {\n      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n    return parent[j] = node, parent[i] = leaf, tree;\n  }\n\n  function addAll(data) {\n    var d, i, n = data.length,\n        x,\n        y,\n        xz = new Array(n),\n        yz = new Array(n),\n        x0 = Infinity,\n        y0 = Infinity,\n        x1 = -Infinity,\n        y1 = -Infinity;\n\n    // Compute the points and their extent.\n    for (i = 0; i < n; ++i) {\n      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n      xz[i] = x;\n      yz[i] = y;\n      if (x < x0) x0 = x;\n      if (x > x1) x1 = x;\n      if (y < y0) y0 = y;\n      if (y > y1) y1 = y;\n    }\n\n    // If there were no (valid) points, abort.\n    if (x0 > x1 || y0 > y1) return this;\n\n    // Expand the tree to cover the new points.\n    this.cover(x0, y0).cover(x1, y1);\n\n    // Add the new points.\n    for (i = 0; i < n; ++i) {\n      add$3(this, xz[i], yz[i], data[i]);\n    }\n\n    return this;\n  }\n\n  function tree_cover(x, y) {\n    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n    var x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1;\n\n    // If the quadtree has no extent, initialize them.\n    // Integer extent are necessary so that if we later double the extent,\n    // the existing quadrant boundaries don’t change due to floating point error!\n    if (isNaN(x0)) {\n      x1 = (x0 = Math.floor(x)) + 1;\n      y1 = (y0 = Math.floor(y)) + 1;\n    }\n\n    // Otherwise, double repeatedly to cover.\n    else {\n      var z = x1 - x0,\n          node = this._root,\n          parent,\n          i;\n\n      while (x0 > x || x >= x1 || y0 > y || y >= y1) {\n        i = (y < y0) << 1 | (x < x0);\n        parent = new Array(4), parent[i] = node, node = parent, z *= 2;\n        switch (i) {\n          case 0: x1 = x0 + z, y1 = y0 + z; break;\n          case 1: x0 = x1 - z, y1 = y0 + z; break;\n          case 2: x1 = x0 + z, y0 = y1 - z; break;\n          case 3: x0 = x1 - z, y0 = y1 - z; break;\n        }\n      }\n\n      if (this._root && this._root.length) this._root = node;\n    }\n\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    return this;\n  }\n\n  function tree_data() {\n    var data = [];\n    this.visit(function(node) {\n      if (!node.length) do data.push(node.data); while (node = node.next)\n    });\n    return data;\n  }\n\n  function tree_extent(_) {\n    return arguments.length\n        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n  }\n\n  function Quad(node, x0, y0, x1, y1) {\n    this.node = node;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n  }\n\n  function tree_find(x, y, radius) {\n    var data,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1,\n        y1,\n        x2,\n        y2,\n        x3 = this._x1,\n        y3 = this._y1,\n        quads = [],\n        node = this._root,\n        q,\n        i;\n\n    if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n    if (radius == null) radius = Infinity;\n    else {\n      x0 = x - radius, y0 = y - radius;\n      x3 = x + radius, y3 = y + radius;\n      radius *= radius;\n    }\n\n    while (q = quads.pop()) {\n\n      // Stop searching if this quadrant can’t contain a closer node.\n      if (!(node = q.node)\n          || (x1 = q.x0) > x3\n          || (y1 = q.y0) > y3\n          || (x2 = q.x1) < x0\n          || (y2 = q.y1) < y0) continue;\n\n      // Bisect the current quadrant.\n      if (node.length) {\n        var xm = (x1 + x2) / 2,\n            ym = (y1 + y2) / 2;\n\n        quads.push(\n          new Quad(node[3], xm, ym, x2, y2),\n          new Quad(node[2], x1, ym, xm, y2),\n          new Quad(node[1], xm, y1, x2, ym),\n          new Quad(node[0], x1, y1, xm, ym)\n        );\n\n        // Visit the closest quadrant first.\n        if (i = (y >= ym) << 1 | (x >= xm)) {\n          q = quads[quads.length - 1];\n          quads[quads.length - 1] = quads[quads.length - 1 - i];\n          quads[quads.length - 1 - i] = q;\n        }\n      }\n\n      // Visit this point. (Visiting coincident points isn’t necessary!)\n      else {\n        var dx = x - +this._x.call(null, node.data),\n            dy = y - +this._y.call(null, node.data),\n            d2 = dx * dx + dy * dy;\n        if (d2 < radius) {\n          var d = Math.sqrt(radius = d2);\n          x0 = x - d, y0 = y - d;\n          x3 = x + d, y3 = y + d;\n          data = node.data;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  function tree_remove(d) {\n    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n    var parent,\n        node = this._root,\n        retainer,\n        previous,\n        next,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1,\n        x,\n        y,\n        xm,\n        ym,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return this;\n\n    // Find the leaf node for the point.\n    // While descending, also retain the deepest parent with a non-removed sibling.\n    if (node.length) while (true) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n      if (!node.length) break;\n      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n    }\n\n    // Find the point to remove.\n    while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n    if (next = node.next) delete node.next;\n\n    // If there are multiple coincident points, remove just the point.\n    if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n    // If this is the root point, remove it.\n    if (!parent) return this._root = next, this;\n\n    // Remove this leaf.\n    next ? parent[i] = next : delete parent[i];\n\n    // If the parent now contains exactly one leaf, collapse superfluous parents.\n    if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n        && node === (parent[3] || parent[2] || parent[1] || parent[0])\n        && !node.length) {\n      if (retainer) retainer[j] = node;\n      else this._root = node;\n    }\n\n    return this;\n  }\n\n  function removeAll(data) {\n    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n    return this;\n  }\n\n  function tree_root() {\n    return this._root;\n  }\n\n  function tree_size() {\n    var size = 0;\n    this.visit(function(node) {\n      if (!node.length) do ++size; while (node = node.next)\n    });\n    return size;\n  }\n\n  function tree_visit(callback) {\n    var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      }\n    }\n    return this;\n  }\n\n  function tree_visitAfter(callback) {\n    var quads = [], next = [], q;\n    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      var node = q.node;\n      if (node.length) {\n        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      }\n      next.push(q);\n    }\n    while (q = next.pop()) {\n      callback(q.node, q.x0, q.y0, q.x1, q.y1);\n    }\n    return this;\n  }\n\n  function defaultX(d) {\n    return d[0];\n  }\n\n  function tree_x(_) {\n    return arguments.length ? (this._x = _, this) : this._x;\n  }\n\n  function defaultY(d) {\n    return d[1];\n  }\n\n  function tree_y(_) {\n    return arguments.length ? (this._y = _, this) : this._y;\n  }\n\n  function quadtree(nodes, x, y) {\n    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n    return nodes == null ? tree : tree.addAll(nodes);\n  }\n\n  function Quadtree(x, y, x0, y0, x1, y1) {\n    this._x = x;\n    this._y = y;\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._root = undefined;\n  }\n\n  function leaf_copy(leaf) {\n    var copy = {data: leaf.data}, next = copy;\n    while (leaf = leaf.next) next = next.next = {data: leaf.data};\n    return copy;\n  }\n\n  var treeProto = quadtree.prototype = Quadtree.prototype;\n\n  treeProto.copy = function() {\n    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n        node = this._root,\n        nodes,\n        child;\n\n    if (!node) return copy;\n\n    if (!node.length) return copy._root = leaf_copy(node), copy;\n\n    nodes = [{source: node, target: copy._root = new Array(4)}];\n    while (node = nodes.pop()) {\n      for (var i = 0; i < 4; ++i) {\n        if (child = node.source[i]) {\n          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n          else node.target[i] = leaf_copy(child);\n        }\n      }\n    }\n\n    return copy;\n  };\n\n  treeProto.add = tree_add;\n  treeProto.addAll = addAll;\n  treeProto.cover = tree_cover;\n  treeProto.data = tree_data;\n  treeProto.extent = tree_extent;\n  treeProto.find = tree_find;\n  treeProto.remove = tree_remove;\n  treeProto.removeAll = removeAll;\n  treeProto.root = tree_root;\n  treeProto.size = tree_size;\n  treeProto.visit = tree_visit;\n  treeProto.visitAfter = tree_visitAfter;\n  treeProto.x = tree_x;\n  treeProto.y = tree_y;\n\n  function constant$4(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function jiggle() {\n    return (Math.random() - 0.5) * 1e-6;\n  }\n\n  function x$2(d) {\n    return d.x + d.vx;\n  }\n\n  function y$2(d) {\n    return d.y + d.vy;\n  }\n\n  function forceCollide(radius) {\n    var nodes,\n        radii,\n        strength = 1,\n        iterations = 1;\n\n    if (typeof radius !== \"function\") radius = constant$4(radius == null ? 1 : +radius);\n\n    function force() {\n      var i, n = nodes.length,\n          tree,\n          node,\n          xi,\n          yi,\n          ri,\n          ri2;\n\n      for (var k = 0; k < iterations; ++k) {\n        tree = quadtree(nodes, x$2, y$2).visitAfter(prepare);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          ri = radii[node.index], ri2 = ri * ri;\n          xi = node.x + node.vx;\n          yi = node.y + node.vy;\n          tree.visit(apply);\n        }\n      }\n\n      function apply(quad, x0, y0, x1, y1) {\n        var data = quad.data, rj = quad.r, r = ri + rj;\n        if (data) {\n          if (data.index > node.index) {\n            var x = xi - data.x - data.vx,\n                y = yi - data.y - data.vy,\n                l = x * x + y * y;\n            if (l < r * r) {\n              if (x === 0) x = jiggle(), l += x * x;\n              if (y === 0) y = jiggle(), l += y * y;\n              l = (r - (l = Math.sqrt(l))) / l * strength;\n              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n              node.vy += (y *= l) * r;\n              data.vx -= x * (r = 1 - r);\n              data.vy -= y * r;\n            }\n          }\n          return;\n        }\n        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n      }\n    }\n\n    function prepare(quad) {\n      if (quad.data) return quad.r = radii[quad.data.index];\n      for (var i = quad.r = 0; i < 4; ++i) {\n        if (quad[i] && quad[i].r > quad.r) {\n          quad.r = quad[i].r;\n        }\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length, node;\n      radii = new Array(n);\n      for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = +_, force) : strength;\n    };\n\n    force.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$4(+_), initialize(), force) : radius;\n    };\n\n    return force;\n  }\n\n  function index(d) {\n    return d.index;\n  }\n\n  function find$1(nodeById, nodeId) {\n    var node = nodeById.get(nodeId);\n    if (!node) throw new Error(\"missing: \" + nodeId);\n    return node;\n  }\n\n  function forceLink(links) {\n    var id = index,\n        strength = defaultStrength,\n        strengths,\n        distance = constant$4(30),\n        distances,\n        nodes,\n        count,\n        bias,\n        iterations = 1;\n\n    if (links == null) links = [];\n\n    function defaultStrength(link) {\n      return 1 / Math.min(count[link.source.index], count[link.target.index]);\n    }\n\n    function force(alpha) {\n      for (var k = 0, n = links.length; k < iterations; ++k) {\n        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n          link = links[i], source = link.source, target = link.target;\n          x = target.x + target.vx - source.x - source.vx || jiggle();\n          y = target.y + target.vy - source.y - source.vy || jiggle();\n          l = Math.sqrt(x * x + y * y);\n          l = (l - distances[i]) / l * alpha * strengths[i];\n          x *= l, y *= l;\n          target.vx -= x * (b = bias[i]);\n          target.vy -= y * b;\n          source.vx += x * (b = 1 - b);\n          source.vy += y * b;\n        }\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n\n      var i,\n          n = nodes.length,\n          m = links.length,\n          nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n          link;\n\n      for (i = 0, count = new Array(n); i < m; ++i) {\n        link = links[i], link.index = i;\n        if (typeof link.source !== \"object\") link.source = find$1(nodeById, link.source);\n        if (typeof link.target !== \"object\") link.target = find$1(nodeById, link.target);\n        count[link.source.index] = (count[link.source.index] || 0) + 1;\n        count[link.target.index] = (count[link.target.index] || 0) + 1;\n      }\n\n      for (i = 0, bias = new Array(m); i < m; ++i) {\n        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n      }\n\n      strengths = new Array(m), initializeStrength();\n      distances = new Array(m), initializeDistance();\n    }\n\n    function initializeStrength() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        strengths[i] = +strength(links[i], i, links);\n      }\n    }\n\n    function initializeDistance() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        distances[i] = +distance(links[i], i, links);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.links = function(_) {\n      return arguments.length ? (links = _, initialize(), force) : links;\n    };\n\n    force.id = function(_) {\n      return arguments.length ? (id = _, force) : id;\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$4(+_), initializeStrength(), force) : strength;\n    };\n\n    force.distance = function(_) {\n      return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant$4(+_), initializeDistance(), force) : distance;\n    };\n\n    return force;\n  }\n\n  var noop$4 = {value: function() {}};\n\n  function dispatch() {\n    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n      if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n      _[t] = [];\n    }\n    return new Dispatch(_);\n  }\n\n  function Dispatch(_) {\n    this._ = _;\n  }\n\n  function parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n      var name = \"\", i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n      return {type: t, name: name};\n    });\n  }\n\n  Dispatch.prototype = dispatch.prototype = {\n    constructor: Dispatch,\n    on: function(typename, callback) {\n      var _ = this._,\n          T = parseTypenames(typename + \"\", _),\n          t,\n          i = -1,\n          n = T.length;\n\n      // If no callback was specified, return the callback of the given type and name.\n      if (arguments.length < 2) {\n        while (++i < n) if ((t = (typename = T[i]).type) && (t = get$4(_[t], typename.name))) return t;\n        return;\n      }\n\n      // If a type was specified, set the callback for the given type and name.\n      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      while (++i < n) {\n        if (t = (typename = T[i]).type) _[t] = set$2(_[t], typename.name, callback);\n        else if (callback == null) for (t in _) _[t] = set$2(_[t], typename.name, null);\n      }\n\n      return this;\n    },\n    copy: function() {\n      var copy = {}, _ = this._;\n      for (var t in _) copy[t] = _[t].slice();\n      return new Dispatch(copy);\n    },\n    call: function(type, that) {\n      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    },\n    apply: function(type, that, args) {\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    }\n  };\n\n  function get$4(type, name) {\n    for (var i = 0, n = type.length, c; i < n; ++i) {\n      if ((c = type[i]).name === name) {\n        return c.value;\n      }\n    }\n  }\n\n  function set$2(type, name, callback) {\n    for (var i = 0, n = type.length; i < n; ++i) {\n      if (type[i].name === name) {\n        type[i] = noop$4, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n      }\n    }\n    if (callback != null) type.push({name: name, value: callback});\n    return type;\n  }\n\n  var frame = 0, // is an animation frame pending?\n      timeout = 0, // is a timeout pending?\n      interval = 0, // are any timers active?\n      pokeDelay = 1000, // how frequently we check for clock skew\n      taskHead,\n      taskTail,\n      clockLast = 0,\n      clockNow = 0,\n      clockSkew = 0,\n      clock = typeof performance === \"object\" && performance.now ? performance : Date,\n      setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\n  function now() {\n    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n  }\n\n  function clearNow() {\n    clockNow = 0;\n  }\n\n  function Timer() {\n    this._call =\n    this._time =\n    this._next = null;\n  }\n\n  Timer.prototype = timer.prototype = {\n    constructor: Timer,\n    restart: function(callback, delay, time) {\n      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n      if (!this._next && taskTail !== this) {\n        if (taskTail) taskTail._next = this;\n        else taskHead = this;\n        taskTail = this;\n      }\n      this._call = callback;\n      this._time = time;\n      sleep();\n    },\n    stop: function() {\n      if (this._call) {\n        this._call = null;\n        this._time = Infinity;\n        sleep();\n      }\n    }\n  };\n\n  function timer(callback, delay, time) {\n    var t = new Timer;\n    t.restart(callback, delay, time);\n    return t;\n  }\n\n  function timerFlush() {\n    now(); // Get the current time, if not already set.\n    ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n    var t = taskHead, e;\n    while (t) {\n      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n      t = t._next;\n    }\n    --frame;\n  }\n\n  function wake() {\n    clockNow = (clockLast = clock.now()) + clockSkew;\n    frame = timeout = 0;\n    try {\n      timerFlush();\n    } finally {\n      frame = 0;\n      nap();\n      clockNow = 0;\n    }\n  }\n\n  function poke() {\n    var now = clock.now(), delay = now - clockLast;\n    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n  }\n\n  function nap() {\n    var t0, t1 = taskHead, t2, time = Infinity;\n    while (t1) {\n      if (t1._call) {\n        if (time > t1._time) time = t1._time;\n        t0 = t1, t1 = t1._next;\n      } else {\n        t2 = t1._next, t1._next = null;\n        t1 = t0 ? t0._next = t2 : taskHead = t2;\n      }\n    }\n    taskTail = t0;\n    sleep(time);\n  }\n\n  function sleep(time) {\n    if (frame) return; // Soonest alarm already set, or will be.\n    if (timeout) timeout = clearTimeout(timeout);\n    var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n    if (delay > 24) {\n      if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n      if (interval) interval = clearInterval(interval);\n    } else {\n      if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n      frame = 1, setFrame(wake);\n    }\n  }\n\n  function interval$1(callback, delay, time) {\n    var t = new Timer, total = delay;\n    if (delay == null) return t.restart(callback, delay, time), t;\n    delay = +delay, time = time == null ? now() : +time;\n    t.restart(function tick(elapsed) {\n      elapsed += total;\n      t.restart(tick, total += delay, time);\n      callback(elapsed);\n    }, delay, time);\n    return t;\n  }\n\n  function x$3(d) {\n    return d.x;\n  }\n\n  function y$3(d) {\n    return d.y;\n  }\n\n  var initialRadius = 10,\n      initialAngle = Math.PI * (3 - Math.sqrt(5));\n\n  function forceSimulation(nodes) {\n    var simulation,\n        alpha = 1,\n        alphaMin = 0.001,\n        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n        alphaTarget = 0,\n        velocityDecay = 0.6,\n        forces = new Map(),\n        stepper = timer(step),\n        event = dispatch(\"tick\", \"end\");\n\n    if (nodes == null) nodes = [];\n\n    function step() {\n      tick();\n      event.call(\"tick\", simulation);\n      if (alpha < alphaMin) {\n        stepper.stop();\n        event.call(\"end\", simulation);\n      }\n    }\n\n    function tick(iterations) {\n      var i, n = nodes.length, node;\n\n      if (iterations === undefined) iterations = 1;\n\n      for (var k = 0; k < iterations; ++k) {\n        alpha += (alphaTarget - alpha) * alphaDecay;\n\n        forces.forEach(function(force) {\n          force(alpha);\n        });\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          if (node.fx == null) node.x += node.vx *= velocityDecay;\n          else node.x = node.fx, node.vx = 0;\n          if (node.fy == null) node.y += node.vy *= velocityDecay;\n          else node.y = node.fy, node.vy = 0;\n        }\n      }\n\n      return simulation;\n    }\n\n    function initializeNodes() {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.index = i;\n        if (node.fx != null) node.x = node.fx;\n        if (node.fy != null) node.y = node.fy;\n        if (isNaN(node.x) || isNaN(node.y)) {\n          var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n          node.x = radius * Math.cos(angle);\n          node.y = radius * Math.sin(angle);\n        }\n        if (isNaN(node.vx) || isNaN(node.vy)) {\n          node.vx = node.vy = 0;\n        }\n      }\n    }\n\n    function initializeForce(force) {\n      if (force.initialize) force.initialize(nodes);\n      return force;\n    }\n\n    initializeNodes();\n\n    return simulation = {\n      tick: tick,\n\n      restart: function() {\n        return stepper.restart(step), simulation;\n      },\n\n      stop: function() {\n        return stepper.stop(), simulation;\n      },\n\n      nodes: function(_) {\n        return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n      },\n\n      alpha: function(_) {\n        return arguments.length ? (alpha = +_, simulation) : alpha;\n      },\n\n      alphaMin: function(_) {\n        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n      },\n\n      alphaDecay: function(_) {\n        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n      },\n\n      alphaTarget: function(_) {\n        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n      },\n\n      velocityDecay: function(_) {\n        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n      },\n\n      force: function(name, _) {\n        return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n      },\n\n      find: function(x, y, radius) {\n        var i = 0,\n            n = nodes.length,\n            dx,\n            dy,\n            d2,\n            node,\n            closest;\n\n        if (radius == null) radius = Infinity;\n        else radius *= radius;\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dx = x - node.x;\n          dy = y - node.y;\n          d2 = dx * dx + dy * dy;\n          if (d2 < radius) closest = node, radius = d2;\n        }\n\n        return closest;\n      },\n\n      on: function(name, _) {\n        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n      }\n    };\n  }\n\n  function forceManyBody() {\n    var nodes,\n        node,\n        alpha,\n        strength = constant$4(-30),\n        strengths,\n        distanceMin2 = 1,\n        distanceMax2 = Infinity,\n        theta2 = 0.81;\n\n    function force(_) {\n      var i, n = nodes.length, tree = quadtree(nodes, x$3, y$3).visitAfter(accumulate);\n      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length, node;\n      strengths = new Array(n);\n      for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n    }\n\n    function accumulate(quad) {\n      var strength = 0, q, c, weight = 0, x, y, i;\n\n      // For internal nodes, accumulate forces from child quadrants.\n      if (quad.length) {\n        for (x = y = i = 0; i < 4; ++i) {\n          if ((q = quad[i]) && (c = Math.abs(q.value))) {\n            strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n          }\n        }\n        quad.x = x / weight;\n        quad.y = y / weight;\n      }\n\n      // For leaf nodes, accumulate forces from coincident quadrants.\n      else {\n        q = quad;\n        q.x = q.data.x;\n        q.y = q.data.y;\n        do strength += strengths[q.data.index];\n        while (q = q.next);\n      }\n\n      quad.value = strength;\n    }\n\n    function apply(quad, x1, _, x2) {\n      if (!quad.value) return true;\n\n      var x = quad.x - node.x,\n          y = quad.y - node.y,\n          w = x2 - x1,\n          l = x * x + y * y;\n\n      // Apply the Barnes-Hut approximation if possible.\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (w * w / theta2 < l) {\n        if (l < distanceMax2) {\n          if (x === 0) x = jiggle(), l += x * x;\n          if (y === 0) y = jiggle(), l += y * y;\n          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n          node.vx += x * quad.value * alpha / l;\n          node.vy += y * quad.value * alpha / l;\n        }\n        return true;\n      }\n\n      // Otherwise, process points directly.\n      else if (quad.length || l >= distanceMax2) return;\n\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (quad.data !== node || quad.next) {\n        if (x === 0) x = jiggle(), l += x * x;\n        if (y === 0) y = jiggle(), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n      }\n\n      do if (quad.data !== node) {\n        w = strengths[quad.data.index] * alpha / l;\n        node.vx += x * w;\n        node.vy += y * w;\n      } while (quad = quad.next);\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$4(+_), initialize(), force) : strength;\n    };\n\n    force.distanceMin = function(_) {\n      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n    };\n\n    force.distanceMax = function(_) {\n      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n    };\n\n    force.theta = function(_) {\n      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n    };\n\n    return force;\n  }\n\n  function forceX(x) {\n    var strength = constant$4(0.1),\n        nodes,\n        strengths,\n        xz;\n\n    if (typeof x !== \"function\") x = constant$4(x == null ? 0 : +x);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      xz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$4(+_), initialize(), force) : strength;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$4(+_), initialize(), force) : x;\n    };\n\n    return force;\n  }\n\n  function forceY(y) {\n    var strength = constant$4(0.1),\n        nodes,\n        strengths,\n        yz;\n\n    if (typeof y !== \"function\") y = constant$4(y == null ? 0 : +y);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      yz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$4(+_), initialize(), force) : strength;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$4(+_), initialize(), force) : y;\n    };\n\n    return force;\n  }\n\n  var ForceMap = {\n    center: forceCenter,\n    collide: forceCollide,\n    nbody: forceManyBody,\n    link: forceLink,\n    x: forceX,\n    y: forceY\n  };\n\n  var Forces = 'forces',\n      ForceParams = [\n        'alpha', 'alphaMin', 'alphaTarget',\n        'velocityDecay', 'forces'\n      ],\n      ForceConfig = ['static', 'iterations'],\n      ForceOutput = ['x', 'y', 'vx', 'vy'];\n\n  /**\n   * Force simulation layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<object>} params.forces - The forces to apply.\n   */\n  function Force(params) {\n    Transform.call(this, null, params);\n  }\n\n  Force.Definition = {\n    \"type\": \"Force\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"static\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"restart\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"iterations\", \"type\": \"number\", \"default\": 300 },\n      { \"name\": \"alpha\", \"type\": \"number\", \"default\": 1 },\n      { \"name\": \"alphaMin\", \"type\": \"number\", \"default\": 0.001 },\n      { \"name\": \"alphaTarget\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"velocityDecay\", \"type\": \"number\", \"default\": 0.4 },\n      { \"name\": \"forces\", \"type\": \"param\", \"array\": true,\n        \"params\": [\n          {\n            \"key\": {\"force\": \"center\"},\n            \"params\": [\n              { \"name\": \"x\", \"type\": \"number\", \"default\": 0 },\n              { \"name\": \"y\", \"type\": \"number\", \"default\": 0 }\n            ]\n          },\n          {\n            \"key\": {\"force\": \"collide\"},\n            \"params\": [\n              { \"name\": \"radius\", \"type\": \"number\", \"expr\": true },\n              { \"name\": \"strength\", \"type\": \"number\", \"default\": 0.7 },\n              { \"name\": \"iterations\", \"type\": \"number\", \"default\": 1 }\n            ]\n          },\n          {\n            \"key\": {\"force\": \"nbody\"},\n            \"params\": [\n              { \"name\": \"strength\", \"type\": \"number\", \"default\": -30 },\n              { \"name\": \"theta\", \"type\": \"number\", \"default\": 0.9 },\n              { \"name\": \"distanceMin\", \"type\": \"number\", \"default\": 1 },\n              { \"name\": \"distanceMax\", \"type\": \"number\" }\n            ]\n          },\n          {\n            \"key\": {\"force\": \"link\"},\n            \"params\": [\n              { \"name\": \"links\", \"type\": \"data\" },\n              { \"name\": \"id\", \"type\": \"field\" },\n              { \"name\": \"distance\", \"type\": \"number\", \"default\": 30, \"expr\": true },\n              { \"name\": \"strength\", \"type\": \"number\", \"expr\": true },\n              { \"name\": \"iterations\", \"type\": \"number\", \"default\": 1 }\n            ]\n          },\n          {\n            \"key\": {\"force\": \"x\"},\n            \"params\": [\n              { \"name\": \"strength\", \"type\": \"number\", \"default\": 0.1 },\n              { \"name\": \"x\", \"type\": \"field\" }\n            ]\n          },\n          {\n            \"key\": {\"force\": \"y\"},\n            \"params\": [\n              { \"name\": \"strength\", \"type\": \"number\", \"default\": 0.1 },\n              { \"name\": \"y\", \"type\": \"field\" }\n            ]\n          }\n        ] },\n      {\n        \"name\": \"as\", \"type\": \"string\", \"array\": true, \"modify\": false,\n        \"default\": ForceOutput\n      }\n    ]\n  };\n\n  var prototype$1d = inherits(Force, Transform);\n\n  prototype$1d.transform = function(_, pulse) {\n    var sim = this.value,\n        change = pulse.changed(pulse.ADD_REM),\n        params = _.modified(ForceParams),\n        iters = _.iterations || 300;\n\n    // configure simulation\n    if (!sim) {\n      this.value = sim = simulation(pulse.source, _);\n      sim.on('tick', rerun(pulse.dataflow, this));\n      if (!_.static) {\n        change = true;\n        sim.tick(); // ensure we run on init\n      }\n      pulse.modifies('index');\n    } else {\n      if (change) {\n        pulse.modifies('index');\n        sim.nodes(pulse.source);\n      }\n      if (params || pulse.changed(pulse.MOD)) {\n        setup(sim, _, 0, pulse);\n      }\n    }\n\n    // run simulation\n    if (params || change || _.modified(ForceConfig)\n        || (pulse.changed() && _.restart))\n    {\n      sim.alpha(Math.max(sim.alpha(), _.alpha || 1))\n         .alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));\n\n      if (_.static) {\n        for (sim.stop(); --iters >= 0;) sim.tick();\n      } else {\n        if (sim.stopped()) sim.restart();\n        if (!change) return pulse.StopPropagation; // defer to sim ticks\n      }\n    }\n\n    return this.finish(_, pulse);\n  };\n\n  prototype$1d.finish = function(_, pulse) {\n    var dataflow = pulse.dataflow;\n\n    // inspect dependencies, touch link source data\n    for (var args=this._argops, j=0, m=args.length, arg; j<m; ++j) {\n      arg = args[j];\n      if (arg.name !== Forces || arg.op._argval.force !== 'link') {\n        continue;\n      }\n      for (var ops=arg.op._argops, i=0, n=ops.length, op; i<n; ++i) {\n        if (ops[i].name === 'links' && (op = ops[i].op.source)) {\n          dataflow.pulse(op, dataflow.changeset().reflow());\n          break;\n        }\n      }\n    }\n\n    // reflow all nodes\n    return pulse.reflow(_.modified()).modifies(ForceOutput);\n  };\n\n  function rerun(df, op) {\n    return function() { df.touch(op).run(); }\n  }\n\n  function simulation(nodes, _) {\n    var sim = forceSimulation(nodes),\n        stopped = false,\n        stop = sim.stop,\n        restart = sim.restart;\n\n    sim.stopped = function() {\n      return stopped;\n    };\n    sim.restart = function() {\n      stopped = false;\n      return restart();\n    };\n    sim.stop = function() {\n      stopped = true;\n      return stop();\n    };\n\n    return setup(sim, _, true).on('end', function() { stopped = true; });\n  }\n\n  function setup(sim, _, init, pulse) {\n    var f = array(_.forces), i, n, p, name;\n\n    for (i=0, n=ForceParams.length; i<n; ++i) {\n      p = ForceParams[i];\n      if (p !== Forces && _.modified(p)) sim[p](_[p]);\n    }\n\n    for (i=0, n=f.length; i<n; ++i) {\n      name = Forces + i;\n      p = init || _.modified(Forces, i) ? getForce(f[i])\n        : pulse && modified(f[i], pulse) ? sim.force(name)\n        : null;\n      if (p) sim.force(name, p);\n    }\n\n    for (n=(sim.numForces || 0); i<n; ++i) {\n      sim.force(Forces + i, null); // remove\n    }\n\n    sim.numForces = f.length;\n    return sim;\n  }\n\n  function modified(f, pulse) {\n    var k, v;\n    for (k in f) {\n      if (isFunction(v = f[k]) && pulse.modified(accessorFields(v)))\n        return 1;\n    }\n    return 0;\n  }\n\n  function getForce(_) {\n    var f, p;\n\n    if (!hasOwnProperty(ForceMap, _.force)) {\n      error('Unrecognized force: ' + _.force);\n    }\n    f = ForceMap[_.force]();\n\n    for (p in _) {\n      if (isFunction(f[p])) setForceParam(f[p], _[p], _);\n    }\n\n    return f;\n  }\n\n  function setForceParam(f, v, _) {\n    f(isFunction(v) ? function(d) { return v(d, _); } : v);\n  }\n\n\n\n  var force = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    force: Force\n  });\n\n  // Build lookup table mapping tuple keys to tree node instances\n  function lookup$3(tree, key, filter) {\n    var map = {};\n    tree.each(function(node) {\n      var t = node.data;\n      if (filter(t)) map[key(t)] = node;\n    });\n    tree.lookup = map;\n    return tree;\n  }\n\n  function defaultSeparation(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  function meanX(children) {\n    return children.reduce(meanXReduce, 0) / children.length;\n  }\n\n  function meanXReduce(x, c) {\n    return x + c.x;\n  }\n\n  function maxY(children) {\n    return 1 + children.reduce(maxYReduce, 0);\n  }\n\n  function maxYReduce(y, c) {\n    return Math.max(y, c.y);\n  }\n\n  function leafLeft(node) {\n    var children;\n    while (children = node.children) node = children[0];\n    return node;\n  }\n\n  function leafRight(node) {\n    var children;\n    while (children = node.children) node = children[children.length - 1];\n    return node;\n  }\n\n  function cluster() {\n    var separation = defaultSeparation,\n        dx = 1,\n        dy = 1,\n        nodeSize = false;\n\n    function cluster(root) {\n      var previousNode,\n          x = 0;\n\n      // First walk, computing the initial x & y values.\n      root.eachAfter(function(node) {\n        var children = node.children;\n        if (children) {\n          node.x = meanX(children);\n          node.y = maxY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n\n      var left = leafLeft(root),\n          right = leafRight(root),\n          x0 = left.x - separation(left, right) / 2,\n          x1 = right.x + separation(right, left) / 2;\n\n      // Second walk, normalizing x & y to the desired size.\n      return root.eachAfter(nodeSize ? function(node) {\n        node.x = (node.x - root.x) * dx;\n        node.y = (root.y - node.y) * dy;\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * dx;\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n      });\n    }\n\n    cluster.separation = function(x) {\n      return arguments.length ? (separation = x, cluster) : separation;\n    };\n\n    cluster.size = function(x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n    };\n\n    cluster.nodeSize = function(x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n    };\n\n    return cluster;\n  }\n\n  function count(node) {\n    var sum = 0,\n        children = node.children,\n        i = children && children.length;\n    if (!i) sum = 1;\n    else while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  }\n\n  function node_count() {\n    return this.eachAfter(count);\n  }\n\n  function node_each(callback) {\n    var node = this, current, next = [node], children, i, n;\n    do {\n      current = next.reverse(), next = [];\n      while (node = current.pop()) {\n        callback(node), children = node.children;\n        if (children) for (i = 0, n = children.length; i < n; ++i) {\n          next.push(children[i]);\n        }\n      }\n    } while (next.length);\n    return this;\n  }\n\n  function node_eachBefore(callback) {\n    var node = this, nodes = [node], children, i;\n    while (node = nodes.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = children.length - 1; i >= 0; --i) {\n        nodes.push(children[i]);\n      }\n    }\n    return this;\n  }\n\n  function node_eachAfter(callback) {\n    var node = this, nodes = [node], next = [], children, i, n;\n    while (node = nodes.pop()) {\n      next.push(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        nodes.push(children[i]);\n      }\n    }\n    while (node = next.pop()) {\n      callback(node);\n    }\n    return this;\n  }\n\n  function node_sum(value) {\n    return this.eachAfter(function(node) {\n      var sum = +value(node.data) || 0,\n          children = node.children,\n          i = children && children.length;\n      while (--i >= 0) sum += children[i].value;\n      node.value = sum;\n    });\n  }\n\n  function node_sort(compare) {\n    return this.eachBefore(function(node) {\n      if (node.children) {\n        node.children.sort(compare);\n      }\n    });\n  }\n\n  function node_path(end) {\n    var start = this,\n        ancestor = leastCommonAncestor(start, end),\n        nodes = [start];\n    while (start !== ancestor) {\n      start = start.parent;\n      nodes.push(start);\n    }\n    var k = nodes.length;\n    while (end !== ancestor) {\n      nodes.splice(k, 0, end);\n      end = end.parent;\n    }\n    return nodes;\n  }\n\n  function leastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = a.ancestors(),\n        bNodes = b.ancestors(),\n        c = null;\n    a = aNodes.pop();\n    b = bNodes.pop();\n    while (a === b) {\n      c = a;\n      a = aNodes.pop();\n      b = bNodes.pop();\n    }\n    return c;\n  }\n\n  function node_ancestors() {\n    var node = this, nodes = [node];\n    while (node = node.parent) {\n      nodes.push(node);\n    }\n    return nodes;\n  }\n\n  function node_descendants() {\n    var nodes = [];\n    this.each(function(node) {\n      nodes.push(node);\n    });\n    return nodes;\n  }\n\n  function node_leaves() {\n    var leaves = [];\n    this.eachBefore(function(node) {\n      if (!node.children) {\n        leaves.push(node);\n      }\n    });\n    return leaves;\n  }\n\n  function node_links() {\n    var root = this, links = [];\n    root.each(function(node) {\n      if (node !== root) { // Don’t include the root’s parent, if any.\n        links.push({source: node.parent, target: node});\n      }\n    });\n    return links;\n  }\n\n  function hierarchy(data, children) {\n    var root = new Node(data),\n        valued = +data.value && (root.value = data.value),\n        node,\n        nodes = [root],\n        child,\n        childs,\n        i,\n        n;\n\n    if (children == null) children = defaultChildren;\n\n    while (node = nodes.pop()) {\n      if (valued) node.value = +node.data.value;\n      if ((childs = children(node.data)) && (n = childs.length)) {\n        node.children = new Array(n);\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new Node(childs[i]));\n          child.parent = node;\n          child.depth = node.depth + 1;\n        }\n      }\n    }\n\n    return root.eachBefore(computeHeight);\n  }\n\n  function node_copy() {\n    return hierarchy(this).eachBefore(copyData);\n  }\n\n  function defaultChildren(d) {\n    return d.children;\n  }\n\n  function copyData(node) {\n    node.data = node.data.data;\n  }\n\n  function computeHeight(node) {\n    var height = 0;\n    do node.height = height;\n    while ((node = node.parent) && (node.height < ++height));\n  }\n\n  function Node(data) {\n    this.data = data;\n    this.depth =\n    this.height = 0;\n    this.parent = null;\n  }\n\n  Node.prototype = hierarchy.prototype = {\n    constructor: Node,\n    count: node_count,\n    each: node_each,\n    eachAfter: node_eachAfter,\n    eachBefore: node_eachBefore,\n    sum: node_sum,\n    sort: node_sort,\n    path: node_path,\n    ancestors: node_ancestors,\n    descendants: node_descendants,\n    leaves: node_leaves,\n    links: node_links,\n    copy: node_copy\n  };\n\n  var slice$1 = Array.prototype.slice;\n\n  function shuffle(array) {\n    var m = array.length,\n        t,\n        i;\n\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  function enclose(circles) {\n    var i = 0, n = (circles = shuffle(slice$1.call(circles))).length, B = [], p, e;\n\n    while (i < n) {\n      p = circles[i];\n      if (e && enclosesWeak(e, p)) ++i;\n      else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n    }\n\n    return e;\n  }\n\n  function extendBasis(B, p) {\n    var i, j;\n\n    if (enclosesWeakAll(p, B)) return [p];\n\n    // If we get here then B must have at least one element.\n    for (i = 0; i < B.length; ++i) {\n      if (enclosesNot(p, B[i])\n          && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n        return [B[i], p];\n      }\n    }\n\n    // If we get here then B must have at least two elements.\n    for (i = 0; i < B.length - 1; ++i) {\n      for (j = i + 1; j < B.length; ++j) {\n        if (enclosesNot(encloseBasis2(B[i], B[j]), p)\n            && enclosesNot(encloseBasis2(B[i], p), B[j])\n            && enclosesNot(encloseBasis2(B[j], p), B[i])\n            && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n          return [B[i], B[j], p];\n        }\n      }\n    }\n\n    // If we get here then something is very wrong.\n    throw new Error;\n  }\n\n  function enclosesNot(a, b) {\n    var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\n    return dr < 0 || dr * dr < dx * dx + dy * dy;\n  }\n\n  function enclosesWeak(a, b) {\n    var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n    return dr > 0 && dr * dr > dx * dx + dy * dy;\n  }\n\n  function enclosesWeakAll(a, B) {\n    for (var i = 0; i < B.length; ++i) {\n      if (!enclosesWeak(a, B[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function encloseBasis(B) {\n    switch (B.length) {\n      case 1: return encloseBasis1(B[0]);\n      case 2: return encloseBasis2(B[0], B[1]);\n      case 3: return encloseBasis3(B[0], B[1], B[2]);\n    }\n  }\n\n  function encloseBasis1(a) {\n    return {\n      x: a.x,\n      y: a.y,\n      r: a.r\n    };\n  }\n\n  function encloseBasis2(a, b) {\n    var x1 = a.x, y1 = a.y, r1 = a.r,\n        x2 = b.x, y2 = b.y, r2 = b.r,\n        x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n        l = Math.sqrt(x21 * x21 + y21 * y21);\n    return {\n      x: (x1 + x2 + x21 / l * r21) / 2,\n      y: (y1 + y2 + y21 / l * r21) / 2,\n      r: (l + r1 + r2) / 2\n    };\n  }\n\n  function encloseBasis3(a, b, c) {\n    var x1 = a.x, y1 = a.y, r1 = a.r,\n        x2 = b.x, y2 = b.y, r2 = b.r,\n        x3 = c.x, y3 = c.y, r3 = c.r,\n        a2 = x1 - x2,\n        a3 = x1 - x3,\n        b2 = y1 - y2,\n        b3 = y1 - y3,\n        c2 = r2 - r1,\n        c3 = r3 - r1,\n        d1 = x1 * x1 + y1 * y1 - r1 * r1,\n        d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n        d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n        ab = a3 * b2 - a2 * b3,\n        xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n        xb = (b3 * c2 - b2 * c3) / ab,\n        ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n        yb = (a2 * c3 - a3 * c2) / ab,\n        A = xb * xb + yb * yb - 1,\n        B = 2 * (r1 + xa * xb + ya * yb),\n        C = xa * xa + ya * ya - r1 * r1,\n        r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n    return {\n      x: x1 + xa + xb * r,\n      y: y1 + ya + yb * r,\n      r: r\n    };\n  }\n\n  function place(b, a, c) {\n    var dx = b.x - a.x, x, a2,\n        dy = b.y - a.y, y, b2,\n        d2 = dx * dx + dy * dy;\n    if (d2) {\n      a2 = a.r + c.r, a2 *= a2;\n      b2 = b.r + c.r, b2 *= b2;\n      if (a2 > b2) {\n        x = (d2 + b2 - a2) / (2 * d2);\n        y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\n        c.x = b.x - x * dx - y * dy;\n        c.y = b.y - x * dy + y * dx;\n      } else {\n        x = (d2 + a2 - b2) / (2 * d2);\n        y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\n        c.x = a.x + x * dx - y * dy;\n        c.y = a.y + x * dy + y * dx;\n      }\n    } else {\n      c.x = a.x + c.r;\n      c.y = a.y;\n    }\n  }\n\n  function intersects(a, b) {\n    var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n    return dr > 0 && dr * dr > dx * dx + dy * dy;\n  }\n\n  function score(node) {\n    var a = node._,\n        b = node.next._,\n        ab = a.r + b.r,\n        dx = (a.x * b.r + b.x * a.r) / ab,\n        dy = (a.y * b.r + b.y * a.r) / ab;\n    return dx * dx + dy * dy;\n  }\n\n  function Node$1(circle) {\n    this._ = circle;\n    this.next = null;\n    this.previous = null;\n  }\n\n  function packEnclose(circles) {\n    if (!(n = circles.length)) return 0;\n\n    var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n    // Place the first circle.\n    a = circles[0], a.x = 0, a.y = 0;\n    if (!(n > 1)) return a.r;\n\n    // Place the second circle.\n    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n    if (!(n > 2)) return a.r + b.r;\n\n    // Place the third circle.\n    place(b, a, c = circles[2]);\n\n    // Initialize the front-chain using the first three circles a, b and c.\n    a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\n    a.next = c.previous = b;\n    b.next = a.previous = c;\n    c.next = b.previous = a;\n\n    // Attempt to place each remaining circle…\n    pack: for (i = 3; i < n; ++i) {\n      place(a._, b._, c = circles[i]), c = new Node$1(c);\n\n      // Find the closest intersecting circle on the front-chain, if any.\n      // “Closeness” is determined by linear distance along the front-chain.\n      // “Ahead” or “behind” is likewise determined by linear distance.\n      j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n      do {\n        if (sj <= sk) {\n          if (intersects(j._, c._)) {\n            b = j, a.next = b, b.previous = a, --i;\n            continue pack;\n          }\n          sj += j._.r, j = j.next;\n        } else {\n          if (intersects(k._, c._)) {\n            a = k, a.next = b, b.previous = a, --i;\n            continue pack;\n          }\n          sk += k._.r, k = k.previous;\n        }\n      } while (j !== k.next);\n\n      // Success! Insert the new circle c between a and b.\n      c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n      // Compute the new closest circle pair to the centroid.\n      aa = score(a);\n      while ((c = c.next) !== b) {\n        if ((ca = score(c)) < aa) {\n          a = c, aa = ca;\n        }\n      }\n      b = a.next;\n    }\n\n    // Compute the enclosing circle of the front chain.\n    a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n    // Translate the circles to put the enclosing circle around the origin.\n    for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n    return c.r;\n  }\n\n  function optional(f) {\n    return f == null ? null : required(f);\n  }\n\n  function required(f) {\n    if (typeof f !== \"function\") throw new Error;\n    return f;\n  }\n\n  function constantZero() {\n    return 0;\n  }\n\n  function constant$5(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function defaultRadius(d) {\n    return Math.sqrt(d.value);\n  }\n\n  function pack() {\n    var radius = null,\n        dx = 1,\n        dy = 1,\n        padding = constantZero;\n\n    function pack(root) {\n      root.x = dx / 2, root.y = dy / 2;\n      if (radius) {\n        root.eachBefore(radiusLeaf(radius))\n            .eachAfter(packChildren(padding, 0.5))\n            .eachBefore(translateChild(1));\n      } else {\n        root.eachBefore(radiusLeaf(defaultRadius))\n            .eachAfter(packChildren(constantZero, 1))\n            .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n            .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n      }\n      return root;\n    }\n\n    pack.radius = function(x) {\n      return arguments.length ? (radius = optional(x), pack) : radius;\n    };\n\n    pack.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n    };\n\n    pack.padding = function(x) {\n      return arguments.length ? (padding = typeof x === \"function\" ? x : constant$5(+x), pack) : padding;\n    };\n\n    return pack;\n  }\n\n  function radiusLeaf(radius) {\n    return function(node) {\n      if (!node.children) {\n        node.r = Math.max(0, +radius(node) || 0);\n      }\n    };\n  }\n\n  function packChildren(padding, k) {\n    return function(node) {\n      if (children = node.children) {\n        var children,\n            i,\n            n = children.length,\n            r = padding(node) * k || 0,\n            e;\n\n        if (r) for (i = 0; i < n; ++i) children[i].r += r;\n        e = packEnclose(children);\n        if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n        node.r = e + r;\n      }\n    };\n  }\n\n  function translateChild(k) {\n    return function(node) {\n      var parent = node.parent;\n      node.r *= k;\n      if (parent) {\n        node.x = parent.x + k * node.x;\n        node.y = parent.y + k * node.y;\n      }\n    };\n  }\n\n  function roundNode(node) {\n    node.x0 = Math.round(node.x0);\n    node.y0 = Math.round(node.y0);\n    node.x1 = Math.round(node.x1);\n    node.y1 = Math.round(node.y1);\n  }\n\n  function treemapDice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (x1 - x0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.y0 = y0, node.y1 = y1;\n      node.x0 = x0, node.x1 = x0 += node.value * k;\n    }\n  }\n\n  function partition$4() {\n    var dx = 1,\n        dy = 1,\n        padding = 0,\n        round = false;\n\n    function partition(root) {\n      var n = root.height + 1;\n      root.x0 =\n      root.y0 = padding;\n      root.x1 = dx;\n      root.y1 = dy / n;\n      root.eachBefore(positionNode(dy, n));\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(dy, n) {\n      return function(node) {\n        if (node.children) {\n          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n        }\n        var x0 = node.x0,\n            y0 = node.y0,\n            x1 = node.x1 - padding,\n            y1 = node.y1 - padding;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n      };\n    }\n\n    partition.round = function(x) {\n      return arguments.length ? (round = !!x, partition) : round;\n    };\n\n    partition.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n    };\n\n    partition.padding = function(x) {\n      return arguments.length ? (padding = +x, partition) : padding;\n    };\n\n    return partition;\n  }\n\n  var keyPrefix = \"$\", // Protect against keys like “__proto__”.\n      preroot = {depth: -1},\n      ambiguous = {};\n\n  function defaultId(d) {\n    return d.id;\n  }\n\n  function defaultParentId(d) {\n    return d.parentId;\n  }\n\n  function stratify() {\n    var id = defaultId,\n        parentId = defaultParentId;\n\n    function stratify(data) {\n      var d,\n          i,\n          n = data.length,\n          root,\n          parent,\n          node,\n          nodes = new Array(n),\n          nodeId,\n          nodeKey,\n          nodeByKey = {};\n\n      for (i = 0; i < n; ++i) {\n        d = data[i], node = nodes[i] = new Node(d);\n        if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n          nodeKey = keyPrefix + (node.id = nodeId);\n          nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\n        }\n      }\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], nodeId = parentId(data[i], i, data);\n        if (nodeId == null || !(nodeId += \"\")) {\n          if (root) throw new Error(\"multiple roots\");\n          root = node;\n        } else {\n          parent = nodeByKey[keyPrefix + nodeId];\n          if (!parent) throw new Error(\"missing: \" + nodeId);\n          if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n          if (parent.children) parent.children.push(node);\n          else parent.children = [node];\n          node.parent = parent;\n        }\n      }\n\n      if (!root) throw new Error(\"no root\");\n      root.parent = preroot;\n      root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n      root.parent = null;\n      if (n > 0) throw new Error(\"cycle\");\n\n      return root;\n    }\n\n    stratify.id = function(x) {\n      return arguments.length ? (id = required(x), stratify) : id;\n    };\n\n    stratify.parentId = function(x) {\n      return arguments.length ? (parentId = required(x), stratify) : parentId;\n    };\n\n    return stratify;\n  }\n\n  function defaultSeparation$1(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  // function radialSeparation(a, b) {\n  //   return (a.parent === b.parent ? 1 : 2) / a.depth;\n  // }\n\n  // This function is used to traverse the left contour of a subtree (or\n  // subforest). It returns the successor of v on this contour. This successor is\n  // either given by the leftmost child of v or by the thread of v. The function\n  // returns null if and only if v is on the highest level of its subtree.\n  function nextLeft(v) {\n    var children = v.children;\n    return children ? children[0] : v.t;\n  }\n\n  // This function works analogously to nextLeft.\n  function nextRight(v) {\n    var children = v.children;\n    return children ? children[children.length - 1] : v.t;\n  }\n\n  // Shifts the current subtree rooted at w+. This is done by increasing\n  // prelim(w+) and mod(w+) by shift.\n  function moveSubtree(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n\n  // All other shifts, applied to the smaller subtrees between w- and w+, are\n  // performed by this function. To prepare the shifts, we have to adjust\n  // change(w+), shift(w+), and change(w-).\n  function executeShifts(v) {\n    var shift = 0,\n        change = 0,\n        children = v.children,\n        i = children.length,\n        w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n\n  // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n  // returns the specified (default) ancestor.\n  function nextAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n\n  function TreeNode(node, i) {\n    this._ = node;\n    this.parent = null;\n    this.children = null;\n    this.A = null; // default ancestor\n    this.a = this; // ancestor\n    this.z = 0; // prelim\n    this.m = 0; // mod\n    this.c = 0; // change\n    this.s = 0; // shift\n    this.t = null; // thread\n    this.i = i; // number\n  }\n\n  TreeNode.prototype = Object.create(Node.prototype);\n\n  function treeRoot(root) {\n    var tree = new TreeNode(root, 0),\n        node,\n        nodes = [tree],\n        child,\n        children,\n        i,\n        n;\n\n    while (node = nodes.pop()) {\n      if (children = node._.children) {\n        node.children = new Array(n = children.length);\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n          child.parent = node;\n        }\n      }\n    }\n\n    (tree.parent = new TreeNode(null, 0)).children = [tree];\n    return tree;\n  }\n\n  // Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\n  function tree() {\n    var separation = defaultSeparation$1,\n        dx = 1,\n        dy = 1,\n        nodeSize = null;\n\n    function tree(root) {\n      var t = treeRoot(root);\n\n      // Compute the layout using Buchheim et al.’s algorithm.\n      t.eachAfter(firstWalk), t.parent.m = -t.z;\n      t.eachBefore(secondWalk);\n\n      // If a fixed node size is specified, scale x and y.\n      if (nodeSize) root.eachBefore(sizeNode);\n\n      // If a fixed tree size is specified, scale x and y based on the extent.\n      // Compute the left-most, right-most, and depth-most nodes for extents.\n      else {\n        var left = root,\n            right = root,\n            bottom = root;\n        root.eachBefore(function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var s = left === right ? 1 : separation(left, right) / 2,\n            tx = s - left.x,\n            kx = dx / (right.x + s + tx),\n            ky = dy / (bottom.depth || 1);\n        root.eachBefore(function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n\n      return root;\n    }\n\n    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n    // applied recursively to the children of v, as well as the function\n    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n    // node v is placed to the midpoint of its outermost children.\n    function firstWalk(v) {\n      var children = v.children,\n          siblings = v.parent.children,\n          w = v.i ? siblings[v.i - 1] : null;\n      if (children) {\n        executeShifts(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n\n    // Computes all real x-coordinates by summing up the modifiers recursively.\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n\n    // The core of the algorithm. Here, a new subtree is combined with the\n    // previous subtrees. Threads are used to traverse the inside and outside\n    // contours of the left and right subtree up to the highest common level. The\n    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n    // superscript o means outside and i means inside, the subscript - means left\n    // subtree and + means right subtree. For summing up the modifiers along the\n    // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n    // nodes of the inside contours conflict, we compute the left one of the\n    // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n    // Finally, we add a new thread (if necessary).\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v,\n            vop = v,\n            vim = w,\n            vom = vip.parent.children[0],\n            sip = vip.m,\n            sop = vop.m,\n            sim = vim.m,\n            som = vom.m,\n            shift;\n        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n          vom = nextLeft(vom);\n          vop = nextRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !nextRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !nextLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n\n    function sizeNode(node) {\n      node.x *= dx;\n      node.y = node.depth * dy;\n    }\n\n    tree.separation = function(x) {\n      return arguments.length ? (separation = x, tree) : separation;\n    };\n\n    tree.size = function(x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n    };\n\n    tree.nodeSize = function(x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n    };\n\n    return tree;\n  }\n\n  function treemapSlice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (y1 - y0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.x0 = x0, node.x1 = x1;\n      node.y0 = y0, node.y1 = y0 += node.value * k;\n    }\n  }\n\n  var phi = (1 + Math.sqrt(5)) / 2;\n\n  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n    var rows = [],\n        nodes = parent.children,\n        row,\n        nodeValue,\n        i0 = 0,\n        i1 = 0,\n        n = nodes.length,\n        dx, dy,\n        value = parent.value,\n        sumValue,\n        minValue,\n        maxValue,\n        newRatio,\n        minRatio,\n        alpha,\n        beta;\n\n    while (i0 < n) {\n      dx = x1 - x0, dy = y1 - y0;\n\n      // Find the next non-empty node.\n      do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n      minValue = maxValue = sumValue;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue);\n\n      // Keep adding nodes while the aspect ratio maintains or improves.\n      for (; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes[i1].value;\n        if (nodeValue < minValue) minValue = nodeValue;\n        if (nodeValue > maxValue) maxValue = nodeValue;\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n        if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n        minRatio = newRatio;\n      }\n\n      // Position and record the row orientation.\n      rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n      else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n      value -= sumValue, i0 = i1;\n    }\n\n    return rows;\n  }\n\n  var treemapSquarify = (function custom(ratio) {\n\n    function squarify(parent, x0, y0, x1, y1) {\n      squarifyRatio(ratio, parent, x0, y0, x1, y1);\n    }\n\n    squarify.ratio = function(x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return squarify;\n  })(phi);\n\n  function treemap() {\n    var tile = treemapSquarify,\n        round = false,\n        dx = 1,\n        dy = 1,\n        paddingStack = [0],\n        paddingInner = constantZero,\n        paddingTop = constantZero,\n        paddingRight = constantZero,\n        paddingBottom = constantZero,\n        paddingLeft = constantZero;\n\n    function treemap(root) {\n      root.x0 =\n      root.y0 = 0;\n      root.x1 = dx;\n      root.y1 = dy;\n      root.eachBefore(positionNode);\n      paddingStack = [0];\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(node) {\n      var p = paddingStack[node.depth],\n          x0 = node.x0 + p,\n          y0 = node.y0 + p,\n          x1 = node.x1 - p,\n          y1 = node.y1 - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n      if (node.children) {\n        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n        x0 += paddingLeft(node) - p;\n        y0 += paddingTop(node) - p;\n        x1 -= paddingRight(node) - p;\n        y1 -= paddingBottom(node) - p;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        tile(node, x0, y0, x1, y1);\n      }\n    }\n\n    treemap.round = function(x) {\n      return arguments.length ? (round = !!x, treemap) : round;\n    };\n\n    treemap.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n    };\n\n    treemap.tile = function(x) {\n      return arguments.length ? (tile = required(x), treemap) : tile;\n    };\n\n    treemap.padding = function(x) {\n      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n    };\n\n    treemap.paddingInner = function(x) {\n      return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingInner;\n    };\n\n    treemap.paddingOuter = function(x) {\n      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n    };\n\n    treemap.paddingTop = function(x) {\n      return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingTop;\n    };\n\n    treemap.paddingRight = function(x) {\n      return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingRight;\n    };\n\n    treemap.paddingBottom = function(x) {\n      return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingBottom;\n    };\n\n    treemap.paddingLeft = function(x) {\n      return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingLeft;\n    };\n\n    return treemap;\n  }\n\n  function treemapBinary(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        i, n = nodes.length,\n        sum, sums = new Array(n + 1);\n\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes[i].value;\n    }\n\n    partition(0, n, parent.value, x0, y0, x1, y1);\n\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes[i];\n        node.x0 = x0, node.y0 = y0;\n        node.x1 = x1, node.y1 = y1;\n        return;\n      }\n\n      var valueOffset = sums[i],\n          valueTarget = (value / 2) + valueOffset,\n          k = i + 1,\n          hi = j - 1;\n\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n        if (sums[mid] < valueTarget) k = mid + 1;\n        else hi = mid;\n      }\n\n      if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\n\n      var valueLeft = sums[k] - valueOffset,\n          valueRight = value - valueLeft;\n\n      if ((x1 - x0) > (y1 - y0)) {\n        var xk = (x0 * valueRight + x1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      } else {\n        var yk = (y0 * valueRight + y1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      }\n    }\n  }\n\n  function treemapSliceDice(parent, x0, y0, x1, y1) {\n    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n  }\n\n  var treemapResquarify = (function custom(ratio) {\n\n    function resquarify(parent, x0, y0, x1, y1) {\n      if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n        var rows,\n            row,\n            nodes,\n            i,\n            j = -1,\n            n,\n            m = rows.length,\n            value = parent.value;\n\n        while (++j < m) {\n          row = rows[j], nodes = row.children;\n          for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n          if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n          else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n          value -= row.value;\n        }\n      } else {\n        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n        rows.ratio = ratio;\n      }\n    }\n\n    resquarify.ratio = function(x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return resquarify;\n  })(phi);\n\n  /**\n    * Nest tuples into a tree structure, grouped by key values.\n    * @constructor\n    * @param {object} params - The parameters for this operator.\n    * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.\n    * @param {boolean} [params.generate=false] - A boolean flag indicating if\n    *   non-leaf nodes generated by this transform should be included in the\n    *   output. The default (false) includes only the input data (leaf nodes)\n    *   in the data stream.\n    */\n  function Nest(params) {\n    Transform.call(this, null, params);\n  }\n\n  Nest.Definition = {\n    \"type\": \"Nest\",\n    \"metadata\": {\"treesource\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"keys\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"generate\", \"type\": \"boolean\" }\n    ]\n  };\n\n  var prototype$1e = inherits(Nest, Transform);\n\n  function children(n) {\n    return n.values;\n  }\n\n  prototype$1e.transform = function(_, pulse) {\n    if (!pulse.source) {\n      error('Nest transform requires an upstream data source.');\n    }\n\n    var gen = _.generate,\n        mod = _.modified(),\n        out = pulse.clone(),\n        tree = this.value;\n\n    if (!tree || mod || pulse.changed()) {\n      // collect nodes to remove\n      if (tree) {\n        tree.each(node => {\n          if (node.children && isTuple(node.data)) {\n            out.rem.push(node.data);\n          }\n        });\n      }\n\n      // generate new tree structure\n      this.value = tree = hierarchy({\n        values: array(_.keys)\n          .reduce((n, k) => { n.key(k); return n; }, nest())\n          .entries(out.source)\n      }, children);\n\n      // collect nodes to add\n      if (gen) {\n        tree.each(node => {\n          if (node.children) {\n            node = ingest(node.data);\n            out.add.push(node);\n            out.source.push(node);\n          }\n        });\n      }\n\n      // build lookup table\n      lookup$3(tree, tupleid, tupleid);\n    }\n\n    out.source.root = tree;\n    return out;\n  };\n\n  function nest() {\n    var keys = [],\n        nest;\n\n    function apply(array, depth) {\n      if (depth >= keys.length) {\n        return array;\n      }\n\n      var i = -1,\n          n = array.length,\n          key = keys[depth++],\n          keyValue,\n          value,\n          valuesByKey = {},\n          values,\n          result = {};\n\n      while (++i < n) {\n        keyValue = key(value = array[i]) + '';\n        if (values = valuesByKey[keyValue]) {\n          values.push(value);\n        } else {\n          valuesByKey[keyValue] = [value];\n        }\n      }\n\n      for (keyValue in valuesByKey) {\n        result[keyValue] = apply(valuesByKey[keyValue], depth);\n      }\n\n      return result;\n    }\n\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      var array = [], k;\n      for (k in map) {\n        array.push({key: k, values: entries(map[k], depth)});\n      }\n      return array;\n    }\n\n    return nest = {\n      entries: array => entries(apply(array, 0), 0),\n      key: d => { keys.push(d); return nest; }\n    };\n  }\n\n  /**\n   * Abstract class for tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function HierarchyLayout(params) {\n    Transform.call(this, null, params);\n  }\n\n  var prototype$1f = inherits(HierarchyLayout, Transform);\n\n  prototype$1f.transform = function(_, pulse) {\n    if (!pulse.source || !pulse.source.root) {\n      error(this.constructor.name\n        + ' transform requires a backing tree data source.');\n    }\n\n    var layout = this.layout(_.method),\n        fields = this.fields,\n        root = pulse.source.root,\n        as = _.as || fields;\n\n    if (_.field) root.sum(_.field); else root.count();\n    if (_.sort) root.sort(stableCompare(_.sort, d => d.data));\n\n    setParams(layout, this.params, _);\n    if (layout.separation) {\n      layout.separation(_.separation !== false ? defaultSeparation$2 : one);\n    }\n\n    try {\n      this.value = layout(root);\n    } catch (err) {\n      error(err);\n    }\n    root.each(function(node) { setFields(node, fields, as); });\n\n    return pulse.reflow(_.modified()).modifies(as).modifies('leaf');\n  };\n\n  function setParams(layout, params, _) {\n    for (var p, i=0, n=params.length; i<n; ++i) {\n      p = params[i];\n      if (p in _) layout[p](_[p]);\n    }\n  }\n\n  function setFields(node, fields, as) {\n    var t = node.data;\n    for (var i=0, n=fields.length-1; i<n; ++i) {\n      t[as[i]] = node[fields[i]];\n    }\n    t[as[n]] = node.children ? node.children.length : 0;\n  }\n\n  function defaultSeparation$2(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  var Output$1 = ['x', 'y', 'r', 'depth', 'children'];\n\n  /**\n   * Packed circle tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n  function Pack(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Pack.Definition = {\n    \"type\": \"Pack\",\n    \"metadata\": {\"tree\": true, \"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"sort\", \"type\": \"compare\" },\n      { \"name\": \"padding\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"radius\", \"type\": \"field\", \"default\": null },\n      { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": Output$1.length, \"default\": Output$1 }\n    ]\n  };\n\n  var prototype$1g = inherits(Pack, HierarchyLayout);\n\n  prototype$1g.layout = pack;\n\n  prototype$1g.params = ['radius', 'size', 'padding'];\n\n  prototype$1g.fields = Output$1;\n\n  var Output$2 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n  /**\n   * Partition tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n  function Partition(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Partition.Definition = {\n    \"type\": \"Partition\",\n    \"metadata\": {\"tree\": true, \"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"sort\", \"type\": \"compare\" },\n      { \"name\": \"padding\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"round\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": Output$2.length, \"default\": Output$2 }\n    ]\n  };\n\n  var prototype$1h = inherits(Partition, HierarchyLayout);\n\n  prototype$1h.layout = partition$4;\n\n  prototype$1h.params = ['size', 'round', 'padding'];\n\n  prototype$1h.fields = Output$2;\n\n  /**\n    * Stratify a collection of tuples into a tree structure based on\n    * id and parent id fields.\n    * @constructor\n    * @param {object} params - The parameters for this operator.\n    * @param {function(object): *} params.key - Unique key field for each tuple.\n    * @param {function(object): *} params.parentKey - Field with key for parent tuple.\n    */\n  function Stratify(params) {\n    Transform.call(this, null, params);\n  }\n\n  Stratify.Definition = {\n    \"type\": \"Stratify\",\n    \"metadata\": {\"treesource\": true},\n    \"params\": [\n      { \"name\": \"key\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"parentKey\", \"type\": \"field\", \"required\": true  }\n    ]\n  };\n\n  var prototype$1i = inherits(Stratify, Transform);\n\n  prototype$1i.transform = function(_, pulse) {\n    if (!pulse.source) {\n      error('Stratify transform requires an upstream data source.');\n    }\n\n    var tree = this.value,\n        mod = _.modified(),\n        out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE),\n        run = !this.value\n           || mod\n           || pulse.changed(pulse.ADD_REM)\n           || pulse.modified(_.key.fields)\n           || pulse.modified(_.parentKey.fields);\n\n    // prevent upstream source pollution\n    out.source = out.source.slice();\n\n    if (run) {\n      if (out.source.length) {\n        tree = lookup$3(\n          stratify().id(_.key).parentId(_.parentKey)(out.source)\n          , _.key, truthy);\n      } else {\n        tree = lookup$3(stratify()([{}]), _.key, _.key);\n      }\n    }\n\n    out.source.root = this.value = tree;\n    return out;\n  };\n\n  var Layouts = {\n    tidy: tree,\n    cluster: cluster\n  };\n\n  var Output$3 = ['x', 'y', 'depth', 'children'];\n\n  /**\n   * Tree layout. Depending on the method parameter, performs either\n   * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function Tree(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Tree.Definition = {\n    \"type\": \"Tree\",\n    \"metadata\": {\"tree\": true, \"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"sort\", \"type\": \"compare\" },\n      { \"name\": \"method\", \"type\": \"enum\", \"default\": \"tidy\", \"values\": [\"tidy\", \"cluster\"] },\n      { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"nodeSize\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"separation\", \"type\": \"boolean\", \"default\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": Output$3.length, \"default\": Output$3 }\n    ]\n  };\n\n  var prototype$1j = inherits(Tree, HierarchyLayout);\n\n  /**\n   * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n   */\n  prototype$1j.layout = function(method) {\n    var m = method || 'tidy';\n    if (hasOwnProperty(Layouts, m)) return Layouts[m]();\n    else error('Unrecognized Tree layout method: ' + m);\n  };\n\n  prototype$1j.params = ['size', 'nodeSize'];\n\n  prototype$1j.fields = Output$3;\n\n  /**\n    * Generate tuples representing links between tree nodes.\n    * The resulting tuples will contain 'source' and 'target' fields,\n    * which point to parent and child node tuples, respectively.\n    * @constructor\n    * @param {object} params - The parameters for this operator.\n    */\n  function TreeLinks(params) {\n    Transform.call(this, [], params);\n  }\n\n  TreeLinks.Definition = {\n    \"type\": \"TreeLinks\",\n    \"metadata\": {\"tree\": true, \"generates\": true, \"changes\": true},\n    \"params\": []\n  };\n\n  var prototype$1k = inherits(TreeLinks, Transform);\n\n  prototype$1k.transform = function(_, pulse) {\n    var links = this.value,\n        tree = pulse.source && pulse.source.root,\n        out = pulse.fork(pulse.NO_SOURCE),\n        lut = {};\n\n    if (!tree) error('TreeLinks transform requires a tree data source.');\n\n    if (pulse.changed(pulse.ADD_REM)) {\n      // remove previous links\n      out.rem = links;\n\n      // build lookup table of valid tuples\n      pulse.visit(pulse.SOURCE, function(t) { lut[tupleid(t)] = 1; });\n\n      // generate links for all edges incident on valid tuples\n      tree.each(function(node) {\n        var t = node.data,\n            p = node.parent && node.parent.data;\n        if (p && lut[tupleid(t)] && lut[tupleid(p)]) {\n          out.add.push(ingest({source: p, target: t}));\n        }\n      });\n      this.value = out.add;\n    }\n\n    else if (pulse.changed(pulse.MOD)) {\n      // build lookup table of modified tuples\n      pulse.visit(pulse.MOD, function(t) { lut[tupleid(t)] = 1; });\n\n      // gather links incident on modified tuples\n      links.forEach(function(link) {\n        if (lut[tupleid(link.source)] || lut[tupleid(link.target)]) {\n          out.mod.push(link);\n        }\n      });\n    }\n\n    return out;\n  };\n\n  var Tiles = {\n    binary: treemapBinary,\n    dice: treemapDice,\n    slice: treemapSlice,\n    slicedice: treemapSliceDice,\n    squarify: treemapSquarify,\n    resquarify: treemapResquarify\n  };\n\n  var Output$4 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n  /**\n   * Treemap layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n  function Treemap(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Treemap.Definition = {\n    \"type\": \"Treemap\",\n    \"metadata\": {\"tree\": true, \"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"sort\", \"type\": \"compare\" },\n      { \"name\": \"method\", \"type\": \"enum\", \"default\": \"squarify\",\n        \"values\": [\"squarify\", \"resquarify\", \"binary\", \"dice\", \"slice\", \"slicedice\"] },\n      { \"name\": \"padding\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"paddingInner\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"paddingOuter\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"paddingTop\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"paddingRight\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"paddingBottom\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"paddingLeft\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"ratio\", \"type\": \"number\", \"default\": 1.618033988749895 },\n      { \"name\": \"round\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": Output$4.length, \"default\": Output$4 }\n    ]\n  };\n\n  var prototype$1l = inherits(Treemap, HierarchyLayout);\n\n  /**\n   * Treemap layout generator. Adds 'method' and 'ratio' parameters\n   * to configure the underlying tile method.\n   */\n  prototype$1l.layout = function() {\n    var x = treemap();\n    x.ratio = function(_) {\n      var t = x.tile();\n      if (t.ratio) x.tile(t.ratio(_));\n    };\n    x.method = function(_) {\n      if (hasOwnProperty(Tiles, _)) x.tile(Tiles[_]);\n      else error('Unrecognized Treemap layout method: ' + _);\n    };\n    return x;\n  };\n\n  prototype$1l.params = [\n    'method', 'ratio', 'size', 'round',\n    'padding', 'paddingInner', 'paddingOuter',\n    'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'\n  ];\n\n  prototype$1l.fields = Output$4;\n\n\n\n  var tree$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    nest: Nest,\n    pack: Pack,\n    partition: Partition,\n    stratify: Stratify,\n    tree: Tree,\n    treelinks: TreeLinks,\n    treemap: Treemap\n  });\n\n  function partition$5(data, groupby) {\n    var groups = [],\n        get = function(f) { return f(t); },\n        map, i, n, t, k, g;\n\n    // partition data points into stack groups\n    if (groupby == null) {\n      groups.push(data);\n    } else {\n      for (map={}, i=0, n=data.length; i<n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n        if (!g) {\n          map[k] = (g = []);\n          g.dims = k;\n          groups.push(g);\n        }\n        g.push(t);\n      }\n    }\n\n    return groups;\n  }\n\n  /**\n   * Compute locally-weighted regression fits for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.x - An accessor for the predictor data field.\n   * @param {function(object): *} params.y - An accessor for the predicted data field.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {number} [params.bandwidth=0.3] - The loess bandwidth.\n   */\n  function Loess(params) {\n    Transform.call(this, null, params);\n  }\n\n  Loess.Definition = {\n    \"type\": \"Loess\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"x\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"y\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"bandwidth\", \"type\": \"number\", \"default\": 0.3 },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true }\n    ]\n  };\n\n  var prototype$1m = inherits(Loess, Transform);\n\n  prototype$1m.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition$5(source, _.groupby),\n            names = (_.groupby || []).map(accessorName),\n            m = names.length,\n            as = _.as || [accessorName(_.x), accessorName(_.y)],\n            values = [];\n\n      groups.forEach(g => {\n        regressionLoess(g, _.x, _.y, _.bandwidth || 0.3).forEach(p => {\n          const t = {};\n          for (let i=0; i<m; ++i) {\n            t[names[i]] = g.dims[i];\n          }\n          t[as[0]] = p[0];\n          t[as[1]] = p[1];\n          values.push(ingest(t));\n        });\n      });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  };\n\n  const Methods$1 = {\n    linear: regressionLinear,\n    log:    regressionLog,\n    exp:    regressionExp,\n    pow:    regressionPow,\n    quad:   regressionQuad,\n    poly:   regressionPoly\n  };\n\n  function degreesOfFreedom(method, order) {\n    return method === 'poly' ? order : method === 'quad' ? 2 : 1;\n  }\n\n  /**\n   * Compute regression fits for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.x - An accessor for the predictor data field.\n   * @param {function(object): *} params.y - An accessor for the predicted data field.\n   * @param {string} [params.method='linear'] - The regression method to apply.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {Array<number>} [params.extent] - The domain extent over which to plot the regression line.\n   * @param {number} [params.order=3] - The polynomial order. Only applies to the 'poly' method.\n   */\n  function Regression(params) {\n    Transform.call(this, null, params);\n  }\n\n  Regression.Definition = {\n    \"type\": \"Regression\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"x\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"y\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"method\", \"type\": \"string\", \"default\": \"linear\", \"values\": Object.keys(Methods$1) },\n      { \"name\": \"order\", \"type\": \"number\", \"default\": 3 },\n      { \"name\": \"extent\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"params\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true }\n    ]\n  };\n\n  var prototype$1n = inherits(Regression, Transform);\n\n  prototype$1n.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition$5(source, _.groupby),\n            names = (_.groupby || []).map(accessorName),\n            method = _.method || 'linear',\n            order = _.order || 3,\n            dof = degreesOfFreedom(method, order),\n            as = _.as || [accessorName(_.x), accessorName(_.y)],\n            fit = Methods$1[method],\n            values = [];\n\n      let domain = _.extent;\n\n      if (!hasOwnProperty(Methods$1, method)) {\n        error('Invalid regression method: ' + method);\n      }\n\n      if (domain != null) {\n        if (method === 'log' && domain[0] <= 0) {\n          pulse.dataflow.warn('Ignoring extent with values <= 0 for log regression.');\n          domain = null;\n        }\n      }\n\n      groups.forEach(g => {\n        const n = g.length;\n        if (n <= dof) {\n          pulse.dataflow.warn('Skipping regression with more parameters than data points.');\n          return;\n        }\n\n        const model = fit(g, _.x, _.y, order);\n\n        if (_.params) {\n          // if parameter vectors requested return those\n          values.push(ingest({\n            keys: g.dims,\n            coef: model.coef,\n            rSquared: model.rSquared\n          }));\n          return;\n        }\n\n        const dom = domain || extent(g, _.x),\n              add = p => {\n                const t = {};\n                for (let i=0; i<names.length; ++i) {\n                  t[names[i]] = g.dims[i];\n                }\n                t[as[0]] = p[0];\n                t[as[1]] = p[1];\n                values.push(ingest(t));\n              };\n\n        if (method === 'linear') {\n          // for linear regression we only need the end points\n          dom.forEach(x => add([x, model.predict(x)]));\n        } else {\n          // otherwise return trend line sample points\n          sampleCurve(model.predict, dom, 25, 200).forEach(add);\n        }\n      });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  };\n\n\n\n  var reg = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    loess: Loess,\n    regression: Regression\n  });\n\n  const EPSILON$2 = Math.pow(2, -52);\n  const EDGE_STACK = new Uint32Array(512);\n\n  class Delaunator {\n\n      static from(points, getX = defaultGetX, getY = defaultGetY) {\n          const n = points.length;\n          const coords = new Float64Array(n * 2);\n\n          for (let i = 0; i < n; i++) {\n              const p = points[i];\n              coords[2 * i] = getX(p);\n              coords[2 * i + 1] = getY(p);\n          }\n\n          return new Delaunator(coords);\n      }\n\n      constructor(coords) {\n          const n = coords.length >> 1;\n          if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n          this.coords = coords;\n\n          // arrays that will store the triangulation graph\n          const maxTriangles = Math.max(2 * n - 5, 0);\n          this._triangles = new Uint32Array(maxTriangles * 3);\n          this._halfedges = new Int32Array(maxTriangles * 3);\n\n          // temporary arrays for tracking the edges of the advancing convex hull\n          this._hashSize = Math.ceil(Math.sqrt(n));\n          this._hullPrev = new Uint32Array(n); // edge to prev edge\n          this._hullNext = new Uint32Array(n); // edge to next edge\n          this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n          this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n          // temporary arrays for sorting points\n          this._ids = new Uint32Array(n);\n          this._dists = new Float64Array(n);\n\n          this.update();\n      }\n\n      update() {\n          const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n          const n = coords.length >> 1;\n\n          // populate an array of point indices; calculate input data bbox\n          let minX = Infinity;\n          let minY = Infinity;\n          let maxX = -Infinity;\n          let maxY = -Infinity;\n\n          for (let i = 0; i < n; i++) {\n              const x = coords[2 * i];\n              const y = coords[2 * i + 1];\n              if (x < minX) minX = x;\n              if (y < minY) minY = y;\n              if (x > maxX) maxX = x;\n              if (y > maxY) maxY = y;\n              this._ids[i] = i;\n          }\n          const cx = (minX + maxX) / 2;\n          const cy = (minY + maxY) / 2;\n\n          let minDist = Infinity;\n          let i0, i1, i2;\n\n          // pick a seed point close to the center\n          for (let i = 0; i < n; i++) {\n              const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n              if (d < minDist) {\n                  i0 = i;\n                  minDist = d;\n              }\n          }\n          const i0x = coords[2 * i0];\n          const i0y = coords[2 * i0 + 1];\n\n          minDist = Infinity;\n\n          // find the point closest to the seed\n          for (let i = 0; i < n; i++) {\n              if (i === i0) continue;\n              const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n              if (d < minDist && d > 0) {\n                  i1 = i;\n                  minDist = d;\n              }\n          }\n          let i1x = coords[2 * i1];\n          let i1y = coords[2 * i1 + 1];\n\n          let minRadius = Infinity;\n\n          // find the third point which forms the smallest circumcircle with the first two\n          for (let i = 0; i < n; i++) {\n              if (i === i0 || i === i1) continue;\n              const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n              if (r < minRadius) {\n                  i2 = i;\n                  minRadius = r;\n              }\n          }\n          let i2x = coords[2 * i2];\n          let i2y = coords[2 * i2 + 1];\n\n          if (minRadius === Infinity) {\n              // order collinear points by dx (or dy if all x are identical)\n              // and return the list as a hull\n              for (let i = 0; i < n; i++) {\n                  this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n              }\n              quicksort(this._ids, this._dists, 0, n - 1);\n              const hull = new Uint32Array(n);\n              let j = 0;\n              for (let i = 0, d0 = -Infinity; i < n; i++) {\n                  const id = this._ids[i];\n                  if (this._dists[id] > d0) {\n                      hull[j++] = id;\n                      d0 = this._dists[id];\n                  }\n              }\n              this.hull = hull.subarray(0, j);\n              this.triangles = new Uint32Array(0);\n              this.halfedges = new Uint32Array(0);\n              return;\n          }\n\n          // swap the order of the seed points for counter-clockwise orientation\n          if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n              const i = i1;\n              const x = i1x;\n              const y = i1y;\n              i1 = i2;\n              i1x = i2x;\n              i1y = i2y;\n              i2 = i;\n              i2x = x;\n              i2y = y;\n          }\n\n          const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n          this._cx = center.x;\n          this._cy = center.y;\n\n          for (let i = 0; i < n; i++) {\n              this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n          }\n\n          // sort the points by distance from the seed triangle circumcenter\n          quicksort(this._ids, this._dists, 0, n - 1);\n\n          // set up the seed triangle as the starting hull\n          this._hullStart = i0;\n          let hullSize = 3;\n\n          hullNext[i0] = hullPrev[i2] = i1;\n          hullNext[i1] = hullPrev[i0] = i2;\n          hullNext[i2] = hullPrev[i1] = i0;\n\n          hullTri[i0] = 0;\n          hullTri[i1] = 1;\n          hullTri[i2] = 2;\n\n          hullHash.fill(-1);\n          hullHash[this._hashKey(i0x, i0y)] = i0;\n          hullHash[this._hashKey(i1x, i1y)] = i1;\n          hullHash[this._hashKey(i2x, i2y)] = i2;\n\n          this.trianglesLen = 0;\n          this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n          for (let k = 0, xp, yp; k < this._ids.length; k++) {\n              const i = this._ids[k];\n              const x = coords[2 * i];\n              const y = coords[2 * i + 1];\n\n              // skip near-duplicate points\n              if (k > 0 && Math.abs(x - xp) <= EPSILON$2 && Math.abs(y - yp) <= EPSILON$2) continue;\n              xp = x;\n              yp = y;\n\n              // skip seed triangle points\n              if (i === i0 || i === i1 || i === i2) continue;\n\n              // find a visible edge on the convex hull using edge hash\n              let start = 0;\n              for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                  start = hullHash[(key + j) % this._hashSize];\n                  if (start !== -1 && start !== hullNext[start]) break;\n              }\n\n              start = hullPrev[start];\n              let e = start, q;\n              while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n                  e = q;\n                  if (e === start) {\n                      e = -1;\n                      break;\n                  }\n              }\n              if (e === -1) continue; // likely a near-duplicate point; skip it\n\n              // add the first triangle from the point\n              let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n              // recursively flip triangles from the point until they satisfy the Delaunay condition\n              hullTri[i] = this._legalize(t + 2);\n              hullTri[e] = t; // keep track of boundary triangles on the hull\n              hullSize++;\n\n              // walk forward through the hull, adding more triangles and flipping recursively\n              let n = hullNext[e];\n              while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {\n                  t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                  hullTri[i] = this._legalize(t + 2);\n                  hullNext[n] = n; // mark as removed\n                  hullSize--;\n                  n = q;\n              }\n\n              // walk backward from the other side, adding more triangles and flipping\n              if (e === start) {\n                  while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n                      t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                      this._legalize(t + 2);\n                      hullTri[q] = t;\n                      hullNext[e] = e; // mark as removed\n                      hullSize--;\n                      e = q;\n                  }\n              }\n\n              // update the hull indices\n              this._hullStart = hullPrev[i] = e;\n              hullNext[e] = hullPrev[n] = i;\n              hullNext[i] = n;\n\n              // save the two new edges in the hash table\n              hullHash[this._hashKey(x, y)] = i;\n              hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n          }\n\n          this.hull = new Uint32Array(hullSize);\n          for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n              this.hull[i] = e;\n              e = hullNext[e];\n          }\n\n          // trim typed triangle mesh arrays\n          this.triangles = this._triangles.subarray(0, this.trianglesLen);\n          this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n      }\n\n      _hashKey(x, y) {\n          return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n      }\n\n      _legalize(a) {\n          const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n          let i = 0;\n          let ar = 0;\n\n          // recursion eliminated with a fixed-size stack\n          while (true) {\n              const b = halfedges[a];\n\n              /* if the pair of triangles doesn't satisfy the Delaunay condition\n               * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n               * then do the same check/flip recursively for the new pair of triangles\n               *\n               *           pl                    pl\n               *          /||\\                  /  \\\n               *       al/ || \\bl            al/    \\a\n               *        /  ||  \\              /      \\\n               *       /  a||b  \\    flip    /___ar___\\\n               *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n               *        \\  ||  /              \\      /\n               *       ar\\ || /br             b\\    /br\n               *          \\||/                  \\  /\n               *           pr                    pr\n               */\n              const a0 = a - a % 3;\n              ar = a0 + (a + 2) % 3;\n\n              if (b === -1) { // convex hull edge\n                  if (i === 0) break;\n                  a = EDGE_STACK[--i];\n                  continue;\n              }\n\n              const b0 = b - b % 3;\n              const al = a0 + (a + 1) % 3;\n              const bl = b0 + (b + 2) % 3;\n\n              const p0 = triangles[ar];\n              const pr = triangles[a];\n              const pl = triangles[al];\n              const p1 = triangles[bl];\n\n              const illegal = inCircle(\n                  coords[2 * p0], coords[2 * p0 + 1],\n                  coords[2 * pr], coords[2 * pr + 1],\n                  coords[2 * pl], coords[2 * pl + 1],\n                  coords[2 * p1], coords[2 * p1 + 1]);\n\n              if (illegal) {\n                  triangles[a] = p1;\n                  triangles[b] = p0;\n\n                  const hbl = halfedges[bl];\n\n                  // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                  if (hbl === -1) {\n                      let e = this._hullStart;\n                      do {\n                          if (this._hullTri[e] === bl) {\n                              this._hullTri[e] = a;\n                              break;\n                          }\n                          e = this._hullPrev[e];\n                      } while (e !== this._hullStart);\n                  }\n                  this._link(a, hbl);\n                  this._link(b, halfedges[ar]);\n                  this._link(ar, bl);\n\n                  const br = b0 + (b + 1) % 3;\n\n                  // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                  if (i < EDGE_STACK.length) {\n                      EDGE_STACK[i++] = br;\n                  }\n              } else {\n                  if (i === 0) break;\n                  a = EDGE_STACK[--i];\n              }\n          }\n\n          return ar;\n      }\n\n      _link(a, b) {\n          this._halfedges[a] = b;\n          if (b !== -1) this._halfedges[b] = a;\n      }\n\n      // add a new triangle given vertex indices and adjacent half-edge ids\n      _addTriangle(i0, i1, i2, a, b, c) {\n          const t = this.trianglesLen;\n\n          this._triangles[t] = i0;\n          this._triangles[t + 1] = i1;\n          this._triangles[t + 2] = i2;\n\n          this._link(t, a);\n          this._link(t + 1, b);\n          this._link(t + 2, c);\n\n          this.trianglesLen += 3;\n\n          return t;\n      }\n  }\n\n  // monotonically increases with real angle, but doesn't need expensive trigonometry\n  function pseudoAngle(dx, dy) {\n      const p = dx / (Math.abs(dx) + Math.abs(dy));\n      return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n  }\n\n  function dist(ax, ay, bx, by) {\n      const dx = ax - bx;\n      const dy = ay - by;\n      return dx * dx + dy * dy;\n  }\n\n  // return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check\n  function orientIfSure(px, py, rx, ry, qx, qy) {\n      const l = (ry - py) * (qx - px);\n      const r = (rx - px) * (qy - py);\n      return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;\n  }\n\n  // a more robust orientation test that's stable in a given triangle (to fix robustness issues)\n  function orient(rx, ry, qx, qy, px, py) {\n      const sign = orientIfSure(px, py, rx, ry, qx, qy) ||\n      orientIfSure(rx, ry, qx, qy, px, py) ||\n      orientIfSure(qx, qy, px, py, rx, ry);\n      return sign < 0;\n  }\n\n  function inCircle(ax, ay, bx, by, cx, cy, px, py) {\n      const dx = ax - px;\n      const dy = ay - py;\n      const ex = bx - px;\n      const ey = by - py;\n      const fx = cx - px;\n      const fy = cy - py;\n\n      const ap = dx * dx + dy * dy;\n      const bp = ex * ex + ey * ey;\n      const cp = fx * fx + fy * fy;\n\n      return dx * (ey * cp - bp * fy) -\n             dy * (ex * cp - bp * fx) +\n             ap * (ex * fy - ey * fx) < 0;\n  }\n\n  function circumradius(ax, ay, bx, by, cx, cy) {\n      const dx = bx - ax;\n      const dy = by - ay;\n      const ex = cx - ax;\n      const ey = cy - ay;\n\n      const bl = dx * dx + dy * dy;\n      const cl = ex * ex + ey * ey;\n      const d = 0.5 / (dx * ey - dy * ex);\n\n      const x = (ey * bl - dy * cl) * d;\n      const y = (dx * cl - ex * bl) * d;\n\n      return x * x + y * y;\n  }\n\n  function circumcenter(ax, ay, bx, by, cx, cy) {\n      const dx = bx - ax;\n      const dy = by - ay;\n      const ex = cx - ax;\n      const ey = cy - ay;\n\n      const bl = dx * dx + dy * dy;\n      const cl = ex * ex + ey * ey;\n      const d = 0.5 / (dx * ey - dy * ex);\n\n      const x = ax + (ey * bl - dy * cl) * d;\n      const y = ay + (dx * cl - ex * bl) * d;\n\n      return {x, y};\n  }\n\n  function quicksort(ids, dists, left, right) {\n      if (right - left <= 20) {\n          for (let i = left + 1; i <= right; i++) {\n              const temp = ids[i];\n              const tempDist = dists[temp];\n              let j = i - 1;\n              while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n              ids[j + 1] = temp;\n          }\n      } else {\n          const median = (left + right) >> 1;\n          let i = left + 1;\n          let j = right;\n          swap$1(ids, median, i);\n          if (dists[ids[left]] > dists[ids[right]]) swap$1(ids, left, right);\n          if (dists[ids[i]] > dists[ids[right]]) swap$1(ids, i, right);\n          if (dists[ids[left]] > dists[ids[i]]) swap$1(ids, left, i);\n\n          const temp = ids[i];\n          const tempDist = dists[temp];\n          while (true) {\n              do i++; while (dists[ids[i]] < tempDist);\n              do j--; while (dists[ids[j]] > tempDist);\n              if (j < i) break;\n              swap$1(ids, i, j);\n          }\n          ids[left + 1] = ids[j];\n          ids[j] = temp;\n\n          if (right - i + 1 >= j - left) {\n              quicksort(ids, dists, i, right);\n              quicksort(ids, dists, left, j - 1);\n          } else {\n              quicksort(ids, dists, left, j - 1);\n              quicksort(ids, dists, i, right);\n          }\n      }\n  }\n\n  function swap$1(arr, i, j) {\n      const tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n  }\n\n  function defaultGetX(p) {\n      return p[0];\n  }\n  function defaultGetY(p) {\n      return p[1];\n  }\n\n  const epsilon$5 = 1e-6;\n\n  class Path$1 {\n    constructor() {\n      this._x0 = this._y0 = // start of current subpath\n      this._x1 = this._y1 = null; // end of current subpath\n      this._ = \"\";\n    }\n    moveTo(x, y) {\n      this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n    }\n    closePath() {\n      if (this._x1 !== null) {\n        this._x1 = this._x0, this._y1 = this._y0;\n        this._ += \"Z\";\n      }\n    }\n    lineTo(x, y) {\n      this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n    }\n    arc(x, y, r) {\n      x = +x, y = +y, r = +r;\n      const x0 = x + r;\n      const y0 = y;\n      if (r < 0) throw new Error(\"negative radius\");\n      if (this._x1 === null) this._ += `M${x0},${y0}`;\n      else if (Math.abs(this._x1 - x0) > epsilon$5 || Math.abs(this._y1 - y0) > epsilon$5) this._ += \"L\" + x0 + \",\" + y0;\n      if (!r) return;\n      this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n    }\n    rect(x, y, w, h) {\n      this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n    }\n    value() {\n      return this._ || null;\n    }\n  }\n\n  class Polygon {\n    constructor() {\n      this._ = [];\n    }\n    moveTo(x, y) {\n      this._.push([x, y]);\n    }\n    closePath() {\n      this._.push(this._[0].slice());\n    }\n    lineTo(x, y) {\n      this._.push([x, y]);\n    }\n    value() {\n      return this._.length ? this._ : null;\n    }\n  }\n\n  class Voronoi {\n    constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n      if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n      this.delaunay = delaunay;\n      this._circumcenters = new Float64Array(delaunay.points.length * 2);\n      this.vectors = new Float64Array(delaunay.points.length * 2);\n      this.xmax = xmax, this.xmin = xmin;\n      this.ymax = ymax, this.ymin = ymin;\n      this._init();\n    }\n    update() {\n      this.delaunay.update();\n      this._init();\n      return this;\n    }\n    _init() {\n      const {delaunay: {points, hull, triangles}, vectors} = this;\n\n      // Compute circumcenters.\n      const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n      for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n        const t1 = triangles[i] * 2;\n        const t2 = triangles[i + 1] * 2;\n        const t3 = triangles[i + 2] * 2;\n        const x1 = points[t1];\n        const y1 = points[t1 + 1];\n        const x2 = points[t2];\n        const y2 = points[t2 + 1];\n        const x3 = points[t3];\n        const y3 = points[t3 + 1];\n\n        const dx = x2 - x1;\n        const dy = y2 - y1;\n        const ex = x3 - x1;\n        const ey = y3 - y1;\n        const bl = dx * dx + dy * dy;\n        const cl = ex * ex + ey * ey;\n        const ab = (dx * ey - dy * ex) * 2;\n\n        if (!ab) {\n          // degenerate case (collinear diagram)\n          x = (x1 + x3) / 2 - 1e8 * ey;\n          y = (y1 + y3) / 2 + 1e8 * ex;\n        }\n        else if (Math.abs(ab) < 1e-8) {\n          // almost equal points (degenerate triangle)\n          x = (x1 + x3) / 2;\n          y = (y1 + y3) / 2;\n        } else {\n          const d = 1 / ab;\n          x = x1 + (ey * bl - dy * cl) * d;\n          y = y1 + (dx * cl - ex * bl) * d;\n        }\n        circumcenters[j] = x;\n        circumcenters[j + 1] = y;\n      }\n\n      // Compute exterior cell rays.\n      let h = hull[hull.length - 1];\n      let p0, p1 = h * 4;\n      let x0, x1 = points[2 * h];\n      let y0, y1 = points[2 * h + 1];\n      vectors.fill(0);\n      for (let i = 0; i < hull.length; ++i) {\n        h = hull[i];\n        p0 = p1, x0 = x1, y0 = y1;\n        p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n        vectors[p0 + 2] = vectors[p1] = y0 - y1;\n        vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n      }\n    }\n    render(context) {\n      const buffer = context == null ? context = new Path$1 : undefined;\n      const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n      if (hull.length <= 1) return null;\n      for (let i = 0, n = halfedges.length; i < n; ++i) {\n        const j = halfedges[i];\n        if (j < i) continue;\n        const ti = Math.floor(i / 3) * 2;\n        const tj = Math.floor(j / 3) * 2;\n        const xi = circumcenters[ti];\n        const yi = circumcenters[ti + 1];\n        const xj = circumcenters[tj];\n        const yj = circumcenters[tj + 1];\n        this._renderSegment(xi, yi, xj, yj, context);\n      }\n      let h0, h1 = hull[hull.length - 1];\n      for (let i = 0; i < hull.length; ++i) {\n        h0 = h1, h1 = hull[i];\n        const t = Math.floor(inedges[h1] / 3) * 2;\n        const x = circumcenters[t];\n        const y = circumcenters[t + 1];\n        const v = h0 * 4;\n        const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n        if (p) this._renderSegment(x, y, p[0], p[1], context);\n      }\n      return buffer && buffer.value();\n    }\n    renderBounds(context) {\n      const buffer = context == null ? context = new Path$1 : undefined;\n      context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n      return buffer && buffer.value();\n    }\n    renderCell(i, context) {\n      const buffer = context == null ? context = new Path$1 : undefined;\n      const points = this._clip(i);\n      if (points === null) return;\n      context.moveTo(points[0], points[1]);\n      let n = points.length;\n      while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\n      for (let i = 2; i < n; i += 2) {\n        if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n          context.lineTo(points[i], points[i + 1]);\n      }\n      context.closePath();\n      return buffer && buffer.value();\n    }\n    *cellPolygons() {\n      const {delaunay: {points}} = this;\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const cell = this.cellPolygon(i);\n        if (cell) yield cell;\n      }\n    }\n    cellPolygon(i) {\n      const polygon = new Polygon;\n      this.renderCell(i, polygon);\n      return polygon.value();\n    }\n    _renderSegment(x0, y0, x1, y1, context) {\n      let S;\n      const c0 = this._regioncode(x0, y0);\n      const c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        context.moveTo(x0, y0);\n        context.lineTo(x1, y1);\n      } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n        context.moveTo(S[0], S[1]);\n        context.lineTo(S[2], S[3]);\n      }\n    }\n    contains(i, x, y) {\n      if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n      return this.delaunay._step(i, x, y) === i;\n    }\n    *neighbors(i) {\n      const ci = this._clip(i);\n      if (ci) for (const j of this.delaunay.neighbors(i)) {\n        const cj = this._clip(j);\n        // find the common edge\n        if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n          for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n            if (ci[ai] == cj[aj]\n            && ci[ai + 1] == cj[aj + 1]\n            && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]\n            && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]\n            ) {\n              yield j;\n              break loop;\n            }\n          }\n        }\n      }\n    }\n    _cell(i) {\n      const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n      const e0 = inedges[i];\n      if (e0 === -1) return null; // coincident point\n      const points = [];\n      let e = e0;\n      do {\n        const t = Math.floor(e / 3);\n        points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n        e = e % 3 === 2 ? e - 2 : e + 1;\n        if (triangles[e] !== i) break; // bad triangulation\n        e = halfedges[e];\n      } while (e !== e0 && e !== -1);\n      return points;\n    }\n    _clip(i) {\n      // degenerate case (1 valid point: return the box)\n      if (i === 0 && this.delaunay.hull.length === 1) {\n        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n      }\n      const points = this._cell(i);\n      if (points === null) return null;\n      const {vectors: V} = this;\n      const v = i * 4;\n      return V[v] || V[v + 1]\n          ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n          : this._clipFinite(i, points);\n    }\n    _clipFinite(i, points) {\n      const n = points.length;\n      let P = null;\n      let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n      let c0, c1 = this._regioncode(x1, y1);\n      let e0, e1;\n      for (let j = 0; j < n; j += 2) {\n        x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n        c0 = c1, c1 = this._regioncode(x1, y1);\n        if (c0 === 0 && c1 === 0) {\n          e0 = e1, e1 = 0;\n          if (P) P.push(x1, y1);\n          else P = [x1, y1];\n        } else {\n          let S, sx0, sy0, sx1, sy1;\n          if (c0 === 0) {\n            if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n            [sx0, sy0, sx1, sy1] = S;\n          } else {\n            if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n            [sx1, sy1, sx0, sy0] = S;\n            e0 = e1, e1 = this._edgecode(sx0, sy0);\n            if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n            if (P) P.push(sx0, sy0);\n            else P = [sx0, sy0];\n          }\n          e0 = e1, e1 = this._edgecode(sx1, sy1);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx1, sy1);\n          else P = [sx1, sy1];\n        }\n      }\n      if (P) {\n        e0 = e1, e1 = this._edgecode(P[0], P[1]);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n      }\n      return P;\n    }\n    _clipSegment(x0, y0, x1, y1, c0, c1) {\n      while (true) {\n        if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n        if (c0 & c1) return null;\n        let x, y, c = c0 || c1;\n        if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n        else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n        else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n        else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n        if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n        else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n      }\n    }\n    _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n      let P = Array.from(points), p;\n      if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n      if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n      if (P = this._clipFinite(i, P)) {\n        for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n          c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n          if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n        }\n      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n        P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n      }\n      return P;\n    }\n    _edge(i, e0, e1, P, j) {\n      while (e0 !== e1) {\n        let x, y;\n        switch (e0) {\n          case 0b0101: e0 = 0b0100; continue; // top-left\n          case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n          case 0b0110: e0 = 0b0010; continue; // top-right\n          case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n          case 0b1010: e0 = 0b1000; continue; // bottom-right\n          case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n          case 0b1001: e0 = 0b0001; continue; // bottom-left\n          case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n        }\n        if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n          P.splice(j, 0, x, y), j += 2;\n        }\n      }\n      if (P.length > 4) {\n        for (let i = 0; i < P.length; i+= 2) {\n          const j = (i + 2) % P.length, k = (i + 4) % P.length;\n          if (P[i] === P[j] && P[j] === P[k]\n          || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])\n            P.splice(j, 2), i -= 2;\n        }\n      }\n      return j;\n    }\n    _project(x0, y0, vx, vy) {\n      let t = Infinity, c, x, y;\n      if (vy < 0) { // top\n        if (y0 <= this.ymin) return null;\n        if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n      } else if (vy > 0) { // bottom\n        if (y0 >= this.ymax) return null;\n        if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n      }\n      if (vx > 0) { // right\n        if (x0 >= this.xmax) return null;\n        if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n      } else if (vx < 0) { // left\n        if (x0 <= this.xmin) return null;\n        if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n      }\n      return [x, y];\n    }\n    _edgecode(x, y) {\n      return (x === this.xmin ? 0b0001\n          : x === this.xmax ? 0b0010 : 0b0000)\n          | (y === this.ymin ? 0b0100\n          : y === this.ymax ? 0b1000 : 0b0000);\n    }\n    _regioncode(x, y) {\n      return (x < this.xmin ? 0b0001\n          : x > this.xmax ? 0b0010 : 0b0000)\n          | (y < this.ymin ? 0b0100\n          : y > this.ymax ? 0b1000 : 0b0000);\n    }\n  }\n\n  const tau$3 = 2 * Math.PI;\n\n  function pointX(p) {\n    return p[0];\n  }\n\n  function pointY(p) {\n    return p[1];\n  }\n\n  // A triangulation is collinear if all its triangles have a non-null area\n  function collinear$1(d) {\n    const {triangles, coords} = d;\n    for (let i = 0; i < triangles.length; i += 3) {\n      const a = 2 * triangles[i],\n            b = 2 * triangles[i + 1],\n            c = 2 * triangles[i + 2],\n            cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\n                  - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n      if (cross > 1e-10) return false;\n    }\n    return true;\n  }\n\n  function jitter(x, y, r) {\n    return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n  }\n\n  class Delaunay {\n    static from(points, fx = pointX, fy = pointY, that) {\n      return new Delaunay(\"length\" in points\n          ? flatArray(points, fx, fy, that)\n          : Float64Array.from(flatIterable(points, fx, fy, that)));\n    }\n    constructor(points) {\n      this._delaunator = new Delaunator(points);\n      this.inedges = new Int32Array(points.length / 2);\n      this._hullIndex = new Int32Array(points.length / 2);\n      this.points = this._delaunator.coords;\n      this._init();\n    }\n    update() {\n      this._delaunator.update();\n      this._init();\n      return this;\n    }\n    _init() {\n      const d = this._delaunator, points = this.points;\n\n      // check for collinear\n      if (d.hull && d.hull.length > 2 && collinear$1(d)) {\n        this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n          .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n        const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n          bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n          r = 1e-8 * Math.sqrt((bounds[3] - bounds[1])**2 + (bounds[2] - bounds[0])**2);\n        for (let i = 0, n = points.length / 2; i < n; ++i) {\n          const p = jitter(points[2 * i], points[2 * i + 1], r);\n          points[2 * i] = p[0];\n          points[2 * i + 1] = p[1];\n        }\n        this._delaunator = new Delaunator(points);\n      } else {\n        delete this.collinear;\n      }\n\n      const halfedges = this.halfedges = this._delaunator.halfedges;\n      const hull = this.hull = this._delaunator.hull;\n      const triangles = this.triangles = this._delaunator.triangles;\n      const inedges = this.inedges.fill(-1);\n      const hullIndex = this._hullIndex.fill(-1);\n\n      // Compute an index from each point to an (arbitrary) incoming halfedge\n      // Used to give the first neighbor of each point; for this reason,\n      // on the hull we give priority to exterior halfedges\n      for (let e = 0, n = halfedges.length; e < n; ++e) {\n        const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n        if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n      }\n      for (let i = 0, n = hull.length; i < n; ++i) {\n        hullIndex[hull[i]] = i;\n      }\n\n      // degenerate case: 1 or 2 (distinct) points\n      if (hull.length <= 2 && hull.length > 0) {\n        this.triangles = new Int32Array(3).fill(-1);\n        this.halfedges = new Int32Array(3).fill(-1);\n        this.triangles[0] = hull[0];\n        this.triangles[1] = hull[1];\n        this.triangles[2] = hull[1];\n        inedges[hull[0]] = 1;\n        if (hull.length === 2) inedges[hull[1]] = 0;\n      }\n    }\n    voronoi(bounds) {\n      return new Voronoi(this, bounds);\n    }\n    *neighbors(i) {\n      const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;\n\n      // degenerate case with several collinear points\n      if (collinear) {\n        const l = collinear.indexOf(i);\n        if (l > 0) yield collinear[l - 1];\n        if (l < collinear.length - 1) yield collinear[l + 1];\n        return;\n      }\n\n      const e0 = inedges[i];\n      if (e0 === -1) return; // coincident point\n      let e = e0, p0 = -1;\n      do {\n        yield p0 = triangles[e];\n        e = e % 3 === 2 ? e - 2 : e + 1;\n        if (triangles[e] !== i) return; // bad triangulation\n        e = halfedges[e];\n        if (e === -1) {\n          const p = hull[(_hullIndex[i] + 1) % hull.length];\n          if (p !== p0) yield p;\n          return;\n        }\n      } while (e !== e0);\n    }\n    find(x, y, i = 0) {\n      if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n      const i0 = i;\n      let c;\n      while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n      return c;\n    }\n    _step(i, x, y) {\n      const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n      if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n      let c = i;\n      let dc = (x - points[i * 2]) ** 2 + (y - points[i * 2 + 1]) ** 2;\n      const e0 = inedges[i];\n      let e = e0;\n      do {\n        let t = triangles[e];\n        const dt = (x - points[t * 2]) ** 2 + (y - points[t * 2 + 1]) ** 2;\n        if (dt < dc) dc = dt, c = t;\n        e = e % 3 === 2 ? e - 2 : e + 1;\n        if (triangles[e] !== i) break; // bad triangulation\n        e = halfedges[e];\n        if (e === -1) {\n          e = hull[(_hullIndex[i] + 1) % hull.length];\n          if (e !== t) {\n            if ((x - points[e * 2]) ** 2 + (y - points[e * 2 + 1]) ** 2 < dc) return e;\n          }\n          break;\n        }\n      } while (e !== e0);\n      return c;\n    }\n    render(context) {\n      const buffer = context == null ? context = new Path$1 : undefined;\n      const {points, halfedges, triangles} = this;\n      for (let i = 0, n = halfedges.length; i < n; ++i) {\n        const j = halfedges[i];\n        if (j < i) continue;\n        const ti = triangles[i] * 2;\n        const tj = triangles[j] * 2;\n        context.moveTo(points[ti], points[ti + 1]);\n        context.lineTo(points[tj], points[tj + 1]);\n      }\n      this.renderHull(context);\n      return buffer && buffer.value();\n    }\n    renderPoints(context, r = 2) {\n      const buffer = context == null ? context = new Path$1 : undefined;\n      const {points} = this;\n      for (let i = 0, n = points.length; i < n; i += 2) {\n        const x = points[i], y = points[i + 1];\n        context.moveTo(x + r, y);\n        context.arc(x, y, r, 0, tau$3);\n      }\n      return buffer && buffer.value();\n    }\n    renderHull(context) {\n      const buffer = context == null ? context = new Path$1 : undefined;\n      const {hull, points} = this;\n      const h = hull[0] * 2, n = hull.length;\n      context.moveTo(points[h], points[h + 1]);\n      for (let i = 1; i < n; ++i) {\n        const h = 2 * hull[i];\n        context.lineTo(points[h], points[h + 1]);\n      }\n      context.closePath();\n      return buffer && buffer.value();\n    }\n    hullPolygon() {\n      const polygon = new Polygon;\n      this.renderHull(polygon);\n      return polygon.value();\n    }\n    renderTriangle(i, context) {\n      const buffer = context == null ? context = new Path$1 : undefined;\n      const {points, triangles} = this;\n      const t0 = triangles[i *= 3] * 2;\n      const t1 = triangles[i + 1] * 2;\n      const t2 = triangles[i + 2] * 2;\n      context.moveTo(points[t0], points[t0 + 1]);\n      context.lineTo(points[t1], points[t1 + 1]);\n      context.lineTo(points[t2], points[t2 + 1]);\n      context.closePath();\n      return buffer && buffer.value();\n    }\n    *trianglePolygons() {\n      const {triangles} = this;\n      for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n        yield this.trianglePolygon(i);\n      }\n    }\n    trianglePolygon(i) {\n      const polygon = new Polygon;\n      this.renderTriangle(i, polygon);\n      return polygon.value();\n    }\n  }\n\n  function flatArray(points, fx, fy, that) {\n    const n = points.length;\n    const array = new Float64Array(n * 2);\n    for (let i = 0; i < n; ++i) {\n      const p = points[i];\n      array[i * 2] = fx.call(that, p, i, points);\n      array[i * 2 + 1] = fy.call(that, p, i, points);\n    }\n    return array;\n  }\n\n  function* flatIterable(points, fx, fy, that) {\n    let i = 0;\n    for (const p of points) {\n      yield fx.call(that, p, i, points);\n      yield fy.call(that, p, i, points);\n      ++i;\n    }\n  }\n\n  function Voronoi$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  Voronoi$1.Definition = {\n    \"type\": \"Voronoi\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"x\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"y\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"extent\", \"type\": \"array\", \"array\": true, \"length\": 2,\n        \"default\": [[-1e5, -1e5], [1e5, 1e5]],\n        \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} },\n      { \"name\": \"as\", \"type\": \"string\", \"default\": \"path\" }\n    ]\n  };\n\n  const prototype$1o = inherits(Voronoi$1, Transform);\n\n  const defaultExtent = [-1e5, -1e5, 1e5, 1e5];\n\n  prototype$1o.transform = function(_, pulse) {\n    const as = _.as || 'path',\n          data = pulse.source;\n\n    // nothing to do if no data\n    if (!data || !data.length) return pulse;\n\n    // configure and construct voronoi diagram\n    let s = _.size;\n    s = s ? [0, 0, s[0], s[1]]\n      : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]]\n      : defaultExtent;\n\n    const voronoi = this.value = Delaunay.from(data, _.x, _.y).voronoi(s);\n\n    // map polygons to paths\n    for (let i=0, n=data.length; i<n; ++i) {\n      const polygon = voronoi.cellPolygon(i);\n      data[i][as] = polygon ? toPathString(polygon) : null;\n    }\n\n    return pulse.reflow(_.modified()).modifies(as);\n  };\n\n  // suppress duplicated end point vertices\n  function toPathString(p) {\n    const x = p[0][0],\n          y = p[0][1];\n\n    let n = p.length - 1;\n    for (; p[n][0] === x && p[n][1] === y; --n);\n\n    return 'M' + p.slice(0, n + 1).join('L') + 'Z';\n  }\n\n\n\n  var voronoi = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    voronoi: Voronoi$1\n  });\n\n  /*\n  Copyright (c) 2013, Jason Davies.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice, this\n      list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n\n    * The name Jason Davies may not be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL JASON DAVIES BE LIABLE FOR ANY DIRECT, INDIRECT,\n  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n\n  // Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/\n  // Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf\n\n  var cloudRadians = Math.PI / 180,\n      cw = 1 << 11 >> 5,\n      ch = 1 << 11;\n\n  function cloud() {\n    var size = [256, 256],\n        text,\n        font,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        rotate,\n        padding,\n        spiral = archimedeanSpiral,\n        words = [],\n        random = Math.random,\n        cloud = {};\n\n    cloud.layout = function() {\n      var contextAndRatio = getContext(domCanvas()),\n          board = zeroArray((size[0] >> 5) * size[1]),\n          bounds = null,\n          n = words.length,\n          i = -1,\n          tags = [],\n          data = words.map(function(d) {\n            return {\n              text: text(d),\n              font: font(d),\n              style: fontStyle(d),\n              weight: fontWeight(d),\n              rotate: rotate(d),\n              size: ~~(fontSize(d) + 1e-14),\n              padding: padding(d),\n              xoff: 0,\n              yoff: 0,\n              x1: 0,\n              y1: 0,\n              x0: 0,\n              y0: 0,\n              hasText: false,\n              sprite: null,\n              datum: d\n            };\n          }).sort(function(a, b) { return b.size - a.size; });\n\n      while (++i < n) {\n        var d = data[i];\n        d.x = (size[0] * (random() + .5)) >> 1;\n        d.y = (size[1] * (random() + .5)) >> 1;\n        cloudSprite(contextAndRatio, d, data, i);\n        if (d.hasText && place(board, d, bounds)) {\n          tags.push(d);\n          if (bounds) cloudBounds(bounds, d);\n          else bounds = [{x: d.x + d.x0, y: d.y + d.y0}, {x: d.x + d.x1, y: d.y + d.y1}];\n          // Temporary hack\n          d.x -= size[0] >> 1;\n          d.y -= size[1] >> 1;\n        }\n      }\n\n      return tags;\n    };\n\n    function getContext(canvas) {\n      canvas.width = canvas.height = 1;\n      var ratio = Math.sqrt(canvas.getContext(\"2d\").getImageData(0, 0, 1, 1).data.length >> 2);\n      canvas.width = (cw << 5) / ratio;\n      canvas.height = ch / ratio;\n\n      var context = canvas.getContext(\"2d\");\n      context.fillStyle = context.strokeStyle = \"red\";\n      context.textAlign = \"center\";\n\n      return {context: context, ratio: ratio};\n    }\n\n    function place(board, tag, bounds) {\n      var startX = tag.x,\n          startY = tag.y,\n          maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),\n          s = spiral(size),\n          dt = random() < .5 ? 1 : -1,\n          t = -dt,\n          dxdy,\n          dx,\n          dy;\n\n      while (dxdy = s(t += dt)) {\n        dx = ~~dxdy[0];\n        dy = ~~dxdy[1];\n\n        if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;\n\n        tag.x = startX + dx;\n        tag.y = startY + dy;\n\n        if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 ||\n            tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;\n        // TODO only check for collisions within current bounds.\n        if (!bounds || !cloudCollide(tag, board, size[0])) {\n          if (!bounds || collideRects(tag, bounds)) {\n            var sprite = tag.sprite,\n                w = tag.width >> 5,\n                sw = size[0] >> 5,\n                lx = tag.x - (w << 4),\n                sx = lx & 0x7f,\n                msx = 32 - sx,\n                h = tag.y1 - tag.y0,\n                x = (tag.y + tag.y0) * sw + (lx >> 5),\n                last;\n            for (var j = 0; j < h; j++) {\n              last = 0;\n              for (var i = 0; i <= w; i++) {\n                board[x + i] |= (last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);\n              }\n              x += sw;\n            }\n            tag.sprite = null;\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    cloud.words = function(_) {\n      if (arguments.length) {\n        words = _;\n        return cloud;\n      } else {\n        return words;\n      }\n    };\n\n    cloud.size = function(_) {\n      if (arguments.length) {\n        size = [+_[0], +_[1]];\n        return cloud;\n      } else {\n        return size;\n      }\n    };\n\n    cloud.font = function(_) {\n      if (arguments.length) {\n        font = functor(_);\n        return cloud;\n      } else {\n        return font;\n      }\n    };\n\n    cloud.fontStyle = function(_) {\n      if (arguments.length) {\n        fontStyle = functor(_);\n        return cloud;\n      } else {\n        return fontStyle;\n      }\n    };\n\n    cloud.fontWeight = function(_) {\n      if (arguments.length) {\n        fontWeight = functor(_);\n        return cloud;\n      } else {\n        return fontWeight;\n      }\n    };\n\n    cloud.rotate = function(_) {\n      if (arguments.length) {\n        rotate = functor(_);\n        return cloud;\n      } else {\n        return rotate;\n      }\n    };\n\n    cloud.text = function(_) {\n      if (arguments.length) {\n        text = functor(_);\n        return cloud;\n      } else {\n        return text;\n      }\n    };\n\n    cloud.spiral = function(_) {\n      if (arguments.length) {\n        spiral = spirals[_] || _;\n        return cloud;\n      } else {\n        return spiral;\n      }\n    };\n\n    cloud.fontSize = function(_) {\n      if (arguments.length) {\n        fontSize = functor(_);\n        return cloud;\n      } else {\n        return fontSize;\n      }\n    };\n\n    cloud.padding = function(_) {\n      if (arguments.length) {\n        padding = functor(_);\n        return cloud;\n      } else {\n        return padding;\n      }\n    };\n\n    cloud.random = function(_) {\n      if (arguments.length) {\n        random = _;\n        return cloud;\n      } else {\n        return random;\n      }\n    };\n\n    return cloud;\n  }\n\n  // Fetches a monochrome sprite bitmap for the specified text.\n  // Load in batches for speed.\n  function cloudSprite(contextAndRatio, d, data, di) {\n    if (d.sprite) return;\n    var c = contextAndRatio.context,\n        ratio = contextAndRatio.ratio;\n\n    c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);\n    var x = 0,\n        y = 0,\n        maxh = 0,\n        n = data.length,\n        w, w32, h, i, j;\n    --di;\n    while (++di < n) {\n      d = data[di];\n      c.save();\n      c.font = d.style + \" \" + d.weight + \" \" + ~~((d.size + 1) / ratio) + \"px \" + d.font;\n      w = c.measureText(d.text + \"m\").width * ratio;\n      h = d.size << 1;\n      if (d.rotate) {\n        var sr = Math.sin(d.rotate * cloudRadians),\n            cr = Math.cos(d.rotate * cloudRadians),\n            wcr = w * cr,\n            wsr = w * sr,\n            hcr = h * cr,\n            hsr = h * sr;\n        w = (Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f) >> 5 << 5;\n        h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));\n      } else {\n        w = (w + 0x1f) >> 5 << 5;\n      }\n      if (h > maxh) maxh = h;\n      if (x + w >= (cw << 5)) {\n        x = 0;\n        y += maxh;\n        maxh = 0;\n      }\n      if (y + h >= ch) break;\n      c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);\n      if (d.rotate) c.rotate(d.rotate * cloudRadians);\n      c.fillText(d.text, 0, 0);\n      if (d.padding) {\n        c.lineWidth = 2 * d.padding;\n        c.strokeText(d.text, 0, 0);\n      }\n      c.restore();\n      d.width = w;\n      d.height = h;\n      d.xoff = x;\n      d.yoff = y;\n      d.x1 = w >> 1;\n      d.y1 = h >> 1;\n      d.x0 = -d.x1;\n      d.y0 = -d.y1;\n      d.hasText = true;\n      x += w;\n    }\n    var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,\n        sprite = [];\n    while (--di >= 0) {\n      d = data[di];\n      if (!d.hasText) continue;\n      w = d.width;\n      w32 = w >> 5;\n      h = d.y1 - d.y0;\n      // Zero the buffer\n      for (i = 0; i < h * w32; i++) sprite[i] = 0;\n      x = d.xoff;\n      if (x == null) return;\n      y = d.yoff;\n      var seen = 0,\n          seenRow = -1;\n      for (j = 0; j < h; j++) {\n        for (i = 0; i < w; i++) {\n          var k = w32 * j + (i >> 5),\n              m = pixels[((y + j) * (cw << 5) + (x + i)) << 2] ? 1 << (31 - (i % 32)) : 0;\n          sprite[k] |= m;\n          seen |= m;\n        }\n        if (seen) seenRow = j;\n        else {\n          d.y0++;\n          h--;\n          j--;\n          y++;\n        }\n      }\n      d.y1 = d.y0 + seenRow;\n      d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);\n    }\n  }\n\n  // Use mask-based collision detection.\n  function cloudCollide(tag, board, sw) {\n    sw >>= 5;\n    var sprite = tag.sprite,\n        w = tag.width >> 5,\n        lx = tag.x - (w << 4),\n        sx = lx & 0x7f,\n        msx = 32 - sx,\n        h = tag.y1 - tag.y0,\n        x = (tag.y + tag.y0) * sw + (lx >> 5),\n        last;\n    for (var j = 0; j < h; j++) {\n      last = 0;\n      for (var i = 0; i <= w; i++) {\n        if (((last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0))\n            & board[x + i]) return true;\n      }\n      x += sw;\n    }\n    return false;\n  }\n\n  function cloudBounds(bounds, d) {\n    var b0 = bounds[0],\n        b1 = bounds[1];\n    if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;\n    if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;\n    if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;\n    if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;\n  }\n\n  function collideRects(a, b) {\n    return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;\n  }\n\n  function archimedeanSpiral(size) {\n    var e = size[0] / size[1];\n    return function(t) {\n      return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];\n    };\n  }\n\n  function rectangularSpiral(size) {\n    var dy = 4,\n        dx = dy * size[0] / size[1],\n        x = 0,\n        y = 0;\n    return function(t) {\n      var sign = t < 0 ? -1 : 1;\n      // See triangular numbers: T_n = n * (n + 1) / 2.\n      switch ((Math.sqrt(1 + 4 * sign * t) - sign) & 3) {\n        case 0:  x += dx; break;\n        case 1:  y += dy; break;\n        case 2:  x -= dx; break;\n        default: y -= dy; break;\n      }\n      return [x, y];\n    };\n  }\n\n  // TODO reuse arrays?\n  function zeroArray(n) {\n    var a = [],\n        i = -1;\n    while (++i < n) a[i] = 0;\n    return a;\n  }\n\n  function functor(d) {\n    return typeof d === \"function\" ? d : function() { return d; };\n  }\n\n  var spirals = {\n    archimedean: archimedeanSpiral,\n    rectangular: rectangularSpiral\n  };\n\n  var Output$5 = ['x', 'y', 'font', 'fontSize', 'fontStyle', 'fontWeight', 'angle'];\n\n  var Params$1 = ['text', 'font', 'rotate', 'fontSize', 'fontStyle', 'fontWeight'];\n\n  function Wordcloud(params) {\n    Transform.call(this, cloud(), params);\n  }\n\n  Wordcloud.Definition = {\n    \"type\": \"Wordcloud\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"font\", \"type\": \"string\", \"expr\": true, \"default\": \"sans-serif\" },\n      { \"name\": \"fontStyle\", \"type\": \"string\", \"expr\": true, \"default\": \"normal\" },\n      { \"name\": \"fontWeight\", \"type\": \"string\", \"expr\": true, \"default\": \"normal\" },\n      { \"name\": \"fontSize\", \"type\": \"number\", \"expr\": true, \"default\": 14 },\n      { \"name\": \"fontSizeRange\", \"type\": \"number\", \"array\": \"nullable\", \"default\": [10, 50] },\n      { \"name\": \"rotate\", \"type\": \"number\", \"expr\": true, \"default\": 0 },\n      { \"name\": \"text\", \"type\": \"field\" },\n      { \"name\": \"spiral\", \"type\": \"string\", \"values\": [\"archimedean\", \"rectangular\"] },\n      { \"name\": \"padding\", \"type\": \"number\", \"expr\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 7, \"default\": Output$5 }\n    ]\n  };\n\n  var prototype$1p = inherits(Wordcloud, Transform);\n\n  prototype$1p.transform = function(_, pulse) {\n    if (_.size && !(_.size[0] && _.size[1])) {\n      error('Wordcloud size dimensions must be non-zero.');\n    }\n\n    function modp(param) {\n      var p = _[param];\n      return isFunction(p) && pulse.modified(p.fields);\n    }\n\n    var mod = _.modified();\n    if (!(mod || pulse.changed(pulse.ADD_REM) || Params$1.some(modp))) return;\n\n    var data = pulse.materialize(pulse.SOURCE).source,\n        layout = this.value,\n        as = _.as || Output$5,\n        fontSize = _.fontSize || 14,\n        range;\n\n    isFunction(fontSize)\n      ? (range = _.fontSizeRange)\n      : (fontSize = constant(fontSize));\n\n    // create font size scaling function as needed\n    if (range) {\n      var fsize = fontSize,\n          sizeScale = scale$2('sqrt')()\n            .domain(extent(data, fsize))\n            .range(range);\n      fontSize = function(x) { return sizeScale(fsize(x)); };\n    }\n\n    data.forEach(function(t) {\n      t[as[0]] = NaN;\n      t[as[1]] = NaN;\n      t[as[3]] = 0;\n    });\n\n    // configure layout\n    var words = layout\n      .words(data)\n      .text(_.text)\n      .size(_.size || [500, 500])\n      .padding(_.padding || 1)\n      .spiral(_.spiral || 'archimedean')\n      .rotate(_.rotate || 0)\n      .font(_.font || 'sans-serif')\n      .fontStyle(_.fontStyle || 'normal')\n      .fontWeight(_.fontWeight || 'normal')\n      .fontSize(fontSize)\n      .random(exports.random)\n      .layout();\n\n    var size = layout.size(),\n        dx = size[0] >> 1,\n        dy = size[1] >> 1,\n        i = 0,\n        n = words.length,\n        w, t;\n\n    for (; i<n; ++i) {\n      w = words[i];\n      t = w.datum;\n      t[as[0]] = w.x + dx;\n      t[as[1]] = w.y + dy;\n      t[as[2]] = w.font;\n      t[as[3]] = w.size;\n      t[as[4]] = w.style;\n      t[as[5]] = w.weight;\n      t[as[6]] = w.rotate;\n    }\n\n    return pulse.reflow(mod).modifies(as);\n  };\n\n\n\n  var wordcloud = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    wordcloud: Wordcloud\n  });\n\n  function array8(n) { return new Uint8Array(n); }\n\n  function array16(n) { return new Uint16Array(n); }\n\n  function array32(n) { return new Uint32Array(n); }\n\n  /**\n   * Maintains CrossFilter state.\n   */\n  function Bitmaps() {\n\n    var width = 8,\n        data = [],\n        seen = array32(0),\n        curr = array$2(0, width),\n        prev = array$2(0, width);\n\n    return {\n\n      data: function() { return data; },\n\n      seen: function() {\n        return (seen = lengthen(seen, data.length));\n      },\n\n      add: function(array) {\n        for (var i=0, j=data.length, n=array.length, t; i<n; ++i) {\n          t = array[i];\n          t._index = j++;\n          data.push(t);\n        }\n      },\n\n      remove: function(num, map) { // map: index -> boolean (true => remove)\n        var n = data.length,\n            copy = Array(n - num),\n            reindex = data, // reuse old data array for index map\n            t, i, j;\n\n        // seek forward to first removal\n        for (i=0; !map[i] && i<n; ++i) {\n          copy[i] = data[i];\n          reindex[i] = i;\n        }\n\n        // condense arrays\n        for (j=i; i<n; ++i) {\n          t = data[i];\n          if (!map[i]) {\n            reindex[i] = j;\n            curr[j] = curr[i];\n            prev[j] = prev[i];\n            copy[j] = t;\n            t._index = j++;\n          } else {\n            reindex[i] = -1;\n          }\n          curr[i] = 0; // clear unused bits\n        }\n\n        data = copy;\n        return reindex;\n      },\n\n      size: function() { return data.length; },\n\n      curr: function() { return curr; },\n\n      prev: function() { return prev; },\n\n      reset: function(k) { prev[k] = curr[k]; },\n\n      all: function() {\n        return width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff;\n      },\n\n      set: function(k, one) { curr[k] |= one; },\n\n      clear: function(k, one) { curr[k] &= ~one; },\n\n      resize: function(n, m) {\n        var k = curr.length;\n        if (n > k || m > width) {\n          width = Math.max(m, width);\n          curr = array$2(n, width, curr);\n          prev = array$2(n, width);\n        }\n      }\n    };\n  }\n\n  function lengthen(array, length, copy) {\n    if (array.length >= length) return array;\n    copy = copy || new array.constructor(length);\n    copy.set(array);\n    return copy;\n  }\n\n  function array$2(n, m, array) {\n    var copy = (m < 0x101 ? array8 : m < 0x10001 ? array16 : array32)(n);\n    if (array) copy.set(array);\n    return copy;\n  }\n\n  function Dimension(index, i, query) {\n    var bit = (1 << i);\n\n    return {\n      one:     bit,\n      zero:    ~bit,\n      range:   query.slice(),\n      bisect:  index.bisect,\n      index:   index.index,\n      size:    index.size,\n\n      onAdd: function(added, curr) {\n        var dim = this,\n            range = dim.bisect(dim.range, added.value),\n            idx = added.index,\n            lo = range[0],\n            hi = range[1],\n            n1 = idx.length, i;\n\n        for (i=0;  i<lo; ++i) curr[idx[i]] |= bit;\n        for (i=hi; i<n1; ++i) curr[idx[i]] |= bit;\n        return dim;\n      }\n    };\n  }\n\n  /**\n   * Maintains a list of values, sorted by key.\n   */\n  function SortedIndex() {\n    var index = array32(0),\n        value = [],\n        size = 0;\n\n    function insert(key, data, base) {\n      if (!data.length) return [];\n\n      var n0 = size,\n          n1 = data.length,\n          addv = Array(n1),\n          addi = array32(n1),\n          oldv, oldi, i;\n\n      for (i=0; i<n1; ++i) {\n        addv[i] = key(data[i]);\n        addi[i] = i;\n      }\n      addv = sort(addv, addi);\n\n      if (n0) {\n        oldv = value;\n        oldi = index;\n        value = Array(n0 + n1);\n        index = array32(n0 + n1);\n        merge$2(base, oldv, oldi, n0, addv, addi, n1, value, index);\n      } else {\n        if (base > 0) for (i=0; i<n1; ++i) {\n          addi[i] += base;\n        }\n        value = addv;\n        index = addi;\n      }\n      size = n0 + n1;\n\n      return {index: addi, value: addv};\n    }\n\n    function remove(num, map) {\n      // map: index -> remove\n      var n = size,\n          idx, i, j;\n\n      // seek forward to first removal\n      for (i=0; !map[index[i]] && i<n; ++i);\n\n      // condense index and value arrays\n      for (j=i; i<n; ++i) {\n        if (!map[idx=index[i]]) {\n          index[j] = idx;\n          value[j] = value[i];\n          ++j;\n        }\n      }\n\n      size = n - num;\n    }\n\n    function reindex(map) {\n      for (var i=0, n=size; i<n; ++i) {\n        index[i] = map[index[i]];\n      }\n    }\n\n    function bisect(range, array) {\n      var n;\n      if (array) {\n        n = array.length;\n      } else {\n        array = value;\n        n = size;\n      }\n      return [\n        bisectLeft(array, range[0], 0, n),\n        bisectRight(array, range[1], 0, n)\n      ];\n    }\n\n    return {\n      insert:  insert,\n      remove:  remove,\n      bisect:  bisect,\n      reindex: reindex,\n      index:   function() { return index; },\n      size:    function() { return size; }\n    };\n  }\n\n  function sort(values, index) {\n    values.sort.call(index, function(a, b) {\n      var x = values[a],\n          y = values[b];\n      return x < y ? -1 : x > y ? 1 : 0;\n    });\n    return permute(values, index);\n  }\n\n  function merge$2(base, value0, index0, n0, value1, index1, n1, value, index) {\n    var i0 = 0, i1 = 0, i;\n\n    for (i=0; i0 < n0 && i1 < n1; ++i) {\n      if (value0[i0] < value1[i1]) {\n        value[i] = value0[i0];\n        index[i] = index0[i0++];\n      } else {\n        value[i] = value1[i1];\n        index[i] = index1[i1++] + base;\n      }\n    }\n\n    for (; i0 < n0; ++i0, ++i) {\n      value[i] = value0[i0];\n      index[i] = index0[i0];\n    }\n\n    for (; i1 < n1; ++i1, ++i) {\n      value[i] = value1[i1];\n      index[i] = index1[i1] + base;\n    }\n  }\n\n  /**\n   * An indexed multi-dimensional filter.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.\n   * @param {Array} params.query - An array of per-dimension range queries.\n   */\n  function CrossFilter(params) {\n    Transform.call(this, Bitmaps(), params);\n    this._indices = null;\n    this._dims = null;\n  }\n\n  CrossFilter.Definition = {\n    \"type\": \"CrossFilter\",\n    \"metadata\": {},\n    \"params\": [\n      { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true },\n      { \"name\": \"query\", \"type\": \"array\", \"array\": true, \"required\": true,\n        \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} }\n    ]\n  };\n\n  var prototype$1q = inherits(CrossFilter, Transform);\n\n  prototype$1q.transform = function(_, pulse) {\n    if (!this._dims) {\n      return this.init(_, pulse);\n    } else {\n      var init = _.modified('fields')\n            || _.fields.some(function(f) { return pulse.modified(f.fields); });\n\n      return init\n        ? this.reinit(_, pulse)\n        : this.eval(_, pulse);\n    }\n  };\n\n  prototype$1q.init = function(_, pulse) {\n    var fields = _.fields,\n        query = _.query,\n        indices = this._indices = {},\n        dims = this._dims = [],\n        m = query.length,\n        i = 0, key, index;\n\n    // instantiate indices and dimensions\n    for (; i<m; ++i) {\n      key = fields[i].fname;\n      index = indices[key] || (indices[key] = SortedIndex());\n      dims.push(Dimension(index, i, query[i]));\n    }\n\n    return this.eval(_, pulse);\n  };\n\n  prototype$1q.reinit = function(_, pulse) {\n    var output = pulse.materialize().fork(),\n        fields = _.fields,\n        query = _.query,\n        indices = this._indices,\n        dims = this._dims,\n        bits = this.value,\n        curr = bits.curr(),\n        prev = bits.prev(),\n        all = bits.all(),\n        out = (output.rem = output.add),\n        mod = output.mod,\n        m = query.length,\n        adds = {}, add, index, key,\n        mods, remMap, modMap, i, n, f;\n\n    // set prev to current state\n    prev.set(curr);\n\n    // if pulse has remove tuples, process them first\n    if (pulse.rem.length) {\n      remMap = this.remove(_, pulse, output);\n    }\n\n    // if pulse has added tuples, add them to state\n    if (pulse.add.length) {\n      bits.add(pulse.add);\n    }\n\n    // if pulse has modified tuples, create an index map\n    if (pulse.mod.length) {\n      modMap = {};\n      for (mods=pulse.mod, i=0, n=mods.length; i<n; ++i) {\n        modMap[mods[i]._index] = 1;\n      }\n    }\n\n    // re-initialize indices as needed, update curr bitmap\n    for (i=0; i<m; ++i) {\n      f = fields[i];\n      if (!dims[i] || _.modified('fields', i) || pulse.modified(f.fields)) {\n        key = f.fname;\n        if (!(add = adds[key])) {\n          indices[key] = index = SortedIndex();\n          adds[key] = add = index.insert(f, pulse.source, 0);\n        }\n        dims[i] = Dimension(index, i, query[i]).onAdd(add, curr);\n      }\n    }\n\n    // visit each tuple\n    // if filter state changed, push index to add/rem\n    // else if in mod and passes a filter, push index to mod\n    for (i=0, n=bits.data().length; i<n; ++i) {\n      if (remMap[i]) { // skip if removed tuple\n        continue;\n      } else if (prev[i] !== curr[i]) { // add if state changed\n        out.push(i);\n      } else if (modMap[i] && curr[i] !== all) { // otherwise, pass mods through\n        mod.push(i);\n      }\n    }\n\n    bits.mask = (1 << m) - 1;\n    return output;\n  };\n\n  prototype$1q.eval = function(_, pulse) {\n    var output = pulse.materialize().fork(),\n        m = this._dims.length,\n        mask = 0;\n\n    if (pulse.rem.length) {\n      this.remove(_, pulse, output);\n      mask |= (1 << m) - 1;\n    }\n\n    if (_.modified('query') && !_.modified('fields')) {\n      mask |= this.update(_, pulse, output);\n    }\n\n    if (pulse.add.length) {\n      this.insert(_, pulse, output);\n      mask |= (1 << m) - 1;\n    }\n\n    if (pulse.mod.length) {\n      this.modify(pulse, output);\n      mask |= (1 << m) - 1;\n    }\n\n    this.value.mask = mask;\n    return output;\n  };\n\n  prototype$1q.insert = function(_, pulse, output) {\n    var tuples = pulse.add,\n        bits = this.value,\n        dims = this._dims,\n        indices = this._indices,\n        fields = _.fields,\n        adds = {},\n        out = output.add,\n        k = bits.size(),\n        n = k + tuples.length,\n        m = dims.length, j, key, add;\n\n    // resize bitmaps and add tuples as needed\n    bits.resize(n, m);\n    bits.add(tuples);\n\n    var curr = bits.curr(),\n        prev = bits.prev(),\n        all  = bits.all();\n\n    // add to dimensional indices\n    for (j=0; j<m; ++j) {\n      key = fields[j].fname;\n      add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));\n      dims[j].onAdd(add, curr);\n    }\n\n    // set previous filters, output if passes at least one filter\n    for (; k<n; ++k) {\n      prev[k] = all;\n      if (curr[k] !== all) out.push(k);\n    }\n  };\n\n  prototype$1q.modify = function(pulse, output) {\n    var out = output.mod,\n        bits = this.value,\n        curr = bits.curr(),\n        all  = bits.all(),\n        tuples = pulse.mod,\n        i, n, k;\n\n    for (i=0, n=tuples.length; i<n; ++i) {\n      k = tuples[i]._index;\n      if (curr[k] !== all) out.push(k);\n    }\n  };\n\n  prototype$1q.remove = function(_, pulse, output) {\n    var indices = this._indices,\n        bits = this.value,\n        curr = bits.curr(),\n        prev = bits.prev(),\n        all  = bits.all(),\n        map = {},\n        out = output.rem,\n        tuples = pulse.rem,\n        i, n, k, f;\n\n    // process tuples, output if passes at least one filter\n    for (i=0, n=tuples.length; i<n; ++i) {\n      k = tuples[i]._index;\n      map[k] = 1; // build index map\n      prev[k] = (f = curr[k]);\n      curr[k] = all;\n      if (f !== all) out.push(k);\n    }\n\n    // remove from dimensional indices\n    for (k in indices) {\n      indices[k].remove(n, map);\n    }\n\n    this.reindex(pulse, n, map);\n    return map;\n  };\n\n  // reindex filters and indices after propagation completes\n  prototype$1q.reindex = function(pulse, num, map) {\n    var indices = this._indices,\n        bits = this.value;\n\n    pulse.runAfter(function() {\n      var indexMap = bits.remove(num, map);\n      for (var key in indices) indices[key].reindex(indexMap);\n    });\n  };\n\n  prototype$1q.update = function(_, pulse, output) {\n    var dims = this._dims,\n        query = _.query,\n        stamp = pulse.stamp,\n        m = dims.length,\n        mask = 0, i, q;\n\n    // survey how many queries have changed\n    output.filters = 0;\n    for (q=0; q<m; ++q) {\n      if (_.modified('query', q)) { i = q; ++mask; }\n    }\n\n    if (mask === 1) {\n      // only one query changed, use more efficient update\n      mask = dims[i].one;\n      this.incrementOne(dims[i], query[i], output.add, output.rem);\n    } else {\n      // multiple queries changed, perform full record keeping\n      for (q=0, mask=0; q<m; ++q) {\n        if (!_.modified('query', q)) continue;\n        mask |= dims[q].one;\n        this.incrementAll(dims[q], query[q], stamp, output.add);\n        output.rem = output.add; // duplicate add/rem for downstream resolve\n      }\n    }\n\n    return mask;\n  };\n\n  prototype$1q.incrementAll = function(dim, query, stamp, out) {\n    var bits = this.value,\n        seen = bits.seen(),\n        curr = bits.curr(),\n        prev = bits.prev(),\n        index = dim.index(),\n        old = dim.bisect(dim.range),\n        range = dim.bisect(query),\n        lo1 = range[0],\n        hi1 = range[1],\n        lo0 = old[0],\n        hi0 = old[1],\n        one = dim.one,\n        i, j, k;\n\n    // Fast incremental update based on previous lo index.\n    if (lo1 < lo0) {\n      for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n        k = index[i];\n        if (seen[k] !== stamp) {\n          prev[k] = curr[k];\n          seen[k] = stamp;\n          out.push(k);\n        }\n        curr[k] ^= one;\n      }\n    } else if (lo1 > lo0) {\n      for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n        k = index[i];\n        if (seen[k] !== stamp) {\n          prev[k] = curr[k];\n          seen[k] = stamp;\n          out.push(k);\n        }\n        curr[k] ^= one;\n      }\n    }\n\n    // Fast incremental update based on previous hi index.\n    if (hi1 > hi0) {\n      for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n        k = index[i];\n        if (seen[k] !== stamp) {\n          prev[k] = curr[k];\n          seen[k] = stamp;\n          out.push(k);\n        }\n        curr[k] ^= one;\n      }\n    } else if (hi1 < hi0) {\n      for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n        k = index[i];\n        if (seen[k] !== stamp) {\n          prev[k] = curr[k];\n          seen[k] = stamp;\n          out.push(k);\n        }\n        curr[k] ^= one;\n      }\n    }\n\n    dim.range = query.slice();\n  };\n\n  prototype$1q.incrementOne = function(dim, query, add, rem) {\n    var bits = this.value,\n        curr = bits.curr(),\n        index = dim.index(),\n        old = dim.bisect(dim.range),\n        range = dim.bisect(query),\n        lo1 = range[0],\n        hi1 = range[1],\n        lo0 = old[0],\n        hi0 = old[1],\n        one = dim.one,\n        i, j, k;\n\n    // Fast incremental update based on previous lo index.\n    if (lo1 < lo0) {\n      for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n        k = index[i];\n        curr[k] ^= one;\n        add.push(k);\n      }\n    } else if (lo1 > lo0) {\n      for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n        k = index[i];\n        curr[k] ^= one;\n        rem.push(k);\n      }\n    }\n\n    // Fast incremental update based on previous hi index.\n    if (hi1 > hi0) {\n      for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n        k = index[i];\n        curr[k] ^= one;\n        add.push(k);\n      }\n    } else if (hi1 < hi0) {\n      for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n        k = index[i];\n        curr[k] ^= one;\n        rem.push(k);\n      }\n    }\n\n    dim.range = query.slice();\n  };\n\n  /**\n   * Selectively filters tuples by resolving against a filter bitmap.\n   * Useful for processing the output of a cross-filter transform.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.ignore - A bit mask indicating which filters to ignore.\n   * @param {object} params.filter - The per-tuple filter bitmaps. Typically this\n   *   parameter value is a reference to a {@link CrossFilter} transform.\n   */\n  function ResolveFilter(params) {\n    Transform.call(this, null, params);\n  }\n\n  ResolveFilter.Definition = {\n    \"type\": \"ResolveFilter\",\n    \"metadata\": {},\n    \"params\": [\n      { \"name\": \"ignore\", \"type\": \"number\", \"required\": true,\n        \"description\": \"A bit mask indicating which filters to ignore.\" },\n      { \"name\": \"filter\", \"type\": \"object\", \"required\": true,\n        \"description\": \"Per-tuple filter bitmaps from a CrossFilter transform.\" }\n    ]\n  };\n\n  var prototype$1r = inherits(ResolveFilter, Transform);\n\n  prototype$1r.transform = function(_, pulse) {\n    var ignore = ~(_.ignore || 0), // bit mask where zeros -> dims to ignore\n        bitmap = _.filter,\n        mask = bitmap.mask;\n\n    // exit early if no relevant filter changes\n    if ((mask & ignore) === 0) return pulse.StopPropagation;\n\n    var output = pulse.fork(pulse.ALL),\n        data = bitmap.data(),\n        curr = bitmap.curr(),\n        prev = bitmap.prev(),\n        pass = function(k) {\n          return !(curr[k] & ignore) ? data[k] : null;\n        };\n\n    // propagate all mod tuples that pass the filter\n    output.filter(output.MOD, pass);\n\n    // determine add & rem tuples via filter functions\n    // for efficiency, we do *not* populate new arrays,\n    // instead we add filter functions applied downstream\n\n    if (!(mask & (mask-1))) { // only one filter changed\n      output.filter(output.ADD, pass);\n      output.filter(output.REM, function(k) {\n        return (curr[k] & ignore) === mask ? data[k] : null;\n      });\n\n    } else { // multiple filters changed\n      output.filter(output.ADD, function(k) {\n        var c = curr[k] & ignore,\n            f = !c && (c ^ (prev[k] & ignore));\n        return f ? data[k] : null;\n      });\n      output.filter(output.REM, function(k) {\n        var c = curr[k] & ignore,\n            f = c && !(c ^ (c ^ (prev[k] & ignore)));\n        return f ? data[k] : null;\n      });\n    }\n\n    // add filter to source data in case of reflow...\n    return output.filter(output.SOURCE, function(t) { return pass(t._index); });\n  };\n\n\n\n  var xf = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    crossfilter: CrossFilter,\n    resolvefilter: ResolveFilter\n  });\n\n  var version = \"5.10.1\";\n\n  // initialize aria role and label attributes\n  function initializeAria(view) {\n    const el = view.container();\n    if (el) {\n      el.setAttribute('role', 'figure');\n      ariaLabel(el, view.description());\n    }\n  }\n\n  // update aria-label if we have a DOM container element\n  function ariaLabel(el, desc) {\n    if (el) desc == null\n      ? el.removeAttribute('aria-label')\n      : el.setAttribute('aria-label', desc);\n  }\n\n  function background$1(view) {\n    // respond to background signal\n    view.add(null, _ => {\n      view._background = _.bg;\n      view._resize = 1;\n      return _.bg;\n    }, { bg: view._signals.background });\n  }\n\n  var Default = 'default';\n\n  function cursor(view) {\n    var cursor = view._signals.cursor;\n\n    // add cursor signal to dataflow, if needed\n    if (!cursor) {\n      view._signals.cursor = (cursor = view.add({user: Default, item: null}));\n    }\n\n    // evaluate cursor on each mousemove event\n    view.on(view.events('view', 'mousemove'), cursor,\n      function(_, event) {\n        var value = cursor.value,\n            user = value ? (isString(value) ? value : value.user) : Default,\n            item = event.item && event.item.cursor || null;\n\n        return (value && user === value.user && item == value.item) ? value\n          : {user: user, item: item};\n      }\n    );\n\n    // when cursor signal updates, set visible cursor\n    view.add(null, function(_) {\n      var user = _.cursor,\n          item = this.value;\n\n      if (!isString(user)) {\n        item = user.item;\n        user = user.user;\n      }\n\n      setCursor(user && user !== Default ? user : (item || user));\n\n      return item;\n    }, {cursor: cursor});\n  }\n\n  function setCursor(cursor) {\n    // set cursor on document body\n    // this ensures cursor applies even if dragging out of view\n    if (typeof document !== 'undefined' && document.body) {\n      document.body.style.cursor = cursor;\n    }\n  }\n\n  function dataref(view, name) {\n    var data = view._runtime.data;\n    if (!hasOwnProperty(data, name)) {\n      error('Unrecognized data set: ' + name);\n    }\n    return data[name];\n  }\n\n  function data(name, values) {\n    return arguments.length < 2\n      ? dataref(this, name).values.value\n      : change.call(this, name, changeset().remove(truthy).insert(values));\n  }\n\n  function change(name, changes) {\n    if (!isChangeSet(changes)) {\n      error('Second argument to changes must be a changeset.');\n    }\n    var dataset = dataref(this, name);\n    dataset.modified = true;\n    return this.pulse(dataset.input, changes);\n  }\n\n  function insert(name, _) {\n    return change.call(this, name, changeset().insert(_));\n  }\n\n  function remove(name, _) {\n    return change.call(this, name, changeset().remove(_));\n  }\n\n  function width(view) {\n    var padding = view.padding();\n    return Math.max(0, view._viewWidth + padding.left + padding.right);\n  }\n\n  function height(view) {\n    var padding = view.padding();\n    return Math.max(0, view._viewHeight + padding.top + padding.bottom);\n  }\n\n  function offset$3(view) {\n    var padding = view.padding(),\n        origin = view._origin;\n    return [\n      padding.left + origin[0],\n      padding.top + origin[1]\n    ];\n  }\n\n  function resizeRenderer(view) {\n    var origin = offset$3(view),\n        w = width(view),\n        h = height(view);\n\n    view._renderer.background(view.background());\n    view._renderer.resize(w, h, origin);\n    view._handler.origin(origin);\n\n    view._resizeListeners.forEach(function(handler) {\n      try {\n        handler(w, h);\n      } catch (error) {\n        view.error(error);\n      }\n    });\n  }\n\n  /**\n   * Extend an event with additional view-specific methods.\n   * Adds a new property ('vega') to an event that provides a number\n   * of methods for querying information about the current interaction.\n   * The vega object provides the following methods:\n   *   view - Returns the backing View instance.\n   *   item - Returns the currently active scenegraph item (if any).\n   *   group - Returns the currently active scenegraph group (if any).\n   *     This method accepts a single string-typed argument indicating the name\n   *     of the desired parent group. The scenegraph will be traversed from\n   *     the item up towards the root to search for a matching group. If no\n   *     argument is provided the enclosing group for the active item is\n   *     returned, unless the item it itself a group, in which case it is\n   *     returned directly.\n   *   xy - Returns a two-element array containing the x and y coordinates for\n   *     mouse or touch events. For touch events, this is based on the first\n   *     elements in the changedTouches array. This method accepts a single\n   *     argument: either an item instance or mark name that should serve as\n   *     the reference coordinate system. If no argument is provided the\n   *     top-level view coordinate system is assumed.\n   *   x - Returns the current x-coordinate, accepts the same arguments as xy.\n   *   y - Returns the current y-coordinate, accepts the same arguments as xy.\n   * @param {Event} event - The input event to extend.\n   * @param {Item} item - The currently active scenegraph item (if any).\n   * @return {Event} - The extended input event.\n   */\n  function eventExtend(view, event, item) {\n    var r  = view._renderer,\n        el = r && r.canvas(),\n        p, e, translate;\n\n    if (el) {\n      translate = offset$3(view);\n      e = event.changedTouches ? event.changedTouches[0] : event;\n      p = point$4(e, el);\n      p[0] -= translate[0];\n      p[1] -= translate[1];\n    }\n\n    event.dataflow = view;\n    event.item = item;\n    event.vega = extension(view, item, p);\n    return event;\n  }\n\n  function extension(view, item, point) {\n    var itemGroup = item\n      ? item.mark.marktype === 'group' ? item : item.mark.group\n      : null;\n\n    function group(name) {\n      var g = itemGroup, i;\n      if (name) for (i = item; i; i = i.mark.group) {\n        if (i.mark.name === name) { g = i; break; }\n      }\n      return g && g.mark && g.mark.interactive ? g : {};\n    }\n\n    function xy(item) {\n      if (!item) return point;\n      if (isString(item)) item = group(item);\n\n      var p = point.slice();\n      while (item) {\n        p[0] -= item.x || 0;\n        p[1] -= item.y || 0;\n        item = item.mark && item.mark.group;\n      }\n      return p;\n    }\n\n    return {\n      view:  constant(view),\n      item:  constant(item || {}),\n      group: group,\n      xy:    xy,\n      x:     function(item) { return xy(item)[0]; },\n      y:     function(item) { return xy(item)[1]; }\n    };\n  }\n\n  const VIEW = 'view',\n        TIMER = 'timer',\n        WINDOW = 'window',\n        NO_TRAP = {trap: false};\n\n  /**\n   * Initialize event handling configuration.\n   * @param {object} config - The configuration settings.\n   * @return {object}\n   */\n  function initializeEventConfig(config) {\n    const events = extend({defaults: {}}, config);\n\n    const unpack = (obj, keys) => {\n      keys.forEach(k => {\n        if (isArray(obj[k])) obj[k] = toSet(obj[k]);\n      });\n    };\n\n    unpack(events.defaults, ['prevent', 'allow']);\n    unpack(events, ['view', 'window', 'selector']);\n\n    return events;\n  }\n\n  function prevent(view, type) {\n    var def = view._eventConfig.defaults,\n        prevent = def.prevent,\n        allow = def.allow;\n\n    return prevent === false || allow === true ? false\n      : prevent === true || allow === false ? true\n      : prevent ? prevent[type]\n      : allow ? !allow[type]\n      : view.preventDefault();\n  }\n\n  function permit(view, key, type) {\n    const rule = view._eventConfig && view._eventConfig[key];\n\n    if (rule === false || (isObject(rule) && !rule[type])) {\n      view.warn(`Blocked ${key} ${type} event listener.`);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Create a new event stream from an event source.\n   * @param {object} source - The event source to monitor.\n   * @param {string} type - The event type.\n   * @param {function(object): boolean} [filter] - Event filter function.\n   * @return {EventStream}\n   */\n  function events$1(source, type, filter) {\n    var view = this,\n        s = new EventStream(filter),\n        send = function(e, item) {\n          view.runAsync(null, () => {\n            if (source === VIEW && prevent(view, type)) {\n              e.preventDefault();\n            }\n            s.receive(eventExtend(view, e, item));\n          });\n        },\n        sources;\n\n    if (source === TIMER) {\n      if (permit(view, 'timer', type)) {\n        view.timer(send, type);\n      }\n    }\n\n    else if (source === VIEW) {\n      if (permit(view, 'view', type)) {\n        // send traps errors, so use {trap: false} option\n        view.addEventListener(type, send, NO_TRAP);\n      }\n    }\n\n    else {\n      if (source === WINDOW) {\n        if (permit(view, 'window', type) && typeof window !== 'undefined') {\n          sources = [window];\n        }\n      } else if (typeof document !== 'undefined') {\n        if (permit(view, 'selector', type)) {\n          sources = document.querySelectorAll(source);\n        }\n      }\n\n      if (!sources) {\n        view.warn('Can not resolve event source: ' + source);\n      } else {\n        for (var i=0, n=sources.length; i<n; ++i) {\n          sources[i].addEventListener(type, send);\n        }\n\n        view._eventListeners.push({\n          type:    type,\n          sources: sources,\n          handler: send\n        });\n      }\n    }\n\n    return s;\n  }\n\n  function itemFilter(event) {\n    return event.item;\n  }\n\n  function markTarget(event) {\n    // grab upstream collector feeding the mark operator\n    return event.item.mark.source;\n  }\n\n  function invoke(name) {\n    return function(_, event) {\n      return event.vega.view()\n        .changeset()\n        .encode(event.item, name);\n    };\n  }\n\n  function hover(hoverSet, leaveSet) {\n    hoverSet = [hoverSet || 'hover'];\n    leaveSet = [leaveSet || 'update', hoverSet[0]];\n\n    // invoke hover set upon mouseover\n    this.on(\n      this.events('view', 'mouseover', itemFilter),\n      markTarget,\n      invoke(hoverSet)\n    );\n\n    // invoke leave set upon mouseout\n    this.on(\n      this.events('view', 'mouseout', itemFilter),\n      markTarget,\n      invoke(leaveSet)\n    );\n\n    return this;\n  }\n\n  /**\n   * Finalize a View instance that is being removed.\n   * Cancel any running timers.\n   * Remove all external event listeners.\n   * Remove any currently displayed tooltip.\n   */\n  function finalize() {\n    var tooltip = this._tooltip,\n        timers = this._timers,\n        listeners = this._eventListeners,\n        n, m, e;\n\n    n = timers.length;\n    while (--n >= 0) {\n      timers[n].stop();\n    }\n\n    n = listeners.length;\n    while (--n >= 0) {\n      e = listeners[n];\n      m = e.sources.length;\n      while (--m >= 0) {\n        e.sources[m].removeEventListener(e.type, e.handler);\n      }\n    }\n\n    if (tooltip) {\n      tooltip.call(this, this._handler, null, null, null);\n    }\n\n    return this;\n  }\n\n  function element$1(tag, attr, text) {\n    var el = document.createElement(tag);\n    for (var key in attr) el.setAttribute(key, attr[key]);\n    if (text != null) el.textContent = text;\n    return el;\n  }\n\n  var BindClass = 'vega-bind',\n      NameClass = 'vega-bind-name',\n      RadioClass = 'vega-bind-radio',\n      OptionClass = 'vega-option-';\n\n  /**\n   * Bind a signal to an external HTML input element. The resulting two-way\n   * binding will propagate input changes to signals, and propagate signal\n   * changes to the input element state. If this view instance has no parent\n   * element, we assume the view is headless and no bindings are created.\n   * @param {Element|string} el - The parent DOM element to which the input\n   *   element should be appended as a child. If string-valued, this argument\n   *   will be treated as a CSS selector. If null or undefined, the parent\n   *   element of this view will be used as the element.\n   * @param {object} param - The binding parameters which specify the signal\n   *   to bind to, the input element type, and type-specific configuration.\n   * @return {View} - This view instance.\n   */\n  function bind$1(view, el, binding) {\n    if (!el) return;\n\n    var param = binding.param,\n        bind = binding.state;\n\n    if (!bind) {\n      bind = binding.state = {\n        elements: null,\n        active: false,\n        set: null,\n        update: function(value) {\n          if (value !== view.signal(param.signal)) {\n            view.runAsync(null, function() {\n              bind.source = true;\n              view.signal(param.signal, value);\n            });\n          }\n        }\n      };\n      if (param.debounce) {\n        bind.update = debounce(param.debounce, bind.update);\n      }\n    }\n\n    generate(bind, el, param, view.signal(param.signal));\n\n    if (!bind.active) {\n      view.on(view._signals[param.signal], null, function() {\n        bind.source\n          ? (bind.source = false)\n          : bind.set(view.signal(param.signal));\n      });\n      bind.active = true;\n    }\n\n    return bind;\n  }\n\n  /**\n   * Generate an HTML input form element and bind it to a signal.\n   */\n  function generate(bind, el, param, value) {\n    var div = element$1('div', {'class': BindClass});\n\n    div.appendChild(element$1('span',\n      {'class': NameClass},\n      (param.name || param.signal)\n    ));\n\n    el.appendChild(div);\n\n    var input = form;\n    switch (param.input) {\n      case 'checkbox': input = checkbox; break;\n      case 'select':   input = select; break;\n      case 'radio':    input = radio; break;\n      case 'range':    input = range$2; break;\n    }\n\n    input(bind, div, param, value);\n  }\n\n  /**\n   * Generates an arbitrary input form element.\n   * The input type is controlled via user-provided parameters.\n   */\n  function form(bind, el, param, value) {\n    var node = element$1('input');\n\n    for (var key in param) {\n      if (key !== 'signal' && key !== 'element') {\n        node.setAttribute(key === 'input' ? 'type' : key, param[key]);\n      }\n    }\n    node.setAttribute('name', param.signal);\n    node.value = value;\n\n    el.appendChild(node);\n\n    node.addEventListener('input', function() {\n      bind.update(node.value);\n    });\n\n    bind.elements = [node];\n    bind.set = function(value) { node.value = value; };\n  }\n\n  /**\n   * Generates a checkbox input element.\n   */\n  function checkbox(bind, el, param, value) {\n    var attr = {type: 'checkbox', name: param.signal};\n    if (value) attr.checked = true;\n    var node = element$1('input', attr);\n\n    el.appendChild(node);\n\n    node.addEventListener('change', function() {\n      bind.update(node.checked);\n    });\n\n    bind.elements = [node];\n    bind.set = function(value) { node.checked = !!value || null; };\n  }\n\n  /**\n   * Generates a selection list input element.\n   */\n  function select(bind, el, param, value) {\n    var node = element$1('select', {name: param.signal}),\n        label = param.labels || [];\n\n    param.options.forEach(function(option, i) {\n      var attr = {value: option};\n      if (valuesEqual(option, value)) attr.selected = true;\n      node.appendChild(element$1('option', attr, (label[i] || option)+''));\n    });\n\n    el.appendChild(node);\n\n    node.addEventListener('change', function() {\n      bind.update(param.options[node.selectedIndex]);\n    });\n\n    bind.elements = [node];\n    bind.set = function(value) {\n      for (var i=0, n=param.options.length; i<n; ++i) {\n        if (valuesEqual(param.options[i], value)) {\n          node.selectedIndex = i; return;\n        }\n      }\n    };\n  }\n\n  /**\n   * Generates a radio button group.\n   */\n  function radio(bind, el, param, value) {\n    var group = element$1('span', {'class': RadioClass}),\n        label = param.labels || [];\n\n    el.appendChild(group);\n\n    bind.elements = param.options.map(function(option, i) {\n      var id = OptionClass + param.signal + '-' + option;\n\n      var attr = {\n        id:    id,\n        type:  'radio',\n        name:  param.signal,\n        value: option\n      };\n      if (valuesEqual(option, value)) attr.checked = true;\n\n      var input = element$1('input', attr);\n\n      input.addEventListener('change', function() {\n        bind.update(option);\n      });\n\n      group.appendChild(input);\n      group.appendChild(element$1('label', {'for': id}, (label[i] || option)+''));\n\n      return input;\n    });\n\n    bind.set = function(value) {\n      var nodes = bind.elements,\n          i = 0,\n          n = nodes.length;\n      for (; i<n; ++i) {\n        if (valuesEqual(nodes[i].value, value)) nodes[i].checked = true;\n      }\n    };\n  }\n\n  /**\n   * Generates a slider input element.\n   */\n  function range$2(bind, el, param, value) {\n    value = value !== undefined ? value : ((+param.max) + (+param.min)) / 2;\n\n    var max = param.max != null ? param.max : Math.max(100, +value) || 100,\n        min = param.min || Math.min(0, max, +value) || 0,\n        step = param.step || tickStep(min, max, 100);\n\n    var node = element$1('input', {\n      type:  'range',\n      name:  param.signal,\n      min:   min,\n      max:   max,\n      step:  step\n    });\n    node.value = value;\n\n    var label = element$1('label', {}, +value);\n\n    el.appendChild(node);\n    el.appendChild(label);\n\n    function update() {\n      label.textContent = node.value;\n      bind.update(+node.value);\n    }\n\n    // subscribe to both input and change\n    node.addEventListener('input', update);\n    node.addEventListener('change', update);\n\n    bind.elements = [node];\n    bind.set = function(value) {\n      node.value = value;\n      label.textContent = value;\n    };\n  }\n\n  function valuesEqual(a, b) {\n    return a === b || (a+'' === b+'');\n  }\n\n  function initializeRenderer(view, r, el, constructor, scaleFactor, opt) {\n    r = r || new constructor(view.loader());\n    return r\n      .initialize(el, width(view), height(view), offset$3(view), scaleFactor, opt)\n      .background(view.background());\n  }\n\n  function trap(view, fn) {\n    return !fn ? null : function() {\n      try {\n        fn.apply(this, arguments);\n      } catch (error) {\n        view.error(error);\n      }\n    };\n  }\n\n  function initializeHandler(view, prevHandler, el, constructor) {\n    // instantiate scenegraph handler\n    var handler = new constructor(view.loader(), trap(view, view.tooltip()))\n      .scene(view.scenegraph().root)\n      .initialize(el, offset$3(view), view);\n\n    // transfer event handlers\n    if (prevHandler) {\n      prevHandler.handlers().forEach(function(h) {\n        handler.on(h.type, h.handler);\n      });\n    }\n\n    return handler;\n  }\n\n  function initialize$1(el, elBind) {\n    const view = this,\n          type = view._renderType,\n          config = view._eventConfig.bind,\n          module = renderModule(type);\n\n    // containing dom element\n    el = view._el = el ? lookup$4(view, el) : null;\n\n    // initialize aria attributes\n    initializeAria(view);\n\n    // select appropriate renderer & handler\n    if (!module) view.error('Unrecognized renderer type: ' + type);\n    const Handler = module.handler || CanvasHandler,\n          Renderer = (el ? module.renderer : module.headless);\n\n    // initialize renderer and input handler\n    view._renderer = !Renderer ? null\n      : initializeRenderer(view, view._renderer, el, Renderer);\n    view._handler = initializeHandler(view, view._handler, el, Handler);\n    view._redraw = true;\n\n    // initialize signal bindings\n    if (el && config !== 'none') {\n      elBind = elBind ? (view._elBind = lookup$4(view, elBind))\n        : el.appendChild(element$1('div', {'class': 'vega-bindings'}));\n\n      view._bind.forEach(function(_) {\n        if (_.param.element && config !== 'container') {\n          _.element = lookup$4(view, _.param.element);\n        }\n      });\n\n      view._bind.forEach(function(_) {\n        bind$1(view, _.element || elBind, _);\n      });\n    }\n\n    return view;\n  }\n\n  function lookup$4(view, el) {\n    if (typeof el === 'string') {\n      if (typeof document !== 'undefined') {\n        el = document.querySelector(el);\n        if (!el) {\n          view.error('Signal bind element not found: ' + el);\n          return null;\n        }\n      } else {\n        view.error('DOM document instance not found.');\n        return null;\n      }\n    }\n    if (el) {\n      try {\n        el.innerHTML = '';\n      } catch (e) {\n        el = null;\n        view.error(e);\n      }\n    }\n    return el;\n  }\n\n  const number$5 = _ => +_ || 0;\n\n  const paddingObject = _ => ({top: _, bottom: _, left: _, right: _});\n\n  function padding(_) {\n    return isObject(_)\n      ? {\n          top:    number$5(_.top),\n          bottom: number$5(_.bottom),\n          left:   number$5(_.left),\n          right:  number$5(_.right)\n        }\n      : paddingObject(number$5(_));\n  }\n\n  /**\n   * Render the current scene in a headless fashion.\n   * This method is asynchronous, returning a Promise instance.\n   * @return {Promise} - A Promise that resolves to a renderer.\n   */\n  async function renderHeadless(view, type, scaleFactor, opt) {\n    const module = renderModule(type),\n          ctr = module && module.headless;\n\n    if (!ctr) error('Unrecognized renderer type: ' + type);\n\n    await view.runAsync();\n    return initializeRenderer(view, null, null, ctr, scaleFactor, opt)\n      .renderAsync(view._scenegraph.root);\n  }\n\n  /**\n   * Produce an image URL for the visualization. Depending on the type\n   * parameter, the generated URL contains data for either a PNG or SVG image.\n   * The URL can be used (for example) to download images of the visualization.\n   * This method is asynchronous, returning a Promise instance.\n   * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.\n   *   The 'canvas' and 'png' types are synonyms for a PNG image.\n   * @return {Promise} - A promise that resolves to an image URL.\n   */\n  async function renderToImageURL(type, scaleFactor) {\n    if (type !== RenderType.Canvas && type !== RenderType.SVG && type !== RenderType.PNG) {\n      error('Unrecognized image type: ' + type);\n    }\n\n    const r = await renderHeadless(this, type, scaleFactor);\n    return type === RenderType.SVG\n      ? toBlobURL(r.svg(), 'image/svg+xml')\n      : r.canvas().toDataURL('image/png');\n  }\n\n  function toBlobURL(data, mime) {\n    var blob = new Blob([data], {type: mime});\n    return window.URL.createObjectURL(blob);\n  }\n\n  /**\n   * Produce a Canvas instance containing a rendered visualization.\n   * This method is asynchronous, returning a Promise instance.\n   * @return {Promise} - A promise that resolves to a Canvas instance.\n   */\n  async function renderToCanvas(scaleFactor, opt) {\n    const r = await renderHeadless(this, RenderType.Canvas, scaleFactor, opt);\n    return r.canvas();\n  }\n\n  /**\n   * Produce a rendered SVG string of the visualization.\n   * This method is asynchronous, returning a Promise instance.\n   * @return {Promise} - A promise that resolves to an SVG string.\n   */\n  async function renderToSVG(scaleFactor) {\n    const r = await renderHeadless(this, RenderType.SVG, scaleFactor);\n    return r.svg();\n  }\n\n  var RawCode = 'RawCode';\n  var Literal = 'Literal';\n  var Property = 'Property';\n  var Identifier$1 = 'Identifier';\n\n  var ArrayExpression = 'ArrayExpression';\n  var BinaryExpression = 'BinaryExpression';\n  var CallExpression = 'CallExpression';\n  var ConditionalExpression = 'ConditionalExpression';\n  var LogicalExpression = 'LogicalExpression';\n  var MemberExpression = 'MemberExpression';\n  var ObjectExpression = 'ObjectExpression';\n  var UnaryExpression = 'UnaryExpression';\n\n  function ASTNode(type) {\n    this.type = type;\n  }\n\n  ASTNode.prototype.visit = function(visitor) {\n    var node = this, c, i, n;\n\n    if (visitor(node)) return 1;\n\n    for (c=children$1(node), i=0, n=c.length; i<n; ++i) {\n      if (c[i].visit(visitor)) return 1;\n    }\n  };\n\n  function children$1(node) {\n    switch (node.type) {\n      case ArrayExpression:\n        return node.elements;\n      case BinaryExpression:\n      case LogicalExpression:\n        return [node.left, node.right];\n      case CallExpression:\n        var args = node.arguments.slice();\n        args.unshift(node.callee);\n        return args;\n      case ConditionalExpression:\n        return [node.test, node.consequent, node.alternate];\n      case MemberExpression:\n        return [node.object, node.property];\n      case ObjectExpression:\n        return node.properties;\n      case Property:\n        return [node.key, node.value];\n      case UnaryExpression:\n        return [node.argument];\n      case Identifier$1:\n      case Literal:\n      case RawCode:\n      default:\n        return [];\n    }\n  }\n\n  /*\n    The following expression parser is based on Esprima (http://esprima.org/).\n    Original header comment and license for Esprima is included here:\n\n    Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n    Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n    Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n    Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n    Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n    Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n    Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n    Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n    Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n    Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n      * Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n      * Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n\n  var TokenName,\n      source$1,\n      index$1,\n      length,\n      lookahead;\n\n  var TokenBooleanLiteral = 1,\n      TokenEOF = 2,\n      TokenIdentifier = 3,\n      TokenKeyword = 4,\n      TokenNullLiteral = 5,\n      TokenNumericLiteral = 6,\n      TokenPunctuator = 7,\n      TokenStringLiteral = 8,\n      TokenRegularExpression = 9;\n\n  TokenName = {};\n  TokenName[TokenBooleanLiteral] = 'Boolean';\n  TokenName[TokenEOF] = '<end>';\n  TokenName[TokenIdentifier] = 'Identifier';\n  TokenName[TokenKeyword] = 'Keyword';\n  TokenName[TokenNullLiteral] = 'Null';\n  TokenName[TokenNumericLiteral] = 'Numeric';\n  TokenName[TokenPunctuator] = 'Punctuator';\n  TokenName[TokenStringLiteral] = 'String';\n  TokenName[TokenRegularExpression] = 'RegularExpression';\n\n  var SyntaxArrayExpression = 'ArrayExpression',\n      SyntaxBinaryExpression = 'BinaryExpression',\n      SyntaxCallExpression = 'CallExpression',\n      SyntaxConditionalExpression = 'ConditionalExpression',\n      SyntaxIdentifier = 'Identifier',\n      SyntaxLiteral = 'Literal',\n      SyntaxLogicalExpression = 'LogicalExpression',\n      SyntaxMemberExpression = 'MemberExpression',\n      SyntaxObjectExpression = 'ObjectExpression',\n      SyntaxProperty = 'Property',\n      SyntaxUnaryExpression = 'UnaryExpression';\n\n  // Error messages should be identical to V8.\n  var MessageUnexpectedToken = 'Unexpected token %0',\n      MessageUnexpectedNumber = 'Unexpected number',\n      MessageUnexpectedString = 'Unexpected string',\n      MessageUnexpectedIdentifier = 'Unexpected identifier',\n      MessageUnexpectedReserved = 'Unexpected reserved word',\n      MessageUnexpectedEOS = 'Unexpected end of input',\n      MessageInvalidRegExp = 'Invalid regular expression',\n      MessageUnterminatedRegExp = 'Invalid regular expression: missing /',\n      MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',\n      MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';\n\n  var ILLEGAL = 'ILLEGAL',\n      DISABLED = 'Disabled.';\n\n  // See also tools/generate-unicode-regex.py.\n  var RegexNonAsciiIdentifierStart = new RegExp(\"[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\"),\n      // eslint-disable-next-line no-misleading-character-class\n      RegexNonAsciiIdentifierPart = new RegExp(\"[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0300-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u0483-\\\\u0487\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0610-\\\\u061A\\\\u0620-\\\\u0669\\\\u066E-\\\\u06D3\\\\u06D5-\\\\u06DC\\\\u06DF-\\\\u06E8\\\\u06EA-\\\\u06FC\\\\u06FF\\\\u0710-\\\\u074A\\\\u074D-\\\\u07B1\\\\u07C0-\\\\u07F5\\\\u07FA\\\\u0800-\\\\u082D\\\\u0840-\\\\u085B\\\\u08A0-\\\\u08B2\\\\u08E4-\\\\u0963\\\\u0966-\\\\u096F\\\\u0971-\\\\u0983\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BC-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CE\\\\u09D7\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E3\\\\u09E6-\\\\u09F1\\\\u0A01-\\\\u0A03\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A66-\\\\u0A75\\\\u0A81-\\\\u0A83\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABC-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0AD0\\\\u0AE0-\\\\u0AE3\\\\u0AE6-\\\\u0AEF\\\\u0B01-\\\\u0B03\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3C-\\\\u0B44\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B56\\\\u0B57\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B63\\\\u0B66-\\\\u0B6F\\\\u0B71\\\\u0B82\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD0\\\\u0BD7\\\\u0BE6-\\\\u0BEF\\\\u0C00-\\\\u0C03\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C58\\\\u0C59\\\\u0C60-\\\\u0C63\\\\u0C66-\\\\u0C6F\\\\u0C81-\\\\u0C83\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBC-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0CDE\\\\u0CE0-\\\\u0CE3\\\\u0CE6-\\\\u0CEF\\\\u0CF1\\\\u0CF2\\\\u0D01-\\\\u0D03\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D-\\\\u0D44\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4E\\\\u0D57\\\\u0D60-\\\\u0D63\\\\u0D66-\\\\u0D6F\\\\u0D7A-\\\\u0D7F\\\\u0D82\\\\u0D83\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0DCA\\\\u0DCF-\\\\u0DD4\\\\u0DD6\\\\u0DD8-\\\\u0DDF\\\\u0DE6-\\\\u0DEF\\\\u0DF2\\\\u0DF3\\\\u0E01-\\\\u0E3A\\\\u0E40-\\\\u0E4E\\\\u0E50-\\\\u0E59\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB9\\\\u0EBB-\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EC8-\\\\u0ECD\\\\u0ED0-\\\\u0ED9\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F18\\\\u0F19\\\\u0F20-\\\\u0F29\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F71-\\\\u0F84\\\\u0F86-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u1000-\\\\u1049\\\\u1050-\\\\u109D\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u135D-\\\\u135F\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1714\\\\u1720-\\\\u1734\\\\u1740-\\\\u1753\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1772\\\\u1773\\\\u1780-\\\\u17D3\\\\u17D7\\\\u17DC\\\\u17DD\\\\u17E0-\\\\u17E9\\\\u180B-\\\\u180D\\\\u1810-\\\\u1819\\\\u1820-\\\\u1877\\\\u1880-\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1920-\\\\u192B\\\\u1930-\\\\u193B\\\\u1946-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u19D0-\\\\u19D9\\\\u1A00-\\\\u1A1B\\\\u1A20-\\\\u1A5E\\\\u1A60-\\\\u1A7C\\\\u1A7F-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1AA7\\\\u1AB0-\\\\u1ABD\\\\u1B00-\\\\u1B4B\\\\u1B50-\\\\u1B59\\\\u1B6B-\\\\u1B73\\\\u1B80-\\\\u1BF3\\\\u1C00-\\\\u1C37\\\\u1C40-\\\\u1C49\\\\u1C4D-\\\\u1C7D\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CF6\\\\u1CF8\\\\u1CF9\\\\u1D00-\\\\u1DF5\\\\u1DFC-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u200C\\\\u200D\\\\u203F\\\\u2040\\\\u2054\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D7F-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2DE0-\\\\u2DFF\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u302F\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u3099\\\\u309A\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA62B\\\\uA640-\\\\uA66F\\\\uA674-\\\\uA67D\\\\uA67F-\\\\uA69D\\\\uA69F-\\\\uA6F1\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA827\\\\uA840-\\\\uA873\\\\uA880-\\\\uA8C4\\\\uA8D0-\\\\uA8D9\\\\uA8E0-\\\\uA8F7\\\\uA8FB\\\\uA900-\\\\uA92D\\\\uA930-\\\\uA953\\\\uA960-\\\\uA97C\\\\uA980-\\\\uA9C0\\\\uA9CF-\\\\uA9D9\\\\uA9E0-\\\\uA9FE\\\\uAA00-\\\\uAA36\\\\uAA40-\\\\uAA4D\\\\uAA50-\\\\uAA59\\\\uAA60-\\\\uAA76\\\\uAA7A-\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEF\\\\uAAF2-\\\\uAAF6\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABEA\\\\uABEC\\\\uABED\\\\uABF0-\\\\uABF9\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2D\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF10-\\\\uFF19\\\\uFF21-\\\\uFF3A\\\\uFF3F\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\");\n\n  // Ensure the condition is true, otherwise throw an error.\n  // This is only to have a better contract semantic, i.e. another safety net\n  // to catch a logic error. The condition shall be fulfilled in normal case.\n  // Do NOT use this to enforce a certain condition on any user input.\n\n  function assert(condition, message) {\n    /* istanbul ignore next */\n    if (!condition) {\n      throw new Error('ASSERT: ' + message);\n    }\n  }\n\n  function isDecimalDigit(ch) {\n    return (ch >= 0x30 && ch <= 0x39); // 0..9\n  }\n\n  function isHexDigit(ch) {\n    return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n  }\n\n  function isOctalDigit(ch) {\n    return '01234567'.indexOf(ch) >= 0;\n  }\n\n  // 7.2 White Space\n\n  function isWhiteSpace(ch) {\n    return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n      (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\n  }\n\n  // 7.3 Line Terminators\n\n  function isLineTerminator(ch) {\n    return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\n  }\n\n  // 7.6 Identifier Names and Identifiers\n\n  function isIdentifierStart(ch) {\n    return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\n      (ch >= 0x41 && ch <= 0x5A) || // A..Z\n      (ch >= 0x61 && ch <= 0x7A) || // a..z\n      (ch === 0x5C) || // \\ (backslash)\n      ((ch >= 0x80) && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch)));\n  }\n\n  function isIdentifierPart(ch) {\n    return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\n      (ch >= 0x41 && ch <= 0x5A) || // A..Z\n      (ch >= 0x61 && ch <= 0x7A) || // a..z\n      (ch >= 0x30 && ch <= 0x39) || // 0..9\n      (ch === 0x5C) || // \\ (backslash)\n      ((ch >= 0x80) && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n  }\n\n  // 7.6.1.1 Keywords\n\n  var keywords = {\n    'if':1, 'in':1, 'do':1,\n    'var':1, 'for':1, 'new':1, 'try':1, 'let':1,\n    'this':1, 'else':1, 'case':1, 'void':1, 'with':1, 'enum':1,\n    'while':1, 'break':1, 'catch':1, 'throw':1, 'const':1, 'yield':1, 'class':1, 'super':1,\n    'return':1, 'typeof':1, 'delete':1, 'switch':1, 'export':1, 'import':1, 'public':1, 'static':1,\n    'default':1, 'finally':1, 'extends':1, 'package':1, 'private':1,\n    'function':1, 'continue':1, 'debugger':1,\n    'interface':1, 'protected':1,\n    'instanceof':1, 'implements':1\n  };\n\n  function skipComment() {\n    var ch;\n\n    while (index$1 < length) {\n      ch = source$1.charCodeAt(index$1);\n\n      if (isWhiteSpace(ch) || isLineTerminator(ch)) {\n        ++index$1;\n      } else {\n        break;\n      }\n    }\n  }\n\n  function scanHexEscape(prefix) {\n    var i, len, ch, code = 0;\n\n    len = (prefix === 'u') ? 4 : 2;\n    for (i = 0; i < len; ++i) {\n      if (index$1 < length && isHexDigit(source$1[index$1])) {\n        ch = source$1[index$1++];\n        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n      } else {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n    }\n    return String.fromCharCode(code);\n  }\n\n  function scanUnicodeCodePointEscape() {\n    var ch, code, cu1, cu2;\n\n    ch = source$1[index$1];\n    code = 0;\n\n    // At least, one hex digit is required.\n    if (ch === '}') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    while (index$1 < length) {\n      ch = source$1[index$1++];\n      if (!isHexDigit(ch)) {\n        break;\n      }\n      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n    }\n\n    if (code > 0x10FFFF || ch !== '}') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    // UTF-16 Encoding\n    if (code <= 0xFFFF) {\n      return String.fromCharCode(code);\n    }\n    cu1 = ((code - 0x10000) >> 10) + 0xD800;\n    cu2 = ((code - 0x10000) & 1023) + 0xDC00;\n    return String.fromCharCode(cu1, cu2);\n  }\n\n  function getEscapedIdentifier() {\n    var ch, id;\n\n    ch = source$1.charCodeAt(index$1++);\n    id = String.fromCharCode(ch);\n\n    // '\\u' (U+005C, U+0075) denotes an escaped character.\n    if (ch === 0x5C) {\n      if (source$1.charCodeAt(index$1) !== 0x75) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n      ++index$1;\n      ch = scanHexEscape('u');\n      if (!ch || ch === '\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n      id = ch;\n    }\n\n    while (index$1 < length) {\n      ch = source$1.charCodeAt(index$1);\n      if (!isIdentifierPart(ch)) {\n        break;\n      }\n      ++index$1;\n      id += String.fromCharCode(ch);\n\n      // '\\u' (U+005C, U+0075) denotes an escaped character.\n      if (ch === 0x5C) {\n        id = id.substr(0, id.length - 1);\n        if (source$1.charCodeAt(index$1) !== 0x75) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL);\n        }\n        ++index$1;\n        ch = scanHexEscape('u');\n        if (!ch || ch === '\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL);\n        }\n        id += ch;\n      }\n    }\n\n    return id;\n  }\n\n  function getIdentifier() {\n    var start, ch;\n\n    start = index$1++;\n    while (index$1 < length) {\n      ch = source$1.charCodeAt(index$1);\n      if (ch === 0x5C) {\n        // Blackslash (U+005C) marks Unicode escape sequence.\n        index$1 = start;\n        return getEscapedIdentifier();\n      }\n      if (isIdentifierPart(ch)) {\n        ++index$1;\n      } else {\n        break;\n      }\n    }\n\n    return source$1.slice(start, index$1);\n  }\n\n  function scanIdentifier() {\n    var start, id, type;\n\n    start = index$1;\n\n    // Backslash (U+005C) starts an escaped character.\n    id = (source$1.charCodeAt(index$1) === 0x5C) ? getEscapedIdentifier() : getIdentifier();\n\n    // There is no keyword or literal with only one character.\n    // Thus, it must be an identifier.\n    if (id.length === 1) {\n      type = TokenIdentifier;\n    } else if (keywords.hasOwnProperty(id)) { // eslint-disable-line no-prototype-builtins\n      type = TokenKeyword;\n    } else if (id === 'null') {\n      type = TokenNullLiteral;\n    } else if (id === 'true' || id === 'false') {\n      type = TokenBooleanLiteral;\n    } else {\n      type = TokenIdentifier;\n    }\n\n    return {\n      type: type,\n      value: id,\n      start: start,\n      end: index$1\n    };\n  }\n\n  // 7.7 Punctuators\n\n  function scanPunctuator() {\n    var start = index$1,\n      code = source$1.charCodeAt(index$1),\n      code2,\n      ch1 = source$1[index$1],\n      ch2,\n      ch3,\n      ch4;\n\n    switch (code) {\n\n      // Check for most common single-character punctuators.\n      case 0x2E: // . dot\n      case 0x28: // ( open bracket\n      case 0x29: // ) close bracket\n      case 0x3B: // ; semicolon\n      case 0x2C: // , comma\n      case 0x7B: // { open curly brace\n      case 0x7D: // } close curly brace\n      case 0x5B: // [\n      case 0x5D: // ]\n      case 0x3A: // :\n      case 0x3F: // ?\n      case 0x7E: // ~\n        ++index$1;\n        return {\n          type: TokenPunctuator,\n          value: String.fromCharCode(code),\n          start: start,\n          end: index$1\n        };\n\n      default:\n        code2 = source$1.charCodeAt(index$1 + 1);\n\n        // '=' (U+003D) marks an assignment or comparison operator.\n        if (code2 === 0x3D) {\n          switch (code) {\n            case 0x2B: // +\n            case 0x2D: // -\n            case 0x2F: // /\n            case 0x3C: // <\n            case 0x3E: // >\n            case 0x5E: // ^\n            case 0x7C: // |\n            case 0x25: // %\n            case 0x26: // &\n            case 0x2A: // *\n              index$1 += 2;\n              return {\n                type: TokenPunctuator,\n                value: String.fromCharCode(code) + String.fromCharCode(code2),\n                start: start,\n                end: index$1\n              };\n\n            case 0x21: // !\n            case 0x3D: // =\n              index$1 += 2;\n\n              // !== and ===\n              if (source$1.charCodeAt(index$1) === 0x3D) {\n                ++index$1;\n              }\n              return {\n                type: TokenPunctuator,\n                value: source$1.slice(start, index$1),\n                start: start,\n                end: index$1\n              };\n          }\n        }\n    }\n\n    // 4-character punctuator: >>>=\n\n    ch4 = source$1.substr(index$1, 4);\n\n    if (ch4 === '>>>=') {\n      index$1 += 4;\n      return {\n        type: TokenPunctuator,\n        value: ch4,\n        start: start,\n        end: index$1\n      };\n    }\n\n    // 3-character punctuators: === !== >>> <<= >>=\n\n    ch3 = ch4.substr(0, 3);\n\n    if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\n      index$1 += 3;\n      return {\n        type: TokenPunctuator,\n        value: ch3,\n        start: start,\n        end: index$1\n      };\n    }\n\n    // Other 2-character punctuators: ++ -- << >> && ||\n    ch2 = ch3.substr(0, 2);\n\n    if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {\n      index$1 += 2;\n      return {\n        type: TokenPunctuator,\n        value: ch2,\n        start: start,\n        end: index$1\n      };\n    }\n\n    // 1-character punctuators: < > = ! + - * % & | ^ /\n\n    if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n      ++index$1;\n      return {\n        type: TokenPunctuator,\n        value: ch1,\n        start: start,\n        end: index$1\n      };\n    }\n\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  // 7.8.3 Numeric Literals\n\n  function scanHexLiteral(start) {\n    var number = '';\n\n    while (index$1 < length) {\n      if (!isHexDigit(source$1[index$1])) {\n        break;\n      }\n      number += source$1[index$1++];\n    }\n\n    if (number.length === 0) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    if (isIdentifierStart(source$1.charCodeAt(index$1))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseInt('0x' + number, 16),\n      start: start,\n      end: index$1\n    };\n  }\n\n  function scanOctalLiteral(start) {\n    var number = '0' + source$1[index$1++];\n    while (index$1 < length) {\n      if (!isOctalDigit(source$1[index$1])) {\n        break;\n      }\n      number += source$1[index$1++];\n    }\n\n    if (isIdentifierStart(source$1.charCodeAt(index$1)) || isDecimalDigit(source$1.charCodeAt(index$1))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseInt(number, 8),\n      octal: true,\n      start: start,\n      end: index$1\n    };\n  }\n\n  function scanNumericLiteral() {\n    var number, start, ch;\n\n    ch = source$1[index$1];\n    assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\n      'Numeric literal must start with a decimal digit or a decimal point');\n\n    start = index$1;\n    number = '';\n    if (ch !== '.') {\n      number = source$1[index$1++];\n      ch = source$1[index$1];\n\n      // Hex number starts with '0x'.\n      // Octal number starts with '0'.\n      if (number === '0') {\n        if (ch === 'x' || ch === 'X') {\n          ++index$1;\n          return scanHexLiteral(start);\n        }\n        if (isOctalDigit(ch)) {\n          return scanOctalLiteral(start);\n        }\n\n        // decimal number starts with '0' such as '09' is illegal.\n        if (ch && isDecimalDigit(ch.charCodeAt(0))) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL);\n        }\n      }\n\n      while (isDecimalDigit(source$1.charCodeAt(index$1))) {\n        number += source$1[index$1++];\n      }\n      ch = source$1[index$1];\n    }\n\n    if (ch === '.') {\n      number += source$1[index$1++];\n      while (isDecimalDigit(source$1.charCodeAt(index$1))) {\n        number += source$1[index$1++];\n      }\n      ch = source$1[index$1];\n    }\n\n    if (ch === 'e' || ch === 'E') {\n      number += source$1[index$1++];\n\n      ch = source$1[index$1];\n      if (ch === '+' || ch === '-') {\n        number += source$1[index$1++];\n      }\n      if (isDecimalDigit(source$1.charCodeAt(index$1))) {\n        while (isDecimalDigit(source$1.charCodeAt(index$1))) {\n          number += source$1[index$1++];\n        }\n      } else {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n    }\n\n    if (isIdentifierStart(source$1.charCodeAt(index$1))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseFloat(number),\n      start: start,\n      end: index$1\n    };\n  }\n\n  // 7.8.4 String Literals\n\n  function scanStringLiteral() {\n    var str = '',\n      quote, start, ch, code, octal = false;\n\n    quote = source$1[index$1];\n    assert((quote === '\\'' || quote === '\"'),\n      'String literal must starts with a quote');\n\n    start = index$1;\n    ++index$1;\n\n    while (index$1 < length) {\n      ch = source$1[index$1++];\n\n      if (ch === quote) {\n        quote = '';\n        break;\n      } else if (ch === '\\\\') {\n        ch = source$1[index$1++];\n        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n          switch (ch) {\n            case 'u':\n            case 'x':\n              if (source$1[index$1] === '{') {\n                ++index$1;\n                str += scanUnicodeCodePointEscape();\n              } else {\n                str += scanHexEscape(ch);\n              }\n              break;\n            case 'n':\n              str += '\\n';\n              break;\n            case 'r':\n              str += '\\r';\n              break;\n            case 't':\n              str += '\\t';\n              break;\n            case 'b':\n              str += '\\b';\n              break;\n            case 'f':\n              str += '\\f';\n              break;\n            case 'v':\n              str += '\\x0B';\n              break;\n\n            default:\n              if (isOctalDigit(ch)) {\n                code = '01234567'.indexOf(ch);\n\n                // \\0 is not octal escape sequence\n                if (code !== 0) {\n                  octal = true;\n                }\n\n                if (index$1 < length && isOctalDigit(source$1[index$1])) {\n                  octal = true;\n                  code = code * 8 + '01234567'.indexOf(source$1[index$1++]);\n\n                  // 3 digits are only allowed when string starts\n                  // with 0, 1, 2, 3\n                  if ('0123'.indexOf(ch) >= 0 &&\n                    index$1 < length &&\n                    isOctalDigit(source$1[index$1])) {\n                    code = code * 8 + '01234567'.indexOf(source$1[index$1++]);\n                  }\n                }\n                str += String.fromCharCode(code);\n              } else {\n                str += ch;\n              }\n              break;\n          }\n        } else {\n          if (ch === '\\r' && source$1[index$1] === '\\n') {\n            ++index$1;\n          }\n        }\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\n        break;\n      } else {\n        str += ch;\n      }\n    }\n\n    if (quote !== '') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    return {\n      type: TokenStringLiteral,\n      value: str,\n      octal: octal,\n      start: start,\n      end: index$1\n    };\n  }\n\n  function testRegExp(pattern, flags) {\n    var tmp = pattern;\n\n    if (flags.indexOf('u') >= 0) {\n      // Replace each astral symbol and every Unicode code point\n      // escape sequence with a single ASCII symbol to avoid throwing on\n      // regular expressions that are only valid in combination with the\n      // `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it\n      // would be replaced by `[x-b]` which throws an error.\n      tmp = tmp\n        .replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function($0, $1) {\n          if (parseInt($1, 16) <= 0x10FFFF) {\n            return 'x';\n          }\n          throwError({}, MessageInvalidRegExp);\n        })\n        .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, 'x');\n    }\n\n    // First, detect invalid regular expressions.\n    try {\n      new RegExp(tmp);\n    } catch (e) {\n      throwError({}, MessageInvalidRegExp);\n    }\n\n    // Return a regular expression object for this pattern-flag pair, or\n    // `null` in case the current environment doesn't support the flags it\n    // uses.\n    try {\n      return new RegExp(pattern, flags);\n    } catch (exception) {\n      return null;\n    }\n  }\n\n  function scanRegExpBody() {\n    var ch, str, classMarker, terminated, body;\n\n    ch = source$1[index$1];\n    assert(ch === '/', 'Regular expression literal must start with a slash');\n    str = source$1[index$1++];\n\n    classMarker = false;\n    terminated = false;\n    while (index$1 < length) {\n      ch = source$1[index$1++];\n      str += ch;\n      if (ch === '\\\\') {\n        ch = source$1[index$1++];\n        // ECMA-262 7.8.5\n        if (isLineTerminator(ch.charCodeAt(0))) {\n          throwError({}, MessageUnterminatedRegExp);\n        }\n        str += ch;\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\n        throwError({}, MessageUnterminatedRegExp);\n      } else if (classMarker) {\n        if (ch === ']') {\n          classMarker = false;\n        }\n      } else {\n        if (ch === '/') {\n          terminated = true;\n          break;\n        } else if (ch === '[') {\n          classMarker = true;\n        }\n      }\n    }\n\n    if (!terminated) {\n      throwError({}, MessageUnterminatedRegExp);\n    }\n\n    // Exclude leading and trailing slash.\n    body = str.substr(1, str.length - 2);\n    return {\n      value: body,\n      literal: str\n    };\n  }\n\n  function scanRegExpFlags() {\n    var ch, str, flags;\n\n    str = '';\n    flags = '';\n    while (index$1 < length) {\n      ch = source$1[index$1];\n      if (!isIdentifierPart(ch.charCodeAt(0))) {\n        break;\n      }\n\n      ++index$1;\n      if (ch === '\\\\' && index$1 < length) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      } else {\n        flags += ch;\n        str += ch;\n      }\n    }\n\n    if (flags.search(/[^gimuy]/g) >= 0) {\n      throwError({}, MessageInvalidRegExp, flags);\n    }\n\n    return {\n      value: flags,\n      literal: str\n    };\n  }\n\n  function scanRegExp() {\n    var start, body, flags, value;\n\n    lookahead = null;\n    skipComment();\n    start = index$1;\n\n    body = scanRegExpBody();\n    flags = scanRegExpFlags();\n    value = testRegExp(body.value, flags.value);\n\n    return {\n      literal: body.literal + flags.literal,\n      value: value,\n      regex: {\n        pattern: body.value,\n        flags: flags.value\n      },\n      start: start,\n      end: index$1\n    };\n  }\n\n  function isIdentifierName(token) {\n    return token.type === TokenIdentifier ||\n      token.type === TokenKeyword ||\n      token.type === TokenBooleanLiteral ||\n      token.type === TokenNullLiteral;\n  }\n\n  function advance() {\n    var ch;\n\n    skipComment();\n\n    if (index$1 >= length) {\n      return {\n        type: TokenEOF,\n        start: index$1,\n        end: index$1\n      };\n    }\n\n    ch = source$1.charCodeAt(index$1);\n\n    if (isIdentifierStart(ch)) {\n      return scanIdentifier();\n    }\n\n    // Very common: ( and ) and ;\n    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\n      return scanPunctuator();\n    }\n\n    // String literal starts with single quote (U+0027) or double quote (U+0022).\n    if (ch === 0x27 || ch === 0x22) {\n      return scanStringLiteral();\n    }\n\n\n    // Dot (.) U+002E can also start a floating-point number, hence the need\n    // to check the next character.\n    if (ch === 0x2E) {\n      if (isDecimalDigit(source$1.charCodeAt(index$1 + 1))) {\n        return scanNumericLiteral();\n      }\n      return scanPunctuator();\n    }\n\n    if (isDecimalDigit(ch)) {\n      return scanNumericLiteral();\n    }\n\n    return scanPunctuator();\n  }\n\n  function lex() {\n    var token;\n\n    token = lookahead;\n    index$1 = token.end;\n\n    lookahead = advance();\n\n    index$1 = token.end;\n\n    return token;\n  }\n\n  function peek$1() {\n    var pos;\n\n    pos = index$1;\n\n    lookahead = advance();\n    index$1 = pos;\n  }\n\n  function finishArrayExpression(elements) {\n    var node = new ASTNode(SyntaxArrayExpression);\n    node.elements = elements;\n    return node;\n  }\n\n  function finishBinaryExpression(operator, left, right) {\n    var node = new ASTNode((operator === '||' || operator === '&&') ? SyntaxLogicalExpression : SyntaxBinaryExpression);\n    node.operator = operator;\n    node.left = left;\n    node.right = right;\n    return node;\n  }\n\n  function finishCallExpression(callee, args) {\n    var node = new ASTNode(SyntaxCallExpression);\n    node.callee = callee;\n    node.arguments = args;\n    return node;\n  }\n\n  function finishConditionalExpression(test, consequent, alternate) {\n    var node = new ASTNode(SyntaxConditionalExpression);\n    node.test = test;\n    node.consequent = consequent;\n    node.alternate = alternate;\n    return node;\n  }\n\n  function finishIdentifier(name) {\n    var node = new ASTNode(SyntaxIdentifier);\n    node.name = name;\n    return node;\n  }\n\n  function finishLiteral(token) {\n    var node = new ASTNode(SyntaxLiteral);\n    node.value = token.value;\n    node.raw = source$1.slice(token.start, token.end);\n    if (token.regex) {\n      if (node.raw === '//') {\n        node.raw = '/(?:)/';\n      }\n      node.regex = token.regex;\n    }\n    return node;\n  }\n\n  function finishMemberExpression(accessor, object, property) {\n    var node = new ASTNode(SyntaxMemberExpression);\n    node.computed = accessor === '[';\n    node.object = object;\n    node.property = property;\n    if (!node.computed) property.member = true;\n    return node;\n  }\n\n  function finishObjectExpression(properties) {\n    var node = new ASTNode(SyntaxObjectExpression);\n    node.properties = properties;\n    return node;\n  }\n\n  function finishProperty(kind, key, value) {\n    var node = new ASTNode(SyntaxProperty);\n    node.key = key;\n    node.value = value;\n    node.kind = kind;\n    return node;\n  }\n\n  function finishUnaryExpression(operator, argument) {\n    var node = new ASTNode(SyntaxUnaryExpression);\n    node.operator = operator;\n    node.argument = argument;\n    node.prefix = true;\n    return node;\n  }\n\n  // Throw an exception\n\n  function throwError(token, messageFormat) {\n    var error,\n      args = Array.prototype.slice.call(arguments, 2),\n      msg = messageFormat.replace(\n        /%(\\d)/g,\n        function(whole, index) {\n          assert(index < args.length, 'Message reference must be in range');\n          return args[index];\n        }\n      );\n\n\n    error = new Error(msg);\n    error.index = index$1;\n    error.description = msg;\n    throw error;\n  }\n\n  // Throw an exception because of the token.\n\n  function throwUnexpected(token) {\n    if (token.type === TokenEOF) {\n      throwError(token, MessageUnexpectedEOS);\n    }\n\n    if (token.type === TokenNumericLiteral) {\n      throwError(token, MessageUnexpectedNumber);\n    }\n\n    if (token.type === TokenStringLiteral) {\n      throwError(token, MessageUnexpectedString);\n    }\n\n    if (token.type === TokenIdentifier) {\n      throwError(token, MessageUnexpectedIdentifier);\n    }\n\n    if (token.type === TokenKeyword) {\n      throwError(token, MessageUnexpectedReserved);\n    }\n\n    // BooleanLiteral, NullLiteral, or Punctuator.\n    throwError(token, MessageUnexpectedToken, token.value);\n  }\n\n  // Expect the next token to match the specified punctuator.\n  // If not, an exception will be thrown.\n\n  function expect(value) {\n    var token = lex();\n    if (token.type !== TokenPunctuator || token.value !== value) {\n      throwUnexpected(token);\n    }\n  }\n\n  // Return true if the next token matches the specified punctuator.\n\n  function match(value) {\n    return lookahead.type === TokenPunctuator && lookahead.value === value;\n  }\n\n  // Return true if the next token matches the specified keyword\n\n  function matchKeyword(keyword) {\n    return lookahead.type === TokenKeyword && lookahead.value === keyword;\n  }\n\n  // 11.1.4 Array Initialiser\n\n  function parseArrayInitialiser() {\n    var elements = [];\n\n    index$1 = lookahead.start;\n    expect('[');\n\n    while (!match(']')) {\n      if (match(',')) {\n        lex();\n        elements.push(null);\n      } else {\n        elements.push(parseConditionalExpression());\n\n        if (!match(']')) {\n          expect(',');\n        }\n      }\n    }\n\n    lex();\n\n    return finishArrayExpression(elements);\n  }\n\n  // 11.1.5 Object Initialiser\n\n  function parseObjectPropertyKey() {\n    var token;\n\n    index$1 = lookahead.start;\n    token = lex();\n\n    // Note: This function is called only from parseObjectProperty(), where\n    // EOF and Punctuator tokens are already filtered out.\n\n    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {\n      if (token.octal) {\n        throwError(token, MessageStrictOctalLiteral);\n      }\n      return finishLiteral(token);\n    }\n\n    return finishIdentifier(token.value);\n  }\n\n  function parseObjectProperty() {\n    var token, key, id, value;\n\n    index$1 = lookahead.start;\n    token = lookahead;\n\n    if (token.type === TokenIdentifier) {\n      id = parseObjectPropertyKey();\n      expect(':');\n      value = parseConditionalExpression();\n      return finishProperty('init', id, value);\n    }\n    if (token.type === TokenEOF || token.type === TokenPunctuator) {\n      throwUnexpected(token);\n    } else {\n      key = parseObjectPropertyKey();\n      expect(':');\n      value = parseConditionalExpression();\n      return finishProperty('init', key, value);\n    }\n  }\n\n  function parseObjectInitialiser() {\n    var properties = [],\n      property, name, key, map = {},\n      toString = String;\n\n    index$1 = lookahead.start;\n    expect('{');\n\n    while (!match('}')) {\n      property = parseObjectProperty();\n\n      if (property.key.type === SyntaxIdentifier) {\n        name = property.key.name;\n      } else {\n        name = toString(property.key.value);\n      }\n\n      key = '$' + name;\n      if (Object.prototype.hasOwnProperty.call(map, key)) {\n        throwError({}, MessageStrictDuplicateProperty);\n      } else {\n        map[key] = true;\n      }\n\n      properties.push(property);\n\n      if (!match('}')) {\n        expect(',');\n      }\n    }\n\n    expect('}');\n\n    return finishObjectExpression(properties);\n  }\n\n  // 11.1.6 The Grouping Operator\n\n  function parseGroupExpression() {\n    var expr;\n\n    expect('(');\n\n    expr = parseExpression();\n\n    expect(')');\n\n    return expr;\n  }\n\n\n  // 11.1 Primary Expressions\n\n  var legalKeywords = {\n    \"if\": 1,\n    \"this\": 1\n  };\n\n  function parsePrimaryExpression() {\n    var type, token, expr;\n\n    if (match('(')) {\n      return parseGroupExpression();\n    }\n\n    if (match('[')) {\n      return parseArrayInitialiser();\n    }\n\n    if (match('{')) {\n      return parseObjectInitialiser();\n    }\n\n    type = lookahead.type;\n    index$1 = lookahead.start;\n\n\n    if (type === TokenIdentifier || legalKeywords[lookahead.value]) {\n      expr = finishIdentifier(lex().value);\n    } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {\n      if (lookahead.octal) {\n        throwError(lookahead, MessageStrictOctalLiteral);\n      }\n      expr = finishLiteral(lex());\n    } else if (type === TokenKeyword) {\n      throw new Error(DISABLED);\n    } else if (type === TokenBooleanLiteral) {\n      token = lex();\n      token.value = (token.value === 'true');\n      expr = finishLiteral(token);\n    } else if (type === TokenNullLiteral) {\n      token = lex();\n      token.value = null;\n      expr = finishLiteral(token);\n    } else if (match('/') || match('/=')) {\n      expr = finishLiteral(scanRegExp());\n      peek$1();\n    } else {\n      throwUnexpected(lex());\n    }\n\n    return expr;\n  }\n\n  // 11.2 Left-Hand-Side Expressions\n\n  function parseArguments() {\n    var args = [];\n\n    expect('(');\n\n    if (!match(')')) {\n      while (index$1 < length) {\n        args.push(parseConditionalExpression());\n        if (match(')')) {\n          break;\n        }\n        expect(',');\n      }\n    }\n\n    expect(')');\n\n    return args;\n  }\n\n  function parseNonComputedProperty() {\n    var token;\n    index$1 = lookahead.start;\n    token = lex();\n\n    if (!isIdentifierName(token)) {\n      throwUnexpected(token);\n    }\n\n    return finishIdentifier(token.value);\n  }\n\n  function parseNonComputedMember() {\n    expect('.');\n\n    return parseNonComputedProperty();\n  }\n\n  function parseComputedMember() {\n    var expr;\n\n    expect('[');\n\n    expr = parseExpression();\n\n    expect(']');\n\n    return expr;\n  }\n\n  function parseLeftHandSideExpressionAllowCall() {\n    var expr, args, property;\n\n    expr = parsePrimaryExpression();\n\n    for (;;) {\n      if (match('.')) {\n        property = parseNonComputedMember();\n        expr = finishMemberExpression('.', expr, property);\n      } else if (match('(')) {\n        args = parseArguments();\n        expr = finishCallExpression(expr, args);\n      } else if (match('[')) {\n        property = parseComputedMember();\n        expr = finishMemberExpression('[', expr, property);\n      } else {\n        break;\n      }\n    }\n\n    return expr;\n  }\n\n  // 11.3 Postfix Expressions\n\n  function parsePostfixExpression() {\n    var expr = parseLeftHandSideExpressionAllowCall();\n\n    if (lookahead.type === TokenPunctuator) {\n      if ((match('++') || match('--'))) {\n        throw new Error(DISABLED);\n      }\n    }\n\n    return expr;\n  }\n\n  // 11.4 Unary Operators\n\n  function parseUnaryExpression() {\n    var token, expr;\n\n    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {\n      expr = parsePostfixExpression();\n    } else if (match('++') || match('--')) {\n      throw new Error(DISABLED);\n    } else if (match('+') || match('-') || match('~') || match('!')) {\n      token = lex();\n      expr = parseUnaryExpression();\n      expr = finishUnaryExpression(token.value, expr);\n    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n      throw new Error(DISABLED);\n    } else {\n      expr = parsePostfixExpression();\n    }\n\n    return expr;\n  }\n\n  function binaryPrecedence(token) {\n    var prec = 0;\n\n    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {\n      return 0;\n    }\n\n    switch (token.value) {\n      case '||':\n        prec = 1;\n        break;\n\n      case '&&':\n        prec = 2;\n        break;\n\n      case '|':\n        prec = 3;\n        break;\n\n      case '^':\n        prec = 4;\n        break;\n\n      case '&':\n        prec = 5;\n        break;\n\n      case '==':\n      case '!=':\n      case '===':\n      case '!==':\n        prec = 6;\n        break;\n\n      case '<':\n      case '>':\n      case '<=':\n      case '>=':\n      case 'instanceof':\n      case 'in':\n        prec = 7;\n        break;\n\n      case '<<':\n      case '>>':\n      case '>>>':\n        prec = 8;\n        break;\n\n      case '+':\n      case '-':\n        prec = 9;\n        break;\n\n      case '*':\n      case '/':\n      case '%':\n        prec = 11;\n        break;\n    }\n\n    return prec;\n  }\n\n  // 11.5 Multiplicative Operators\n  // 11.6 Additive Operators\n  // 11.7 Bitwise Shift Operators\n  // 11.8 Relational Operators\n  // 11.9 Equality Operators\n  // 11.10 Binary Bitwise Operators\n  // 11.11 Binary Logical Operators\n\n  function parseBinaryExpression() {\n    var marker, markers, expr, token, prec, stack, right, operator, left, i;\n\n    marker = lookahead;\n    left = parseUnaryExpression();\n\n    token = lookahead;\n    prec = binaryPrecedence(token);\n    if (prec === 0) {\n      return left;\n    }\n    token.prec = prec;\n    lex();\n\n    markers = [marker, lookahead];\n    right = parseUnaryExpression();\n\n    stack = [left, token, right];\n\n    while ((prec = binaryPrecedence(lookahead)) > 0) {\n\n      // Reduce: make a binary expression from the three topmost entries.\n      while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n        right = stack.pop();\n        operator = stack.pop().value;\n        left = stack.pop();\n        markers.pop();\n        expr = finishBinaryExpression(operator, left, right);\n        stack.push(expr);\n      }\n\n      // Shift.\n      token = lex();\n      token.prec = prec;\n      stack.push(token);\n      markers.push(lookahead);\n      expr = parseUnaryExpression();\n      stack.push(expr);\n    }\n\n    // Final reduce to clean-up the stack.\n    i = stack.length - 1;\n    expr = stack[i];\n    markers.pop();\n    while (i > 1) {\n      markers.pop();\n      expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n      i -= 2;\n    }\n\n    return expr;\n  }\n\n  // 11.12 Conditional Operator\n\n  function parseConditionalExpression() {\n    var expr, consequent, alternate;\n\n    expr = parseBinaryExpression();\n\n    if (match('?')) {\n      lex();\n      consequent = parseConditionalExpression();\n      expect(':');\n      alternate = parseConditionalExpression();\n\n      expr = finishConditionalExpression(expr, consequent, alternate);\n    }\n\n    return expr;\n  }\n\n  // 11.14 Comma Operator\n\n  function parseExpression() {\n    var expr = parseConditionalExpression();\n\n    if (match(',')) {\n      throw new Error(DISABLED); // no sequence expressions\n    }\n\n    return expr;\n  }\n\n  function parse$3(code) {\n    source$1 = code;\n    index$1 = 0;\n    length = source$1.length;\n    lookahead = null;\n\n    peek$1();\n\n    var expr = parseExpression();\n\n    if (lookahead.type !== TokenEOF) {\n      throw new Error(\"Unexpect token after expression.\");\n    }\n    return expr;\n  }\n\n  var constants = {\n    NaN:       'NaN',\n    E:         'Math.E',\n    LN2:       'Math.LN2',\n    LN10:      'Math.LN10',\n    LOG2E:     'Math.LOG2E',\n    LOG10E:    'Math.LOG10E',\n    PI:        'Math.PI',\n    SQRT1_2:   'Math.SQRT1_2',\n    SQRT2:     'Math.SQRT2',\n    MIN_VALUE: 'Number.MIN_VALUE',\n    MAX_VALUE: 'Number.MAX_VALUE'\n  };\n\n  function functions(codegen) {\n\n    function fncall(name, args, cast, type) {\n      var obj = codegen(args[0]);\n      if (cast) {\n        obj = cast + '(' + obj + ')';\n        if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';\n      }\n      return obj + '.' + name + (type < 0 ? '' : type === 0 ?\n        '()' :\n        '(' + args.slice(1).map(codegen).join(',') + ')');\n    }\n\n    function fn(name, cast, type) {\n      return function(args) {\n        return fncall(name, args, cast, type);\n      };\n    }\n\n    var DATE = 'new Date',\n        STRING = 'String',\n        REGEXP = 'RegExp';\n\n    return {\n      // MATH functions\n      isNaN:    'Number.isNaN',\n      isFinite: 'Number.isFinite',\n      abs:      'Math.abs',\n      acos:     'Math.acos',\n      asin:     'Math.asin',\n      atan:     'Math.atan',\n      atan2:    'Math.atan2',\n      ceil:     'Math.ceil',\n      cos:      'Math.cos',\n      exp:      'Math.exp',\n      floor:    'Math.floor',\n      log:      'Math.log',\n      max:      'Math.max',\n      min:      'Math.min',\n      pow:      'Math.pow',\n      random:   'Math.random',\n      round:    'Math.round',\n      sin:      'Math.sin',\n      sqrt:     'Math.sqrt',\n      tan:      'Math.tan',\n\n      clamp: function(args) {\n        if (args.length < 3) error('Missing arguments to clamp function.');\n        if (args.length > 3) error('Too many arguments to clamp function.');\n        var a = args.map(codegen);\n        return 'Math.max('+a[1]+', Math.min('+a[2]+','+a[0]+'))';\n      },\n\n      // DATE functions\n      now:             'Date.now',\n      utc:             'Date.UTC',\n      datetime:        DATE,\n      date:            fn('getDate', DATE, 0),\n      day:             fn('getDay', DATE, 0),\n      year:            fn('getFullYear', DATE, 0),\n      month:           fn('getMonth', DATE, 0),\n      hours:           fn('getHours', DATE, 0),\n      minutes:         fn('getMinutes', DATE, 0),\n      seconds:         fn('getSeconds', DATE, 0),\n      milliseconds:    fn('getMilliseconds', DATE, 0),\n      time:            fn('getTime', DATE, 0),\n      timezoneoffset:  fn('getTimezoneOffset', DATE, 0),\n      utcdate:         fn('getUTCDate', DATE, 0),\n      utcday:          fn('getUTCDay', DATE, 0),\n      utcyear:         fn('getUTCFullYear', DATE, 0),\n      utcmonth:        fn('getUTCMonth', DATE, 0),\n      utchours:        fn('getUTCHours', DATE, 0),\n      utcminutes:      fn('getUTCMinutes', DATE, 0),\n      utcseconds:      fn('getUTCSeconds', DATE, 0),\n      utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),\n\n      // sequence functions\n      length:      fn('length', null, -1),\n      join:        fn('join', null),\n      indexof:     fn('indexOf', null),\n      lastindexof: fn('lastIndexOf', null),\n      slice:       fn('slice', null),\n\n      reverse: function(args) {\n        return '('+codegen(args[0])+').slice().reverse()';\n      },\n\n      // STRING functions\n      parseFloat:  'parseFloat',\n      parseInt:    'parseInt',\n      upper:       fn('toUpperCase', STRING, 0),\n      lower:       fn('toLowerCase', STRING, 0),\n      substring:   fn('substring', STRING),\n      split:       fn('split', STRING),\n      replace:     fn('replace', STRING),\n      trim:        fn('trim', STRING, 0),\n\n      // REGEXP functions\n      regexp:  REGEXP,\n      test:    fn('test', REGEXP),\n\n      // Control Flow functions\n      if: function(args) {\n          if (args.length < 3) error('Missing arguments to if function.');\n          if (args.length > 3) error('Too many arguments to if function.');\n          var a = args.map(codegen);\n          return '('+a[0]+'?'+a[1]+':'+a[2]+')';\n        }\n    };\n  }\n\n  function stripQuotes(s) {\n    var n = s && s.length - 1;\n    return n && (\n        (s[0]==='\"' && s[n]==='\"') ||\n        (s[0]==='\\'' && s[n]==='\\'')\n      ) ? s.slice(1, -1) : s;\n  }\n\n  function codegen(opt) {\n    opt = opt || {};\n\n    var whitelist = opt.whitelist ? toSet(opt.whitelist) : {},\n        blacklist = opt.blacklist ? toSet(opt.blacklist) : {},\n        constants$1 = opt.constants || constants,\n        functions$1 = (opt.functions || functions)(visit),\n        globalvar = opt.globalvar,\n        fieldvar = opt.fieldvar,\n        globals = {},\n        fields = {},\n        memberDepth = 0;\n\n    var outputGlobal = isFunction(globalvar)\n      ? globalvar\n      : function (id) { return globalvar + '[\"' + id + '\"]'; };\n\n    function visit(ast) {\n      if (isString(ast)) return ast;\n      var generator = Generators[ast.type];\n      if (generator == null) error('Unsupported type: ' + ast.type);\n      return generator(ast);\n    }\n\n    var Generators = {\n      Literal: function(n) {\n          return n.raw;\n        },\n\n      Identifier: function(n) {\n        var id = n.name;\n        if (memberDepth > 0) {\n          return id;\n        } else if (hasOwnProperty(blacklist, id)) {\n          return error('Illegal identifier: ' + id);\n        } else if (hasOwnProperty(constants$1, id)) {\n          return constants$1[id];\n        } else if (hasOwnProperty(whitelist, id)) {\n          return id;\n        } else {\n          globals[id] = 1;\n          return outputGlobal(id);\n        }\n      },\n\n      MemberExpression: function(n) {\n          var d = !n.computed;\n          var o = visit(n.object);\n          if (d) memberDepth += 1;\n          var p = visit(n.property);\n          if (o === fieldvar) {\n            // strip quotes to sanitize field name (#1653)\n            fields[stripQuotes(p)] = 1;\n          }\n          if (d) memberDepth -= 1;\n          return o + (d ? '.'+p : '['+p+']');\n        },\n\n      CallExpression: function(n) {\n          if (n.callee.type !== 'Identifier') {\n            error('Illegal callee type: ' + n.callee.type);\n          }\n          var callee = n.callee.name;\n          var args = n.arguments;\n          var fn = hasOwnProperty(functions$1, callee) && functions$1[callee];\n          if (!fn) error('Unrecognized function: ' + callee);\n          return isFunction(fn)\n            ? fn(args)\n            : fn + '(' + args.map(visit).join(',') + ')';\n        },\n\n      ArrayExpression: function(n) {\n          return '[' + n.elements.map(visit).join(',') + ']';\n        },\n\n      BinaryExpression: function(n) {\n          return '(' + visit(n.left) + n.operator + visit(n.right) + ')';\n        },\n\n      UnaryExpression: function(n) {\n          return '(' + n.operator + visit(n.argument) + ')';\n        },\n\n      ConditionalExpression: function(n) {\n          return '(' + visit(n.test) +\n            '?' + visit(n.consequent) +\n            ':' + visit(n.alternate) +\n            ')';\n        },\n\n      LogicalExpression: function(n) {\n          return '(' + visit(n.left) + n.operator + visit(n.right) + ')';\n        },\n\n      ObjectExpression: function(n) {\n          return '{' + n.properties.map(visit).join(',') + '}';\n        },\n\n      Property: function(n) {\n          memberDepth += 1;\n          var k = visit(n.key);\n          memberDepth -= 1;\n          return k + ':' + visit(n.value);\n        }\n    };\n\n    function codegen(ast) {\n      var result = {\n        code:    visit(ast),\n        globals: Object.keys(globals),\n        fields:  Object.keys(fields)\n      };\n      globals = {};\n      fields = {};\n      return result;\n    }\n\n    codegen.functions = functions$1;\n    codegen.constants = constants$1;\n\n    return codegen;\n  }\n\n  const Intersect = 'intersect';\n  const Union = 'union';\n  const VlMulti = 'vlMulti';\n  const Or = 'or';\n  const And = 'and';\n\n  var TYPE_ENUM = 'E',\n      TYPE_RANGE_INC = 'R',\n      TYPE_RANGE_EXC = 'R-E',\n      TYPE_RANGE_LE = 'R-LE',\n      TYPE_RANGE_RE = 'R-RE',\n      UNIT_INDEX = 'index:unit';\n\n  // TODO: revisit date coercion?\n  function testPoint(datum, entry) {\n    var fields = entry.fields,\n        values = entry.values,\n        n = fields.length,\n        i = 0, dval, f;\n\n    for (; i<n; ++i) {\n      f = fields[i];\n      f.getter = field.getter || field(f.field);\n      dval = f.getter(datum);\n\n      if (isDate(dval)) dval = toNumber(dval);\n      if (isDate(values[i])) values[i] = toNumber(values[i]);\n      if (isDate(values[i][0])) values[i] = values[i].map(toNumber);\n\n      if (f.type === TYPE_ENUM) {\n        // Enumerated fields can either specify individual values (single/multi selections)\n        // or an array of values (interval selections).\n        if(isArray(values[i]) ? values[i].indexOf(dval) < 0 : dval !== values[i]) {\n          return false;\n        }\n      } else {\n        if (f.type === TYPE_RANGE_INC) {\n          if (!inrange(dval, values[i])) return false;\n        } else if (f.type === TYPE_RANGE_RE) {\n          // Discrete selection of bins test within the range [bin_start, bin_end).\n          if (!inrange(dval, values[i], true, false)) return false;\n        } else if (f.type === TYPE_RANGE_EXC) { // 'R-E'/'R-LE' included for completeness.\n          if (!inrange(dval, values[i], false, false)) return false;\n        } else if (f.type === TYPE_RANGE_LE) {\n          if (!inrange(dval, values[i], false, true)) return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Tests if a tuple is contained within an interactive selection.\n   * @param {string} name - The name of the data set representing the selection.\n   *  Tuples in the dataset are of the form\n   *  {unit: string, fields: array<fielddef>, values: array<*>}.\n   *  Fielddef is of the form\n   *  {field: string, channel: string, type: 'E' | 'R'} where\n   *  'type' identifies whether tuples in the dataset enumerate\n   *  values for the field, or specify a continuous range.\n   * @param {object} datum - The tuple to test for inclusion.\n   * @param {string} op - The set operation for combining selections.\n   *   One of 'intersect' or 'union' (default).\n   * @return {boolean} - True if the datum is in the selection, false otherwise.\n   */\n  function selectionTest(name, datum, op) {\n    var data = this.context.data[name],\n        entries = data ? data.values.value : [],\n        unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,\n        intersect = op === Intersect,\n        n = entries.length,\n        i = 0,\n        entry, miss, count, unit, b;\n\n    for (; i<n; ++i) {\n      entry = entries[i];\n\n      if (unitIdx && intersect) {\n        // multi selections union within the same unit and intersect across units.\n        miss = miss || {};\n        count = miss[unit=entry.unit] || 0;\n\n        // if we've already matched this unit, skip.\n        if (count === -1) continue;\n\n        b = testPoint(datum, entry);\n        miss[unit] = b ? -1 : ++count;\n\n        // if we match and there are no other units return true\n        // if we've missed against all tuples in this unit return false\n        if (b && unitIdx.size === 1) return true;\n        if (!b && count === unitIdx.get(unit).count) return false;\n      } else {\n        b = testPoint(datum, entry);\n\n        // if we find a miss and we do require intersection return false\n        // if we find a match and we don't require intersection return true\n        if (intersect ^ b) return b;\n      }\n    }\n\n    // if intersecting and we made it here, then we saw no misses\n    // if not intersecting, then we saw no matches\n    // if no active selections, return false\n    return n && intersect;\n  }\n\n  /**\n   * Resolves selection for use as a scale domain or reads via the API.\n   * @param {string} name - The name of the dataset representing the selection\n   * @param {string} [op='union'] - The set operation for combining selections.\n   *                 One of 'intersect' or 'union' (default).\n   * @returns {object} An object of selected fields and values.\n   */\n  function selectionResolve(name, op, isMulti) {\n    var data = this.context.data[name],\n      entries = data ? data.values.value : [],\n      resolved = {}, multiRes = {}, types = {},\n      entry, fields, values, unit, field, res, resUnit, type, union,\n      n = entries.length, i = 0, j, m;\n\n    // First union all entries within the same unit.\n    for (; i < n; ++i) {\n      entry = entries[i];\n      unit = entry.unit;\n      fields = entry.fields;\n      values = entry.values;\n\n      for (j = 0, m = fields.length; j < m; ++j) {\n        field = fields[j];\n        res = resolved[field.field] || (resolved[field.field] = {});\n        resUnit = res[unit] || (res[unit] = []);\n        types[field.field] = type = field.type.charAt(0);\n        union = ops[type + '_union'];\n        res[unit] = union(resUnit, array(values[j]));\n      }\n\n      // If the same multi-selection is repeated over views and projected over\n      // an encoding, it may operate over different fields making it especially\n      // tricky to reliably resolve it. At best, we can de-dupe identical entries\n      // but doing so may be more computationally expensive than it is worth.\n      // Instead, for now, we simply transform our store representation into\n      // a more human-friendly one.\n      if (isMulti) {\n        resUnit = multiRes[unit] || (multiRes[unit] = []);\n        resUnit.push(array(values).reduce((obj, curr, j) => (obj[fields[j].field] = curr, obj), {}));\n      }\n    }\n\n    // Then resolve fields across units as per the op.\n    op = op || Union;\n    Object.keys(resolved).forEach(function (field) {\n      resolved[field] = Object.keys(resolved[field])\n        .map(unit => resolved[field][unit])\n        .reduce((acc, curr) => acc === undefined ? curr : ops[types[field] + '_' + op](acc, curr));\n    });\n\n    entries = Object.keys(multiRes);\n    if (isMulti && entries.length) {\n      resolved[VlMulti] = op === Union\n        ? {[Or]: entries.reduce((acc, k) => (acc.push.apply(acc, multiRes[k]), acc), [])}\n        : {[And]: entries.map(k => ({[Or]: multiRes[k]}))};\n    }\n\n    return resolved;\n  }\n\n  var ops = {\n    E_union: function(base, value) {\n      if (!base.length) return value;\n\n      var i = 0, n = value.length;\n      for (; i<n; ++i) if (base.indexOf(value[i]) < 0) base.push(value[i]);\n      return base;\n    },\n\n    E_intersect: function(base, value) {\n      return !base.length ? value :\n        base.filter(function (v) { return value.indexOf(v) >= 0; });\n    },\n\n    R_union: function(base, value) {\n      var lo = toNumber(value[0]), hi = toNumber(value[1]);\n      if (lo > hi) {\n        lo = value[1];\n        hi = value[0];\n      }\n\n      if (!base.length) return [lo, hi];\n      if (base[0] > lo) base[0] = lo;\n      if (base[1] < hi) base[1] = hi;\n      return base;\n    },\n\n    R_intersect: function(base, value) {\n      var lo = toNumber(value[0]), hi = toNumber(value[1]);\n      if (lo > hi) {\n        lo = value[1];\n        hi = value[0];\n      }\n\n      if (!base.length) return [lo, hi];\n      if (hi < base[0] || base[1] < lo) {\n        return [];\n      } else {\n        if (base[0] < lo) base[0] = lo;\n        if (base[1] > hi) base[1] = hi;\n      }\n      return base;\n    }\n  };\n\n  const DataPrefix = ':',\n        IndexPrefix = '@';\n\n  function selectionVisitor(name, args, scope, params) {\n    if (args[0].type !== Literal) error('First argument to selection functions must be a string literal.');\n\n    const data = args[0].value,\n          op = args.length >= 2 && peek(args).value,\n          field = 'unit',\n          indexName = IndexPrefix + field,\n          dataName = DataPrefix + data;\n\n    // eslint-disable-next-line no-prototype-builtins\n    if (op === Intersect && !hasOwnProperty(params, indexName)) {\n      params[indexName] = scope.getData(data).indataRef(scope, field);\n    }\n\n    // eslint-disable-next-line no-prototype-builtins\n    if (!hasOwnProperty(params, dataName)) {\n      params[dataName] = scope.getData(data).tuplesRef();\n    }\n  }\n\n  // https://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n  function channel_luminance_value(channelValue) {\n    const val = channelValue / 255;\n    if (val <= 0.03928) {\n      return val / 12.92;\n    }\n    return Math.pow((val + 0.055) / 1.055, 2.4);\n  }\n\n  function luminance(color) {\n    const c = rgb(color),\n          r = channel_luminance_value(c.r),\n          g = channel_luminance_value(c.g),\n          b = channel_luminance_value(c.b);\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  }\n\n  // https://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n  function contrast(color1, color2) {\n    const lum1 = luminance(color1),\n          lum2 = luminance(color2),\n          lumL = Math.max(lum1, lum2),\n          lumD = Math.min(lum1, lum2);\n    return (lumL + 0.05) / (lumD + 0.05);\n  }\n\n  function data$1(name) {\n    const data = this.context.data[name];\n    return data ? data.values.value : [];\n  }\n\n  function indata(name, field, value) {\n    const index = this.context.data[name]['index:' + field],\n          entry = index ? index.value.get(value) : undefined;\n    return entry ? entry.count : entry;\n  }\n\n  function setdata(name, tuples) {\n    const df = this.context.dataflow,\n          data = this.context.data[name],\n          input = data.input;\n\n    df.pulse(input, df.changeset().remove(truthy).insert(tuples));\n    return 1;\n  }\n\n  function encode$1(item, name, retval) {\n    if (item) {\n      const df = this.context.dataflow,\n            target = item.mark.source;\n      df.pulse(target, df.changeset().encode(item, name));\n    }\n    return retval !== undefined ? retval : item;\n  }\n\n  const formatCache = {};\n\n  function formatter$1(type, method, specifier) {\n    let k = type + ':' + specifier,\n        e = formatCache[k];\n    if (!e || e[0] !== method) {\n      formatCache[k] = (e = [method, method(specifier)]);\n    }\n    return e[1];\n  }\n\n  function format$2(_, specifier) {\n    return formatter$1('format', format$1, specifier)(_);\n  }\n\n  function timeFormat$2(_, specifier) {\n    return formatter$1('timeFormat', timeFormat$1, specifier)(_);\n  }\n\n  function utcFormat$2(_, specifier) {\n    return formatter$1('utcFormat', utcFormat$1, specifier)(_);\n  }\n\n  function timeParse$1(_, specifier) {\n    return formatter$1('timeParse', timeParse, specifier)(_);\n  }\n\n  function utcParse$1(_, specifier) {\n    return formatter$1('utcParse', utcParse, specifier)(_);\n  }\n\n  var dateObj = new Date(2000, 0, 1);\n\n  function time$1(month, day, specifier) {\n    if (!Number.isInteger(month) || !Number.isInteger(day)) return '';\n    dateObj.setYear(2000);\n    dateObj.setMonth(month);\n    dateObj.setDate(day);\n    return timeFormat$2(dateObj, specifier);\n  }\n\n  function monthFormat(month) {\n    return time$1(month, 1, '%B');\n  }\n\n  function monthAbbrevFormat(month) {\n    return time$1(month, 1, '%b');\n  }\n\n  function dayFormat(day) {\n    return time$1(0, 2 + day, '%A');\n  }\n\n  function dayAbbrevFormat(day) {\n    return time$1(0, 2 + day, '%a');\n  }\n\n  function getScale(name, ctx) {\n    let s;\n    return isFunction(name) ? name\n      : isString(name) ? (s = ctx.scales[name]) && s.value\n      : undefined;\n  }\n\n  function range$3(name, group) {\n    const s = getScale(name, (group || this).context);\n    return s && s.range ? s.range() : [];\n  }\n\n  function domain(name, group) {\n    const s = getScale(name, (group || this).context);\n    return s ? s.domain() : [];\n  }\n\n  function bandwidth(name, group) {\n    const s = getScale(name, (group || this).context);\n    return s && s.bandwidth ? s.bandwidth() : 0;\n  }\n\n  function bandspace(count, paddingInner, paddingOuter) {\n    return bandSpace(count || 0, paddingInner || 0, paddingOuter || 0);\n  }\n\n  function copy$2(name, group) {\n    const s = getScale(name, (group || this).context);\n    return s ? s.copy() : undefined;\n  }\n\n  function scale$3(name, value, group) {\n    const s = getScale(name, (group || this).context);\n    return s && value !== undefined ? s(value) : undefined;\n  }\n\n  function invert(name, range, group) {\n    const s = getScale(name, (group || this).context);\n    return !s ? undefined\n      : isArray(range) ? (s.invertRange || s.invert)(range)\n      : (s.invert || s.invertExtent)(range);\n  }\n\n  function geoMethod(methodName, globalMethod) {\n    return function(projection, geojson, group) {\n      if (projection) {\n        // projection defined, use it\n        const p = getScale(projection, (group || this).context);\n        return p && p.path[methodName](geojson);\n      } else {\n        // projection undefined, use global method\n        return globalMethod(geojson);\n      }\n    };\n  }\n\n  const geoArea = geoMethod('area', area$3);\n  const geoBounds = geoMethod('bounds', bounds$1);\n  const geoCentroid = geoMethod('centroid', centroid);\n\n  function inScope(item) {\n    let group = this.context.group,\n        value = false;\n\n    if (group) while (item) {\n      if (item === group) { value = true; break; }\n      item = item.mark.group;\n    }\n    return value;\n  }\n\n  function intersect$3(b, opt, group) {\n    if (!b) return [];\n\n    const [u, v] = b,\n          box = new Bounds().set(u[0], u[1], v[0], v[1]),\n          scene = group || this.context.dataflow.scenegraph().root;\n\n    return intersect$1(scene, box, filter$2(opt));\n  }\n\n  function filter$2(opt) {\n    let p = null;\n\n    if (opt) {\n      const types = array(opt.marktype),\n            names = array(opt.markname);\n      p = _ => (!types.length || types.some(t => _.marktype === t))\n            && (!names.length || names.some(s => _.name === s));\n    }\n\n    return p;\n  }\n\n  function log$4(df, method, args) {\n    try {\n      df[method].apply(df, ['EXPRESSION'].concat([].slice.call(args)));\n    } catch (err) {\n      df.warn(err);\n    }\n    return args[args.length-1];\n  }\n\n  function warn() {\n    return log$4(this.context.dataflow, 'warn', arguments);\n  }\n\n  function info() {\n    return log$4(this.context.dataflow, 'info', arguments);\n  }\n\n  function debug() {\n    return log$4(this.context.dataflow, 'debug', arguments);\n  }\n\n  function merge$3() {\n    var args = [].slice.call(arguments);\n    args.unshift({});\n    return extend.apply(null, args);\n  }\n\n  function equal(a, b) {\n    return a === b || a !== a && b !== b ? true\n      : isArray(a) ? (\n          isArray(b) && a.length === b.length ? equalArray(a, b) : false\n        )\n      : isObject(a) && isObject(b) ? equalObject(a, b)\n      : false;\n  }\n\n  function equalArray(a, b) {\n    for (let i=0, n=a.length; i<n; ++i) {\n      if (!equal(a[i], b[i])) return false;\n    }\n    return true;\n  }\n\n  function equalObject(a, b) {\n    for (let key in a) {\n      if (!equal(a[key], b[key])) return false;\n    }\n    return true;\n  }\n\n  function removePredicate(props) {\n    return _ => equalObject(props, _);\n  }\n\n  function modify(name, insert, remove, toggle, modify, values) {\n    let df = this.context.dataflow,\n        data = this.context.data[name],\n        input = data.input,\n        changes = data.changes,\n        stamp = df.stamp(),\n        predicate, key;\n\n    if (df._trigger === false || !(input.value.length || insert || toggle)) {\n      // nothing to do!\n      return 0;\n    }\n\n    if (!changes || changes.stamp < stamp) {\n      data.changes = (changes = df.changeset());\n      changes.stamp = stamp;\n      df.runAfter(function() {\n        data.modified = true;\n        df.pulse(input, changes).run();\n      }, true, 1);\n    }\n\n    if (remove) {\n      predicate = remove === true ? truthy\n        : (isArray(remove) || isTuple(remove)) ? remove\n        : removePredicate(remove);\n      changes.remove(predicate);\n    }\n\n    if (insert) {\n      changes.insert(insert);\n    }\n\n    if (toggle) {\n      predicate = removePredicate(toggle);\n      if (input.value.some(predicate)) {\n        changes.remove(predicate);\n      } else {\n        changes.insert(toggle);\n      }\n    }\n\n    if (modify) {\n      for (key in values) {\n        changes.modify(modify, key, values[key]);\n      }\n    }\n\n    return 1;\n  }\n\n  function pinchDistance(event) {\n    const t = event.touches,\n          dx = t[0].clientX - t[1].clientX,\n          dy = t[0].clientY - t[1].clientY;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  function pinchAngle(event) {\n    const t = event.touches;\n    return Math.atan2(\n      t[0].clientY - t[1].clientY,\n      t[0].clientX - t[1].clientX\n    );\n  }\n\n  function scaleGradient(scale, p0, p1, count, group) {\n    scale = getScale(scale, (group || this).context);\n\n    const gradient = Gradient(p0, p1);\n\n    let stops = scale.domain(),\n        min = stops[0],\n        max = peek(stops),\n        fraction = identity;\n\n    if (!(max - min)) {\n      // expand scale if domain has zero span, fix #1479\n      scale = (scale.interpolator\n        ? scale$2('sequential')().interpolator(scale.interpolator())\n        : scale$2('linear')().interpolate(scale.interpolate()).range(scale.range())\n      ).domain([min=0, max=1]);\n    } else {\n      fraction = scaleFraction(scale, min, max);\n    }\n\n    if (scale.ticks) {\n      stops = scale.ticks(+count || 15);\n      if (min !== stops[0]) stops.unshift(min);\n      if (max !== peek(stops)) stops.push(max);\n    }\n\n    stops.forEach(_ => gradient.stop(fraction(_), scale(_)));\n\n    return gradient;\n  }\n\n  function geoShape(projection, geojson, group) {\n    const p = getScale(projection, (group || this).context);\n    return function(context) {\n      return p ? p.path.context(context)(geojson) : '';\n    }\n  }\n\n  function pathShape(path) {\n    let p = null;\n    return function(context) {\n      return context\n        ? pathRender(context, (p = p || pathParse(path)))\n        : path;\n    };\n  }\n\n  const EMPTY = {};\n\n  function datum(d) { return d.data; }\n\n  function treeNodes(name, context) {\n    const tree = data$1.call(context, name);\n    return tree.root && tree.root.lookup || EMPTY;\n  }\n\n  function treePath(name, source, target) {\n    const nodes = treeNodes(name, this),\n          s = nodes[source],\n          t = nodes[target];\n    return s && t ? s.path(t).map(datum) : undefined;\n  }\n\n  function treeAncestors(name, node) {\n    const n = treeNodes(name, this)[node];\n    return n ? n.ancestors().map(datum) : undefined;\n  }\n\n  const _window = (typeof window !== 'undefined' && window) || null;\n\n  function screen() {\n    return _window ? _window.screen : {};\n  }\n\n  function windowSize() {\n    return _window\n      ? [_window.innerWidth, _window.innerHeight]\n      : [undefined, undefined];\n  }\n\n  function containerSize() {\n    const view = this.context.dataflow,\n          el = view.container && view.container();\n    return el\n      ? [el.clientWidth, el.clientHeight]\n      : [undefined, undefined];\n  }\n\n  const DataPrefix$1   = ':';\n  const IndexPrefix$1  = '@';\n  const ScalePrefix  = '%';\n  const SignalPrefix = '$';\n\n  function dataVisitor(name, args, scope, params) {\n    if (args[0].type !== Literal) {\n      error('First argument to data functions must be a string literal.');\n    }\n\n    const data = args[0].value,\n          dataName = DataPrefix$1 + data;\n\n    if (!hasOwnProperty(dataName, params)) {\n      try {\n        params[dataName] = scope.getData(data).tuplesRef();\n      } catch (err) {\n        // if data set does not exist, there's nothing to track\n      }\n    }\n  }\n\n  function indataVisitor(name, args, scope, params) {\n    if (args[0].type !== Literal) error('First argument to indata must be a string literal.');\n    if (args[1].type !== Literal) error('Second argument to indata must be a string literal.');\n\n    const data = args[0].value,\n          field = args[1].value,\n          indexName = IndexPrefix$1 + field;\n\n    if (!hasOwnProperty(indexName, params)) {\n      params[indexName] = scope.getData(data).indataRef(scope, field);\n    }\n  }\n\n  function scaleVisitor(name, args, scope, params) {\n    if (args[0].type === Literal) {\n      // add scale dependency\n      addScaleDependency(scope, params, args[0].value);\n    }\n    else if (args[0].type === Identifier$1) {\n      // indirect scale lookup; add all scales as parameters\n      for (name in scope.scales) {\n        addScaleDependency(scope, params, name);\n      }\n    }\n  }\n\n  function addScaleDependency(scope, params, name) {\n    const scaleName = ScalePrefix + name;\n    if (!hasOwnProperty(params, scaleName)) {\n      try {\n        params[scaleName] = scope.scaleRef(name);\n      } catch (err) {\n        // TODO: error handling? warning?\n      }\n    }\n  }\n\n  // Expression function context object\n  const functionContext = {\n    random: function() { return exports.random(); }, // override default\n    cumulativeNormal,\n    cumulativeLogNormal,\n    cumulativeUniform,\n    densityNormal,\n    densityLogNormal,\n    densityUniform,\n    quantileNormal,\n    quantileLogNormal,\n    quantileUniform,\n    sampleNormal,\n    sampleLogNormal,\n    sampleUniform,\n    isArray,\n    isBoolean,\n    isDate,\n    isDefined: function(_) { return _ !== undefined; },\n    isNumber,\n    isObject,\n    isRegExp,\n    isString,\n    isTuple,\n    isValid: function(_) { return _ != null && _ === _; },\n    toBoolean,\n    toDate,\n    toNumber,\n    toString,\n    flush,\n    lerp,\n    merge: merge$3,\n    pad,\n    peek,\n    span,\n    inrange,\n    truncate,\n    rgb,\n    lab,\n    hcl,\n    hsl,\n    luminance,\n    contrast,\n    sequence,\n    format: format$2,\n    utcFormat: utcFormat$2,\n    utcParse: utcParse$1,\n    utcOffset,\n    utcSequence,\n    timeFormat: timeFormat$2,\n    timeParse: timeParse$1,\n    timeOffset,\n    timeSequence,\n    timeUnitSpecifier,\n    monthFormat,\n    monthAbbrevFormat,\n    dayFormat,\n    dayAbbrevFormat,\n    quarter,\n    utcquarter,\n    warn,\n    info,\n    debug,\n    extent,\n    inScope,\n    intersect: intersect$3,\n    clampRange,\n    pinchDistance,\n    pinchAngle,\n    screen,\n    containerSize,\n    windowSize,\n    bandspace,\n    setdata,\n    pathShape,\n    panLinear,\n    panLog,\n    panPow,\n    panSymlog,\n    zoomLinear,\n    zoomLog,\n    zoomPow,\n    zoomSymlog,\n    encode: encode$1,\n    modify\n  };\n\n  const eventFunctions = ['view', 'item', 'group', 'xy', 'x', 'y'], // event functions\n        eventPrefix = 'event.vega.', // event function prefix\n        thisPrefix = 'this.', // function context prefix\n        astVisitors = {}; // AST visitors for dependency analysis\n\n  // Build expression function registry\n  function buildFunctions(codegen) {\n    const fn = functions(codegen);\n    eventFunctions.forEach(name => fn[name] = eventPrefix + name);\n    for (let name in functionContext) { fn[name] = thisPrefix + name; }\n    return fn;\n  }\n\n  // Register an expression function\n  function expressionFunction(name, fn, visitor) {\n    if (arguments.length === 1) {\n      return functionContext[name];\n    }\n\n    // register with the functionContext\n    functionContext[name] = fn;\n\n    // if there is an astVisitor register that, too\n    if (visitor) astVisitors[name] = visitor;\n\n    // if the code generator has already been initialized,\n    // we need to also register the function with it\n    if (codeGenerator) codeGenerator.functions[name] = thisPrefix + name;\n    return this;\n  }\n\n  // register expression functions with ast visitors\n  expressionFunction('bandwidth', bandwidth, scaleVisitor);\n  expressionFunction('copy', copy$2, scaleVisitor);\n  expressionFunction('domain', domain, scaleVisitor);\n  expressionFunction('range', range$3, scaleVisitor);\n  expressionFunction('invert', invert, scaleVisitor);\n  expressionFunction('scale', scale$3, scaleVisitor);\n  expressionFunction('gradient', scaleGradient, scaleVisitor);\n  expressionFunction('geoArea', geoArea, scaleVisitor);\n  expressionFunction('geoBounds', geoBounds, scaleVisitor);\n  expressionFunction('geoCentroid', geoCentroid, scaleVisitor);\n  expressionFunction('geoShape', geoShape, scaleVisitor);\n  expressionFunction('indata', indata, indataVisitor);\n  expressionFunction('data', data$1, dataVisitor);\n  expressionFunction('treePath', treePath, dataVisitor);\n  expressionFunction('treeAncestors', treeAncestors, dataVisitor);\n\n  // register Vega-Lite selection functions\n  expressionFunction('vlSelectionTest', selectionTest, selectionVisitor);\n  expressionFunction('vlSelectionResolve', selectionResolve, selectionVisitor);\n\n  // Export code generator and parameters\n  const codegenParams = {\n    blacklist:  ['_'],\n    whitelist:  ['datum', 'event', 'item'],\n    fieldvar:   'datum',\n    globalvar:  function(id) { return '_[' + $(SignalPrefix + id) + ']'; },\n    functions:  buildFunctions,\n    constants:  constants,\n    visitors:   astVisitors\n  };\n\n  var codeGenerator = codegen(codegenParams);\n\n  /**\n   * Parse an expression given the argument signature and body code.\n   */\n  function expression(args, code, ctx) {\n    // wrap code in return statement if expression does not terminate\n    if (code[code.length-1] !== ';') {\n      code = 'return(' + code + ');';\n    }\n    var fn = Function.apply(null, args.concat(code));\n    return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;\n  }\n\n  /**\n   * Parse an expression used to update an operator value.\n   */\n  function operatorExpression(code, ctx) {\n    return expression(['_'], code, ctx);\n  }\n\n  /**\n   * Parse an expression provided as an operator parameter value.\n   */\n  function parameterExpression(code, ctx) {\n    return expression(['datum', '_'], code, ctx);\n  }\n\n  /**\n   * Parse an expression applied to an event stream.\n   */\n  function eventExpression(code, ctx) {\n    return expression(['event'], code, ctx);\n  }\n\n  /**\n   * Parse an expression used to handle an event-driven operator update.\n   */\n  function handlerExpression(code, ctx) {\n    return expression(['_', 'event'], code, ctx);\n  }\n\n  /**\n   * Parse an expression that performs visual encoding.\n   */\n  function encodeExpression(code, ctx) {\n    return expression(['item', '_'], code, ctx);\n  }\n\n  /**\n   * Parse a set of operator parameters.\n   */\n  function parseParameters(spec, ctx, params) {\n    params = params || {};\n    var key, value;\n\n    for (key in spec) {\n      value = spec[key];\n\n      params[key] = isArray(value)\n        ? value.map(function(v) { return parseParameter(v, ctx, params); })\n        : parseParameter(value, ctx, params);\n    }\n    return params;\n  }\n\n  /**\n   * Parse a single parameter.\n   */\n  function parseParameter(spec, ctx, params) {\n    if (!spec || !isObject(spec)) return spec;\n\n    for (var i=0, n=PARSERS.length, p; i<n; ++i) {\n      p = PARSERS[i];\n      if (hasOwnProperty(spec, p.key)) {\n        return p.parse(spec, ctx, params);\n      }\n    }\n    return spec;\n  }\n\n  /** Reference parsers. */\n  var PARSERS = [\n    {key: '$ref',      parse: getOperator},\n    {key: '$key',      parse: getKey},\n    {key: '$expr',     parse: getExpression},\n    {key: '$field',    parse: getField$1},\n    {key: '$encode',   parse: getEncode},\n    {key: '$compare',  parse: getCompare},\n    {key: '$context',  parse: getContext},\n    {key: '$subflow',  parse: getSubflow},\n    {key: '$tupleid',  parse: getTupleId}\n  ];\n\n  /**\n   * Resolve an operator reference.\n   */\n  function getOperator(_, ctx) {\n    return ctx.get(_.$ref) || error('Operator not defined: ' + _.$ref);\n  }\n\n  /**\n   * Resolve an expression reference.\n   */\n  function getExpression(_, ctx, params) {\n    if (_.$params) { // parse expression parameters\n      parseParameters(_.$params, ctx, params);\n    }\n    var k = 'e:' + _.$expr + '_' + _.$name;\n    return ctx.fn[k]\n      || (ctx.fn[k] = accessor(parameterExpression(_.$expr, ctx), _.$fields, _.$name));\n  }\n\n  /**\n   * Resolve a key accessor reference.\n   */\n  function getKey(_, ctx) {\n    var k = 'k:' + _.$key + '_' + (!!_.$flat);\n    return ctx.fn[k] || (ctx.fn[k] = key(_.$key, _.$flat));\n  }\n\n  /**\n   * Resolve a field accessor reference.\n   */\n  function getField$1(_, ctx) {\n    if (!_.$field) return null;\n    var k = 'f:' + _.$field + '_' + _.$name;\n    return ctx.fn[k] || (ctx.fn[k] = field(_.$field, _.$name));\n  }\n\n  /**\n   * Resolve a comparator function reference.\n   */\n  function getCompare(_, ctx) {\n    // As of Vega 5.5.3, $tupleid sort is no longer used.\n    // Keep here for now for backwards compatibility.\n    var k = 'c:' + _.$compare + '_' + _.$order,\n        c = array(_.$compare).map(function(_) {\n          return (_ && _.$tupleid) ? tupleid : _;\n        });\n    return ctx.fn[k] || (ctx.fn[k] = compare(c, _.$order));\n  }\n\n  /**\n   * Resolve an encode operator reference.\n   */\n  function getEncode(_, ctx) {\n    var spec = _.$encode,\n        encode = {}, name, enc;\n\n    for (name in spec) {\n      enc = spec[name];\n      encode[name] = accessor(encodeExpression(enc.$expr, ctx), enc.$fields);\n      encode[name].output = enc.$output;\n    }\n    return encode;\n  }\n\n  /**\n   * Resolve a context reference.\n   */\n  function getContext(_, ctx) {\n    return ctx;\n  }\n\n  /**\n   * Resolve a recursive subflow specification.\n   */\n  function getSubflow(_, ctx) {\n    var spec = _.$subflow;\n    return function(dataflow, key, parent) {\n      var subctx = parse$4(spec, ctx.fork()),\n          op = subctx.get(spec.operators[0].id),\n          p = subctx.signals.parent;\n      if (p) p.set(parent);\n      return op;\n    };\n  }\n\n  /**\n   * Resolve a tuple id reference.\n   */\n  function getTupleId() {\n    return tupleid;\n  }\n\n  function canonicalType(type) {\n    return (type + '').toLowerCase();\n  }\n  function isOperator(type) {\n     return canonicalType(type) === 'operator';\n  }\n\n  function isCollect(type) {\n    return canonicalType(type) === 'collect';\n  }\n\n  /**\n   * Parse a dataflow operator.\n   */\n  function parseOperator(spec, ctx) {\n    if (isOperator(spec.type) || !spec.type) {\n      ctx.operator(spec,\n        spec.update ? operatorExpression(spec.update, ctx) : null);\n    } else {\n      ctx.transform(spec, spec.type);\n    }\n  }\n\n  /**\n   * Parse and assign operator parameters.\n   */\n  function parseOperatorParameters(spec, ctx) {\n    if (spec.params) {\n      var op = ctx.get(spec.id);\n      if (!op) error('Invalid operator id: ' + spec.id);\n      ctx.dataflow.connect(op, op.parameters(\n        parseParameters(spec.params, ctx),\n        spec.react,\n        spec.initonly\n      ));\n    }\n  }\n\n  /**\n   * Parse an event stream specification.\n   */\n  function parseStream(spec, ctx) {\n    var filter = spec.filter != null ? eventExpression(spec.filter, ctx) : undefined,\n        stream = spec.stream != null ? ctx.get(spec.stream) : undefined,\n        args;\n\n    if (spec.source) {\n      stream = ctx.events(spec.source, spec.type, filter);\n    }\n    else if (spec.merge) {\n      args = spec.merge.map(ctx.get.bind(ctx));\n      stream = args[0].merge.apply(args[0], args.slice(1));\n    }\n\n    if (spec.between) {\n      args = spec.between.map(ctx.get.bind(ctx));\n      stream = stream.between(args[0], args[1]);\n    }\n\n    if (spec.filter) {\n      stream = stream.filter(filter);\n    }\n\n    if (spec.throttle != null) {\n      stream = stream.throttle(+spec.throttle);\n    }\n\n    if (spec.debounce != null) {\n      stream = stream.debounce(+spec.debounce);\n    }\n\n    if (stream == null) {\n      error('Invalid stream definition: ' + JSON.stringify(spec));\n    }\n\n    if (spec.consume) stream.consume(true);\n\n    ctx.stream(spec, stream);\n  }\n\n  /**\n   * Parse an event-driven operator update.\n   */\n  function parseUpdate(spec, ctx) {\n    var srcid = isObject(srcid = spec.source) ? srcid.$ref : srcid,\n        source = ctx.get(srcid),\n        target = null,\n        update = spec.update,\n        params = undefined;\n\n    if (!source) error('Source not defined: ' + spec.source);\n\n    if (spec.target && spec.target.$expr) {\n      target = eventExpression(spec.target.$expr, ctx);\n    } else {\n      target = ctx.get(spec.target);\n    }\n\n    if (update && update.$expr) {\n      if (update.$params) {\n        params = parseParameters(update.$params, ctx);\n      }\n      update = handlerExpression(update.$expr, ctx);\n    }\n\n    ctx.update(spec, source, target, update, params);\n  }\n\n  /**\n   * Parse a serialized dataflow specification.\n   */\n  function parse$4(spec, ctx) {\n    var operators = spec.operators || [];\n\n    // parse background\n    if (spec.background) {\n      ctx.background = spec.background;\n    }\n\n    // parse event configuration\n    if (spec.eventConfig) {\n      ctx.eventConfig = spec.eventConfig;\n    }\n\n    // parse operators\n    operators.forEach(function(entry) {\n      parseOperator(entry, ctx);\n    });\n\n    // parse operator parameters\n    operators.forEach(function(entry) {\n      parseOperatorParameters(entry, ctx);\n    });\n\n    // parse streams\n    (spec.streams || []).forEach(function(entry) {\n      parseStream(entry, ctx);\n    });\n\n    // parse updates\n    (spec.updates || []).forEach(function(entry) {\n      parseUpdate(entry, ctx);\n    });\n\n    return ctx.resolve();\n  }\n\n  var SKIP$3 = {skip: true};\n\n  function getState(options) {\n    var ctx = this,\n        state = {};\n\n    if (options.signals) {\n      var signals = (state.signals = {});\n      Object.keys(ctx.signals).forEach(function(key) {\n        var op = ctx.signals[key];\n        if (options.signals(key, op)) {\n          signals[key] = op.value;\n        }\n      });\n    }\n\n    if (options.data) {\n      var data = (state.data = {});\n      Object.keys(ctx.data).forEach(function(key) {\n        var dataset = ctx.data[key];\n        if (options.data(key, dataset)) {\n          data[key] = dataset.input.value;\n        }\n      });\n    }\n\n    if (ctx.subcontext && options.recurse !== false) {\n      state.subcontext = ctx.subcontext.map(function(ctx) {\n        return ctx.getState(options);\n      });\n    }\n\n    return state;\n  }\n\n  function setState(state) {\n    var ctx = this,\n        df = ctx.dataflow,\n        data = state.data,\n        signals = state.signals;\n\n    Object.keys(signals || {}).forEach(function(key) {\n      df.update(ctx.signals[key], signals[key], SKIP$3);\n    });\n\n    Object.keys(data || {}).forEach(function(key) {\n      df.pulse(\n        ctx.data[key].input,\n        df.changeset().remove(truthy).insert(data[key])\n      );\n    });\n\n    (state.subcontext  || []).forEach(function(substate, i) {\n      var subctx = ctx.subcontext[i];\n      if (subctx) subctx.setState(substate);\n    });\n  }\n\n  /**\n   * Context objects store the current parse state.\n   * Enables lookup of parsed operators, event streams, accessors, etc.\n   * Provides a 'fork' method for creating child contexts for subflows.\n   */\n  function context$2(df, transforms, functions) {\n    return new Context(df, transforms, functions);\n  }\n\n  function Context(df, transforms, functions) {\n    this.dataflow = df;\n    this.transforms = transforms;\n    this.events = df.events.bind(df);\n    this.signals = {};\n    this.scales = {};\n    this.nodes = {};\n    this.data = {};\n    this.fn = {};\n    if (functions) {\n      this.functions = Object.create(functions);\n      this.functions.context = this;\n    }\n  }\n\n  function ContextFork(ctx) {\n    this.dataflow = ctx.dataflow;\n    this.transforms = ctx.transforms;\n    this.functions = ctx.functions;\n    this.events = ctx.events;\n    this.signals = Object.create(ctx.signals);\n    this.scales = Object.create(ctx.scales);\n    this.nodes = Object.create(ctx.nodes);\n    this.data = Object.create(ctx.data);\n    this.fn = Object.create(ctx.fn);\n    if (ctx.functions) {\n      this.functions = Object.create(ctx.functions);\n      this.functions.context = this;\n    }\n  }\n\n  Context.prototype = ContextFork.prototype = {\n    fork: function() {\n      var ctx = new ContextFork(this);\n      (this.subcontext || (this.subcontext = [])).push(ctx);\n      return ctx;\n    },\n    get: function(id) {\n      return this.nodes[id];\n    },\n    set: function(id, node) {\n      return this.nodes[id] = node;\n    },\n    add: function(spec, op) {\n      var ctx = this,\n          df = ctx.dataflow,\n          data;\n\n      ctx.set(spec.id, op);\n\n      if (isCollect(spec.type) && (data = spec.value)) {\n        if (data.$ingest) {\n          df.ingest(op, data.$ingest, data.$format);\n        } else if (data.$request) {\n          df.preload(op, data.$request, data.$format);\n        } else {\n          df.pulse(op, df.changeset().insert(data));\n        }\n      }\n\n      if (spec.root) {\n        ctx.root = op;\n      }\n\n      if (spec.parent) {\n        var p = ctx.get(spec.parent.$ref);\n        if (p) {\n          df.connect(p, [op]);\n          op.targets().add(p);\n        } else {\n          (ctx.unresolved = ctx.unresolved || []).push(function() {\n            p = ctx.get(spec.parent.$ref);\n            df.connect(p, [op]);\n            op.targets().add(p);\n          });\n        }\n      }\n\n      if (spec.signal) {\n        ctx.signals[spec.signal] = op;\n      }\n\n      if (spec.scale) {\n        ctx.scales[spec.scale] = op;\n      }\n\n      if (spec.data) {\n        for (var name in spec.data) {\n          data = ctx.data[name] || (ctx.data[name] = {});\n          spec.data[name].forEach(function(role) { data[role] = op; });\n        }\n      }\n    },\n    resolve: function() {\n      (this.unresolved || []).forEach(function(fn) { fn(); });\n      delete this.unresolved;\n      return this;\n    },\n    operator: function(spec, update) {\n      this.add(spec, this.dataflow.add(spec.value, update));\n    },\n    transform: function(spec, type) {\n      this.add(spec, this.dataflow.add(this.transforms[canonicalType(type)]));\n    },\n    stream: function(spec, stream) {\n      this.set(spec.id, stream);\n    },\n    update: function(spec, stream, target, update, params) {\n      this.dataflow.on(stream, target, update, params, spec.options);\n    },\n    getState: getState,\n    setState: setState\n  };\n\n  function runtime(view, spec, functions) {\n    var fn = functions || functionContext;\n    return parse$4(spec, context$2(view, transforms, fn));\n  }\n\n  function scale$4(name) {\n    var scales = this._runtime.scales;\n    if (!hasOwnProperty(scales, name)) {\n      error('Unrecognized scale or projection: ' + name);\n    }\n    return scales[name].value;\n  }\n\n  var Width = 'width',\n      Height = 'height',\n      Padding$1 = 'padding',\n      Skip = {skip: true};\n\n  function viewWidth(view, width) {\n    var a = view.autosize(),\n        p = view.padding();\n    return width - (a && a.contains === Padding$1 ? p.left + p.right : 0);\n  }\n\n  function viewHeight(view, height) {\n    var a = view.autosize(),\n        p = view.padding();\n    return height - (a && a.contains === Padding$1 ? p.top + p.bottom : 0);\n  }\n\n  function initializeResize(view) {\n    var s = view._signals,\n        w = s[Width],\n        h = s[Height],\n        p = s[Padding$1];\n\n    function resetSize() {\n      view._autosize = view._resize = 1;\n    }\n\n    // respond to width signal\n    view._resizeWidth = view.add(null,\n      function(_) {\n        view._width = _.size;\n        view._viewWidth = viewWidth(view, _.size);\n        resetSize();\n      },\n      {size: w}\n    );\n\n    // respond to height signal\n    view._resizeHeight = view.add(null,\n      function(_) {\n        view._height = _.size;\n        view._viewHeight = viewHeight(view, _.size);\n        resetSize();\n      },\n      {size: h}\n    );\n\n    // respond to padding signal\n    var resizePadding = view.add(null, resetSize, {pad: p});\n\n    // set rank to run immediately after source signal\n    view._resizeWidth.rank = w.rank + 1;\n    view._resizeHeight.rank = h.rank + 1;\n    resizePadding.rank = p.rank + 1;\n  }\n\n  function resizeView(viewWidth, viewHeight, width, height, origin, auto) {\n    this.runAfter(function(view) {\n      var rerun = 0;\n\n      // reset autosize flag\n      view._autosize = 0;\n\n      // width value changed: update signal, skip resize op\n      if (view.width() !== width) {\n        rerun = 1;\n        view.signal(Width, width, Skip); // set width, skip update calc\n        view._resizeWidth.skip(true); // skip width resize handler\n      }\n\n      // height value changed: update signal, skip resize op\n      if (view.height() !== height) {\n        rerun = 1;\n        view.signal(Height, height, Skip); // set height, skip update calc\n        view._resizeHeight.skip(true); // skip height resize handler\n      }\n\n      // view width changed: update view property, set resize flag\n      if (view._viewWidth !== viewWidth) {\n        view._resize = 1;\n        view._viewWidth = viewWidth;\n      }\n\n      // view height changed: update view property, set resize flag\n      if (view._viewHeight !== viewHeight) {\n        view._resize = 1;\n        view._viewHeight = viewHeight;\n      }\n\n      // origin changed: update view property, set resize flag\n      if (view._origin[0] !== origin[0] || view._origin[1] !== origin[1]) {\n        view._resize = 1;\n        view._origin = origin;\n      }\n\n      // run dataflow on width/height signal change\n      if (rerun) view.run('enter');\n      if (auto) view.runAfter(v => v.resize());\n    }, false, 1);\n  }\n\n  /**\n   * Get the current view state, consisting of signal values and/or data sets.\n   * @param {object} [options] - Options flags indicating which state to export.\n   *   If unspecified, all signals and data sets will be exported.\n   * @param {function(string, Operator):boolean} [options.signals] - Optional\n   *   predicate function for testing if a signal should be included in the\n   *   exported state. If unspecified, all signals will be included, except for\n   *   those named 'parent' or those which refer to a Transform value.\n   * @param {function(string, object):boolean} [options.data] - Optional\n   *   predicate function for testing if a data set's input should be included\n   *   in the exported state. If unspecified, all data sets that have been\n   *   explicitly modified will be included.\n   * @param {boolean} [options.recurse=true] - Flag indicating if the exported\n   *   state should recursively include state from group mark sub-contexts.\n   * @return {object} - An object containing the exported state values.\n   */\n  function getState$1(options) {\n    return this._runtime.getState(options || {\n      data:    dataTest,\n      signals: signalTest,\n      recurse: true\n    });\n  }\n\n  function dataTest(name, data) {\n    return data.modified\n        && isArray(data.input.value)\n        && name.indexOf('_:vega:_');\n  }\n\n  function signalTest(name, op) {\n    return !(name === 'parent' || op instanceof transforms.proxy);\n  }\n\n  /**\n   * Sets the current view state and updates the view by invoking run.\n   * @param {object} state - A state object containing signal and/or\n   *   data set values, following the format used by the getState method.\n   * @return {View} - This view instance.\n   */\n  function setState$1(state) {\n    this.runAsync(null,\n      v => { v._trigger = false; v._runtime.setState(state); },\n      v => { v._trigger = true; }\n    );\n    return this;\n  }\n\n  function timer$1(callback, delay) {\n    function tick(elapsed) {\n      callback({timestamp: Date.now(), elapsed: elapsed});\n    }\n    this._timers.push(interval$1(tick, delay));\n  }\n\n  function defaultTooltip$1(handler, event, item, value) {\n    var el = handler.element();\n    if (el) el.setAttribute('title', formatTooltip(value));\n  }\n\n  function formatTooltip(value) {\n    return value == null ? ''\n      : isArray(value) ? formatArray(value)\n      : isObject(value) && !isDate(value) ? formatObject(value)\n      : value + '';\n  }\n\n  function formatObject(obj) {\n    return Object.keys(obj).map(function(key) {\n      var v = obj[key];\n      return key + ': ' + (isArray(v) ? formatArray(v) : formatValue$1(v));\n    }).join('\\n');\n  }\n\n  function formatArray(value) {\n    return '[' + value.map(formatValue$1).join(', ') + ']';\n  }\n\n  function formatValue$1(value) {\n    return isArray(value) ? '[\\u2026]'\n      : isObject(value) && !isDate(value) ? '{\\u2026}'\n      : value;\n  }\n\n  /**\n   * Create a new View instance from a Vega dataflow runtime specification.\n   * The generated View will not immediately be ready for display. Callers\n   * should also invoke the initialize method (e.g., to set the parent\n   * DOM element in browser-based deployment) and then invoke the run\n   * method to evaluate the dataflow graph. Rendering will automatically\n   * be peformed upon dataflow runs.\n   * @constructor\n   * @param {object} spec - The Vega dataflow runtime specification.\n   */\n  function View(spec, options) {\n    var view = this;\n    options = options || {};\n\n    Dataflow.call(view);\n    if (options.loader) view.loader(options.loader);\n    if (options.logger) view.logger(options.logger);\n    if (options.logLevel != null) view.logLevel(options.logLevel);\n\n    view._el = null;\n    view._elBind = null;\n    view._renderType = options.renderer || RenderType.Canvas;\n    view._scenegraph = new Scenegraph();\n    var root = view._scenegraph.root;\n\n    // initialize renderer, handler and event management\n    view._renderer = null;\n    view._tooltip = options.tooltip || defaultTooltip$1,\n    view._redraw = true;\n    view._handler = new CanvasHandler().scene(root);\n    view._preventDefault = false;\n    view._timers = [];\n    view._eventListeners = [];\n    view._resizeListeners = [];\n\n    // initialize event configuration\n    view._eventConfig = initializeEventConfig(spec.eventConfig);\n\n    // initialize dataflow graph\n    var ctx = runtime(view, spec, options.functions);\n    view._runtime = ctx;\n    view._signals = ctx.signals;\n    view._bind = (spec.bindings || []).map(function(_) {\n      return {\n        state: null,\n        param: extend({}, _)\n      };\n    });\n\n    // initialize scenegraph\n    if (ctx.root) ctx.root.set(root);\n    root.source = ctx.data.root.input;\n    view.pulse(\n      ctx.data.root.input,\n      view.changeset().insert(root.items)\n    );\n\n    // initialize view size\n    view._width = view.width();\n    view._height = view.height();\n    view._viewWidth = viewWidth(view, view._width);\n    view._viewHeight = viewHeight(view, view._height);\n    view._origin = [0, 0];\n    view._resize = 0;\n    view._autosize = 1;\n    initializeResize(view);\n\n    // initialize background color\n    background$1(view);\n\n    // initialize cursor\n    cursor(view);\n\n    // initialize view description\n    view.description(spec.description);\n\n    // initialize hover proessing, if requested\n    if (options.hover) view.hover();\n\n    // initialize DOM container(s) and renderer\n    if (options.container) view.initialize(options.container, options.bind);\n  }\n\n  var prototype$1s = inherits(View, Dataflow);\n\n  // -- DATAFLOW / RENDERING ----\n\n  prototype$1s.evaluate = async function(encode, prerun, postrun) {\n    // evaluate dataflow and prerun\n    await Dataflow.prototype.evaluate.call(this, encode, prerun);\n\n    // render as needed\n    if (this._redraw || this._resize) {\n      try {\n        if (this._renderer) {\n          if (this._resize) {\n            this._resize = 0;\n            resizeRenderer(this);\n          }\n          await this._renderer.renderAsync(this._scenegraph.root);\n        }\n        this._redraw = false;\n      } catch (e) {\n        this.error(e);\n      }\n    }\n\n    // evaluate postrun\n    if (postrun) asyncCallback(this, postrun);\n\n    return this;\n  };\n\n  prototype$1s.dirty = function(item) {\n    this._redraw = true;\n    this._renderer && this._renderer.dirty(item);\n  };\n\n  // -- GET / SET ----\n\n  prototype$1s.description = function(text) {\n    if (arguments.length) {\n      const desc = text != null ? (text + '') : null;\n      if (desc !== this._desc) ariaLabel(this._el, this._desc = desc);\n      return this;\n    }\n    return this._desc;\n  };\n\n  prototype$1s.container = function() {\n    return this._el;\n  };\n\n  prototype$1s.scenegraph = function() {\n    return this._scenegraph;\n  };\n\n  prototype$1s.origin = function() {\n    return this._origin.slice();\n  };\n\n  function lookupSignal(view, name) {\n    return hasOwnProperty(view._signals, name)\n      ? view._signals[name]\n      : error('Unrecognized signal name: ' + $(name));\n  }\n\n  prototype$1s.signal = function(name, value, options) {\n    var op = lookupSignal(this, name);\n    return arguments.length === 1\n      ? op.value\n      : this.update(op, value, options);\n  };\n\n  prototype$1s.width = function(_) {\n    return arguments.length ? this.signal('width', _) : this.signal('width');\n  };\n\n  prototype$1s.height = function(_) {\n    return arguments.length ? this.signal('height', _) : this.signal('height');\n  };\n\n  prototype$1s.padding = function(_) {\n    return arguments.length\n      ? this.signal('padding', padding(_))\n      : padding(this.signal('padding'));\n  };\n\n  prototype$1s.autosize = function(_) {\n    return arguments.length ? this.signal('autosize', _) : this.signal('autosize');\n  };\n\n  prototype$1s.background = function(_) {\n    return arguments.length ? this.signal('background', _) : this.signal('background');\n  };\n\n  prototype$1s.renderer = function(type) {\n    if (!arguments.length) return this._renderType;\n    if (!renderModule(type)) error('Unrecognized renderer type: ' + type);\n    if (type !== this._renderType) {\n      this._renderType = type;\n      this._resetRenderer();\n    }\n    return this;\n  };\n\n  prototype$1s.tooltip = function(handler) {\n    if (!arguments.length) return this._tooltip;\n    if (handler !== this._tooltip) {\n      this._tooltip = handler;\n      this._resetRenderer();\n    }\n    return this;\n  };\n\n  prototype$1s.loader = function(loader) {\n    if (!arguments.length) return this._loader;\n    if (loader !== this._loader) {\n      Dataflow.prototype.loader.call(this, loader);\n      this._resetRenderer();\n    }\n    return this;\n  };\n\n  prototype$1s.resize = function() {\n    // set flag to perform autosize\n    this._autosize = 1;\n    // touch autosize signal to ensure top-level ViewLayout runs\n    return this.touch(lookupSignal(this, 'autosize'));\n  };\n\n  prototype$1s._resetRenderer = function() {\n    if (this._renderer) {\n      this._renderer = null;\n      this.initialize(this._el, this._elBind);\n    }\n  };\n\n  // -- SIZING ----\n  prototype$1s._resizeView = resizeView;\n\n  // -- EVENT HANDLING ----\n\n  prototype$1s.addEventListener = function(type, handler, options) {\n    var callback = handler;\n    if (!(options && options.trap === false)) {\n      // wrap callback in error handler\n      callback = trap(this, handler);\n      callback.raw = handler;\n    }\n    this._handler.on(type, callback);\n    return this;\n  };\n\n  prototype$1s.removeEventListener = function(type, handler) {\n    var handlers = this._handler.handlers(type),\n        i = handlers.length, h, t;\n\n    // search registered handlers, remove if match found\n    while (--i >= 0) {\n      t = handlers[i].type;\n      h = handlers[i].handler;\n      if (type === t && (handler === h || handler === h.raw)) {\n        this._handler.off(t, h);\n        break;\n      }\n    }\n    return this;\n  };\n\n  prototype$1s.addResizeListener = function(handler) {\n    var l = this._resizeListeners;\n    if (l.indexOf(handler) < 0) {\n      // add handler if it isn't already registered\n      // note: error trapping handled elsewhere, so\n      // no need to wrap handlers here\n      l.push(handler);\n    }\n    return this;\n  };\n\n  prototype$1s.removeResizeListener = function(handler) {\n    var l = this._resizeListeners,\n        i = l.indexOf(handler);\n    if (i >= 0) {\n      l.splice(i, 1);\n    }\n    return this;\n  };\n\n  function findOperatorHandler(op, handler) {\n    var t = op._targets || [],\n        h = t.filter(function(op) {\n              var u = op._update;\n              return u && u.handler === handler;\n            });\n    return h.length ? h[0] : null;\n  }\n\n  function addOperatorListener(view, name, op, handler) {\n    var h = findOperatorHandler(op, handler);\n    if (!h) {\n      h = trap(this, function() { handler(name, op.value); });\n      h.handler = handler;\n      view.on(op, null, h);\n    }\n    return view;\n  }\n\n  function removeOperatorListener(view, op, handler) {\n    var h = findOperatorHandler(op, handler);\n    if (h) op._targets.remove(h);\n    return view;\n  }\n\n  prototype$1s.addSignalListener = function(name, handler) {\n    return addOperatorListener(this, name, lookupSignal(this, name), handler);\n  };\n\n  prototype$1s.removeSignalListener = function(name, handler) {\n    return removeOperatorListener(this, lookupSignal(this, name), handler);\n  };\n\n  prototype$1s.addDataListener = function(name, handler) {\n    return addOperatorListener(this, name, dataref(this, name).values, handler);\n  };\n\n  prototype$1s.removeDataListener = function(name, handler) {\n    return removeOperatorListener(this, dataref(this, name).values, handler);\n  };\n\n  prototype$1s.preventDefault = function(_) {\n    if (arguments.length) {\n      this._preventDefault = _;\n      return this;\n    } else {\n      return this._preventDefault;\n    }\n  };\n\n  prototype$1s.timer = timer$1;\n  prototype$1s.events = events$1;\n  prototype$1s.finalize = finalize;\n  prototype$1s.hover = hover;\n\n  // -- DATA ----\n  prototype$1s.data = data;\n  prototype$1s.change = change;\n  prototype$1s.insert = insert;\n  prototype$1s.remove = remove;\n\n  // -- SCALES --\n  prototype$1s.scale = scale$4;\n\n  // -- INITIALIZATION ----\n  prototype$1s.initialize = initialize$1;\n\n  // -- HEADLESS RENDERING ----\n  prototype$1s.toImageURL = renderToImageURL;\n  prototype$1s.toCanvas = renderToCanvas;\n  prototype$1s.toSVG = renderToSVG;\n\n  // -- SAVE / RESTORE STATE ----\n  prototype$1s.getState = getState$1;\n  prototype$1s.setState = setState$1;\n\n  function parseAutosize(spec) {\n    return isObject(spec) ? spec : {type: spec || 'pad'};\n  }\n\n  const number$6 = _ => +_ || 0;\n\n  const paddingObject$1 = _ => ({top: _, bottom: _, left: _, right: _});\n\n  function parsePadding(spec) {\n    return !isObject(spec) ? paddingObject$1(number$6(spec))\n      : spec.signal ? spec\n      : {\n          top:    number$6(spec.top),\n          bottom: number$6(spec.bottom),\n          left:   number$6(spec.left),\n          right:  number$6(spec.right)\n        };\n  }\n\n  var OUTER = 'outer',\n      OUTER_INVALID = ['value', 'update', 'init', 'react', 'bind'];\n\n  function outerError(prefix, name) {\n    error(prefix + ' for \"outer\" push: ' + $(name));\n  }\n\n  function parseSignal(signal, scope) {\n    var name = signal.name;\n\n    if (signal.push === OUTER) {\n      // signal must already be defined, raise error if not\n      if (!scope.signals[name]) outerError('No prior signal definition', name);\n      // signal push must not use properties reserved for standard definition\n      OUTER_INVALID.forEach(function(prop) {\n        if (signal[prop] !== undefined) outerError('Invalid property ', prop);\n      });\n    } else {\n      // define a new signal in the current scope\n      var op = scope.addSignal(name, signal.value);\n      if (signal.react === false) op.react = false;\n      if (signal.bind) scope.addBinding(name, signal.bind);\n    }\n  }\n\n  function parseExpression$1(expr, scope, preamble) {\n    var params = {}, ast, gen;\n\n    // parse the expression to an abstract syntax tree (ast)\n    try {\n      expr = isString(expr) ? expr : ($(expr) + '');\n      ast = parse$3(expr);\n    } catch (err) {\n      error('Expression parse error: ' + expr);\n    }\n\n    // analyze ast function calls for dependencies\n    ast.visit(function visitor(node) {\n      if (node.type !== CallExpression) return;\n      var name = node.callee.name,\n          visit = codegenParams.visitors[name];\n      if (visit) visit(name, node.arguments, scope, params);\n    });\n\n    // perform code generation\n    gen = codeGenerator(ast);\n\n    // collect signal dependencies\n    gen.globals.forEach(function(name) {\n      var signalName = SignalPrefix + name;\n      if (!hasOwnProperty(params, signalName) && scope.getSignal(name)) {\n        params[signalName] = scope.signalRef(name);\n      }\n    });\n\n    // return generated expression code and dependencies\n    return {\n      $expr:   preamble ? preamble + 'return(' + gen.code + ');' : gen.code,\n      $fields: gen.fields,\n      $params: params\n    };\n  }\n\n  function Entry(type, value, params, parent) {\n    this.id = -1;\n    this.type = type;\n    this.value = value;\n    this.params = params;\n    if (parent) this.parent = parent;\n  }\n\n  function entry(type, value, params, parent) {\n    return new Entry(type, value, params, parent);\n  }\n\n  function operator(value, params) {\n    return entry('operator', value, params);\n  }\n\n  // -----\n\n  function ref(op) {\n    var ref = {$ref: op.id};\n    // if operator not yet registered, cache ref to resolve later\n    if (op.id < 0) (op.refs = op.refs || []).push(ref);\n    return ref;\n  }\n\n  function fieldRef(field, name) {\n    return name ? {$field: field, $name: name} : {$field: field};\n  }\n\n  var keyFieldRef = fieldRef('key');\n\n  function compareRef(fields, orders) {\n    return {$compare: fields, $order: orders};\n  }\n\n  function keyRef(fields, flat) {\n    var ref = {$key: fields};\n    if (flat) ref.$flat = true;\n    return ref;\n  }\n\n  // -----\n\n  var Ascending  = 'ascending';\n\n  var Descending = 'descending';\n\n  function sortKey(sort) {\n    return !isObject(sort) ? ''\n      : (sort.order === Descending ? '-' : '+')\n        + aggrField(sort.op, sort.field);\n  }\n\n  function aggrField(op, field) {\n    return (op && op.signal ? '$' + op.signal : op || '')\n      + (op && field ? '_' : '')\n      + (field && field.signal ? '$' + field.signal : field || '');\n  }\n\n  // -----\n\n  var Scope = 'scope';\n\n  var View$1 = 'view';\n\n  function isSignal(_) {\n    return _ && _.signal;\n  }\n\n  function isExpr(_) {\n    return _ && _.expr;\n  }\n\n  function hasSignal(_) {\n    if (isSignal(_)) return true;\n    if (isObject(_)) for (var key in _) {\n      if (hasSignal(_[key])) return true;\n    }\n    return false;\n  }\n\n  function value$1(specValue, defaultValue) {\n    return specValue != null ? specValue : defaultValue;\n  }\n\n  function deref(v) {\n    return v && v.signal || v;\n  }\n\n  var Timer$1 = 'timer';\n\n  function parseStream$1(stream, scope) {\n    var method = stream.merge ? mergeStream\n      : stream.stream ? nestedStream\n      : stream.type ? eventStream\n      : error('Invalid stream specification: ' + $(stream));\n\n    return method(stream, scope);\n  }\n\n  function eventSource(source) {\n     return source === Scope ? View$1 : (source || View$1);\n  }\n\n  function mergeStream(stream, scope) {\n    var list = stream.merge.map(s => parseStream$1(s, scope)),\n        entry = streamParameters({merge: list}, stream, scope);\n    return scope.addStream(entry).id;\n  }\n\n  function nestedStream(stream, scope) {\n    var id = parseStream$1(stream.stream, scope),\n        entry = streamParameters({stream: id}, stream, scope);\n    return scope.addStream(entry).id;\n  }\n\n  function eventStream(stream, scope) {\n    var id, entry;\n\n    if (stream.type === Timer$1) {\n      id = scope.event(Timer$1, stream.throttle);\n      stream = {between: stream.between, filter: stream.filter};\n    } else {\n      id = scope.event(eventSource(stream.source), stream.type);\n    }\n\n    entry = streamParameters({stream: id}, stream, scope);\n    return Object.keys(entry).length === 1\n      ? id\n      : scope.addStream(entry).id;\n  }\n\n  function streamParameters(entry, stream, scope) {\n    var param = stream.between;\n\n    if (param) {\n      if (param.length !== 2) {\n        error('Stream \"between\" parameter must have 2 entries: ' + $(stream));\n      }\n      entry.between = [\n        parseStream$1(param[0], scope),\n        parseStream$1(param[1], scope)\n      ];\n    }\n\n    param = stream.filter ? [].concat(stream.filter) : [];\n    if (stream.marktype || stream.markname || stream.markrole) {\n      // add filter for mark type, name and/or role\n      param.push(filterMark(stream.marktype, stream.markname, stream.markrole));\n    }\n    if (stream.source === Scope) {\n      // add filter to limit events from sub-scope only\n      param.push('inScope(event.item)');\n    }\n    if (param.length) {\n      entry.filter = parseExpression$1('(' + param.join(')&&(') + ')').$expr;\n    }\n\n    if ((param = stream.throttle) != null) {\n      entry.throttle = +param;\n    }\n\n    if ((param = stream.debounce) != null) {\n      entry.debounce = +param;\n    }\n\n    if (stream.consume) {\n      entry.consume = true;\n    }\n\n    return entry;\n  }\n\n  function filterMark(type, name, role) {\n    var item = 'event.item';\n    return item\n      + (type && type !== '*' ? '&&' + item + '.mark.marktype===\\'' + type + '\\'' : '')\n      + (role ? '&&' + item + '.mark.role===\\'' + role + '\\'' : '')\n      + (name ? '&&' + item + '.mark.name===\\'' + name + '\\'' : '');\n  }\n\n  /**\n   * Parse an event selector string.\n   * Returns an array of event stream definitions.\n   */\n  function selector(selector, source, marks) {\n    DEFAULT_SOURCE = source || VIEW$1;\n    MARKS = marks || DEFAULT_MARKS;\n    return parseMerge(selector.trim()).map(parseSelector);\n  }\n\n  var VIEW$1    = 'view',\n      LBRACK  = '[',\n      RBRACK  = ']',\n      LBRACE  = '{',\n      RBRACE  = '}',\n      COLON   = ':',\n      COMMA   = ',',\n      NAME    = '@',\n      GT      = '>',\n      ILLEGAL$1 = /[[\\]{}]/,\n      DEFAULT_SOURCE,\n      MARKS,\n      DEFAULT_MARKS = {\n        '*': 1,\n        arc: 1,\n        area: 1,\n        group: 1,\n        image: 1,\n        line: 1,\n        path: 1,\n        rect: 1,\n        rule: 1,\n        shape: 1,\n        symbol: 1,\n        text: 1,\n        trail: 1\n      };\n\n  function isMarkType(type) {\n    return MARKS[type];\n  }\n\n  function find$2(s, i, endChar, pushChar, popChar) {\n    var count = 0,\n        n = s.length,\n        c;\n    for (; i<n; ++i) {\n      c = s[i];\n      if (!count && c === endChar) return i;\n      else if (popChar && popChar.indexOf(c) >= 0) --count;\n      else if (pushChar && pushChar.indexOf(c) >= 0) ++count;\n    }\n    return i;\n  }\n\n  function parseMerge(s) {\n    var output = [],\n        start = 0,\n        n = s.length,\n        i = 0;\n\n    while (i < n) {\n      i = find$2(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);\n      output.push(s.substring(start, i).trim());\n      start = ++i;\n    }\n\n    if (output.length === 0) {\n      throw 'Empty event selector: ' + s;\n    }\n    return output;\n  }\n\n  function parseSelector(s) {\n    return s[0] === '['\n      ? parseBetween(s)\n      : parseStream$2(s);\n  }\n\n  function parseBetween(s) {\n    var n = s.length,\n        i = 1,\n        b, stream;\n\n    i = find$2(s, i, RBRACK, LBRACK, RBRACK);\n    if (i === n) {\n      throw 'Empty between selector: ' + s;\n    }\n\n    b = parseMerge(s.substring(1, i));\n    if (b.length !== 2) {\n      throw 'Between selector must have two elements: ' + s;\n    }\n\n    s = s.slice(i + 1).trim();\n    if (s[0] !== GT) {\n      throw 'Expected \\'>\\' after between selector: ' + s;\n    }\n\n    b = b.map(parseSelector);\n\n    stream = parseSelector(s.slice(1).trim());\n    if (stream.between) {\n      return {\n        between: b,\n        stream: stream\n      };\n    } else {\n      stream.between = b;\n    }\n\n    return stream;\n  }\n\n  function parseStream$2(s) {\n    var stream = {source: DEFAULT_SOURCE},\n        source = [],\n        throttle = [0, 0],\n        markname = 0,\n        start = 0,\n        n = s.length,\n        i = 0, j,\n        filter;\n\n    // extract throttle from end\n    if (s[n-1] === RBRACE) {\n      i = s.lastIndexOf(LBRACE);\n      if (i >= 0) {\n        try {\n          throttle = parseThrottle(s.substring(i+1, n-1));\n        } catch (e) {\n          throw 'Invalid throttle specification: ' + s;\n        }\n        s = s.slice(0, i).trim();\n        n = s.length;\n      } else throw 'Unmatched right brace: ' + s;\n      i = 0;\n    }\n\n    if (!n) throw s;\n\n    // set name flag based on first char\n    if (s[0] === NAME) markname = ++i;\n\n    // extract first part of multi-part stream selector\n    j = find$2(s, i, COLON);\n    if (j < n) {\n      source.push(s.substring(start, j).trim());\n      start = i = ++j;\n    }\n\n    // extract remaining part of stream selector\n    i = find$2(s, i, LBRACK);\n    if (i === n) {\n      source.push(s.substring(start, n).trim());\n    } else {\n      source.push(s.substring(start, i).trim());\n      filter = [];\n      start = ++i;\n      if (start === n) throw 'Unmatched left bracket: ' + s;\n    }\n\n    // extract filters\n    while (i < n) {\n      i = find$2(s, i, RBRACK);\n      if (i === n) throw 'Unmatched left bracket: ' + s;\n      filter.push(s.substring(start, i).trim());\n      if (i < n-1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;\n      start = ++i;\n    }\n\n    // marshall event stream specification\n    if (!(n = source.length) || ILLEGAL$1.test(source[n-1])) {\n      throw 'Invalid event selector: ' + s;\n    }\n\n    if (n > 1) {\n      stream.type = source[1];\n      if (markname) {\n        stream.markname = source[0].slice(1);\n      } else if (isMarkType(source[0])) {\n        stream.marktype = source[0];\n      } else {\n        stream.source = source[0];\n      }\n    } else {\n      stream.type = source[0];\n    }\n    if (stream.type.slice(-1) === '!') {\n      stream.consume = true;\n      stream.type = stream.type.slice(0, -1);\n    }\n    if (filter != null) stream.filter = filter;\n    if (throttle[0]) stream.throttle = throttle[0];\n    if (throttle[1]) stream.debounce = throttle[1];\n\n    return stream;\n  }\n\n  function parseThrottle(s) {\n    var a = s.split(COMMA);\n    if (!s.length || a.length > 2) throw s;\n    return a.map(function(_) {\n      var x = +_;\n      if (x !== x) throw s;\n      return x;\n    });\n  }\n\n  var preamble = 'var datum=event.item&&event.item.datum;';\n\n  function parseUpdate$1(spec, scope, target) {\n    var events = spec.events,\n        update = spec.update,\n        encode = spec.encode,\n        sources = [],\n        entry = {target: target};\n\n    if (!events) {\n      error('Signal update missing events specification.');\n    }\n\n    // interpret as an event selector string\n    if (isString(events)) {\n      events = selector(events, scope.isSubscope() ? Scope : View$1);\n    }\n\n    // separate event streams from signal updates\n    events = array(events)\n      .filter(s => s.signal || s.scale ? (sources.push(s), 0) : 1);\n\n    // merge internal operator listeners\n    if (sources.length > 1) {\n      sources = [mergeSources(sources)];\n    }\n\n    // merge event streams, include as source\n    if (events.length) {\n      sources.push(events.length > 1 ? {merge: events} : events[0]);\n    }\n\n    if (encode != null) {\n      if (update) error('Signal encode and update are mutually exclusive.');\n      update = 'encode(item(),' + $(encode) + ')';\n    }\n\n    // resolve update value\n    entry.update = isString(update) ? parseExpression$1(update, scope, preamble)\n      : update.expr != null ? parseExpression$1(update.expr, scope, preamble)\n      : update.value != null ? update.value\n      : update.signal != null ? {\n          $expr:   '_.value',\n          $params: {value: scope.signalRef(update.signal)}\n        }\n      : error('Invalid signal update specification.');\n\n    if (spec.force) {\n      entry.options = {force: true};\n    }\n\n    sources.forEach(function(source) {\n      scope.addUpdate(extend(streamSource(source, scope), entry));\n    });\n  }\n\n  function streamSource(stream, scope) {\n    return {\n      source: stream.signal ? scope.signalRef(stream.signal)\n            : stream.scale ? scope.scaleRef(stream.scale)\n            : parseStream$1(stream, scope)\n    };\n  }\n\n  function mergeSources(sources) {\n    return {\n      signal: '['\n        + sources.map(s => s.scale ? 'scale(\"' + s.scale + '\")' : s.signal)\n        + ']'\n    };\n  }\n\n  function parseSignalUpdates(signal, scope) {\n    var op = scope.getSignal(signal.name),\n        expr = signal.update;\n\n    if (signal.init) {\n      if (expr) {\n        error('Signals can not include both init and update expressions.');\n      } else {\n        expr = signal.init;\n        op.initonly = true;\n      }\n    }\n\n    if (expr) {\n      expr = parseExpression$1(expr, scope);\n      op.update = expr.$expr;\n      op.params = expr.$params;\n    }\n\n    if (signal.on) {\n      signal.on.forEach(function(_) {\n        parseUpdate$1(_, scope, op.id);\n      });\n    }\n  }\n\n  function transform$3(name) {\n    return function(params, value, parent) {\n      return entry(name, value, params || undefined, parent);\n    };\n  }\n\n  var Aggregate$1 = transform$3('aggregate');\n  var AxisTicks$1 = transform$3('axisticks');\n  var Bound$1 = transform$3('bound');\n  var Collect$1 = transform$3('collect');\n  var Compare$1 = transform$3('compare');\n  var DataJoin$1 = transform$3('datajoin');\n  var Encode$1 = transform$3('encode');\n  var Expression$1 = transform$3('expression');\n  var Facet$1 = transform$3('facet');\n  var Field$1 = transform$3('field');\n  var Key$1 = transform$3('key');\n  var LegendEntries$1 = transform$3('legendentries');\n  var Load$1 = transform$3('load');\n  var Mark$1 = transform$3('mark');\n  var MultiExtent$1 = transform$3('multiextent');\n  var MultiValues$1 = transform$3('multivalues');\n  var Overlap$1 = transform$3('overlap');\n  var Params$2 = transform$3('params');\n  var PreFacet$1 = transform$3('prefacet');\n  var Projection$1 = transform$3('projection');\n  var Proxy$1 = transform$3('proxy');\n  var Relay$1 = transform$3('relay');\n  var Render$1 = transform$3('render');\n  var Scale$1 = transform$3('scale');\n  var Sieve$1 = transform$3('sieve');\n  var SortItems$1 = transform$3('sortitems');\n  var ViewLayout$1 = transform$3('viewlayout');\n  var Values$1 = transform$3('values');\n\n  var FIELD_REF_ID = 0;\n\n  var MULTIDOMAIN_SORT_OPS  = {min: 'min', max: 'max', count: 'sum'};\n\n  function initScale(spec, scope) {\n    var type = spec.type || 'linear';\n\n    if (!isValidScaleType(type)) {\n      error('Unrecognized scale type: ' + $(type));\n    }\n\n    scope.addScale(spec.name, {\n      type:   type,\n      domain: undefined\n    });\n  }\n\n  function parseScale(spec, scope) {\n    var params = scope.getScale(spec.name).params,\n        key;\n\n    params.domain = parseScaleDomain(spec.domain, spec, scope);\n\n    if (spec.range != null) {\n      params.range = parseScaleRange(spec, scope, params);\n    }\n\n    if (spec.interpolate != null) {\n      parseScaleInterpolate(spec.interpolate, params);\n    }\n\n    if (spec.nice != null) {\n      params.nice = parseScaleNice(spec.nice);\n    }\n\n    if (spec.bins != null) {\n      params.bins = parseScaleBins(spec.bins, scope);\n    }\n\n    for (key in spec) {\n      if (hasOwnProperty(params, key) || key === 'name') continue;\n      params[key] = parseLiteral(spec[key], scope);\n    }\n  }\n\n  function parseLiteral(v, scope) {\n    return !isObject(v) ? v\n      : v.signal ? scope.signalRef(v.signal)\n      : error('Unsupported object: ' + $(v));\n  }\n\n  function parseArray(v, scope) {\n    return v.signal\n      ? scope.signalRef(v.signal)\n      : v.map(v => parseLiteral(v, scope));\n  }\n\n  function dataLookupError(name) {\n    error('Can not find data set: ' + $(name));\n  }\n\n  // -- SCALE DOMAIN ----\n\n  function parseScaleDomain(domain, spec, scope) {\n    if (!domain) {\n      if (spec.domainMin != null || spec.domainMax != null) {\n        error('No scale domain defined for domainMin/domainMax to override.');\n      }\n      return; // default domain\n    }\n\n    return domain.signal ? scope.signalRef(domain.signal)\n      : (isArray(domain) ? explicitDomain\n      : domain.fields ? multipleDomain\n      : singularDomain)(domain, spec, scope);\n  }\n\n  function explicitDomain(domain, spec, scope) {\n    return domain.map(function(v) {\n      return parseLiteral(v, scope);\n    });\n  }\n\n  function singularDomain(domain, spec, scope) {\n    var data = scope.getData(domain.data);\n    if (!data) dataLookupError(domain.data);\n\n    return isDiscrete(spec.type)\n        ? data.valuesRef(scope, domain.field, parseSort(domain.sort, false))\n        : isQuantile(spec.type) ? data.domainRef(scope, domain.field)\n        : data.extentRef(scope, domain.field);\n  }\n\n  function multipleDomain(domain, spec, scope) {\n    var data = domain.data,\n        fields = domain.fields.reduce(function(dom, d) {\n          d = isString(d) ? {data: data, field: d}\n            : (isArray(d) || d.signal) ? fieldRef$1(d, scope)\n            : d;\n          dom.push(d);\n          return dom;\n        }, []);\n\n    return (isDiscrete(spec.type) ? ordinalMultipleDomain\n      : isQuantile(spec.type) ? quantileMultipleDomain\n      : numericMultipleDomain)(domain, scope, fields);\n  }\n\n  function fieldRef$1(data, scope) {\n    var name = '_:vega:_' + (FIELD_REF_ID++),\n        coll = Collect$1({});\n\n    if (isArray(data)) {\n      coll.value = {$ingest: data};\n    } else if (data.signal) {\n      var code = 'setdata(' + $(name) + ',' + data.signal + ')';\n      coll.params.input = scope.signalRef(code);\n    }\n    scope.addDataPipeline(name, [coll, Sieve$1({})]);\n    return {data: name, field: 'data'};\n  }\n\n  function ordinalMultipleDomain(domain, scope, fields) {\n    var sort = parseSort(domain.sort, true),\n        counts, p, a, c, v;\n\n    // get value counts for each domain field\n    counts = fields.map(function(f) {\n      var data = scope.getData(f.data);\n      if (!data) dataLookupError(f.data);\n      return data.countsRef(scope, f.field, sort);\n    });\n\n    // aggregate the results from each domain field\n    p = {groupby: keyFieldRef, pulse: counts};\n    if (sort) {\n      a = sort.op || 'count';\n      v = sort.field ? aggrField(a, sort.field) : 'count';\n      p.ops = [MULTIDOMAIN_SORT_OPS[a]];\n      p.fields = [scope.fieldRef(v)];\n      p.as = [v];\n    }\n    a = scope.add(Aggregate$1(p));\n\n    // collect aggregate output\n    c = scope.add(Collect$1({pulse: ref(a)}));\n\n    // extract values for combined domain\n    v = scope.add(Values$1({\n      field: keyFieldRef,\n      sort:  scope.sortRef(sort),\n      pulse: ref(c)\n    }));\n\n    return ref(v);\n  }\n\n  function parseSort(sort, multidomain) {\n    if (sort) {\n      if (!sort.field && !sort.op) {\n        if (isObject(sort)) sort.field = 'key';\n        else sort = {field: 'key'};\n      } else if (!sort.field && sort.op !== 'count') {\n        error('No field provided for sort aggregate op: ' + sort.op);\n      } else if (multidomain && sort.field) {\n        if (sort.op && !MULTIDOMAIN_SORT_OPS[sort.op]) {\n          error('Multiple domain scales can not be sorted using ' + sort.op);\n        }\n      }\n    }\n    return sort;\n  }\n\n  function quantileMultipleDomain(domain, scope, fields) {\n    // get value arrays for each domain field\n    var values = fields.map(function(f) {\n      var data = scope.getData(f.data);\n      if (!data) dataLookupError(f.data);\n      return data.domainRef(scope, f.field);\n    });\n\n    // combine value arrays\n    return ref(scope.add(MultiValues$1({values: values})));\n  }\n\n  function numericMultipleDomain(domain, scope, fields) {\n    // get extents for each domain field\n    var extents = fields.map(function(f) {\n      var data = scope.getData(f.data);\n      if (!data) dataLookupError(f.data);\n      return data.extentRef(scope, f.field);\n    });\n\n    // combine extents\n    return ref(scope.add(MultiExtent$1({extents: extents})));\n  }\n\n  // -- SCALE BINS -----\n\n  function parseScaleBins(v, scope) {\n    return v.signal || isArray(v)\n      ? parseArray(v, scope)\n      : scope.objectProperty(v);\n  }\n\n  // -- SCALE NICE -----\n\n  function parseScaleNice(nice) {\n    return isObject(nice)\n      ? {\n          interval: parseLiteral(nice.interval),\n          step: parseLiteral(nice.step)\n        }\n      : parseLiteral(nice);\n  }\n\n  // -- SCALE INTERPOLATION -----\n\n  function parseScaleInterpolate(interpolate, params) {\n    params.interpolate = parseLiteral(interpolate.type || interpolate);\n    if (interpolate.gamma != null) {\n      params.interpolateGamma = parseLiteral(interpolate.gamma);\n    }\n  }\n\n  // -- SCALE RANGE -----\n\n  function parseScaleRange(spec, scope, params) {\n    var range = spec.range,\n        config = scope.config.range;\n\n    if (range.signal) {\n      return scope.signalRef(range.signal);\n    } else if (isString(range)) {\n      if (config && hasOwnProperty(config, range)) {\n        spec = extend({}, spec, {range: config[range]});\n        return parseScaleRange(spec, scope, params);\n      } else if (range === 'width') {\n        range = [0, {signal: 'width'}];\n      } else if (range === 'height') {\n        range = isDiscrete(spec.type)\n          ? [0, {signal: 'height'}]\n          : [{signal: 'height'}, 0];\n      } else {\n        error('Unrecognized scale range value: ' + $(range));\n      }\n    } else if (range.scheme) {\n      params.scheme = isArray(range.scheme)\n        ? parseArray(range.scheme, scope)\n        : parseLiteral(range.scheme, scope);\n      if (range.extent) params.schemeExtent = parseArray(range.extent, scope);\n      if (range.count) params.schemeCount = parseLiteral(range.count, scope);\n      return;\n    } else if (range.step) {\n      params.rangeStep = parseLiteral(range.step, scope);\n      return;\n    } else if (isDiscrete(spec.type) && !isArray(range)) {\n      return parseScaleDomain(range, spec, scope);\n    } else if (!isArray(range)) {\n      error('Unsupported range type: ' + $(range));\n    }\n\n    return range.map(v => (isArray(v) ? parseArray : parseLiteral)(v, scope));\n  }\n\n  function parseProjection(proj, scope) {\n    var config = scope.config.projection || {},\n        params = {};\n\n    for (var name in proj) {\n      if (name === 'name') continue;\n      params[name] = parseParameter$1(proj[name], name, scope);\n    }\n\n    // apply projection defaults from config\n    for (name in config) {\n      if (params[name] == null) {\n        params[name] = parseParameter$1(config[name], name, scope);\n      }\n    }\n\n    scope.addProjection(proj.name, params);\n  }\n\n  function parseParameter$1(_, name, scope) {\n    return isArray(_) ? _.map(function(_) { return parseParameter$1(_, name, scope); })\n      : !isObject(_) ? _\n      : _.signal ? scope.signalRef(_.signal)\n      : name === 'fit' ? _\n      : error('Unsupported parameter object: ' + $(_));\n  }\n\n  const Top$1 = 'top';\n  const Left$1 = 'left';\n  const Right$1 = 'right';\n  const Bottom$1 = 'bottom';\n  const Center$1 = 'center';\n\n  const Vertical = 'vertical';\n\n  const Start$1 = 'start';\n  const Middle$1 = 'middle';\n  const End$1 = 'end';\n\n  const Index  = 'index';\n  const Label  = 'label';\n  const Offset = 'offset';\n  const Perc   = 'perc';\n  const Perc2  = 'perc2';\n  const Size   = 'size';\n  const Value  = 'value';\n\n  const GuideLabelStyle = 'guide-label';\n  const GuideTitleStyle = 'guide-title';\n  const GroupTitleStyle = 'group-title';\n  const GroupSubtitleStyle = 'group-subtitle';\n\n  const Symbols$2 = 'symbol';\n  const Gradient$2 = 'gradient';\n  const Discrete$2 = 'discrete';\n\n  // Encoding channels supported by legends\n  // In priority order of 'canonical' scale\n  const LegendScales = [\n    'size',\n    'shape',\n    'fill',\n    'stroke',\n    'strokeWidth',\n    'strokeDash',\n    'opacity'\n  ];\n\n  const Skip$1 = {\n    name: 1,\n    style: 1,\n    interactive: 1\n  };\n\n  const zero$2 = {value: 0};\n  const one$2 = {value: 1};\n\n  var Skip$2 = toSet(['rule']),\n      Swap = toSet(['group', 'image', 'rect']);\n\n  function adjustSpatial(encode, marktype) {\n    var code = '';\n\n    if (Skip$2[marktype]) return code;\n\n    if (encode.x2) {\n      if (encode.x) {\n        if (Swap[marktype]) {\n          code += 'if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;';\n        }\n        code += 'o.width=o.x2-o.x;';\n      } else {\n        code += 'o.x=o.x2-(o.width||0);';\n      }\n    }\n\n    if (encode.xc) {\n      code += 'o.x=o.xc-(o.width||0)/2;';\n    }\n\n    if (encode.y2) {\n      if (encode.y) {\n        if (Swap[marktype]) {\n          code += 'if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;';\n        }\n        code += 'o.height=o.y2-o.y;';\n      } else {\n        code += 'o.y=o.y2-(o.height||0);';\n      }\n    }\n\n    if (encode.yc) {\n      code += 'o.y=o.yc-(o.height||0)/2;';\n    }\n\n    return code;\n  }\n\n  function color$2(enc, scope, params, fields) {\n    function color(type, x, y, z) {\n      var a = entry$1(null, x, scope, params, fields),\n          b = entry$1(null, y, scope, params, fields),\n          c = entry$1(null, z, scope, params, fields);\n      return 'this.' + type + '(' + [a, b, c].join(',') + ').toString()';\n    }\n\n    return (enc.c) ? color('hcl', enc.h, enc.c, enc.l)\n      : (enc.h || enc.s) ? color('hsl', enc.h, enc.s, enc.l)\n      : (enc.l || enc.a) ? color('lab', enc.l, enc.a, enc.b)\n      : (enc.r || enc.g || enc.b) ? color('rgb', enc.r, enc.g, enc.b)\n      : null;\n  }\n\n  function expression$1(code, scope, params, fields) {\n    var expr = parseExpression$1(code, scope);\n    expr.$fields.forEach(function(name) { fields[name] = 1; });\n    extend(params, expr.$params);\n    return expr.$expr;\n  }\n\n  function field$1(ref, scope, params, fields) {\n    return resolve$1(isObject(ref) ? ref : {datum: ref}, scope, params, fields);\n  }\n\n  function resolve$1(ref, scope, params, fields) {\n    var object, level, field;\n\n    if (ref.signal) {\n      object = 'datum';\n      field = expression$1(ref.signal, scope, params, fields);\n    } else if (ref.group || ref.parent) {\n      level = Math.max(1, ref.level || 1);\n      object = 'item';\n\n      while (level-- > 0) {\n        object += '.mark.group';\n      }\n\n      if (ref.parent) {\n        field = ref.parent;\n        object += '.datum';\n      } else {\n        field = ref.group;\n      }\n    } else if (ref.datum) {\n      object = 'datum';\n      field = ref.datum;\n    } else {\n      error('Invalid field reference: ' + $(ref));\n    }\n\n    if (!ref.signal) {\n      if (isString(field)) {\n        fields[field] = 1; // TODO review field tracking?\n        field = splitAccessPath(field).map($).join('][');\n      } else {\n        field = resolve$1(field, scope, params, fields);\n      }\n    }\n\n    return object + '[' + field + ']';\n  }\n\n  function property(property, scope, params, fields) {\n    return isObject(property)\n        ? '(' + entry$1(null, property, scope, params, fields) + ')'\n        : property;\n  }\n\n  function scale$5(enc, value, scope, params, fields) {\n    var scale = getScale$1(enc.scale, scope, params, fields),\n        interp, func, flag;\n\n    if (enc.range != null) {\n      // pull value from scale range\n      interp = +enc.range;\n      func = scale + '.range()';\n      value = (interp === 0) ? (func + '[0]')\n        : '($=' + func + ',' + ((interp === 1) ? '$[$.length-1]'\n        : '$[0]+' + interp + '*($[$.length-1]-$[0])') + ')';\n    } else {\n      // run value through scale and/or pull scale bandwidth\n      if (value !== undefined) value = scale + '(' + value + ')';\n\n      if (enc.band && (flag = hasBandwidth(enc.scale, scope))) {\n        func = scale + '.bandwidth';\n\n        if (enc.band.signal) {\n          interp = func + '()*' + property(enc.band, scope, params, fields);\n        } else {\n          interp = +enc.band;\n          interp = func + '()' + (interp===1 ? '' : '*' + interp);\n        }\n\n        // if we don't know the scale type, check for bandwidth\n        if (flag < 0) interp = '(' + func + '?' + interp + ':0)';\n\n        value = (value ? value + '+' : '') + interp;\n\n        if (enc.extra) {\n          // include logic to handle extraneous elements\n          value = '(datum.extra?' + scale + '(datum.extra.value):' + value + ')';\n        }\n      }\n\n      if (value == null) value = '0';\n    }\n\n    return value;\n  }\n\n  function hasBandwidth(name, scope) {\n    if (!isString(name)) return -1;\n    var type = scope.scaleType(name);\n    return type === 'band' || type === 'point' ? 1 : 0;\n  }\n\n  function getScale$1(name, scope, params, fields) {\n    var scaleName;\n\n    if (isString(name)) {\n      // direct scale lookup; add scale as parameter\n      scaleName = ScalePrefix + name;\n      if (!hasOwnProperty(params, scaleName)) {\n        params[scaleName] = scope.scaleRef(name);\n      }\n      scaleName = $(scaleName);\n    } else {\n      // indirect scale lookup; add all scales as parameters\n      for (scaleName in scope.scales) {\n        params[ScalePrefix + scaleName] = scope.scaleRef(scaleName);\n      }\n      scaleName = $(ScalePrefix) + '+'\n        + (name.signal\n          ? '(' + expression$1(name.signal, scope, params, fields) + ')'\n          : field$1(name, scope, params, fields));\n    }\n\n    return '_[' + scaleName + ']';\n  }\n\n  function gradient$1(enc, scope, params, fields) {\n    return 'this.gradient('\n      + getScale$1(enc.gradient, scope, params, fields)\n      + ',' + $(enc.start)\n      + ',' + $(enc.stop)\n      + ',' + $(enc.count)\n      + ')';\n  }\n\n  function entry$1(channel, enc, scope, params, fields) {\n    if (enc.gradient != null) {\n      return gradient$1(enc, scope, params, fields);\n    }\n\n    var value = enc.signal ? expression$1(enc.signal, scope, params, fields)\n      : enc.color ? color$2(enc.color, scope, params, fields)\n      : enc.field != null ? field$1(enc.field, scope, params, fields)\n      : enc.value !== undefined ? $(enc.value)\n      : undefined;\n\n    if (enc.scale != null) {\n      value = scale$5(enc, value, scope, params, fields);\n    }\n\n    if (value === undefined) {\n      value = null;\n    }\n\n    if (enc.exponent != null) {\n      value = 'Math.pow(' + value + ','\n        + property(enc.exponent, scope, params, fields) + ')';\n    }\n\n    if (enc.mult != null) {\n      value += '*' + property(enc.mult, scope, params, fields);\n    }\n\n    if (enc.offset != null) {\n      value += '+' + property(enc.offset, scope, params, fields);\n    }\n\n    if (enc.round) {\n      value = 'Math.round(' + value + ')';\n    }\n\n    return value;\n  }\n\n  function set$3(obj, key, value) {\n    const o = obj + '[' + $(key) + ']';\n    return `$=${value};if(${o}!==$)${o}=$,m=1;`;\n  }\n\n  function rule$1(channel, rules, scope, params, fields) {\n    var code = '';\n\n    rules.forEach(function(rule) {\n      var value = entry$1(channel, rule, scope, params, fields);\n      code += rule.test\n        ? expression$1(rule.test, scope, params, fields) + '?' + value + ':'\n        : value;\n    });\n\n    // if no else clause, terminate with null (vega/vega#1366)\n    if (peek(code) === ':') {\n      code += 'null';\n    }\n\n    return set$3('o', channel, code);\n  }\n\n  function parseEncode(encode, marktype, params, scope) {\n    var fields = {},\n        code = 'var o=item,datum=o.datum,m=0,$;',\n        channel, enc, value;\n\n    for (channel in encode) {\n      enc = encode[channel];\n      if (isArray(enc)) { // rule\n        code += rule$1(channel, enc, scope, params, fields);\n      } else {\n        value = entry$1(channel, enc, scope, params, fields);\n        code += set$3('o', channel, value);\n      }\n    }\n\n    code += adjustSpatial(encode, marktype);\n    code += 'return m;';\n\n    return {\n      $expr:   code,\n      $fields: Object.keys(fields),\n      $output: Object.keys(encode)\n    };\n  }\n\n  var MarkRole = 'mark';\n  var FrameRole$1 = 'frame';\n  var ScopeRole$1 = 'scope';\n\n  var AxisRole$1 = 'axis';\n  var AxisDomainRole = 'axis-domain';\n  var AxisGridRole = 'axis-grid';\n  var AxisLabelRole = 'axis-label';\n  var AxisTickRole = 'axis-tick';\n  var AxisTitleRole = 'axis-title';\n\n  var LegendRole$1 = 'legend';\n  var LegendBandRole = 'legend-band';\n  var LegendEntryRole = 'legend-entry';\n  var LegendGradientRole = 'legend-gradient';\n  var LegendLabelRole = 'legend-label';\n  var LegendSymbolRole = 'legend-symbol';\n  var LegendTitleRole = 'legend-title';\n\n  var TitleRole$1 = 'title';\n  var TitleTextRole = 'title-text';\n  var TitleSubtitleRole = 'title-subtitle';\n\n  function encoder(_) {\n    return isObject(_) && !isArray(_) ? extend({}, _) : {value: _};\n  }\n\n  function addEncode(object, name, value, set) {\n    if (value != null) {\n      // Always assign signal to update, even if the signal is from the enter block\n      if (isObject(value) && !isArray(value)) {\n        object.update[name] = value;\n      } else {\n        object[set || 'enter'][name] = {value: value};\n      }\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  function addEncoders(object, enter, update) {\n    for (let name in enter) {\n      addEncode(object, name, enter[name]);\n    }\n    for (let name in update) {\n      addEncode(object, name, update[name], 'update');\n    }\n  }\n\n  function extendEncode(encode, extra, skip) {\n    for (var name in extra) {\n      if (skip && hasOwnProperty(skip, name)) continue;\n      encode[name] = extend(encode[name] || {}, extra[name]);\n    }\n    return encode;\n  }\n\n  function encoders(encode, type, role, style, scope, params) {\n    var enc, key;\n    params = params || {};\n    params.encoders = {$encode: (enc = {})};\n\n    encode = applyDefaults(encode, type, role, style, scope.config);\n\n    for (key in encode) {\n      enc[key] = parseEncode(encode[key], type, params, scope);\n    }\n\n    return params;\n  }\n\n  function applyDefaults(encode, type, role, style, config) {\n    var defaults = {}, enter = {}, update, key, skip, props;\n\n    // if text mark, apply global lineBreak settings (#2370)\n    key = 'lineBreak';\n    if (type === 'text' && config[key] != null && !has(key, encode)) {\n      applyDefault(defaults, key, config[key]);\n    }\n\n    // ignore legend and axis roles\n    if (role == 'legend' || String(role).startsWith('axis')) {\n      role = null;\n    }\n\n    // resolve mark config\n    props = role === FrameRole$1 ? config.group\n      : (role === MarkRole) ? extend({}, config.mark, config[type])\n      : null;\n\n    for (key in props) {\n      // do not apply defaults if relevant fields are defined\n      skip = has(key, encode)\n        || (key === 'fill' || key === 'stroke')\n        && (has('fill', encode) || has('stroke', encode));\n\n      if (!skip) applyDefault(defaults, key, props[key]);\n    }\n\n    // resolve styles, apply with increasing precedence\n    array(style).forEach(function(name) {\n      var props = config.style && config.style[name];\n      for (var key in props) {\n        if (!has(key, encode)) {\n          applyDefault(defaults, key, props[key]);\n        }\n      }\n    });\n\n    encode = extend({}, encode); // defensive copy\n    for (key in defaults) {\n      props = defaults[key];\n      if (props.signal) {\n        (update = update || {})[key] = props;\n      } else {\n        enter[key] = props;\n      }\n    }\n\n    encode.enter = extend(enter, encode.enter);\n    if (update) encode.update = extend(update, encode.update);\n\n    return encode;\n  }\n\n  function applyDefault(defaults, key, value) {\n    defaults[key] = value && value.signal\n      ? {signal: value.signal}\n      : {value: value};\n  }\n\n  function has(key, encode) {\n    return encode && (\n      (encode.enter && encode.enter[key]) ||\n      (encode.update && encode.update[key])\n    );\n  }\n\n  function guideMark(type, role, style, key, dataRef, encode, extras) {\n    return {\n      type:  type,\n      name:  extras ? extras.name : undefined,\n      role:  role,\n      style: (extras && extras.style) || style,\n      key:   key,\n      from:  dataRef,\n      interactive: !!(extras && extras.interactive),\n      encode: extendEncode(encode, extras, Skip$1)\n    };\n  }\n\n  function lookup$5(spec, config) {\n    const _ = (name, dflt) => value$1(spec[name], value$1(config[name], dflt));\n\n    _.isVertical = s => Vertical === value$1(\n      spec.direction,\n      config.direction || (s ? config.symbolDirection : config.gradientDirection)\n    );\n\n    _.gradientLength = () => value$1(\n      spec.gradientLength,\n      config.gradientLength || config.gradientWidth\n    );\n\n    _.gradientThickness = () => value$1(\n      spec.gradientThickness,\n      config.gradientThickness || config.gradientHeight\n    );\n\n    _.entryColumns = () => value$1(\n      spec.columns,\n      value$1(config.columns, +_.isVertical(true))\n    );\n\n    return _;\n  }\n\n  function getEncoding(name, encode) {\n    var v = encode && (\n      (encode.update && encode.update[name]) ||\n      (encode.enter && encode.enter[name])\n    );\n    return v && v.signal ? v : v ? v.value : null;\n  }\n\n  function getStyle(name, scope, style) {\n    var s = scope.config.style[style];\n    return s && s[name];\n  }\n\n  function anchorExpr(s, e, m) {\n    return `item.anchor === \"${Start$1}\" ? ${s} : item.anchor === \"${End$1}\" ? ${e} : ${m}`;\n  }\n\n  const alignExpr = anchorExpr(\n    $(Left$1),\n    $(Right$1),\n    $(Center$1)\n  );\n\n  function tickBand(_) {\n    let v = _('tickBand'),\n        offset = _('tickOffset'),\n        band, extra;\n\n    if (!v) {\n      // if no tick band entry, fall back on other properties\n      band = _('bandPosition');\n      extra = _('tickExtra');\n    } else if (v.signal) {\n      // if signal, augment code to interpret values\n      band = {signal: `(${v.signal})==='extent'?1:0.5`};\n      extra = {signal: `(${v.signal})==='extent'?true:false`};\n      if (!isObject(offset)) {\n        offset = {signal: `(${v.signal})==='extent'?0:${offset}`};\n      }\n    } else if (v === 'extent') {\n      // if constant, simply set values\n      band = 1;\n      extra = true;\n      offset = 0;\n    } else {\n      band = 0.5;\n      extra = false;\n    }\n\n    return {extra, band, offset};\n  }\n\n  function extendOffset(value, offset) {\n    return !offset ? value\n      : !value ? offset\n      : !isObject(value) ? { value, offset }\n      : { ...value, offset: extendOffset(value.offset, offset) };\n  }\n\n  var GroupMark = 'group';\n  var RectMark = 'rect';\n  var RuleMark = 'rule';\n  var SymbolMark = 'symbol';\n  var TextMark = 'text';\n\n  function legendGradient(spec, scale, config, userEncode) {\n    var _ = lookup$5(spec, config),\n        vertical = _.isVertical(),\n        thickness = _.gradientThickness(),\n        length = _.gradientLength(),\n        encode, enter, start, stop, width, height;\n\n    if (vertical) {\n      start = [0, 1];\n      stop = [0, 0];\n      width = thickness;\n      height = length;\n    } else {\n      start = [0, 0];\n      stop = [1, 0];\n      width = length;\n      height = thickness;\n    }\n\n    encode = {\n      enter: enter = {\n        opacity: zero$2,\n        x: zero$2,\n        y: zero$2,\n        width: encoder(width),\n        height: encoder(height)\n      },\n      update: extend({}, enter, {\n        opacity: one$2,\n        fill: {gradient: scale, start: start, stop: stop}\n      }),\n      exit: {\n        opacity: zero$2\n      }\n    };\n\n    addEncoders(encode, {\n      stroke:      _('gradientStrokeColor'),\n      strokeWidth: _('gradientStrokeWidth')\n    }, { // update\n      opacity:     _('gradientOpacity')\n    });\n\n    return guideMark(RectMark, LegendGradientRole, null, undefined, undefined, encode, userEncode);\n  }\n\n  function legendGradientDiscrete(spec, scale, config, userEncode, dataRef) {\n    var _ = lookup$5(spec, config),\n        vertical = _.isVertical(),\n        thickness = _.gradientThickness(),\n        length = _.gradientLength(),\n        encode, enter, u, v, uu, vv, adjust = '';\n\n    vertical\n      ? (u = 'y', uu = 'y2', v = 'x', vv = 'width', adjust = '1-')\n      : (u = 'x', uu = 'x2', v = 'y', vv = 'height');\n\n    enter = {\n      opacity: zero$2,\n      fill: {scale: scale, field: Value}\n    };\n    enter[u]  = {signal: adjust + 'datum.' + Perc, mult: length};\n    enter[v]  = zero$2;\n    enter[uu] = {signal: adjust + 'datum.' + Perc2, mult: length};\n    enter[vv] = encoder(thickness);\n\n    encode = {\n      enter: enter,\n      update: extend({}, enter, {opacity: one$2}),\n      exit: {opacity: zero$2}\n    };\n\n    addEncoders(encode, {\n      stroke:      _('gradientStrokeColor'),\n      strokeWidth: _('gradientStrokeWidth')\n    }, { // update\n      opacity:     _('gradientOpacity')\n    });\n\n    return guideMark(RectMark, LegendBandRole, null, Value, dataRef, encode, userEncode);\n  }\n\n  const alignExpr$1 = `datum.${Perc}<=0?\"${Left$1}\":datum.${Perc}>=1?\"${Right$1}\":\"${Center$1}\"`,\n        baselineExpr = `datum.${Perc}<=0?\"${Bottom$1}\":datum.${Perc}>=1?\"${Top$1}\":\"${Middle$1}\"`;\n\n  function legendGradientLabels(spec, config, userEncode, dataRef) {\n    var _ = lookup$5(spec, config),\n        vertical = _.isVertical(),\n        thickness = encoder(_.gradientThickness()),\n        length = _.gradientLength(),\n        overlap = _('labelOverlap'),\n        separation = _('labelSeparation'),\n        encode, enter, update, u, v, adjust = '';\n\n    encode = {\n      enter: enter = {\n        opacity: zero$2\n      },\n      update: update = {\n        opacity: one$2,\n        text: {field: Label}\n      },\n      exit: {\n        opacity: zero$2\n      }\n    };\n\n    addEncoders(encode, {\n      fill:        _('labelColor'),\n      fillOpacity: _('labelOpacity'),\n      font:        _('labelFont'),\n      fontSize:    _('labelFontSize'),\n      fontStyle:   _('labelFontStyle'),\n      fontWeight:  _('labelFontWeight'),\n      limit:       value$1(spec.labelLimit, config.gradientLabelLimit)\n    });\n\n    if (vertical) {\n      enter.align = {value: 'left'};\n      enter.baseline = update.baseline = {signal: baselineExpr};\n      u = 'y'; v = 'x'; adjust = '1-';\n    } else {\n      enter.align = update.align = {signal: alignExpr$1};\n      enter.baseline = {value: 'top'};\n      u = 'x'; v = 'y';\n    }\n\n    enter[u] = update[u] = {signal: adjust + 'datum.' + Perc, mult: length};\n\n    enter[v] = update[v] = thickness;\n    thickness.offset = value$1(spec.labelOffset, config.gradientLabelOffset) || 0;\n\n    spec = guideMark(TextMark, LegendLabelRole, GuideLabelStyle, Value, dataRef, encode, userEncode);\n    if (overlap) {\n      spec.overlap = {\n        separation: separation,\n        method: overlap,\n        order: 'datum.' + Index\n      };\n    }\n    return spec;\n  }\n\n  function guideGroup(role, style, name, dataRef, interactive, encode, marks, layout) {\n    return {\n      type: GroupMark,\n      name: name,\n      role: role,\n      style: style,\n      from: dataRef,\n      interactive: interactive || false,\n      encode: encode,\n      marks: marks,\n      layout: layout\n    };\n  }\n\n  // userEncode is top-level, includes entries, symbols, labels\n  function legendSymbolGroups(spec, config, userEncode, dataRef, columns) {\n    var _ = lookup$5(spec, config),\n        entries = userEncode.entries,\n        interactive = !!(entries && entries.interactive),\n        name = entries ? entries.name : undefined,\n        height = _('clipHeight'),\n        symbolOffset = _('symbolOffset'),\n        valueRef = {data: 'value'},\n        encode = {},\n        xSignal = `(${columns}) ? datum.${Offset} : datum.${Size}`,\n        yEncode = height ? encoder(height) : {field: Size},\n        index = `datum.${Index}`,\n        ncols = `max(1, ${columns})`,\n        enter, update, labelOffset, symbols, labels, nrows, sort;\n\n    yEncode.mult = 0.5;\n\n    // -- LEGEND SYMBOLS --\n    encode = {\n      enter:  enter = {\n        opacity: zero$2,\n        x: {signal: xSignal, mult: 0.5, offset: symbolOffset},\n        y: yEncode\n      },\n      update: update = {\n        opacity: one$2,\n        x: enter.x,\n        y: enter.y\n      },\n      exit: {\n        opacity: zero$2\n      }\n    };\n\n    var baseFill = null,\n        baseStroke = null;\n    if (!spec.fill) {\n      baseFill = config.symbolBaseFillColor;\n      baseStroke = config.symbolBaseStrokeColor;\n    }\n\n    addEncoders(encode, {\n      fill:             _('symbolFillColor', baseFill),\n      shape:            _('symbolType'),\n      size:             _('symbolSize'),\n      stroke:           _('symbolStrokeColor', baseStroke),\n      strokeDash:       _('symbolDash'),\n      strokeDashOffset: _('symbolDashOffset'),\n      strokeWidth:      _('symbolStrokeWidth')\n    }, { // update\n      opacity:          _('symbolOpacity')\n    });\n\n    LegendScales.forEach(function(scale) {\n      if (spec[scale]) {\n        update[scale] = enter[scale] = {scale: spec[scale], field: Value};\n      }\n    });\n\n    symbols = guideMark(\n      SymbolMark, LegendSymbolRole, null,\n      Value, valueRef, encode, userEncode.symbols\n    );\n    if (height) symbols.clip = true;\n\n    // -- LEGEND LABELS --\n    labelOffset = encoder(symbolOffset);\n    labelOffset.offset = _('labelOffset');\n\n    encode = {\n      enter:  enter = {\n        opacity: zero$2,\n        x: {signal: xSignal, offset: labelOffset},\n        y: yEncode\n      },\n      update: update = {\n        opacity: one$2,\n        text: {field: Label},\n        x: enter.x,\n        y: enter.y\n      },\n      exit: {\n        opacity: zero$2\n      }\n    };\n\n    addEncoders(encode, {\n      align:       _('labelAlign'),\n      baseline:    _('labelBaseline'),\n      fill:        _('labelColor'),\n      fillOpacity: _('labelOpacity'),\n      font:        _('labelFont'),\n      fontSize:    _('labelFontSize'),\n      fontStyle:   _('labelFontStyle'),\n      fontWeight:  _('labelFontWeight'),\n      limit:       _('labelLimit')\n    });\n\n    labels = guideMark(\n      TextMark, LegendLabelRole, GuideLabelStyle,\n      Value, valueRef, encode, userEncode.labels\n    );\n\n    // -- LEGEND ENTRY GROUPS --\n    encode = {\n      enter: {\n        noBound: {value: !height}, // ignore width/height in bounds calc\n        width: zero$2,\n        height: height ? encoder(height) : zero$2,\n        opacity: zero$2\n      },\n      exit: {opacity: zero$2},\n      update: update = {\n        opacity: one$2,\n        row: {signal: null},\n        column: {signal: null}\n      }\n    };\n\n    // annotate and sort groups to ensure correct ordering\n    if (_.isVertical(true)) {\n      nrows = `ceil(item.mark.items.length / ${ncols})`;\n      update.row.signal = `${index}%${nrows}`;\n      update.column.signal = `floor(${index} / ${nrows})`;\n      sort = {field: ['row', index]};\n    } else {\n      update.row.signal = `floor(${index} / ${ncols})`;\n      update.column.signal = `${index} % ${ncols}`;\n      sort = {field: index};\n    }\n    // handle zero column case (implies infinite columns)\n    update.column.signal = `(${columns})?${update.column.signal}:${index}`;\n\n    // facet legend entries into sub-groups\n    dataRef = {facet: {data: dataRef, name: 'value', groupby: Index}};\n\n    spec = guideGroup(\n      ScopeRole$1, null, name, dataRef, interactive,\n      extendEncode(encode, entries, Skip$1), [symbols, labels]\n    );\n    spec.sort = sort;\n    return spec;\n  }\n\n  function legendSymbolLayout(spec, config) {\n    const _ = lookup$5(spec, config);\n\n    // layout parameters for legend entries\n    return {\n      align:   _('gridAlign'),\n      columns: _.entryColumns(),\n      center:  {\n        row: true,\n        column: false\n      },\n      padding: {\n        row:    _('rowPadding'),\n        column: _('columnPadding')\n      }\n    };\n  }\n\n  // expression logic for align, anchor, angle, and baseline calculation\n  const isL = 'item.orient === \"left\"',\n        isR = 'item.orient === \"right\"',\n        isLR = `(${isL} || ${isR})`,\n        isVG = `datum.vgrad && ${isLR}`,\n        baseline = anchorExpr('\"top\"', '\"bottom\"', '\"middle\"'),\n        alignFlip = anchorExpr('\"right\"', '\"left\"', '\"center\"'),\n        exprAlign = `datum.vgrad && ${isR} ? (${alignFlip}) : (${isLR} && !(datum.vgrad && ${isL})) ? \"left\" : ${alignExpr}`,\n        exprAnchor = `item._anchor || (${isLR} ? \"middle\" : \"start\")`,\n        exprAngle = `${isVG} ? (${isL} ? -90 : 90) : 0`,\n        exprBaseline = `${isLR} ? (datum.vgrad ? (${isR} ? \"bottom\" : \"top\") : ${baseline}) : \"top\"`;\n\n  function legendTitle(spec, config, userEncode, dataRef) {\n    var _ = lookup$5(spec, config), encode;\n\n    encode = {\n      enter: {opacity: zero$2},\n      update: {\n        opacity: one$2,\n        x: {field: {group: 'padding'}},\n        y: {field: {group: 'padding'}}\n      },\n      exit: {opacity: zero$2}\n    };\n\n    addEncoders(encode, {\n      orient:      _('titleOrient'),\n      _anchor:     _('titleAnchor'),\n      anchor:      {signal: exprAnchor},\n      angle:       {signal: exprAngle},\n      align:       {signal: exprAlign},\n      baseline:    {signal: exprBaseline},\n      text:        spec.title,\n      fill:        _('titleColor'),\n      fillOpacity: _('titleOpacity'),\n      font:        _('titleFont'),\n      fontSize:    _('titleFontSize'),\n      fontStyle:   _('titleFontStyle'),\n      fontWeight:  _('titleFontWeight'),\n      limit:       _('titleLimit'),\n      lineHeight:  _('titleLineHeight')\n    }, { // require update\n      align:       _('titleAlign'),\n      baseline:    _('titleBaseline'),\n    });\n\n    return guideMark(TextMark, LegendTitleRole, GuideTitleStyle, null, dataRef, encode, userEncode);\n  }\n\n  function clip$3(clip, scope) {\n    var expr;\n\n    if (isObject(clip)) {\n      if (clip.signal) {\n        expr = clip.signal;\n      } else if (clip.path) {\n        expr = 'pathShape(' + param(clip.path) + ')';\n      } else if (clip.sphere) {\n        expr = 'geoShape(' + param(clip.sphere) + ', {type: \"Sphere\"})';\n      }\n    }\n\n    return expr\n      ? scope.signalRef(expr)\n      : !!clip;\n  }\n\n  function param(value) {\n    return isObject(value) && value.signal\n      ? value.signal\n      : $(value);\n  }\n\n  function getRole(spec) {\n    var role = spec.role || '';\n    return (!role.indexOf('axis') || !role.indexOf('legend') || !role.indexOf('title'))\n      ? role\n      : spec.type === GroupMark ? ScopeRole$1 : (role || MarkRole);\n  }\n\n  function definition$1(spec) {\n    return {\n      marktype:    spec.type,\n      name:        spec.name || undefined,\n      role:        spec.role || getRole(spec),\n      zindex:      +spec.zindex || undefined\n    };\n  }\n\n  function interactive(spec, scope) {\n    return spec && spec.signal ? scope.signalRef(spec.signal)\n      : spec === false ? false\n      : true;\n  }\n\n  /**\n   * Parse a data transform specification.\n   */\n  function parseTransform(spec, scope) {\n    var def = definition(spec.type);\n    if (!def) error('Unrecognized transform type: ' + $(spec.type));\n\n    var t = entry(def.type.toLowerCase(), null, parseParameters$1(def, spec, scope));\n    if (spec.signal) scope.addSignal(spec.signal, scope.proxy(t));\n    t.metadata = def.metadata || {};\n\n    return t;\n  }\n\n  /**\n   * Parse all parameters of a data transform.\n   */\n  function parseParameters$1(def, spec, scope) {\n    var params = {}, pdef, i, n;\n    for (i=0, n=def.params.length; i<n; ++i) {\n      pdef = def.params[i];\n      params[pdef.name] = parseParameter$2(pdef, spec, scope);\n    }\n    return params;\n  }\n\n  /**\n   * Parse a data transform parameter.\n   */\n  function parseParameter$2(def, spec, scope) {\n    var type = def.type,\n        value = spec[def.name];\n\n    if (type === 'index') {\n      return parseIndexParameter(def, spec, scope);\n    } else if (value === undefined) {\n      if (def.required) {\n        error('Missing required ' + $(spec.type)\n            + ' parameter: ' + $(def.name));\n      }\n      return;\n    } else if (type === 'param') {\n      return parseSubParameters(def, spec, scope);\n    } else if (type === 'projection') {\n      return scope.projectionRef(spec[def.name]);\n    }\n\n    return def.array && !isSignal(value)\n      ? value.map(function(v) { return parameterValue(def, v, scope); })\n      : parameterValue(def, value, scope);\n  }\n\n  /**\n   * Parse a single parameter value.\n   */\n  function parameterValue(def, value, scope) {\n    var type = def.type;\n\n    if (isSignal(value)) {\n      return isExpr$1(type) ? error('Expression references can not be signals.')\n           : isField(type) ? scope.fieldRef(value)\n           : isCompare(type) ? scope.compareRef(value)\n           : scope.signalRef(value.signal);\n    } else {\n      var expr = def.expr || isField(type);\n      return expr && outerExpr(value) ? scope.exprRef(value.expr, value.as)\n           : expr && outerField(value) ? fieldRef(value.field, value.as)\n           : isExpr$1(type) ? parseExpression$1(value, scope)\n           : isData(type) ? ref(scope.getData(value).values)\n           : isField(type) ? fieldRef(value)\n           : isCompare(type) ? scope.compareRef(value)\n           : value;\n    }\n  }\n\n  /**\n   * Parse parameter for accessing an index of another data set.\n   */\n  function parseIndexParameter(def, spec, scope) {\n    if (!isString(spec.from)) {\n      error('Lookup \"from\" parameter must be a string literal.');\n    }\n    return scope.getData(spec.from).lookupRef(scope, spec.key);\n  }\n\n  /**\n   * Parse a parameter that contains one or more sub-parameter objects.\n   */\n  function parseSubParameters(def, spec, scope) {\n    var value = spec[def.name];\n\n    if (def.array) {\n      if (!isArray(value)) { // signals not allowed!\n        error('Expected an array of sub-parameters. Instead: ' + $(value));\n      }\n      return value.map(function(v) {\n        return parseSubParameter(def, v, scope);\n      });\n    } else {\n      return parseSubParameter(def, value, scope);\n    }\n  }\n\n  /**\n   * Parse a sub-parameter object.\n   */\n  function parseSubParameter(def, value, scope) {\n    var params, pdef, k, i, n;\n\n    // loop over defs to find matching key\n    for (i=0, n=def.params.length; i<n; ++i) {\n      pdef = def.params[i];\n      for (k in pdef.key) {\n        if (pdef.key[k] !== value[k]) { pdef = null; break; }\n      }\n      if (pdef) break;\n    }\n    // raise error if matching key not found\n    if (!pdef) error('Unsupported parameter: ' + $(value));\n\n    // parse params, create Params transform, return ref\n    params = extend(parseParameters$1(pdef, value, scope), pdef.key);\n    return ref(scope.add(Params$2(params)));\n  }\n\n  // -- Utilities -----\n\n  function outerExpr(_) {\n    return _ && _.expr;\n  }\n\n  function outerField(_) {\n    return _ && _.field;\n  }\n\n  function isData(_) {\n    return _ === 'data';\n  }\n\n  function isExpr$1(_) {\n    return _ === 'expr';\n  }\n\n  function isField(_) {\n    return _ === 'field';\n  }\n\n  function isCompare(_) {\n    return _ === 'compare'\n  }\n\n  function parseData(from, group, scope) {\n    var facet, key, op, dataRef, parent;\n\n    // if no source data, generate singleton datum\n    if (!from) {\n      dataRef = ref(scope.add(Collect$1(null, [{}])));\n    }\n\n    // if faceted, process facet specification\n    else if (facet = from.facet) {\n      if (!group) error('Only group marks can be faceted.');\n\n      // use pre-faceted source data, if available\n      if (facet.field != null) {\n        dataRef = parent = getDataRef(facet, scope);\n      } else {\n        // generate facet aggregates if no direct data specification\n        if (!from.data) {\n          op = parseTransform(extend({\n            type:    'aggregate',\n            groupby: array(facet.groupby)\n          }, facet.aggregate), scope);\n          op.params.key = scope.keyRef(facet.groupby);\n          op.params.pulse = getDataRef(facet, scope);\n          dataRef = parent = ref(scope.add(op));\n        } else {\n          parent = ref(scope.getData(from.data).aggregate);\n        }\n\n        key = scope.keyRef(facet.groupby, true);\n      }\n    }\n\n    // if not yet defined, get source data reference\n    if (!dataRef) {\n      dataRef = getDataRef(from, scope);\n    }\n\n    return {\n      key: key,\n      pulse: dataRef,\n      parent: parent\n    };\n  }\n\n  function getDataRef(from, scope) {\n    return from.$ref ? from\n      : from.data && from.data.$ref ? from.data\n      : ref(scope.getData(from.data).output);\n  }\n\n  function DataScope(scope, input, output, values, aggr) {\n    this.scope = scope;   // parent scope object\n    this.input = input;   // first operator in pipeline (tuple input)\n    this.output = output; // last operator in pipeline (tuple output)\n    this.values = values; // operator for accessing tuples (but not tuple flow)\n\n    // last aggregate in transform pipeline\n    this.aggregate = aggr;\n\n    // lookup table of field indices\n    this.index = {};\n  }\n\n  DataScope.fromEntries = function(scope, entries) {\n    var n = entries.length,\n        i = 1,\n        input  = entries[0],\n        values = entries[n-1],\n        output = entries[n-2],\n        aggr = null;\n\n    if (input && input.type === 'load') {\n      input = entries[1];\n    }\n\n    // add operator entries to this scope, wire up pulse chain\n    scope.add(entries[0]);\n    for (; i<n; ++i) {\n      entries[i].params.pulse = ref(entries[i-1]);\n      scope.add(entries[i]);\n      if (entries[i].type === 'aggregate') aggr = entries[i];\n    }\n\n    return new DataScope(scope, input, output, values, aggr);\n  };\n\n  var prototype$1t = DataScope.prototype;\n\n  prototype$1t.countsRef = function(scope, field, sort) {\n    var ds = this,\n        cache = ds.counts || (ds.counts = {}),\n        k = fieldKey(field), v, a, p;\n\n    if (k != null) {\n      scope = ds.scope;\n      v = cache[k];\n    }\n\n    if (!v) {\n      p = {\n        groupby: scope.fieldRef(field, 'key'),\n        pulse: ref(ds.output)\n      };\n      if (sort && sort.field) addSortField(scope, p, sort);\n      a = scope.add(Aggregate$1(p));\n      v = scope.add(Collect$1({pulse: ref(a)}));\n      v = {agg: a, ref: ref(v)};\n      if (k != null) cache[k] = v;\n    } else if (sort && sort.field) {\n      addSortField(scope, v.agg.params, sort);\n    }\n\n    return v.ref;\n  };\n\n  function fieldKey(field) {\n    return isString(field) ? field : null;\n  }\n\n  function addSortField(scope, p, sort) {\n    var as = aggrField(sort.op, sort.field), s;\n\n    if (p.ops) {\n      for (var i=0, n=p.as.length; i<n; ++i) {\n        if (p.as[i] === as) return;\n      }\n    } else {\n      p.ops = ['count'];\n      p.fields = [null];\n      p.as = ['count'];\n    }\n    if (sort.op) {\n      p.ops.push((s=sort.op.signal) ? scope.signalRef(s) : sort.op);\n      p.fields.push(scope.fieldRef(sort.field));\n      p.as.push(as);\n    }\n  }\n\n  function cache(scope, ds, name, optype, field, counts, index) {\n    var cache = ds[name] || (ds[name] = {}),\n        sort = sortKey(counts),\n        k = fieldKey(field), v, op;\n\n    if (k != null) {\n      scope = ds.scope;\n      k = k + (sort ? '|' + sort : '');\n      v = cache[k];\n    }\n\n    if (!v) {\n      var params = counts\n        ? {field: keyFieldRef, pulse: ds.countsRef(scope, field, counts)}\n        : {field: scope.fieldRef(field), pulse: ref(ds.output)};\n      if (sort) params.sort = scope.sortRef(counts);\n      op = scope.add(entry(optype, undefined, params));\n      if (index) ds.index[field] = op;\n      v = ref(op);\n      if (k != null) cache[k] = v;\n    }\n    return v;\n  }\n\n  prototype$1t.tuplesRef = function() {\n    return ref(this.values);\n  };\n\n  prototype$1t.extentRef = function(scope, field) {\n    return cache(scope, this, 'extent', 'extent', field, false);\n  };\n\n  prototype$1t.domainRef = function(scope, field) {\n    return cache(scope, this, 'domain', 'values', field, false);\n  };\n\n  prototype$1t.valuesRef = function(scope, field, sort) {\n    return cache(scope, this, 'vals', 'values', field, sort || true);\n  };\n\n  prototype$1t.lookupRef = function(scope, field) {\n    return cache(scope, this, 'lookup', 'tupleindex', field, false);\n  };\n\n  prototype$1t.indataRef = function(scope, field) {\n    return cache(scope, this, 'indata', 'tupleindex', field, true, true);\n  };\n\n  function parseFacet(spec, scope, group) {\n    var facet = spec.from.facet,\n        name = facet.name,\n        data = getDataRef(facet, scope),\n        subscope, source, values, op;\n\n    if (!facet.name) {\n      error('Facet must have a name: ' + $(facet));\n    }\n    if (!facet.data) {\n      error('Facet must reference a data set: ' + $(facet));\n    }\n\n    if (facet.field) {\n      op = scope.add(PreFacet$1({\n        field: scope.fieldRef(facet.field),\n        pulse: data\n      }));\n    } else if (facet.groupby) {\n      op = scope.add(Facet$1({\n        key:   scope.keyRef(facet.groupby),\n        group: ref(scope.proxy(group.parent)),\n        pulse: data\n      }));\n    } else {\n      error('Facet must specify groupby or field: ' + $(facet));\n    }\n\n    // initialize facet subscope\n    subscope = scope.fork();\n    source = subscope.add(Collect$1());\n    values = subscope.add(Sieve$1({pulse: ref(source)}));\n    subscope.addData(name, new DataScope(subscope, source, source, values));\n    subscope.addSignal('parent', null);\n\n    // parse faceted subflow\n    op.params.subflow = {\n      $subflow: parseSpec(spec, subscope).toRuntime()\n    };\n  }\n\n  function parseSubflow(spec, scope, input) {\n    var op = scope.add(PreFacet$1({pulse: input.pulse})),\n        subscope = scope.fork();\n\n    subscope.add(Sieve$1());\n    subscope.addSignal('parent', null);\n\n    // parse group mark subflow\n    op.params.subflow = {\n      $subflow: parseSpec(spec, subscope).toRuntime()\n    };\n  }\n\n  function parseTrigger(spec, scope, name) {\n    var remove = spec.remove,\n        insert = spec.insert,\n        toggle = spec.toggle,\n        modify = spec.modify,\n        values = spec.values,\n        op = scope.add(operator()),\n        update, expr;\n\n    update = 'if(' + spec.trigger + ',modify(\"'\n      + name + '\",'\n      + [insert, remove, toggle, modify, values]\n          .map(function(_) { return _ == null ? 'null' : _; })\n          .join(',')\n      + '),0)';\n\n    expr = parseExpression$1(update, scope);\n    op.update = expr.$expr;\n    op.params = expr.$params;\n  }\n\n  function parseMark(spec, scope) {\n    var role = getRole(spec),\n        group = spec.type === GroupMark,\n        facet = spec.from && spec.from.facet,\n        layout = spec.layout || role === ScopeRole$1 || role === FrameRole$1,\n        nested = role === MarkRole || layout || facet,\n        overlap = spec.overlap,\n        ops, op, input, store, enc, bound, render, sieve, name,\n        joinRef, markRef, encodeRef, layoutRef, boundRef;\n\n    // resolve input data\n    input = parseData(spec.from, group, scope);\n\n    // data join to map tuples to visual items\n    op = scope.add(DataJoin$1({\n      key:   input.key || (spec.key ? fieldRef(spec.key) : undefined),\n      pulse: input.pulse,\n      clean: !group\n    }));\n    joinRef = ref(op);\n\n    // collect visual items\n    op = store = scope.add(Collect$1({pulse: joinRef}));\n\n    // connect visual items to scenegraph\n    op = scope.add(Mark$1({\n      markdef:     definition$1(spec),\n      interactive: interactive(spec.interactive, scope),\n      clip:        clip$3(spec.clip, scope),\n      context:     {$context: true},\n      groups:      scope.lookup(),\n      parent:      scope.signals.parent ? scope.signalRef('parent') : null,\n      index:       scope.markpath(),\n      pulse:       ref(op)\n    }));\n    markRef = ref(op);\n\n    // add visual encoders\n    op = enc = scope.add(Encode$1(encoders(\n      spec.encode, spec.type, role, spec.style, scope,\n      {mod: false, pulse: markRef}\n    )));\n\n    // monitor parent marks to propagate changes\n    op.params.parent = scope.encode();\n\n    // add post-encoding transforms, if defined\n    if (spec.transform) {\n      spec.transform.forEach(function(_) {\n        const tx = parseTransform(_, scope),\n              md = tx.metadata;\n        if (md.generates || md.changes) {\n          error('Mark transforms should not generate new data.');\n        }\n        if (!md.nomod) enc.params.mod = true; // update encode mod handling\n        tx.params.pulse = ref(op);\n        scope.add(op = tx);\n      });\n    }\n\n    // if item sort specified, perform post-encoding\n    if (spec.sort) {\n      op = scope.add(SortItems$1({\n        sort:  scope.compareRef(spec.sort),\n        pulse: ref(op)\n      }));\n    }\n\n    encodeRef = ref(op);\n\n    // add view layout operator if needed\n    if (facet || layout) {\n      layout = scope.add(ViewLayout$1({\n        layout:   scope.objectProperty(spec.layout),\n        legends:  scope.legends,\n        mark:     markRef,\n        pulse:    encodeRef\n      }));\n      layoutRef = ref(layout);\n    }\n\n    // compute bounding boxes\n    bound = scope.add(Bound$1({mark: markRef, pulse: layoutRef || encodeRef}));\n    boundRef = ref(bound);\n\n    // if group mark, recurse to parse nested content\n    if (group) {\n      // juggle layout & bounds to ensure they run *after* any faceting transforms\n      if (nested) { ops = scope.operators; ops.pop(); if (layout) ops.pop(); }\n\n      scope.pushState(encodeRef, layoutRef || boundRef, joinRef);\n      facet ? parseFacet(spec, scope, input)          // explicit facet\n          : nested ? parseSubflow(spec, scope, input) // standard mark group\n          : parseSpec(spec, scope); // guide group, we can avoid nested scopes\n      scope.popState();\n\n      if (nested) { if (layout) ops.push(layout); ops.push(bound); }\n    }\n\n    // if requested, add overlap removal transform\n    if (overlap) {\n      boundRef = parseOverlap(overlap, boundRef, scope);\n    }\n\n    // render / sieve items\n    render = scope.add(Render$1({pulse: boundRef}));\n    sieve = scope.add(Sieve$1({pulse: ref(render)}, undefined, scope.parent()));\n\n    // if mark is named, make accessible as reactive geometry\n    // add trigger updates if defined\n    if (spec.name != null) {\n      name = spec.name;\n      scope.addData(name, new DataScope(scope, store, render, sieve));\n      if (spec.on) spec.on.forEach(function(on) {\n        if (on.insert || on.remove || on.toggle) {\n          error('Marks only support modify triggers.');\n        }\n        parseTrigger(on, scope, name);\n      });\n    }\n  }\n\n  function parseOverlap(overlap, source, scope) {\n    var method = overlap.method,\n        bound = overlap.bound,\n        sep = overlap.separation, tol;\n\n    var params = {\n      separation: isSignal(sep) ? scope.signalRef(sep.signal) : sep,\n      method: isSignal(method) ? scope.signalRef(method.signal) : method,\n      pulse:  source\n    };\n\n    if (overlap.order) {\n      params.sort = scope.compareRef({field: overlap.order});\n    }\n\n    if (bound) {\n      tol = bound.tolerance;\n      params.boundTolerance = isSignal(tol) ? scope.signalRef(tol.signal) : +tol;\n      params.boundScale = scope.scaleRef(bound.scale);\n      params.boundOrient = bound.orient;\n    }\n\n    return ref(scope.add(Overlap$1(params)));\n  }\n\n  function parseLegend(spec, scope) {\n    var config = scope.config.legend,\n        encode = spec.encode || {},\n        legendEncode = encode.legend || {},\n        name = legendEncode.name || undefined,\n        interactive = legendEncode.interactive,\n        style = legendEncode.style,\n        _ = lookup$5(spec, config),\n        entryEncode, entryLayout, params, children,\n        type, datum, dataRef, entryRef, group;\n\n    // resolve 'canonical' scale name\n    var scale = LegendScales.reduce(function(a, b) { return a || spec[b]; }, 0);\n    if (!scale) error('Missing valid scale for legend.');\n\n    // resolve legend type (symbol, gradient, or discrete gradient)\n    type = legendType(spec, scope.scaleType(scale));\n\n    // single-element data source for legend group\n    datum = {\n      title:  spec.title != null,\n      type:   type,\n      vgrad:  type !== 'symbol' &&  _.isVertical()\n    };\n    dataRef = ref(scope.add(Collect$1(null, [datum])));\n\n    // encoding properties for legend group\n    legendEncode = extendEncode(\n      buildLegendEncode(_, config), legendEncode, Skip$1\n    );\n\n    // encoding properties for legend entry sub-group\n    entryEncode = {enter: {x: {value: 0}, y: {value: 0}}};\n\n    // data source for legend values\n    entryRef = ref(scope.add(LegendEntries$1(params = {\n      type:    type,\n      scale:   scope.scaleRef(scale),\n      count:   scope.objectProperty(_('tickCount')),\n      limit:   scope.property(_('symbolLimit')),\n      values:  scope.objectProperty(spec.values),\n      minstep: scope.property(spec.tickMinStep),\n      formatType: scope.property(spec.formatType),\n      formatSpecifier: scope.property(spec.format)\n    })));\n\n    // continuous gradient legend\n    if (type === Gradient$2) {\n      children = [\n        legendGradient(spec, scale, config, encode.gradient),\n        legendGradientLabels(spec, config, encode.labels, entryRef)\n      ];\n      // adjust default tick count based on the gradient length\n      params.count = params.count || scope.signalRef(\n        `max(2,2*floor((${deref(_.gradientLength())})/100))`\n      );\n    }\n\n    // discrete gradient legend\n    else if (type === Discrete$2) {\n      children = [\n        legendGradientDiscrete(spec, scale, config, encode.gradient, entryRef),\n        legendGradientLabels(spec, config, encode.labels, entryRef)\n      ];\n    }\n\n    // symbol legend\n    else {\n      // determine legend symbol group layout\n      entryLayout = legendSymbolLayout(spec, config);\n      children = [\n        legendSymbolGroups(spec, config, encode, entryRef, deref(entryLayout.columns))\n      ];\n      // pass symbol size information to legend entry generator\n      params.size = sizeExpression(spec, scope, children[0].marks);\n    }\n\n    // generate legend marks\n    children = [\n      guideGroup(LegendEntryRole, null, null, dataRef, interactive,\n                 entryEncode, children, entryLayout)\n    ];\n\n    // include legend title if defined\n    if (datum.title) {\n      children.push(legendTitle(spec, config, encode.title, dataRef));\n    }\n\n    // build legend specification\n    group = guideGroup(LegendRole$1, style, name, dataRef, interactive, legendEncode, children);\n    if (spec.zindex) group.zindex = spec.zindex;\n\n    // parse legend specification\n    return parseMark(group, scope);\n  }\n\n  function legendType(spec, scaleType) {\n    var type = spec.type || Symbols$2;\n\n    if (!spec.type && scaleCount(spec) === 1 && (spec.fill || spec.stroke)) {\n      type = isContinuous(scaleType) ? Gradient$2\n        : isDiscretizing(scaleType) ? Discrete$2\n        : Symbols$2;\n    }\n\n    return type !== Gradient$2 ? type\n      : isDiscretizing(scaleType) ? Discrete$2\n      : Gradient$2;\n  }\n\n  function scaleCount(spec) {\n    return LegendScales.reduce(function(count, type) {\n      return count + (spec[type] ? 1 : 0);\n    }, 0);\n  }\n\n  function buildLegendEncode(_, config) {\n    var encode = {enter: {}, update: {}};\n\n    addEncoders(encode, {\n      orient:       _('orient'),\n      offset:       _('offset'),\n      padding:      _('padding'),\n      titlePadding: _('titlePadding'),\n      cornerRadius: _('cornerRadius'),\n      fill:         _('fillColor'),\n      stroke:       _('strokeColor'),\n      strokeWidth:  config.strokeWidth,\n      strokeDash:   config.strokeDash,\n      x:            _('legendX'),\n      y:            _('legendY'),\n    });\n\n    return encode;\n  }\n\n  function sizeExpression(spec, scope, marks) {\n    var size = deref(getChannel('size', spec, marks)),\n        strokeWidth = deref(getChannel('strokeWidth', spec, marks)),\n        fontSize = deref(getFontSize(marks[1].encode, scope, GuideLabelStyle));\n\n    return parseExpression$1(\n      `max(ceil(sqrt(${size})+${strokeWidth}),${fontSize})`,\n      scope\n    );\n  }\n\n  function getChannel(name, spec, marks) {\n    return spec[name]\n      ? `scale(\"${spec[name]}\",datum)`\n      : getEncoding(name, marks[0].encode);\n  }\n\n  function getFontSize(encode, scope, style) {\n    return getEncoding('fontSize', encode) || getStyle('fontSize', scope, style);\n  }\n\n  const angleExpr = `item.orient===\"${Left$1}\"?-90:item.orient===\"${Right$1}\"?90:0`;\n\n  function parseTitle(spec, scope) {\n    spec = isString(spec) ? {text: spec} : spec;\n\n    var _ = lookup$5(spec, scope.config.title),\n        encode = spec.encode || {},\n        userEncode = encode.group || {},\n        name = userEncode.name || undefined,\n        interactive = userEncode.interactive,\n        style = userEncode.style,\n        children = [],\n        dataRef, group;\n\n    // single-element data source for group title\n    dataRef = ref(scope.add(Collect$1(null, [{}])));\n\n    // include title text\n    children.push(buildTitle(spec, _, titleEncode(spec), dataRef));\n\n    // include subtitle text\n    if (spec.subtitle) {\n      children.push(buildSubTitle(spec, _, encode.subtitle, dataRef));\n    }\n\n    // build title specification\n    group = guideGroup(TitleRole$1, style, name, dataRef, interactive,\n                       groupEncode(_, userEncode), children);\n    if (spec.zindex) group.zindex = spec.zindex;\n\n    // parse title specification\n    return parseMark(group, scope);\n  }\n\n  // provide backwards-compatibility for title custom encode;\n  // the top-level encode block has been *deprecated*.\n  function titleEncode(spec) {\n    const encode = spec.encode;\n    return (encode && encode.title) || extend({\n      name: spec.name,\n      interactive: spec.interactive,\n      style: spec.style\n    }, encode);\n  }\n\n  function groupEncode(_, userEncode) {\n    var encode = {enter: {}, update: {}};\n\n    addEncoders(encode, {\n      orient:     _('orient'),\n      anchor:     _('anchor'),\n      align:      {signal: alignExpr},\n      angle:      {signal: angleExpr},\n      limit:      _('limit'),\n      frame:      _('frame'),\n      offset:     _('offset') || 0,\n      padding:    _('subtitlePadding')\n    });\n\n    return extendEncode(encode, userEncode, Skip$1);\n  }\n\n  function buildTitle(spec, _, userEncode, dataRef) {\n    var zero = {value: 0},\n        text = spec.text,\n        encode = {\n          enter: {opacity: zero},\n          update: {opacity: {value: 1}},\n          exit: {opacity: zero}\n        };\n\n    addEncoders(encode, {\n      text:       text,\n      align:      {signal: 'item.mark.group.align'},\n      angle:      {signal: 'item.mark.group.angle'},\n      limit:      {signal: 'item.mark.group.limit'},\n      baseline:   'top',\n      dx:         _('dx'),\n      dy:         _('dy'),\n      fill:       _('color'),\n      font:       _('font'),\n      fontSize:   _('fontSize'),\n      fontStyle:  _('fontStyle'),\n      fontWeight: _('fontWeight'),\n      lineHeight: _('lineHeight')\n    }, { // update\n      align:      _('align'),\n      angle:      _('angle'),\n      baseline:   _('baseline')\n    });\n\n    return guideMark(TextMark, TitleTextRole, GroupTitleStyle,\n                     null, dataRef, encode, userEncode);\n  }\n\n  function buildSubTitle(spec, _, userEncode, dataRef) {\n    var zero = {value: 0},\n        text = spec.subtitle,\n        encode = {\n          enter: {opacity: zero},\n          update: {opacity: {value: 1}},\n          exit: {opacity: zero}\n        };\n\n    addEncoders(encode, {\n      text:       text,\n      align:      {signal: 'item.mark.group.align'},\n      angle:      {signal: 'item.mark.group.angle'},\n      limit:      {signal: 'item.mark.group.limit'},\n      baseline:   'top',\n      dx:         _('dx'),\n      dy:         _('dy'),\n      fill:       _('subtitleColor'),\n      font:       _('subtitleFont'),\n      fontSize:   _('subtitleFontSize'),\n      fontStyle:  _('subtitleFontStyle'),\n      fontWeight: _('subtitleFontWeight'),\n      lineHeight: _('subtitleLineHeight')\n    }, { // update\n      align:      _('align'),\n      angle:      _('angle'),\n      baseline:   _('baseline')\n    });\n\n    return guideMark(TextMark, TitleSubtitleRole, GroupSubtitleStyle,\n                     null, dataRef, encode, userEncode);\n  }\n\n  function parseData$1(data, scope) {\n    var transforms = [];\n\n    if (data.transform) {\n      data.transform.forEach(function(tx) {\n        transforms.push(parseTransform(tx, scope));\n      });\n    }\n\n    if (data.on) {\n      data.on.forEach(function(on) {\n        parseTrigger(on, scope, data.name);\n      });\n    }\n\n    scope.addDataPipeline(data.name, analyze(data, scope, transforms));\n  }\n\n  /**\n   * Analyze a data pipeline, add needed operators.\n   */\n  function analyze(data, scope, ops) {\n    var output = [],\n        source = null,\n        modify = false,\n        generate = false,\n        upstream, i, n, t, m;\n\n    if (data.values) {\n      // hard-wired input data set\n      if (hasSignal(data.values) || hasSignal(data.format)) {\n        // if either values or format has signal, use dynamic loader\n        output.push(load$1(scope, data));\n        output.push(source = collect());\n      } else {\n        // otherwise, ingest upon dataflow init\n        output.push(source = collect({\n          $ingest: data.values,\n          $format: data.format\n        }));\n      }\n    } else if (data.url) {\n      // load data from external source\n      if (hasSignal(data.url) || hasSignal(data.format)) {\n        // if either url or format has signal, use dynamic loader\n        output.push(load$1(scope, data));\n        output.push(source = collect());\n      } else {\n        // otherwise, request load upon dataflow init\n        output.push(source = collect({\n          $request: data.url,\n          $format: data.format\n        }));\n      }\n    } else if (data.source) {\n      // derives from one or more other data sets\n      source = upstream = array(data.source).map(function(d) {\n        return ref(scope.getData(d).output);\n      });\n      output.push(null); // populate later\n    }\n\n    // scan data transforms, add collectors as needed\n    for (i=0, n=ops.length; i<n; ++i) {\n      t = ops[i];\n      m = t.metadata;\n\n      if (!source && !m.source) {\n        output.push(source = collect());\n      }\n      output.push(t);\n\n      if (m.generates) generate = true;\n      if (m.modifies && !generate) modify = true;\n\n      if (m.source) source = t;\n      else if (m.changes) source = null;\n    }\n\n    if (upstream) {\n      n = upstream.length - 1;\n      output[0] = Relay$1({\n        derive: modify,\n        pulse: n ? upstream : upstream[0]\n      });\n      if (modify || n) {\n        // collect derived and multi-pulse tuples\n        output.splice(1, 0, collect());\n      }\n    }\n\n    if (!source) output.push(collect());\n    output.push(Sieve$1({}));\n    return output;\n  }\n\n  function collect(values) {\n    var s = Collect$1({}, values);\n    s.metadata = {source: true};\n    return s;\n  }\n\n  function load$1(scope, data) {\n    return Load$1({\n      url:    data.url ? scope.property(data.url) : undefined,\n      async:  data.async ? scope.property(data.async) : undefined,\n      values: data.values ? scope.property(data.values) : undefined,\n      format: scope.objectProperty(data.format)\n    });\n  }\n\n  function axisConfig(spec, scope) {\n    var config = scope.config,\n        orient = spec.orient,\n        xy = (orient === Top$1 || orient === Bottom$1) ? config.axisX : config.axisY,\n        or = config['axis' + orient[0].toUpperCase() + orient.slice(1)],\n        band = scope.scaleType(spec.scale) === 'band' && config.axisBand;\n\n    return (xy || or || band)\n      ? extend({}, config.axis, xy, or, band)\n      : config.axis;\n  }\n\n  function axisDomain(spec, config, userEncode, dataRef) {\n    var _ = lookup$5(spec, config),\n        orient = spec.orient,\n        encode, enter, update, u, u2, v;\n\n    encode = {\n      enter: enter = {opacity: zero$2},\n      update: update = {opacity: one$2},\n      exit: {opacity: zero$2}\n    };\n\n    addEncoders(encode, {\n      stroke:           _('domainColor'),\n      strokeDash:       _('domainDash'),\n      strokeDashOffset: _('domainDashOffset'),\n      strokeWidth:      _('domainWidth'),\n      strokeOpacity:    _('domainOpacity')\n    });\n\n    if (orient === Top$1 || orient === Bottom$1) {\n      u = 'x';\n      v = 'y';\n    } else {\n      u = 'y';\n      v = 'x';\n    }\n    u2 = u + '2';\n\n    enter[v] = zero$2;\n    update[u] = enter[u] = position(spec, 0);\n    update[u2] = enter[u2] = position(spec, 1);\n\n    return guideMark(RuleMark, AxisDomainRole, null, null, dataRef, encode, userEncode);\n  }\n\n  function position(spec, pos) {\n    return {scale: spec.scale, range: pos};\n  }\n\n  function axisGrid(spec, config, userEncode, dataRef, band) {\n    var _ = lookup$5(spec, config),\n        orient = spec.orient,\n        vscale = spec.gridScale,\n        sign = (orient === Left$1 || orient === Top$1) ? 1 : -1,\n        offset = offsetValue$1(spec.offset, sign),\n        encode, enter, exit, update, tickPos, u, v, v2, s;\n\n    encode = {\n      enter: enter = {opacity: zero$2},\n      update: update = {opacity: one$2},\n      exit: exit = {opacity: zero$2}\n    };\n\n    addEncoders(encode, {\n      stroke:           _('gridColor'),\n      strokeDash:       _('gridDash'),\n      strokeDashOffset: _('gridDashOffset'),\n      strokeOpacity:    _('gridOpacity'),\n      strokeWidth:      _('gridWidth')\n    });\n\n    tickPos = {\n      scale:  spec.scale,\n      field:  Value,\n      band:   band.band,\n      extra:  band.extra,\n      offset: band.offset,\n      round:  _('tickRound')\n    };\n\n    if (orient === Top$1 || orient === Bottom$1) {\n      u = 'x';\n      v = 'y';\n      s = 'height';\n    } else {\n      u = 'y';\n      v = 'x';\n      s = 'width';\n    }\n    v2 = v + '2';\n\n    update[u] = enter[u] = exit[u] = tickPos;\n\n    if (vscale) {\n      update[v] = enter[v] = {scale: vscale, range: 0, mult: sign, offset: offset};\n      update[v2] = enter[v2] = {scale: vscale, range: 1, mult: sign, offset: offset};\n    } else {\n      update[v] = enter[v] = {value: 0, offset: offset};\n      update[v2] = enter[v2] = {signal: s, mult: sign, offset: offset};\n    }\n\n    return guideMark(RuleMark, AxisGridRole, null, Value, dataRef, encode, userEncode);\n  }\n\n  function offsetValue$1(offset, sign)  {\n    if (sign === 1) ; else if (!isObject(offset)) {\n      offset = sign * (offset || 0);\n    } else {\n      var entry = offset = extend({}, offset);\n\n      while (entry.mult != null) {\n        if (!isObject(entry.mult)) {\n          entry.mult *= sign;\n          return offset;\n        } else {\n          entry = entry.mult = extend({}, entry.mult);\n        }\n      }\n\n      entry.mult = sign;\n    }\n\n    return offset;\n  }\n\n  function axisTicks(spec, config, userEncode, dataRef, size, band) {\n    var _ = lookup$5(spec, config),\n        orient = spec.orient,\n        sign = (orient === Left$1 || orient === Top$1) ? -1 : 1,\n        encode, enter, exit, update, tickSize, tickPos;\n\n    encode = {\n      enter: enter = {opacity: zero$2},\n      update: update = {opacity: one$2},\n      exit: exit = {opacity: zero$2}\n    };\n\n    addEncoders(encode, {\n      stroke:           _('tickColor'),\n      strokeDash:       _('tickDash'),\n      strokeDashOffset: _('tickDashOffset'),\n      strokeOpacity:    _('tickOpacity'),\n      strokeWidth:      _('tickWidth')\n    });\n\n    tickSize = encoder(size);\n    tickSize.mult = sign;\n\n    tickPos = {\n      scale:  spec.scale,\n      field:  Value,\n      band:   band.band,\n      extra:  band.extra,\n      offset: band.offset,\n      round:  _('tickRound')\n    };\n\n    if (orient === Top$1 || orient === Bottom$1) {\n      update.y = enter.y = zero$2;\n      update.y2 = enter.y2 = tickSize;\n      update.x = enter.x = exit.x = tickPos;\n    } else {\n      update.x = enter.x = zero$2;\n      update.x2 = enter.x2 = tickSize;\n      update.y = enter.y = exit.y = tickPos;\n    }\n\n    return guideMark(RuleMark, AxisTickRole, null, Value, dataRef, encode, userEncode);\n  }\n\n  function flushExpr(scale, threshold, a, b, c) {\n    return {\n      signal: 'flush(range(\"' + scale + '\"), '\n        + 'scale(\"' + scale + '\", datum.value), '\n        + threshold + ',' + a + ',' + b + ',' + c + ')'\n    };\n  }\n\n  function axisLabels(spec, config, userEncode, dataRef, size, band) {\n    var _ = lookup$5(spec, config),\n        orient = spec.orient,\n        sign = (orient === Left$1 || orient === Top$1) ? -1 : 1,\n        isXAxis = (orient === Top$1 || orient === Bottom$1),\n        scale = spec.scale,\n        flush = deref(_('labelFlush')),\n        flushOffset = deref(_('labelFlushOffset')),\n        flushOn = flush === 0 || !!flush,\n        labelAlign = _('labelAlign'),\n        labelBaseline = _('labelBaseline'),\n        encode, enter, tickSize, tickPos, align, baseline, offset,\n        bound, overlap, separation;\n\n    tickSize = encoder(size);\n    tickSize.mult = sign;\n    tickSize.offset = encoder(_('labelPadding') || 0);\n    tickSize.offset.mult = sign;\n\n    tickPos = {\n      scale:  scale,\n      field:  Value,\n      band:   0.5,\n      offset: extendOffset(band.offset, _('labelOffset'))\n    };\n\n    if (isXAxis) {\n      align = labelAlign || (flushOn\n        ? flushExpr(scale, flush, '\"left\"', '\"right\"', '\"center\"')\n        : 'center');\n      baseline = labelBaseline || (orient === Top$1 ? 'bottom' : 'top');\n      offset = !labelAlign;\n    } else {\n      align = labelAlign || (orient === Right$1 ? 'left' : 'right');\n      baseline = labelBaseline || (flushOn\n        ? flushExpr(scale, flush, '\"top\"', '\"bottom\"', '\"middle\"')\n        : 'middle');\n      offset = !labelBaseline;\n    }\n\n    offset = offset && flushOn && flushOffset\n      ? flushExpr(scale, flush, '-(' + flushOffset + ')', flushOffset, 0)\n      : null;\n\n    encode = {\n      enter: enter = {\n        opacity: zero$2,\n        x: isXAxis ? tickPos : tickSize,\n        y: isXAxis ? tickSize : tickPos\n      },\n      update: {\n        opacity: one$2,\n        text: {field: Label},\n        x: enter.x,\n        y: enter.y\n      },\n      exit: {\n        opacity: zero$2,\n        x: enter.x,\n        y: enter.y\n      }\n    };\n\n    addEncoders(encode, {\n      [isXAxis ? 'dx' : 'dy']: offset,\n      align:       align,\n      baseline:    baseline,\n      angle:       _('labelAngle'),\n      fill:        _('labelColor'),\n      fillOpacity: _('labelOpacity'),\n      font:        _('labelFont'),\n      fontSize:    _('labelFontSize'),\n      fontWeight:  _('labelFontWeight'),\n      fontStyle:   _('labelFontStyle'),\n      limit:       _('labelLimit'),\n      lineHeight:  _('labelLineHeight')\n    });\n\n    bound   = _('labelBound');\n    overlap = _('labelOverlap');\n    separation = _('labelSeparation');\n\n    spec = guideMark(TextMark, AxisLabelRole, GuideLabelStyle, Value, dataRef, encode, userEncode);\n\n    // if overlap method or bound defined, request label overlap removal\n    if (overlap || bound) {\n      spec.overlap = {\n        separation: separation,\n        method: overlap,\n        order: 'datum.index',\n        bound: bound ? {scale: scale, orient: orient, tolerance: bound} : null\n      };\n    }\n\n    return spec;\n  }\n\n  function axisTitle(spec, config, userEncode, dataRef) {\n    var _ = lookup$5(spec, config),\n        orient = spec.orient,\n        sign = (orient === Left$1 || orient === Top$1) ? -1 : 1,\n        horizontal = (orient === Top$1 || orient === Bottom$1),\n        encode, enter, update, titlePos;\n\n    encode = {\n      enter: enter = {\n        opacity: zero$2,\n        anchor: encoder(_('titleAnchor')),\n        align: {signal: alignExpr}\n      },\n      update: update = extend({}, enter, {\n        opacity: one$2,\n        text: encoder(spec.title)\n      }),\n      exit: {\n        opacity: zero$2\n      }\n    };\n\n    titlePos = {\n      signal: `lerp(range(\"${spec.scale}\"), ${anchorExpr(0, 1, 0.5)})`\n    };\n\n    if (horizontal) {\n      update.x = titlePos;\n      enter.angle = {value: 0};\n      enter.baseline = {value: orient === Top$1 ? 'bottom' : 'top'};\n    } else {\n      update.y = titlePos;\n      enter.angle = {value: sign * 90};\n      enter.baseline = {value: 'bottom'};\n    }\n\n    addEncoders(encode, {\n      angle:       _('titleAngle'),\n      baseline:    _('titleBaseline'),\n      fill:        _('titleColor'),\n      fillOpacity: _('titleOpacity'),\n      font:        _('titleFont'),\n      fontSize:    _('titleFontSize'),\n      fontStyle:   _('titleFontStyle'),\n      fontWeight:  _('titleFontWeight'),\n      limit:       _('titleLimit'),\n      lineHeight:  _('titleLineHeight')\n    }, { // require update\n      align:       _('titleAlign')\n    });\n\n    !addEncode(encode, 'x', _('titleX'), 'update')\n      && !horizontal && !has('x', userEncode)\n      && (encode.enter.auto = {value: true});\n\n    !addEncode(encode, 'y', _('titleY'), 'update')\n      && horizontal && !has('y', userEncode)\n      && (encode.enter.auto = {value: true});\n\n    return guideMark(TextMark, AxisTitleRole, GuideTitleStyle, null, dataRef, encode, userEncode);\n  }\n\n  function parseAxis(spec, scope) {\n    var config = axisConfig(spec, scope),\n        encode = spec.encode || {},\n        axisEncode = encode.axis || {},\n        name = axisEncode.name || undefined,\n        interactive = axisEncode.interactive,\n        style = axisEncode.style,\n        _ = lookup$5(spec, config),\n        band = tickBand(_),\n        datum, dataRef, ticksRef, size, group, children;\n\n    // single-element data source for axis group\n    datum = {\n      orient: spec.orient,\n      ticks:  !!_('ticks'),\n      labels: !!_('labels'),\n      grid:   !!_('grid'),\n      domain: !!_('domain'),\n      title:  spec.title != null,\n      translate: _('translate')\n    };\n    dataRef = ref(scope.add(Collect$1({}, [datum])));\n\n    // encoding properties for axis group item\n    axisEncode = extendEncode({\n      update: {\n        offset:       encoder(_('offset') || 0),\n        position:     encoder(value$1(spec.position, 0)),\n        titlePadding: encoder(_('titlePadding')),\n        minExtent:    encoder(_('minExtent')),\n        maxExtent:    encoder(_('maxExtent')),\n        range:        {signal: `abs(span(range(\"${spec.scale}\")))`}\n      }\n    }, encode.axis, Skip$1);\n\n    // data source for axis ticks\n    ticksRef = ref(scope.add(AxisTicks$1({\n      scale:   scope.scaleRef(spec.scale),\n      extra:   scope.property(band.extra),\n      count:   scope.objectProperty(spec.tickCount),\n      values:  scope.objectProperty(spec.values),\n      minstep: scope.property(spec.tickMinStep),\n      formatType: scope.property(spec.formatType),\n      formatSpecifier: scope.property(spec.format)\n    })));\n\n    // generate axis marks\n    children = [];\n\n    // include axis gridlines if requested\n    if (datum.grid) {\n      children.push(axisGrid(spec, config, encode.grid, ticksRef, band));\n    }\n\n    // include axis ticks if requested\n    if (datum.ticks) {\n      size = _('tickSize');\n      children.push(axisTicks(spec, config, encode.ticks, ticksRef, size, band));\n    }\n\n    // include axis labels if requested\n    if (datum.labels) {\n      size = datum.ticks ? size : 0;\n      children.push(axisLabels(spec, config, encode.labels, ticksRef, size, band));\n    }\n\n    // include axis domain path if requested\n    if (datum.domain) {\n      children.push(axisDomain(spec, config, encode.domain, dataRef));\n    }\n\n    // include axis title if defined\n    if (datum.title) {\n      children.push(axisTitle(spec, config, encode.title, dataRef));\n    }\n\n    // build axis specification\n    group = guideGroup(AxisRole$1, style, name, dataRef, interactive, axisEncode, children);\n    if (spec.zindex) group.zindex = spec.zindex;\n\n    // parse axis specification\n    return parseMark(group, scope);\n  }\n\n  function parseSpec(spec, scope, preprocessed) {\n    var signals = array(spec.signals),\n        scales = array(spec.scales);\n\n    // parse signal definitions, if not already preprocessed\n    if (!preprocessed) signals.forEach(_ => parseSignal(_, scope));\n\n    // parse cartographic projection definitions\n    array(spec.projections).forEach(_ => parseProjection(_, scope));\n\n    // initialize scale references\n    scales.forEach(_ => initScale(_, scope));\n\n    // parse data sources\n    array(spec.data).forEach(_ => parseData$1(_, scope));\n\n    // parse scale definitions\n    scales.forEach(_ => parseScale(_, scope));\n\n    // parse signal updates\n    (preprocessed || signals).forEach(_ => parseSignalUpdates(_, scope));\n\n    // parse axis definitions\n    array(spec.axes).forEach(_ => parseAxis(_, scope));\n\n    // parse mark definitions\n    array(spec.marks).forEach(_ => parseMark(_, scope));\n\n    // parse legend definitions\n    array(spec.legends).forEach(_ => parseLegend(_, scope));\n\n    // parse title, if defined\n    if (spec.title) parseTitle(spec.title, scope);\n\n    // parse collected lambda (anonymous) expressions\n    scope.parseLambdas();\n\n    return scope;\n  }\n\n  function parseView(spec, scope) {\n    var config = scope.config,\n        op, input, encode, parent, root, signals;\n\n    // add scenegraph root\n    root = ref(scope.root = scope.add(operator()));\n\n    // parse top-level signal definitions\n    signals = collectSignals(spec, config);\n    signals.forEach(_ => parseSignal(_, scope));\n\n    // assign description, event and legend configuration\n    scope.description = spec.description || config.description;\n    scope.eventConfig = config.events;\n    scope.legends = scope.objectProperty(config.legend && config.legend.layout);\n\n    // store root group item\n    input = scope.add(Collect$1());\n\n    // encode root group item\n    encode = extendEncode({\n      enter: { x: {value: 0}, y: {value: 0} },\n      update: { width: {signal: 'width'}, height: {signal: 'height'} }\n    }, spec.encode);\n\n    encode = scope.add(Encode$1(\n      encoders(encode, GroupMark, FrameRole$1, spec.style, scope, {pulse: ref(input)}))\n    );\n\n    // perform view layout\n    parent = scope.add(ViewLayout$1({\n      layout:   scope.objectProperty(spec.layout),\n      legends:  scope.legends,\n      autosize: scope.signalRef('autosize'),\n      mark:     root,\n      pulse:    ref(encode)\n    }));\n    scope.operators.pop();\n\n    // parse remainder of specification\n    scope.pushState(ref(encode), ref(parent), null);\n    parseSpec(spec, scope, signals);\n    scope.operators.push(parent);\n\n    // bound / render / sieve root item\n    op = scope.add(Bound$1({mark: root, pulse: ref(parent)}));\n    op = scope.add(Render$1({pulse: ref(op)}));\n    op = scope.add(Sieve$1({pulse: ref(op)}));\n\n    // track metadata for root item\n    scope.addData('root', new DataScope(scope, input, input, op));\n\n    return scope;\n  }\n\n  function signalObject(name, value) {\n    return value && value.signal\n      ? { name, update: value.signal }\n      : { name, value };\n  }\n\n  /**\n   * Collect top-level signals, merging values as needed. Signals\n   * defined in the config signals arrays are added only if that\n   * signal is not explicitly defined in the specification.\n   * Built-in signals (autosize, background, padding, width, height)\n   * receive special treatment. They are initialized using the\n   * top-level spec property, or, if undefined in the spec, using\n   * the corresponding top-level config property. If this property\n   * is a signal reference object, the signal expression maps to the\n   * signal 'update' property. If the spec's top-level signal array\n   * contains an entry that matches a built-in signal, that entry\n   * will be merged with the built-in specification, potentially\n   * overwriting existing 'value' or 'update' properties.\n   */\n  function collectSignals(spec, config) {\n    const _ = name => value$1(spec[name], config[name]),\n          signals = [\n            signalObject('background', _('background')),\n            signalObject('autosize', parseAutosize(_('autosize'))),\n            signalObject('padding', parsePadding(_('padding'))),\n            signalObject('width', _('width') || 0),\n            signalObject('height', _('height') || 0)\n          ],\n          pre = signals.reduce((p, s) => (p[s.name] = s, p), {}),\n          map = {};\n\n    // add spec signal array\n    array(spec.signals).forEach(s => {\n      if (hasOwnProperty(pre, s.name)) {\n        // merge if built-in signal\n        s = extend(pre[s.name], s);\n      } else {\n        // otherwise add to signal list\n        signals.push(s);\n      }\n      map[s.name] = s;\n    });\n\n    // add config signal array\n    array(config.signals).forEach(s => {\n      if (!hasOwnProperty(map, s.name) && !hasOwnProperty(pre, s.name)) {\n        // add to signal list if not already defined\n        signals.push(s);\n      }\n    });\n\n    return signals;\n  }\n\n  function Scope$1(config) {\n    this.config = config;\n\n    this.bindings = [];\n    this.field = {};\n    this.signals = {};\n    this.lambdas = {};\n    this.scales = {};\n    this.events = {};\n    this.data = {};\n\n    this.streams = [];\n    this.updates = [];\n    this.operators = [];\n    this.eventConfig = null;\n\n    this._id = 0;\n    this._subid = 0;\n    this._nextsub = [0];\n\n    this._parent = [];\n    this._encode = [];\n    this._lookup = [];\n    this._markpath = [];\n  }\n\n  function Subscope(scope) {\n    this.config = scope.config;\n    this.legends = scope.legends;\n\n    this.field = Object.create(scope.field);\n    this.signals = Object.create(scope.signals);\n    this.lambdas = Object.create(scope.lambdas);\n    this.scales = Object.create(scope.scales);\n    this.events = Object.create(scope.events);\n    this.data = Object.create(scope.data);\n\n    this.streams = [];\n    this.updates = [];\n    this.operators = [];\n\n    this._id = 0;\n    this._subid = ++scope._nextsub[0];\n    this._nextsub = scope._nextsub;\n\n    this._parent = scope._parent.slice();\n    this._encode = scope._encode.slice();\n    this._lookup = scope._lookup.slice();\n    this._markpath = scope._markpath;\n  }\n\n  var prototype$1u = Scope$1.prototype = Subscope.prototype;\n\n  // ----\n\n  prototype$1u.fork = function() {\n    return new Subscope(this);\n  };\n\n  prototype$1u.isSubscope = function() {\n    return this._subid > 0;\n  };\n\n  prototype$1u.toRuntime = function() {\n    this.finish();\n    return {\n      description: this.description,\n      operators:   this.operators,\n      streams:     this.streams,\n      updates:     this.updates,\n      bindings:    this.bindings,\n      eventConfig: this.eventConfig\n    };\n  };\n\n  prototype$1u.id = function() {\n    return (this._subid ? this._subid + ':' : 0) + this._id++;\n  };\n\n  prototype$1u.add = function(op) {\n    this.operators.push(op);\n    op.id = this.id();\n    // if pre-registration references exist, resolve them now\n    if (op.refs) {\n      op.refs.forEach(function(ref) { ref.$ref = op.id; });\n      op.refs = null;\n    }\n    return op;\n  };\n\n  prototype$1u.proxy = function(op) {\n    var vref = op instanceof Entry ? ref(op) : op;\n    return this.add(Proxy$1({value: vref}));\n  };\n\n  prototype$1u.addStream = function(stream) {\n    this.streams.push(stream);\n    stream.id = this.id();\n    return stream;\n  };\n\n  prototype$1u.addUpdate = function(update) {\n    this.updates.push(update);\n    return update;\n  };\n\n  // Apply metadata\n  prototype$1u.finish = function() {\n    var name, ds;\n\n    // annotate root\n    if (this.root) this.root.root = true;\n\n    // annotate signals\n    for (name in this.signals) {\n      this.signals[name].signal = name;\n    }\n\n    // annotate scales\n    for (name in this.scales) {\n      this.scales[name].scale = name;\n    }\n\n    // annotate data sets\n    function annotate(op, name, type) {\n      var data, list;\n      if (op) {\n        data = op.data || (op.data = {});\n        list = data[name] || (data[name] = []);\n        list.push(type);\n      }\n    }\n    for (name in this.data) {\n      ds = this.data[name];\n      annotate(ds.input,  name, 'input');\n      annotate(ds.output, name, 'output');\n      annotate(ds.values, name, 'values');\n      for (var field in ds.index) {\n        annotate(ds.index[field], name, 'index:' + field);\n      }\n    }\n\n    return this;\n  };\n\n  // ----\n\n  prototype$1u.pushState = function(encode, parent, lookup) {\n    this._encode.push(ref(this.add(Sieve$1({pulse: encode}))));\n    this._parent.push(parent);\n    this._lookup.push(lookup ? ref(this.proxy(lookup)) : null);\n    this._markpath.push(-1);\n  };\n\n  prototype$1u.popState = function() {\n    this._encode.pop();\n    this._parent.pop();\n    this._lookup.pop();\n    this._markpath.pop();\n  };\n\n  prototype$1u.parent = function() {\n    return peek(this._parent);\n  };\n\n  prototype$1u.encode = function() {\n    return peek(this._encode);\n  };\n\n  prototype$1u.lookup = function() {\n    return peek(this._lookup);\n  };\n\n  prototype$1u.markpath = function() {\n    var p = this._markpath;\n    return ++p[p.length-1];\n  };\n\n  // ----\n\n  prototype$1u.fieldRef = function(field, name) {\n    if (isString(field)) return fieldRef(field, name);\n    if (!field.signal) {\n      error('Unsupported field reference: ' + $(field));\n    }\n\n    var s = field.signal,\n        f = this.field[s],\n        params;\n\n    if (!f) {\n      params = {name: this.signalRef(s)};\n      if (name) params.as = name;\n      this.field[s] = f = ref(this.add(Field$1(params)));\n    }\n    return f;\n  };\n\n  prototype$1u.compareRef = function(cmp) {\n    function check(_) {\n      if (isSignal(_)) {\n        signal = true;\n        return scope.signalRef(_.signal);\n      } else if (isExpr(_)) {\n        signal = true;\n        return scope.exprRef(_.expr);\n      } else {\n        return _;\n      }\n    }\n\n    var scope = this,\n        signal = false,\n        fields = array(cmp.field).map(check),\n        orders = array(cmp.order).map(check);\n\n    return signal\n      ? ref(this.add(Compare$1({fields: fields, orders: orders})))\n      : compareRef(fields, orders);\n  };\n\n  prototype$1u.keyRef = function(fields, flat) {\n    function check(_) {\n      if (isSignal(_)) {\n        signal = true;\n        return ref(sig[_.signal]);\n      } else {\n        return _;\n      }\n    }\n\n    var sig = this.signals,\n        signal = false;\n    fields = array(fields).map(check);\n\n    return signal\n      ? ref(this.add(Key$1({fields: fields, flat: flat})))\n      : keyRef(fields, flat);\n  };\n\n  prototype$1u.sortRef = function(sort) {\n    if (!sort) return sort;\n\n    // including id ensures stable sorting\n    var a = aggrField(sort.op, sort.field),\n        o = sort.order || Ascending;\n\n    return o.signal\n      ? ref(this.add(Compare$1({\n          fields: a,\n          orders: this.signalRef(o.signal)\n        })))\n      : compareRef(a, o);\n  };\n\n  // ----\n\n  prototype$1u.event = function(source, type) {\n    var key = source + ':' + type;\n    if (!this.events[key]) {\n      var id = this.id();\n      this.streams.push({\n        id: id,\n        source: source,\n        type: type\n      });\n      this.events[key] = id;\n    }\n    return this.events[key];\n  };\n\n  // ----\n\n  prototype$1u.hasOwnSignal = function(name) {\n    return hasOwnProperty(this.signals, name);\n  };\n\n  prototype$1u.addSignal = function(name, value) {\n    if (this.hasOwnSignal(name)) {\n      error('Duplicate signal name: ' + $(name));\n    }\n    var op = value instanceof Entry ? value : this.add(operator(value));\n    return this.signals[name] = op;\n  };\n\n  prototype$1u.getSignal = function(name) {\n    if (!this.signals[name]) {\n      error('Unrecognized signal name: ' + $(name));\n    }\n    return this.signals[name];\n  };\n\n  prototype$1u.signalRef = function(s) {\n    if (this.signals[s]) {\n      return ref(this.signals[s]);\n    } else if (!hasOwnProperty(this.lambdas, s)) {\n      this.lambdas[s] = this.add(operator(null));\n    }\n    return ref(this.lambdas[s]);\n  };\n\n  prototype$1u.parseLambdas = function() {\n    var code = Object.keys(this.lambdas);\n    for (var i=0, n=code.length; i<n; ++i) {\n      var s = code[i],\n          e = parseExpression$1(s, this),\n          op = this.lambdas[s];\n      op.params = e.$params;\n      op.update = e.$expr;\n    }\n  };\n\n  prototype$1u.property = function(spec) {\n    return spec && spec.signal ? this.signalRef(spec.signal) : spec;\n  };\n\n  prototype$1u.objectProperty = function(spec) {\n    return (!spec || !isObject(spec)) ? spec\n      : this.signalRef(spec.signal || propertyLambda(spec));\n  };\n\n  function propertyLambda(spec) {\n    return (isArray(spec) ? arrayLambda : objectLambda)(spec);\n  }\n\n  function arrayLambda(array) {\n    var code = '[',\n        i = 0,\n        n = array.length,\n        value;\n\n    for (; i<n; ++i) {\n      value = array[i];\n      code += (i > 0 ? ',' : '')\n        + (isObject(value)\n          ? (value.signal || propertyLambda(value))\n          : $(value));\n    }\n    return code + ']';\n  }\n\n  function objectLambda(obj) {\n    var code = '{',\n        i = 0,\n        key, value;\n\n    for (key in obj) {\n      value = obj[key];\n      code += (++i > 1 ? ',' : '')\n        + $(key) + ':'\n        + (isObject(value)\n          ? (value.signal || propertyLambda(value))\n          : $(value));\n    }\n    return code + '}';\n  }\n\n  prototype$1u.exprRef = function(code, name) {\n    var params = {expr: parseExpression$1(code, this)};\n    if (name) params.expr.$name = name;\n    return ref(this.add(Expression$1(params)));\n  };\n\n  prototype$1u.addBinding = function(name, bind) {\n    if (!this.bindings) {\n      error('Nested signals do not support binding: ' + $(name));\n    }\n    this.bindings.push(extend({signal: name}, bind));\n  };\n\n  // ----\n\n  prototype$1u.addScaleProj = function(name, transform) {\n    if (hasOwnProperty(this.scales, name)) {\n      error('Duplicate scale or projection name: ' + $(name));\n    }\n    this.scales[name] = this.add(transform);\n  };\n\n  prototype$1u.addScale = function(name, params) {\n    this.addScaleProj(name, Scale$1(params));\n  };\n\n  prototype$1u.addProjection = function(name, params) {\n    this.addScaleProj(name, Projection$1(params));\n  };\n\n  prototype$1u.getScale = function(name) {\n    if (!this.scales[name]) {\n      error('Unrecognized scale name: ' + $(name));\n    }\n    return this.scales[name];\n  };\n\n  prototype$1u.projectionRef =\n  prototype$1u.scaleRef = function(name) {\n    return ref(this.getScale(name));\n  };\n\n  prototype$1u.projectionType =\n  prototype$1u.scaleType = function(name) {\n    return this.getScale(name).params.type;\n  };\n\n  // ----\n\n  prototype$1u.addData = function(name, dataScope) {\n    if (hasOwnProperty(this.data, name)) {\n      error('Duplicate data set name: ' + $(name));\n    }\n    return (this.data[name] = dataScope);\n  };\n\n  prototype$1u.getData = function(name) {\n    if (!this.data[name]) {\n      error('Undefined data set name: ' + $(name));\n    }\n    return this.data[name];\n  };\n\n  prototype$1u.addDataPipeline = function(name, entries) {\n    if (hasOwnProperty(this.data, name)) {\n      error('Duplicate data set name: ' + $(name));\n    }\n    return this.addData(name, DataScope.fromEntries(this, entries));\n  };\n\n  var defaultFont = 'sans-serif',\n      defaultSymbolSize = 30,\n      defaultStrokeWidth = 2,\n      defaultColor = '#4c78a8',\n      black = '#000',\n      gray = '#888',\n      lightGray = '#ddd';\n\n  /**\n   * Standard configuration defaults for Vega specification parsing.\n   * Users can provide their own (sub-)set of these default values\n   * by passing in a config object to the top-level parse method.\n   */\n  function defaults() {\n    return {\n      // default visualization description\n      description: 'Vega visualization',\n\n      // default padding around visualization\n      padding: 0,\n\n      // default for automatic sizing; options: 'none', 'pad', 'fit'\n      // or provide an object (e.g., {'type': 'pad', 'resize': true})\n      autosize: 'pad',\n\n      // default view background color\n      // covers the entire view component\n      background: null,\n\n      // default event handling configuration\n      // preventDefault for view-sourced event types except 'wheel'\n      events: {\n        defaults: {allow: ['wheel']}\n      },\n\n      // defaults for top-level group marks\n      // accepts mark properties (fill, stroke, etc)\n      // covers the data rectangle within group width/height\n      group: null,\n\n      // defaults for basic mark types\n      // each subset accepts mark properties (fill, stroke, etc)\n      mark: null,\n      arc: { fill: defaultColor },\n      area: { fill: defaultColor },\n      image: null,\n      line: {\n        stroke: defaultColor,\n        strokeWidth: defaultStrokeWidth\n      },\n      path: { stroke: defaultColor },\n      rect: { fill: defaultColor },\n      rule: { stroke: black },\n      shape: { stroke: defaultColor },\n      symbol: {\n        fill: defaultColor,\n        size: 64\n      },\n      text: {\n        fill: black,\n        font: defaultFont,\n        fontSize: 11\n      },\n      trail: {\n        fill: defaultColor,\n        size: defaultStrokeWidth\n      },\n\n      // style definitions\n      style: {\n        // axis & legend labels\n        'guide-label': {\n          fill: black,\n          font: defaultFont,\n          fontSize: 10\n        },\n        // axis & legend titles\n        'guide-title': {\n          fill: black,\n          font: defaultFont,\n          fontSize: 11,\n          fontWeight: 'bold'\n        },\n        // headers, including chart title\n        'group-title': {\n          fill: black,\n          font: defaultFont,\n          fontSize: 13,\n          fontWeight: 'bold'\n        },\n        // chart subtitle\n        'group-subtitle': {\n          fill: black,\n          font: defaultFont,\n          fontSize: 12\n        },\n        // defaults for styled point marks in Vega-Lite\n        point: {\n          size: defaultSymbolSize,\n          strokeWidth: defaultStrokeWidth,\n          shape: 'circle'\n        },\n        circle: {\n          size: defaultSymbolSize,\n          strokeWidth: defaultStrokeWidth\n        },\n        square: {\n          size: defaultSymbolSize,\n          strokeWidth: defaultStrokeWidth,\n          shape: 'square'\n        },\n        // defaults for styled group marks in Vega-Lite\n        cell: {\n          fill: 'transparent',\n          stroke: lightGray\n        }\n      },\n\n      // defaults for title\n      title: {\n        orient: 'top',\n        anchor: 'middle',\n        offset: 4,\n        subtitlePadding: 3\n      },\n\n      // defaults for axes\n      axis: {\n        minExtent: 0,\n        maxExtent: 200,\n        bandPosition: 0.5,\n        domain: true,\n        domainWidth: 1,\n        domainColor: gray,\n        grid: false,\n        gridWidth: 1,\n        gridColor: lightGray,\n        labels: true,\n        labelAngle: 0,\n        labelLimit: 180,\n        labelOffset: 0,\n        labelPadding: 2,\n        ticks: true,\n        tickColor: gray,\n        tickOffset: 0,\n        tickRound: true,\n        tickSize: 5,\n        tickWidth: 1,\n        titlePadding: 4\n      },\n\n      // correction for centering bias\n      axisBand: {\n        tickOffset: -0.5\n      },\n\n      // defaults for cartographic projection\n      projection: {\n        type: 'mercator'\n      },\n\n      // defaults for legends\n      legend: {\n        orient: 'right',\n        padding: 0,\n        gridAlign: 'each',\n        columnPadding: 10,\n        rowPadding: 2,\n        symbolDirection: 'vertical',\n        gradientDirection: 'vertical',\n        gradientLength: 200,\n        gradientThickness: 16,\n        gradientStrokeColor: lightGray,\n        gradientStrokeWidth: 0,\n        gradientLabelOffset: 2,\n        labelAlign: 'left',\n        labelBaseline: 'middle',\n        labelLimit: 160,\n        labelOffset: 4,\n        labelOverlap: true,\n        symbolLimit: 30,\n        symbolType: 'circle',\n        symbolSize: 100,\n        symbolOffset: 0,\n        symbolStrokeWidth: 1.5,\n        symbolBaseFillColor: 'transparent',\n        symbolBaseStrokeColor: gray,\n        titleLimit: 180,\n        titleOrient: 'top',\n        titlePadding: 5,\n        layout: {\n          offset: 18,\n          direction: 'horizontal',\n          left:   { direction: 'vertical' },\n          right:  { direction: 'vertical' }\n        }\n      },\n\n      // defaults for scale ranges\n      range: {\n        category: {\n          scheme: 'tableau10'\n        },\n        ordinal: {\n          scheme: 'blues'\n        },\n        heatmap: {\n          scheme: 'yellowgreenblue'\n        },\n        ramp: {\n          scheme: 'blues'\n        },\n        diverging: {\n          scheme: 'blueorange',\n          extent: [1, 0]\n        },\n        symbol: [\n          'circle',\n          'square',\n          'triangle-up',\n          'cross',\n          'diamond',\n          'triangle-right',\n          'triangle-down',\n          'triangle-left'\n        ]\n      }\n    };\n  }\n\n  function parse$5(spec, config) {\n    if (!isObject(spec)) {\n      error('Input Vega specification must be an object.');\n    }\n\n    config = mergeConfig(defaults(), config, spec.config);\n    return parseView(spec, new Scope$1(config)).toRuntime();\n  }\n\n  // -- Transforms -----\n  extend(transforms, tx, vtx, encode, geo, force, tree$1, reg, voronoi, wordcloud, xf);\n\n  exports.Bounds = Bounds;\n  exports.CanvasHandler = CanvasHandler;\n  exports.CanvasRenderer = CanvasRenderer;\n  exports.Dataflow = Dataflow;\n  exports.Debug = Debug;\n  exports.Error = Error$1;\n  exports.EventStream = EventStream;\n  exports.Gradient = Gradient;\n  exports.GroupItem = GroupItem;\n  exports.Handler = Handler;\n  exports.Info = Info;\n  exports.Item = Item;\n  exports.Marks = Marks;\n  exports.MultiPulse = MultiPulse;\n  exports.None = None;\n  exports.Operator = Operator;\n  exports.Parameters = Parameters;\n  exports.Pulse = Pulse;\n  exports.RenderType = RenderType;\n  exports.Renderer = Renderer;\n  exports.ResourceLoader = ResourceLoader;\n  exports.SVGHandler = SVGHandler;\n  exports.SVGRenderer = SVGRenderer;\n  exports.SVGStringRenderer = SVGStringRenderer;\n  exports.Scenegraph = Scenegraph;\n  exports.Transform = Transform;\n  exports.View = View;\n  exports.Warn = Warn;\n  exports.accessor = accessor;\n  exports.accessorFields = accessorFields;\n  exports.accessorName = accessorName;\n  exports.array = array;\n  exports.bandwidthNRD = bandwidthNRD;\n  exports.bin = bin;\n  exports.bootstrapCI = bootstrapCI;\n  exports.boundClip = boundClip;\n  exports.boundContext = context;\n  exports.boundItem = boundItem;\n  exports.boundMark = boundMark;\n  exports.boundStroke = boundStroke;\n  exports.changeset = changeset;\n  exports.clampRange = clampRange;\n  exports.closeTag = closeTag;\n  exports.compare = compare;\n  exports.constant = constant;\n  exports.cumulativeLogNormal = cumulativeLogNormal;\n  exports.cumulativeNormal = cumulativeNormal;\n  exports.cumulativeUniform = cumulativeUniform;\n  exports.debounce = debounce;\n  exports.definition = definition;\n  exports.densityLogNormal = densityLogNormal;\n  exports.densityNormal = densityNormal;\n  exports.densityUniform = densityUniform;\n  exports.domChild = domChild;\n  exports.domClear = domClear;\n  exports.domCreate = domCreate;\n  exports.domFind = domFind;\n  exports.dotbin = dotbin;\n  exports.error = error;\n  exports.expressionFunction = expressionFunction;\n  exports.extend = extend;\n  exports.extent = extent;\n  exports.extentIndex = extentIndex;\n  exports.falsy = falsy;\n  exports.fastmap = fastmap;\n  exports.field = field;\n  exports.flush = flush;\n  exports.font = font;\n  exports.fontFamily = fontFamily;\n  exports.fontSize = fontSize;\n  exports.format = format;\n  exports.formatLocale = defaultLocale$1;\n  exports.formats = formats;\n  exports.hasOwnProperty = hasOwnProperty;\n  exports.id = id;\n  exports.identity = identity;\n  exports.inferType = inferType;\n  exports.inferTypes = inferTypes;\n  exports.ingest = ingest;\n  exports.inherits = inherits;\n  exports.inrange = inrange;\n  exports.interpolate = interpolate$1;\n  exports.interpolateColors = interpolateColors;\n  exports.interpolateRange = interpolateRange;\n  exports.intersect = intersect$1;\n  exports.intersectBoxLine = intersectBoxLine;\n  exports.intersectPath = intersectPath;\n  exports.intersectPoint = intersectPoint;\n  exports.intersectRule = intersectRule;\n  exports.isArray = isArray;\n  exports.isBoolean = isBoolean;\n  exports.isDate = isDate;\n  exports.isFunction = isFunction;\n  exports.isNumber = isNumber;\n  exports.isObject = isObject;\n  exports.isRegExp = isRegExp;\n  exports.isString = isString;\n  exports.isTuple = isTuple;\n  exports.key = key;\n  exports.lerp = lerp;\n  exports.lineHeight = lineHeight;\n  exports.loader = loader;\n  exports.logger = logger;\n  exports.lruCache = lruCache;\n  exports.merge = merge;\n  exports.mergeConfig = mergeConfig;\n  exports.multiLineOffset = multiLineOffset;\n  exports.one = one;\n  exports.openTag = openTag;\n  exports.pad = pad;\n  exports.panLinear = panLinear;\n  exports.panLog = panLog;\n  exports.panPow = panPow;\n  exports.panSymlog = panSymlog;\n  exports.parse = parse$5;\n  exports.pathCurves = curves;\n  exports.pathEqual = pathEqual;\n  exports.pathParse = pathParse;\n  exports.pathRectangle = vg_rect;\n  exports.pathRender = pathRender;\n  exports.pathSymbols = symbols;\n  exports.pathTrail = vg_trail;\n  exports.peek = peek;\n  exports.point = point$4;\n  exports.projection = projection$1;\n  exports.quantileLogNormal = quantileLogNormal;\n  exports.quantileNormal = quantileNormal;\n  exports.quantileUniform = quantileUniform;\n  exports.quantiles = quantiles;\n  exports.quantizeInterpolator = quantizeInterpolator;\n  exports.quarter = quarter;\n  exports.quartiles = quartiles;\n  exports.randomInteger = integer;\n  exports.randomKDE = randomKDE;\n  exports.randomLCG = lcg;\n  exports.randomLogNormal = randomLogNormal;\n  exports.randomMixture = randomMixture;\n  exports.randomNormal = randomNormal;\n  exports.randomUniform = randomUniform;\n  exports.read = read;\n  exports.regressionExp = regressionExp;\n  exports.regressionLinear = regressionLinear;\n  exports.regressionLoess = regressionLoess;\n  exports.regressionLog = regressionLog;\n  exports.regressionPoly = regressionPoly;\n  exports.regressionPow = regressionPow;\n  exports.regressionQuad = regressionQuad;\n  exports.renderModule = renderModule;\n  exports.repeat = repeat;\n  exports.resetSVGClipId = resetSVGClipId;\n  exports.responseType = responseType;\n  exports.runtime = parse$4;\n  exports.runtimeContext = context$2;\n  exports.sampleCurve = sampleCurve;\n  exports.sampleLogNormal = sampleLogNormal;\n  exports.sampleNormal = sampleNormal;\n  exports.sampleUniform = sampleUniform;\n  exports.scale = scale$2;\n  exports.sceneEqual = sceneEqual;\n  exports.sceneFromJSON = sceneFromJSON;\n  exports.scenePickVisit = pickVisit;\n  exports.sceneToJSON = sceneToJSON;\n  exports.sceneVisit = visit;\n  exports.sceneZOrder = zorder;\n  exports.scheme = scheme;\n  exports.setRandom = setRandom;\n  exports.span = span;\n  exports.splitAccessPath = splitAccessPath;\n  exports.stringValue = $;\n  exports.textMetrics = textMetrics;\n  exports.timeBin = timeBin;\n  exports.timeFloor = timeFloor;\n  exports.timeFormat = timeFormat$1;\n  exports.timeFormatLocale = defaultLocale;\n  exports.timeInterval = timeInterval;\n  exports.timeOffset = timeOffset;\n  exports.timeSequence = timeSequence;\n  exports.timeUnitSpecifier = timeUnitSpecifier;\n  exports.timeUnits = timeUnits;\n  exports.toBoolean = toBoolean;\n  exports.toDate = toDate;\n  exports.toNumber = toNumber;\n  exports.toSet = toSet;\n  exports.toString = toString;\n  exports.transform = transform$1;\n  exports.transforms = transforms;\n  exports.truncate = truncate;\n  exports.truthy = truthy;\n  exports.tupleid = tupleid;\n  exports.typeParsers = typeParsers;\n  exports.utcFloor = utcFloor;\n  exports.utcFormat = utcFormat$1;\n  exports.utcInterval = utcInterval;\n  exports.utcOffset = utcOffset;\n  exports.utcSequence = utcSequence;\n  exports.utcquarter = utcquarter;\n  exports.version = version;\n  exports.visitArray = visitArray;\n  exports.writeConfig = writeConfig;\n  exports.zero = zero;\n  exports.zoomLinear = zoomLinear;\n  exports.zoomLog = zoomLog;\n  exports.zoomPow = zoomPow;\n  exports.zoomSymlog = zoomSymlog;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","~:last-modified",1689821863988,"~:js-errors",[],"~:requires",["~#set",[]],"~:pom-info",["^ ","~:group-id","~$metasoarous","~:artifact-id","~$darkstar","~:version","0.1.0","~:name","darkstar","~:description","JVM static compilation of vega-lite/vega","~:id","~$metasoarous/darkstar","~:coordinate",["^V","0.1.0"]],"~:goog-requires",[],"~:inspect-info",["^ ","^1",[],"^3",false,"^5",[],"^6",[],"^7",[],"^8","es9","^9",null,"^<",false,"^=",[["^ ","^>",884,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",930,"^?",12,"^@","Missing type declaration."],["^ ","^>",971,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",972,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",973,"^?",22,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1301,"^?",22,"^@","Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1387,"^?",5,"^@","Missing type declaration."],["^ ","^>",1412,"^?",5,"^@","Missing type declaration."],["^ ","^>",1436,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1473,"^?",30,"^@","invalid param name \"-\""],["^ ","^>",1663,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1667,"^?",22,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1786,"^?",22,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1813,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",1814,"^?",22,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",3508,"^?",22,"^@","invalid param name \"options.skip\""],["^ ","^>",3510,"^?",22,"^@","invalid param name \"options.force\""],["^ ","^>",3825,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",3971,"^?",33,"^@","invalid param name \"-\""],["^ ","^>",4116,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",4118,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",4246,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",4248,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",4278,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",4280,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",4394,"^?",22,"^@","invalid param name \"options.skip\""],["^ ","^>",4416,"^?",22,"^@","invalid param name \"options.force\""],["^ ","^>",4418,"^?",22,"^@","invalid param name \"options.skip\""],["^ ","^>",4440,"^?",22,"^@","invalid param name \"options.skip\""],["^ ","^>",4692,"^?",5,"^@","Missing type declaration."],["^ ","^>",6603,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",6604,"^?",41,"^@","invalid param name \"params.fields\""],["^ ","^>",6605,"^?",28,"^@","invalid param name \"params.ops\""],["^ ","^>",6606,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",6607,"^?",22,"^@","invalid param name \"params.cross\""],["^ ","^>",6610,"^?",22,"^@","invalid param name \"params.drop\""],["^ ","^>",6952,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",7090,"^?",36,"^@","invalid param name \"params.sort\""],["^ ","^>",7131,"^?",34,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",7131,"^?",34,"^@","Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",7131,"^?",34,"^@","Bad type annotation. expecting a variable name in a @param tag. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",7132,"^?",28,"^@","invalid param name \"params.orders\""],["^ ","^>",7151,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",7152,"^?",21,"^@","invalid param name \"params.pattern\""],["^ ","^>",7153,"^?",21,"^@","invalid param name \"params.case\""],["^ ","^>",7154,"^?",21,"^@","invalid param name \"params.stopwords\""],["^ ","^>",7265,"^?",39,"^@","invalid param name \"params.filter\""],["^ ","^>",7267,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",7343,"^?",39,"^@","invalid param name \"-\""],["^ ","^>",7386,"^?",21,"^@","invalid param name \"params.distribution\""],["^ ","^>",7388,"^?",21,"^@","invalid param name \"params.method\""],["^ ","^>",7390,"^?",28,"^@","invalid param name \"params.extent\""],["^ ","^>",7394,"^?",21,"^@","invalid param name \"params.minsteps\""],["^ ","^>",7396,"^?",21,"^@","invalid param name \"params.maxsteps\""],["^ ","^>",7398,"^?",21,"^@","invalid param name \"params.steps\""],["^ ","^>",7545,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",7546,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",7547,"^?",21,"^@","invalid param name \"params.step\""],["^ ","^>",7549,"^?",22,"^@","invalid param name \"params.smooth\""],["^ ","^>",7612,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",7639,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",7758,"^?",51,"^@","invalid param name \"params.subflow\""],["^ ","^>",7760,"^?",34,"^@","invalid param name \"params.key\""],["^ ","^>",7873,"^?",21,"^@","invalid param name \"params.name\""],["^ ","^>",7874,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",7892,"^?",34,"^@","invalid param name \"params.expr\""],["^ ","^>",7962,"^?",41,"^@","invalid param name \"params.fields\""],["^ ","^>",7964,"^?",21,"^@","invalid param name \"params.index\""],["^ ","^>",7966,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",8024,"^?",34,"^@","invalid param name \"params.fields\""],["^ ","^>",8026,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",8072,"^?",34,"^@","invalid param name \"params.expr\""],["^ ","^>",8073,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",8074,"^?",22,"^@","invalid param name \"params.initonly\""],["^ ","^>",8118,"^?",43,"^@","invalid param name \"params.generator\""],["^ ","^>",8122,"^?",21,"^@","invalid param name \"params.size\""],["^ ","^>",8173,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",8174,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",8176,"^?",34,"^@","invalid param name \"params.key\""],["^ ","^>",8179,"^?",23,"^@","invalid param name \"params.keyvals\""],["^ ","^>",8365,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",8367,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",8369,"^?",21,"^@","invalid param name \"params.bandwidth\""],["^ ","^>",8371,"^?",22,"^@","invalid param name \"params.counts\""],["^ ","^>",8374,"^?",21,"^@","invalid param name \"params.cumulative\""],["^ ","^>",8376,"^?",28,"^@","invalid param name \"params.extent\""],["^ ","^>",8378,"^?",21,"^@","invalid param name \"params.resolve\""],["^ ","^>",8383,"^?",21,"^@","invalid param name \"params.minsteps\""],["^ ","^>",8385,"^?",21,"^@","invalid param name \"params.maxsteps\""],["^ ","^>",8387,"^?",21,"^@","invalid param name \"params.steps\""],["^ ","^>",8468,"^?",28,"^@","invalid param name \"params.fields\""],["^ ","^>",8469,"^?",22,"^@","invalid param name \"params.flat\""],["^ ","^>",8488,"^?",21,"^@","invalid param name \"params.url\""],["^ ","^>",8489,"^?",21,"^@","invalid param name \"params.format\""],["^ ","^>",8544,"^?",18,"^@","invalid param name \"params.index\""],["^ ","^>",8545,"^?",38,"^@","Bad type annotation. missing closing > See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",8546,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",8547,"^?",16,"^@","invalid param name \"params.default\""],["^ ","^>",8628,"^?",35,"^@","invalid param name \"params.extents\""],["^ ","^>",8658,"^?",30,"^@","invalid param name \"params.values\""],["^ ","^>",8694,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",8696,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",8698,"^?",34,"^@","invalid param name \"params.value\""],["^ ","^>",8700,"^?",21,"^@","invalid param name \"params.op\""],["^ ","^>",8702,"^?",21,"^@","invalid param name \"params.limit\""],["^ ","^>",8793,"^?",51,"^@","invalid param name \"params.subflow\""],["^ ","^>",8795,"^?",46,"^@","invalid param name \"params.field\""],["^ ","^>",8838,"^?",38,"^@","Bad type annotation. missing closing > See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",8841,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",8908,"^?",16,"^@","invalid param name \"params.value\""],["^ ","^>",8927,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",8929,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",8931,"^?",28,"^@","invalid param name \"params.probs\""],["^ ","^>",8934,"^?",28,"^@","invalid param name \"params.step\""],["^ ","^>",9002,"^?",21,"^@","invalid param name \"params.derive\""],["^ ","^>",9057,"^?",21,"^@","invalid param name \"params.size\""],["^ ","^>",9162,"^?",21,"^@","invalid param name \"params.start\""],["^ ","^>",9163,"^?",21,"^@","invalid param name \"params.stop\""],["^ ","^>",9164,"^?",21,"^@","invalid param name \"params.step\""],["^ ","^>",9619,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",9714,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",9750,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",9751,"^?",36,"^@","invalid param name \"params.sort\""],["^ ","^>",10069,"^?",36,"^@","invalid param name \"params.sort\""],["^ ","^>",10070,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",10071,"^?",28,"^@","invalid param name \"params.ops\""],["^ ","^>",10072,"^?",41,"^@","invalid param name \"params.fields\""],["^ ","^>",10074,"^?",23,"^@","invalid param name \"params.params\""],["^ ","^>",10075,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",10076,"^?",28,"^@","invalid param name \"params.frame\""],["^ ","^>",10077,"^?",22,"^@","invalid param name \"params.ignorePeers\""],["^ ","^>",14847,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",14933,"^?",21,"^@","Bad type annotation. missing opening ( See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."],["^ ","^>",16828,"^?",21,"^@","invalid param name \"params.mark\""],["^ ","^>",16912,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",16953,"^?",21,"^@","invalid param name \"params.markdef\""],["^ ","^>",17006,"^?",36,"^@","invalid param name \"params.sort\""],["^ ","^>",17008,"^?",21,"^@","invalid param name \"params.method\""],["^ ","^>",17012,"^?",21,"^@","invalid param name \"params.boundScale\""],["^ ","^>",17016,"^?",21,"^@","invalid param name \"params.boundOrient\""],["^ ","^>",17019,"^?",21,"^@","invalid param name \"params.boundTolerance\""],["^ ","^>",17959,"^?",21,"^@","invalid param name \"params.mark\""],["^ ","^>",21397,"^?",20,"^@","invalid param name \"params.scale\""],["^ ","^>",21398,"^?",16,"^@","invalid param name \"params.count\""],["^ ","^>",21400,"^?",23,"^@","invalid param name \"params.values\""],["^ ","^>",21403,"^?",33,"^@","invalid param name \"params.formatSpecifier\""],["^ ","^>",21406,"^?",33,"^@","invalid param name \"params.format\""],["^ ","^>",21459,"^?",39,"^@","invalid param name \"params.item\""],["^ ","^>",21460,"^?",34,"^@","invalid param name \"params.key\""],["^ ","^>",21552,"^?",21,"^@","invalid param name \"params.mod\""],["^ ","^>",21554,"^?",21,"^@","invalid param name \"param.encoders\""],["^ ","^>",21555,"^?",48,"^@","invalid param name \"param.encoders.update\""],["^ ","^>",21556,"^?",48,"^@","invalid param name \"param.encoders.enter\""],["^ ","^>",21557,"^?",48,"^@","invalid param name \"param.encoders.exit\""],["^ ","^>",21753,"^?",20,"^@","invalid param name \"params.scale\""],["^ ","^>",21754,"^?",16,"^@","invalid param name \"params.count\""],["^ ","^>",21756,"^?",16,"^@","invalid param name \"params.limit\""],["^ ","^>",21758,"^?",23,"^@","invalid param name \"params.values\""],["^ ","^>",21761,"^?",21,"^@","invalid param name \"params.formatSpecifier\""],["^ ","^>",21764,"^?",33,"^@","invalid param name \"params.format\""],["^ ","^>",22051,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",22052,"^?",21,"^@","invalid param name \"params.startAngle\""],["^ ","^>",22053,"^?",21,"^@","invalid param name \"params.endAngle\""],["^ ","^>",22054,"^?",22,"^@","invalid param name \"params.sort\""],["^ ","^>",22414,"^?",36,"^@","invalid param name \"params.sort\""],["^ ","^>",22444,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",22445,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",22446,"^?",46,"^@","invalid param name \"params.sort\""],["^ ","^>",22817,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",22819,"^?",28,"^@","invalid param name \"params.thresholds\""],["^ ","^>",22821,"^?",21,"^@","invalid param name \"params.levels\""],["^ ","^>",22822,"^?",22,"^@","invalid param name \"params.nice\""],["^ ","^>",22826,"^?",21,"^@","invalid param name \"params.resolve\""],["^ ","^>",22830,"^?",22,"^@","invalid param name \"params.zero\""],["^ ","^>",22832,"^?",22,"^@","invalid param name \"params.smooth\""],["^ ","^>",22835,"^?",22,"^@","invalid param name \"params.scale\""],["^ ","^>",22838,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",23098,"^?",28,"^@","invalid param name \"params.size\""],["^ ","^>",23100,"^?",39,"^@","invalid param name \"params.x\""],["^ ","^>",23101,"^?",39,"^@","invalid param name \"params.y\""],["^ ","^>",23102,"^?",39,"^@","invalid param name \"params.weight\""],["^ ","^>",23103,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",23105,"^?",21,"^@","invalid param name \"params.cellSize\""],["^ ","^>",23110,"^?",28,"^@","invalid param name \"params.bandwidth\""],["^ ","^>",23115,"^?",22,"^@","invalid param name \"params.counts\""],["^ ","^>",23118,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",23207,"^?",28,"^@","invalid param name \"params.size\""],["^ ","^>",23210,"^?",28,"^@","invalid param name \"params.values\""],["^ ","^>",23214,"^?",39,"^@","invalid param name \"params.x\""],["^ ","^>",23215,"^?",39,"^@","invalid param name \"params.y\""],["^ ","^>",23216,"^?",39,"^@","invalid param name \"params.weight\""],["^ ","^>",23217,"^?",21,"^@","invalid param name \"params.cellSize\""],["^ ","^>",23218,"^?",21,"^@","invalid param name \"params.bandwidth\""],["^ ","^>",23219,"^?",28,"^@","invalid param name \"params.thresholds\""],["^ ","^>",23221,"^?",21,"^@","invalid param name \"params.count\""],["^ ","^>",23222,"^?",22,"^@","invalid param name \"params.nice\""],["^ ","^>",23226,"^?",22,"^@","invalid param name \"params.smooth\""],["^ ","^>",23294,"^?",41,"^@","invalid param name \"params.fields\""],["^ ","^>",23296,"^?",34,"^@","invalid param name \"params.geojson\""],["^ ","^>",26380,"^?",42,"^@","invalid param name \"params.projection\""],["^ ","^>",26382,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",26384,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",26443,"^?",42,"^@","invalid param name \"params.projection\""],["^ ","^>",26445,"^?",41,"^@","invalid param name \"params.fields\""],["^ ","^>",26447,"^?",28,"^@","invalid param name \"params.as\""],["^ ","^>",26501,"^?",42,"^@","invalid param name \"params.projection\""],["^ ","^>",26503,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",26505,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",26619,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",26621,"^?",21,"^@","invalid param name \"params.color\""],["^ ","^>",26624,"^?",21,"^@","invalid param name \"params.opacity\""],["^ ","^>",26627,"^?",21,"^@","invalid param name \"params.resolve\""],["^ ","^>",26631,"^?",21,"^@","invalid param name \"params.as\""],["^ ","^>",28064,"^?",28,"^@","invalid param name \"params.forces\""],["^ ","^>",29563,"^?",42,"^@","invalid param name \"params.keys\""],["^ ","^>",29564,"^?",23,"^@","invalid param name \"params.generate\""],["^ ","^>",29748,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",29781,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",29813,"^?",35,"^@","invalid param name \"params.key\""],["^ ","^>",29814,"^?",35,"^@","invalid param name \"params.parentKey\""],["^ ","^>",29983,"^?",34,"^@","invalid param name \"params.field\""],["^ ","^>",30080,"^?",34,"^@","invalid param name \"params.x\""],["^ ","^>",30081,"^?",34,"^@","invalid param name \"params.y\""],["^ ","^>",30082,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",30083,"^?",21,"^@","invalid param name \"params.bandwidth\""],["^ ","^>",30150,"^?",34,"^@","invalid param name \"params.x\""],["^ ","^>",30151,"^?",34,"^@","invalid param name \"params.y\""],["^ ","^>",30152,"^?",21,"^@","invalid param name \"params.method\""],["^ ","^>",30153,"^?",41,"^@","invalid param name \"params.groupby\""],["^ ","^>",30154,"^?",28,"^@","invalid param name \"params.extent\""],["^ ","^>",30155,"^?",21,"^@","invalid param name \"params.order\""],["^ ","^>",32230,"^?",41,"^@","invalid param name \"params.fields\""],["^ ","^>",32231,"^?",20,"^@","invalid param name \"params.query\""],["^ ","^>",32610,"^?",21,"^@","invalid param name \"params.ignore\""],["^ ","^>",32611,"^?",21,"^@","invalid param name \"params.filter\""],["^ ","^>",36811,"^?",49,"^@","invalid param name \"options.signals\""],["^ ","^>",36815,"^?",47,"^@","invalid param name \"options.data\""],["^ ","^>",36819,"^?",22,"^@","invalid param name \"options.recurse\""]],"^G",[],"^J",[],"^X",[],"~:goog-require-types",[],"~:uses-global-buffer",true,"~:uses-global-process",false],"~:url",["~#url","jar:file:/Users/kingjames/.m2/repository/metasoarous/darkstar/0.1.0/darkstar-0.1.0.jar!/vega.js"],"~:provides",["^L",["^;"]],"^Z",[],"^[",true,"~:from-jar",true,"~:deps",["buffer"],"^10",false],["^ ","^1",[],"^2",true,"^3",false,"^4",["5474addc070a6a326d7f3360c43845570200ba2c"],"^5",[],"^6",[],"^7",[],"^8","es6","^9",null,"^:","~$module$vega_lite","^<",false,"^A","module$vega_lite.js","^B",["^C","vega-lite.js"],"^D","vega-lite.js","^E","^F","^G",[],"^H","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?t(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],t):t((e=e||self).vegaLite={})}(this,(function(e){\"use strict\";var t=\"4.10.1\";function n(e,t,n){return e.fields=t||[],e.fname=n,e}function i(e){throw Error(e)}function r(e){var t,n,r,o=[],s=null,a=0,u=e.length,c=\"\";function l(){o.push(c+e.substring(t,n)),c=\"\",t=n+1}for(e+=\"\",t=n=0;n<u;++n)if(\"\\\\\"===(r=e[n]))c+=e.substring(t,n),c+=e.substring(++n,++n),t=n;else if(r===s)l(),s=null,a=-1;else{if(s)continue;t===a&&'\"'===r||t===a&&\"'\"===r?(t=n+1,s=r):\".\"!==r||a?\"[\"===r?(n>t&&l(),a=t=n+1):\"]\"===r&&(a||i(\"Access path missing open bracket: \"+e),a>0&&l(),a=0,t=n+1):n>t?l():t=n+1}return a&&i(\"Access path missing closing bracket: \"+e),s&&i(\"Access path missing closing quote: \"+e),n>t&&(n++,l()),o}var o=Array.isArray;function s(e){return e===Object(e)}function a(e){return\"string\"==typeof e}function u(e){return o(e)?\"[\"+e.map(u)+\"]\":s(e)||a(e)?JSON.stringify(e).replace(\"\\u2028\",\"\\\\u2028\").replace(\"\\u2029\",\"\\\\u2029\"):e}var c=[],l=(function(e,t){var i=r(e),o=\"return _[\"+i.map(u).join(\"][\")+\"];\";n(Function(\"_\",o),[e=1===i.length?i[0]:e],t||e)}(\"id\"),n((function(e){return e}),c,\"identity\"));n((function(){return 0}),c,\"zero\"),n((function(){return 1}),c,\"one\"),n((function(){return!0}),c,\"true\"),n((function(){return!1}),c,\"false\");function d(e,t,n){var i=[t].concat([].slice.call(n));console[e].apply(console,i)}const f=e=>\"__proto__\"!==e;function g(...e){return e.reduce((e,t)=>{for(var n in t)if(\"signals\"===n)e.signals=m(e.signals,t.signals);else{var i=\"legend\"===n?{layout:1}:\"style\"===n||null;p(e,n,t[n],i)}return e},{})}function p(e,t,n,i){var r,a;if(f(t))if(s(n)&&!o(n))for(r in a=s(e[t])?e[t]:e[t]={},n)i&&(!0===i||i[r])?p(a,r,n[r]):f(r)&&(a[r]=n[r]);else e[t]=n}function m(e,t){if(null==e)return t;const n={},i=[];function r(e){n[e.name]||(n[e.name]=1,i.push(e))}return t.forEach(r),e.forEach(r),i}function h(e){return null!=e?o(e)?e:[e]:[]}const b=Object.prototype.hasOwnProperty;function v(e,t){return b.call(e,t)}function y(e){return\"boolean\"==typeof e}function x(e){return\"number\"==typeof e}function O(e){for(var t={},n=0,i=e.length;n<i;++n)t[e[n]]=!0;return t}\n/*! *****************************************************************************\n    Copyright (c) Microsoft Corporation. All rights reserved.\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n    this file except in compliance with the License. You may obtain a copy of the\n    License at http://www.apache.org/licenses/LICENSE-2.0\n\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\n    MERCHANTABLITY OR NON-INFRINGEMENT.\n\n    See the Apache Version 2.0 License for specific language governing permissions\n    and limitations under the License.\n    ***************************************************************************** */function A(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(e);r<i.length;r++)t.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(n[i[r]]=e[i[r]])}return n}Array.prototype.flat||Object.defineProperty(Array.prototype,\"flat\",{configurable:!0,value:function e(){var t=isNaN(arguments[0])?1:Number(arguments[0]);return t?Array.prototype.reduce.call(this,(function(n,i){return Array.isArray(i)?n.push.apply(n,e.call(i,t-1)):n.push(i),n}),[]):Array.prototype.slice.call(this)},writable:!0}),Array.prototype.flatMap||Object.defineProperty(Array.prototype,\"flatMap\",{configurable:!0,value:function(e){return Array.prototype.map.apply(this,arguments).flat()},writable:!0});var w=function(e,t){return e(t={exports:{}},t.exports),t.exports}((function(e){var t=function(){function e(e,t){return null!=t&&e instanceof t}var t,n,i;try{t=Map}catch(e){t=function(){}}try{n=Set}catch(e){n=function(){}}try{i=Promise}catch(e){i=function(){}}function r(o,a,u,c,l){\"object\"==typeof a&&(u=a.depth,c=a.prototype,l=a.includeNonEnumerable,a=a.circular);var d=[],f=[],g=\"undefined\"!=typeof Buffer;return void 0===a&&(a=!0),void 0===u&&(u=1/0),function o(u,p){if(null===u)return null;if(0===p)return u;var m,h;if(\"object\"!=typeof u)return u;if(e(u,t))m=new t;else if(e(u,n))m=new n;else if(e(u,i))m=new i((function(e,t){u.then((function(t){e(o(t,p-1))}),(function(e){t(o(e,p-1))}))}));else if(r.__isArray(u))m=[];else if(r.__isRegExp(u))m=new RegExp(u.source,s(u)),u.lastIndex&&(m.lastIndex=u.lastIndex);else if(r.__isDate(u))m=new Date(u.getTime());else{if(g&&Buffer.isBuffer(u))return m=Buffer.allocUnsafe?Buffer.allocUnsafe(u.length):new Buffer(u.length),u.copy(m),m;e(u,Error)?m=Object.create(u):void 0===c?(h=Object.getPrototypeOf(u),m=Object.create(h)):(m=Object.create(c),h=c)}if(a){var b=d.indexOf(u);if(-1!=b)return f[b];d.push(u),f.push(m)}for(var v in e(u,t)&&u.forEach((function(e,t){var n=o(t,p-1),i=o(e,p-1);m.set(n,i)})),e(u,n)&&u.forEach((function(e){var t=o(e,p-1);m.add(t)})),u){var y;h&&(y=Object.getOwnPropertyDescriptor(h,v)),y&&null==y.set||(m[v]=o(u[v],p-1))}if(Object.getOwnPropertySymbols){var x=Object.getOwnPropertySymbols(u);for(v=0;v<x.length;v++){var O=x[v];(!(w=Object.getOwnPropertyDescriptor(u,O))||w.enumerable||l)&&(m[O]=o(u[O],p-1),w.enumerable||Object.defineProperty(m,O,{enumerable:!1}))}}if(l){var A=Object.getOwnPropertyNames(u);for(v=0;v<A.length;v++){var w,F=A[v];(w=Object.getOwnPropertyDescriptor(u,F))&&w.enumerable||(m[F]=o(u[F],p-1),Object.defineProperty(m,F,{enumerable:!1}))}}return m}(o,u)}function o(e){return Object.prototype.toString.call(e)}function s(e){var t=\"\";return e.global&&(t+=\"g\"),e.ignoreCase&&(t+=\"i\"),e.multiline&&(t+=\"m\"),t}return r.clonePrototype=function(e){if(null===e)return null;var t=function(){};return t.prototype=e,new t},r.__objToStr=o,r.__isDate=function(e){return\"object\"==typeof e&&\"[object Date]\"===o(e)},r.__isArray=function(e){return\"object\"==typeof e&&\"[object Array]\"===o(e)},r.__isRegExp=function(e){return\"object\"==typeof e&&\"[object RegExp]\"===o(e)},r.__getRegExpFlags=s,r}();e.exports&&(e.exports=t)})),F=function(e,t){t||(t={}),\"function\"==typeof t&&(t={cmp:t});var n,i=\"boolean\"==typeof t.cycles&&t.cycles,r=t.cmp&&(n=t.cmp,function(e){return function(t,i){var r={key:t,value:e[t]},o={key:i,value:e[i]};return n(r,o)}}),o=[];return function e(t){if(t&&t.toJSON&&\"function\"==typeof t.toJSON&&(t=t.toJSON()),void 0!==t){if(\"number\"==typeof t)return isFinite(t)?\"\"+t:\"null\";if(\"object\"!=typeof t)return JSON.stringify(t);var n,s;if(Array.isArray(t)){for(s=\"[\",n=0;n<t.length;n++)n&&(s+=\",\"),s+=e(t[n])||\"null\";return s+\"]\"}if(null===t)return\"null\";if(-1!==o.indexOf(t)){if(i)return JSON.stringify(\"__cycle__\");throw new TypeError(\"Converting circular structure to JSON\")}var a=o.push(t)-1,u=Object.keys(t).sort(r&&r(t));for(s=\"\",n=0;n<u.length;n++){var c=u[n],l=e(t[c]);l&&(s&&(s+=\",\"),s+=JSON.stringify(c)+\":\"+l)}return o.splice(a,1),\"{\"+s+\"}\"}}(e)};function j(e){return!!e.or}function D(e){return!!e.and}function C(e){return!!e.not}function k(e,t){return C(e)?{not:k(e.not,t)}:D(e)?{and:e.and.map(e=>k(e,t))}:j(e)?{or:e.or.map(e=>k(e,t))}:t(e)}const E=function e(t,n){if(t===n)return!0;if(t&&n&&\"object\"==typeof t&&\"object\"==typeof n){if(t.constructor!==n.constructor)return!1;var i,r,o;if(Array.isArray(t)){if((i=t.length)!=n.length)return!1;for(r=i;0!=r--;)if(!e(t[r],n[r]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((i=(o=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(r=i;0!=r--;)if(!Object.prototype.hasOwnProperty.call(n,o[r]))return!1;for(r=i;0!=r--;){var s=o[r];if(!e(t[s],n[s]))return!1}return!0}return t!=t&&n!=n},S=w;function $(e,t){const n={};for(const i of t)v(e,i)&&(n[i]=e[i]);return n}function B(e,t){const n=Object.assign({},e);for(const e of t)delete n[e];return n}Set.prototype.toJSON=function(){return`Set(${[...this].map(e=>F(e)).join(\",\")})`};const _=F;function N(e){if(x(e))return e;const t=a(e)?e:F(e);if(t.length<250)return t;let n=0;for(let e=0;e<t.length;e++){n=(n<<5)-n+t.charCodeAt(e),n&=n}return n}function T(e){return!1===e||null===e}function z(e,t){return e.indexOf(t)>-1}function P(e,t){let n=0;for(const[i,r]of e.entries())if(t(r,i,n++))return!0;return!1}function L(e,t){let n=0;for(const[i,r]of e.entries())if(!t(r,i,n++))return!1;return!0}function U(e,t){for(const n of Object.keys(t))p(e,n,t[n],!0)}function R(e,t){const n=[],i={};let r;for(const o of e)r=t(o),r in i||(i[r]=1,n.push(o));return n}function M(e,t){for(const n of e)if(t.has(n))return!0;return!1}function q(e){const t=new Set;for(const n of e){const e=r(n).map((e,t)=>0===t?e:`[${e}]`),i=e.map((t,n)=>e.slice(0,n+1).join(\"\"));for(const e of i)t.add(e)}return t}function W(e,t){return void 0===e||void 0===t||M(q(e),q(t))}const I=Object.keys,H=Object.values;function G(e){return!0===e||!1===e}function Y(e){const t=e.replace(/\\W/g,\"_\");return(e.match(/^\\d+/)?\"_\":\"\")+t}function V(e,t){return C(e)?\"!(\"+V(e.not,t)+\")\":D(e)?\"(\"+e.and.map(e=>V(e,t)).join(\") && (\")+\")\":j(e)?\"(\"+e.or.map(e=>V(e,t)).join(\") || (\")+\")\":t(e)}function J(e,t){if(0===t.length)return!0;const n=t.shift();return J(e[n],t)&&delete e[n],0===I(e).length}function Q(e){return e.charAt(0).toUpperCase()+e.substr(1)}function X(e){return e.replace(/(\\[|\\]|\\.|'|\")/g,\"\\\\$1\")}function Z(e,t=\"datum\"){const n=r(e),i=[];for(let e=1;e<=n.length;e++){const r=`[${n.slice(0,e).map(u).join(\"][\")}]`;i.push(`${t}${r}`)}return i.join(\" && \")}function K(e){return`${r(e).map(X).join(\"\\\\.\")}`}function ee(e,t,n){return e.replace(new RegExp(t.replace(/[-/\\\\^$*+?.()|[\\]{}]/g,\"\\\\$&\"),\"g\"),n)}function te(e){return e?r(e).length:0}function ne(...e){for(const t of e)if(void 0!==t)return t}let ie=42;function re(e){return(e%360+360)%360}function oe(e){return!!x(e)||!isNaN(e)&&!isNaN(parseFloat(e))}const se={domainColor:{part:\"domain\",vgProp:\"stroke\"},labelAlign:{part:\"labels\",vgProp:\"align\"},labelBaseline:{part:\"labels\",vgProp:\"baseline\"},labelColor:{part:\"labels\",vgProp:\"fill\"},labelFont:{part:\"labels\",vgProp:\"font\"},labelFontSize:{part:\"labels\",vgProp:\"fontSize\"},labelFontStyle:{part:\"labels\",vgProp:\"fontStyle\"},labelFontWeight:{part:\"labels\",vgProp:\"fontWeight\"},labelOpacity:{part:\"labels\",vgProp:\"opacity\"},labelOffset:null,labelPadding:null,gridColor:{part:\"grid\",vgProp:\"stroke\"},gridDash:{part:\"grid\",vgProp:\"strokeDash\"},gridDashOffset:{part:\"grid\",vgProp:\"strokeDash\"},gridOpacity:{part:\"grid\",vgProp:\"opacity\"},gridWidth:{part:\"grid\",vgProp:\"strokeWidth\"},tickColor:{part:\"ticks\",vgProp:\"stroke\"},tickDash:{part:\"ticks\",vgProp:\"strokeDash\"},tickDashOffset:{part:\"ticks\",vgProp:\"strokeDash\"},tickOpacity:{part:\"ticks\",vgProp:\"opacity\"},tickSize:null,tickWidth:{part:\"ticks\",vgProp:\"strokeWidth\"},titleColor:{part:\"title\",vgProp:\"fill\"},title:null};function ae(e){return e&&e.condition}const ue=[\"domain\",\"grid\",\"labels\",\"ticks\",\"title\"],ce={grid:\"grid\",gridColor:\"grid\",gridDash:\"grid\",gridDashOffset:\"grid\",gridOpacity:\"grid\",gridScale:\"grid\",gridWidth:\"grid\",orient:\"main\",bandPosition:\"both\",domain:\"main\",domainColor:\"main\",domainDash:\"main\",domainDashOffset:\"main\",domainOpacity:\"main\",domainWidth:\"main\",format:\"main\",formatType:\"main\",labelAlign:\"main\",labelAngle:\"main\",labelBaseline:\"main\",labelBound:\"main\",labelColor:\"main\",labelFlush:\"main\",labelFlushOffset:\"main\",labelFont:\"main\",labelFontSize:\"main\",labelFontStyle:\"main\",labelFontWeight:\"main\",labelLimit:\"main\",labelLineHeight:\"main\",labelOpacity:\"main\",labelOffset:\"main\",labelOverlap:\"main\",labelPadding:\"main\",labels:\"main\",labelSeparation:\"main\",maxExtent:\"main\",minExtent:\"main\",offset:\"both\",position:\"main\",tickColor:\"main\",tickDash:\"main\",tickDashOffset:\"main\",tickMinStep:\"main\",tickOffset:\"both\",tickOpacity:\"main\",tickRound:\"both\",ticks:\"main\",tickSize:\"main\",tickWidth:\"both\",title:\"main\",titleAlign:\"main\",titleAnchor:\"main\",titleAngle:\"main\",titleBaseline:\"main\",titleColor:\"main\",titleFont:\"main\",titleFontSize:\"main\",titleFontStyle:\"main\",titleFontWeight:\"main\",titleLimit:\"main\",titleLineHeight:\"main\",titleOpacity:\"main\",titlePadding:\"main\",titleX:\"main\",titleY:\"main\",encode:\"both\",scale:\"both\",tickBand:\"both\",tickCount:\"both\",tickExtra:\"both\",translate:\"both\",values:\"both\",zindex:\"both\"},le={orient:1,bandPosition:1,domain:1,domainColor:1,domainDash:1,domainDashOffset:1,domainOpacity:1,domainWidth:1,format:1,formatType:1,grid:1,gridColor:1,gridDash:1,gridDashOffset:1,gridOpacity:1,gridWidth:1,labelAlign:1,labelAngle:1,labelBaseline:1,labelBound:1,labelColor:1,labelFlush:1,labelFlushOffset:1,labelFont:1,labelFontSize:1,labelFontStyle:1,labelFontWeight:1,labelLimit:1,labelLineHeight:1,labelOffset:1,labelOpacity:1,labelOverlap:1,labelPadding:1,labels:1,labelSeparation:1,maxExtent:1,minExtent:1,offset:1,position:1,tickBand:1,tickColor:1,tickCount:1,tickDash:1,tickDashOffset:1,tickExtra:1,tickMinStep:1,tickOffset:1,tickOpacity:1,tickRound:1,ticks:1,tickSize:1,tickWidth:1,title:1,titleAlign:1,titleAnchor:1,titleAngle:1,titleBaseline:1,titleColor:1,titleFont:1,titleFontSize:1,titleFontStyle:1,titleFontWeight:1,titleLimit:1,titleLineHeight:1,titleOpacity:1,titlePadding:1,titleX:1,titleY:1,values:1,translate:1,zindex:1},de=Object.assign(Object.assign({},le),{style:1,labelExpr:1,encoding:1});function fe(e){return!!de[e]}function ge(e){return z([\"line\",\"area\",\"trail\"],e)}function pe(e){return z([\"rect\",\"bar\",\"image\",\"arc\"],e)}const me=I({arc:1,area:1,bar:1,image:1,line:1,point:1,text:1,tick:1,trail:1,rect:1,geoshape:1,rule:1,circle:1,square:1});function he(e){return e.type}O(me);const be=[\"stroke\",\"strokeWidth\",\"strokeDash\",\"strokeDashOffset\",\"strokeOpacity\",\"strokeJoin\",\"strokeMiterLimit\",\"fill\",\"fillOpacity\"],ve=I({color:1,filled:1,invalid:1,order:1,radius2:1,theta2:1,timeUnitBand:1,timeUnitBandPosition:1}),ye={horizontal:[\"cornerRadiusTopRight\",\"cornerRadiusBottomRight\"],vertical:[\"cornerRadiusTopLeft\",\"cornerRadiusTopRight\"]},xe={binSpacing:1,continuousBandSize:5,timeUnitBandPosition:.5},Oe={binSpacing:0,continuousBandSize:5,timeUnitBandPosition:.5};function Ae(e){return\"mark\"in e}class we{constructor(e,t){this.name=e,this.run=t}hasMatchingType(e){return!!Ae(e)&&(he(t=e.mark)?t.type:t)===this.name;var t}}const Fe={argmax:1,argmin:1,average:1,count:1,distinct:1,product:1,max:1,mean:1,median:1,min:1,missing:1,q1:1,q3:1,ci0:1,ci1:1,stderr:1,stdev:1,stdevp:1,sum:1,valid:1,values:1,variance:1,variancep:1},je={count:1,min:1,max:1};function De(e){return!!e&&!!e.argmin}function Ce(e){return!!e&&!!e.argmax}function ke(e){return a(e)&&!!Fe[e]}const Ee=[\"count\",\"valid\",\"missing\",\"distinct\"];function Se(e){return a(e)&&z(Ee,e)}const $e=[\"count\",\"sum\",\"distinct\",\"valid\",\"missing\"],Be=O([\"mean\",\"average\",\"median\",\"q1\",\"q3\",\"min\",\"max\"]),_e=\"row\",Ne=\"x\",Te=\"y\",ze=\"color\",Pe=\"fill\",Le=\"shape\",Ue={x:1,y:1,x2:1,y2:1},Re={theta:1,theta2:1,radius:1,radius2:1};function Me(e){return e in Re}const qe={longitude:1,longitude2:1,latitude:1,latitude2:1};const We=I(qe),Ie=Object.assign(Object.assign(Object.assign(Object.assign({},Ue),Re),qe),{color:1,fill:1,stroke:1,opacity:1,fillOpacity:1,strokeOpacity:1,strokeWidth:1,strokeDash:1,size:1,angle:1,shape:1,order:1,text:1,detail:1,key:1,tooltip:1,href:1,url:1});function He(e){return\"color\"===e||\"fill\"===e||\"stroke\"===e}const Ge={row:1,column:1,facet:1},Ye=I(Ge),Ve=Object.assign(Object.assign({},Ie),Ge),Je=I(Ve),Qe=A(Ve,[\"order\",\"detail\",\"tooltip\"]),Xe=A(Qe,[\"row\",\"column\",\"facet\"]);function Ze(e){return!!Ve[e]}const Ke=[\"x2\",\"y2\",\"latitude2\",\"longitude2\",\"theta2\",\"radius2\"];function et(e){return tt(e)!==e}function tt(e){switch(e){case\"x2\":return\"x\";case\"y2\":return\"y\";case\"latitude2\":return\"latitude\";case\"longitude2\":return\"longitude\";case\"theta2\":return\"theta\";case\"radius2\":return\"radius\"}return e}function nt(e){if(Me(e))switch(e){case\"theta\":return\"startAngle\";case\"theta2\":return\"endAngle\";case\"radius\":return\"outerRadius\";case\"radius2\":return\"innerRadius\"}return e}function it(e){switch(e){case\"x\":return\"x2\";case\"y\":return\"y2\";case\"latitude\":return\"latitude2\";case\"longitude\":return\"longitude2\";case\"theta\":return\"theta2\";case\"radius\":return\"radius2\"}}function rt(e){switch(e){case\"x\":case\"x2\":return\"width\";case\"y\":case\"y2\":return\"height\"}}const ot=A(Ie,[\"x\",\"y\",\"x2\",\"y2\",\"latitude\",\"longitude\",\"latitude2\",\"longitude2\",\"theta\",\"theta2\",\"radius\",\"radius2\"]),st=I(ot),at={x:1,y:1},ut=I(at);function ct(e){return e in Ue}function lt(e){return\"width\"===e?\"x\":\"y\"}const dt=A(ot,[\"text\",\"tooltip\",\"href\",\"url\",\"detail\",\"key\",\"order\"]),ft=I(dt);const gt=Object.assign(Object.assign(Object.assign({},at),{theta:1,radius:1}),dt),pt=I(gt);function mt(e){return!!gt[e]}function ht(e,t){return function(e){switch(e){case ze:case Pe:case\"stroke\":case\"detail\":case\"key\":case\"tooltip\":case\"href\":case\"order\":case\"opacity\":case\"fillOpacity\":case\"strokeOpacity\":case\"strokeWidth\":case\"facet\":case _e:case\"column\":return bt;case Ne:case Te:case\"latitude\":case\"longitude\":return vt;case\"x2\":case\"y2\":case\"latitude2\":case\"longitude2\":return{area:\"always\",bar:\"always\",image:\"always\",rect:\"always\",rule:\"always\",circle:\"binned\",point:\"binned\",square:\"binned\",tick:\"binned\",line:\"binned\",trail:\"binned\"};case\"size\":return{point:\"always\",tick:\"always\",rule:\"always\",circle:\"always\",square:\"always\",bar:\"always\",text:\"always\",line:\"always\",trail:\"always\"};case\"strokeDash\":return{line:\"always\",point:\"always\",tick:\"always\",rule:\"always\",circle:\"always\",square:\"always\",bar:\"always\",geoshape:\"always\"};case Le:return{point:\"always\",geoshape:\"always\"};case\"text\":return{text:\"always\"};case\"angle\":return{point:\"always\",square:\"always\",text:\"always\"};case\"url\":return{image:\"always\"};case\"theta\":case\"radius\":return{text:\"always\",arc:\"always\"};case\"theta2\":case\"radius2\":return{arc:\"always\"}}}(e)[t]}const bt={arc:\"always\",area:\"always\",bar:\"always\",circle:\"always\",geoshape:\"always\",image:\"always\",line:\"always\",rule:\"always\",point:\"always\",rect:\"always\",square:\"always\",trail:\"always\",text:\"always\",tick:\"always\"},vt=A(bt,[\"geoshape\"]);function yt(e){switch(e){case Ne:case Te:case\"theta\":case\"radius\":case\"size\":case\"angle\":case\"strokeWidth\":case\"opacity\":case\"fillOpacity\":case\"strokeOpacity\":case\"x2\":case\"y2\":case\"theta2\":case\"radius2\":return;case\"facet\":case _e:case\"column\":case Le:case\"strokeDash\":case\"text\":case\"tooltip\":case\"href\":case\"url\":return\"discrete\";case ze:case Pe:case\"stroke\":return\"flexible\";case\"latitude\":case\"longitude\":case\"latitude2\":case\"longitude2\":case\"detail\":case\"key\":case\"order\":return}}function xt(e){return y(e)&&(e=Gi(e,void 0)),\"bin\"+I(e).map(t=>Ft(e[t])?Y(`_${t}_${Object.entries(e[t])}`):Y(`_${t}_${e[t]}`)).join(\"\")}function Ot(e){return!0===e||wt(e)&&!e.binned}function At(e){return\"binned\"===e||wt(e)&&!0===e.binned}function wt(e){return s(e)}function Ft(e){return null==e?void 0:e.selection}function jt(e){switch(e){case _e:case\"column\":case\"size\":case ze:case Pe:case\"stroke\":case\"strokeWidth\":case\"opacity\":case\"fillOpacity\":case\"strokeOpacity\":case Le:return 6;case\"strokeDash\":return 4;default:return 10}}const Dt=Object.freeze({__proto__:null,invalidSpec:function(e){return`Invalid specification ${JSON.stringify(e)}. Make sure the specification includes at least one of the following properties: \"mark\", \"layer\", \"facet\", \"hconcat\", \"vconcat\", \"concat\", or \"repeat\".`},FIT_NON_SINGLE:'Autosize \"fit\" only works for single views and layered views.',containerSizeNonSingle:function(e){return`${\"width\"==e?\"Width\":\"Height\"} \"container\" only works for single views and layered views.`},containerSizeNotCompatibleWithAutosize:function(e){return`${\"width\"==e?\"Width\":\"Height\"} \"container\" only works well with autosize \"fit\" or \"fit-${\"width\"==e?\"x\":\"y\"}\".`},droppingFit:function(e){return e?`Dropping \"fit-${e}\" because spec has discrete ${rt(e)}.`:'Dropping \"fit\" because spec has discrete size.'},cannotProjectOnChannelWithoutField:function(e){return`Cannot project a selection on encoding channel \"${e}\", which has no field.`},cannotProjectAggregate:function(e,t){return`Cannot project a selection on encoding channel \"${e}\" as it uses an aggregate function (\"${t}\").`},nearestNotSupportForContinuous:function(e){return`The \"nearest\" transform is not supported for ${e} marks.`},selectionNotSupported:function(e){return`Selection not supported for ${e} yet.`},selectionNotFound:function(e){return`Cannot find a selection named \"${e}\".`},SCALE_BINDINGS_CONTINUOUS:\"Scale bindings are currently only supported for scales with unbinned, continuous domains.\",LEGEND_BINDINGS_PROJECT_LENGTH:\"Legend bindings are only supported for selections over an individual field or encoding channel.\",noSameUnitLookup:function(e){return`Cannot define and lookup the \"${e}\" selection in the same view. `+\"Try moving the lookup into a second, layered view?\"},noSuchRepeatedValue:function(e){return`Unknown repeated value \"${e}\".`},columnsNotSupportByRowCol:function(e){return`The \"columns\" property cannot be used when \"${e}\" has nested row/column.`},CONCAT_CANNOT_SHARE_AXIS:\"Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).\",unrecognizedParse:function(e){return`Unrecognized parse \"${e}\".`},differentParse:function(e,t,n){return`An ancestor parsed field \"${e}\" as ${n} but a child wants to parse the field as ${t}.`},invalidTransformIgnored:function(e){return`Ignoring an invalid transform: ${_(e)}.`},NO_FIELDS_NEEDS_AS:'If \"from.fields\" is not specified, \"as\" has to be a string that specifies the key to be used for the data from the secondary source.',encodingOverridden:function(e){return`Layer's shared ${e.join(\",\")} channel ${1===e.length?\"is\":\"are\"} overriden.`},projectionOverridden:function(e){const{parentProjection:t,projection:n}=e;return`Layer's shared projection ${_(t)} is overridden by a child projection ${_(n)}.`},REPLACE_ANGLE_WITH_THETA:\"Arc marks uses theta channel rather than angle, replacing angle with theta.\",primitiveChannelDef:function(e,t,n){return`Channel ${e} is a ${t}. Converted to {value: ${_(n)}}.`},invalidFieldType:function(e){return`Invalid field type \"${e}\".`},invalidFieldTypeForCountAggregate:function(e,t){return`Invalid field type \"${e}\" for aggregate: \"${t}\", using \"quantitative\" instead.`},invalidAggregate:function(e){return`Invalid aggregation operator \"${e}\".`},missingFieldType:function(e,t){return`Missing type for channel \"${e}\", using \"${t}\" instead.`},droppingColor:function(e,t){const{fill:n,stroke:i}=t;return`Dropping color ${e} as the plot also has ${n&&i?\"fill and stroke\":n?\"fill\":\"stroke\"}.`},emptyFieldDef:function(e,t){return`Dropping ${_(e)} from channel \"${t}\" since it does not contain any data field, datum, value, or signal.`},latLongDeprecated:function(e,t,n){return`${e}-encoding with type ${t} is deprecated. Replacing with ${n}-encoding.`},LINE_WITH_VARYING_SIZE:\"Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.\",incompatibleChannel:function(e,t,n){return`${e} dropped as it is incompatible with \"${t}\"${n?` when ${n}`:\"\"}.`},invalidEncodingChannel:function(e){return`${e}-encoding is dropped as ${e} is not a valid encoding channel.`},facetChannelShouldBeDiscrete:function(e){return`${e} encoding should be discrete (ordinal / nominal / binned).`},facetChannelDropped:function(e){return`Facet encoding dropped as ${e.join(\" and \")} ${e.length>1?\"are\":\"is\"} also specified.`},discreteChannelCannotEncode:function(e,t){return`Using discrete channel \"${e}\" to encode \"${t}\" field can be misleading as it does not encode ${\"ordinal\"===t?\"order\":\"magnitude\"}.`},lineWithRange:function(e,t){return`Line mark is for continuous lines and thus cannot be used with ${e&&t?\"x2 and y2\":e?\"x2\":\"y2\"}. We will use the rule mark (line segments) instead.`},orientOverridden:function(e,t){return`Specified orient \"${e}\" overridden with \"${t}\".`},CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN:\"Custom domain scale cannot be unioned with default field-based domain.\",RANGE_STEP_DEPRECATED:'Scale\\'s \"rangeStep\" is deprecated and will be removed in Vega-Lite 5.0. Please use \"width\"/\"height\": {\"step\": ...} instead. See https://vega.github.io/vega-lite/docs/size.html.',cannotUseScalePropertyWithNonColor:function(e){return`Cannot use the scale property \"${e}\" with non-color channel.`},unaggregateDomainHasNoEffectForRawField:function(e){return`Using unaggregated domain with raw field has no effect (${_(e)}).`},unaggregateDomainWithNonSharedDomainOp:function(e){return`Unaggregated domain not applicable for \"${e}\" since it produces values outside the origin domain of the source data.`},unaggregatedDomainWithLogScale:function(e){return`Unaggregated domain is currently unsupported for log scale (${_(e)}).`},cannotApplySizeToNonOrientedMark:function(e){return`Cannot apply size to non-oriented mark \"${e}\".`},scaleTypeNotWorkWithChannel:function(e,t,n){return`Channel \"${e}\" does not work with \"${t}\" scale. We are using \"${n}\" scale instead.`},scaleTypeNotWorkWithFieldDef:function(e,t){return`FieldDef does not work with \"${e}\" scale. We are using \"${t}\" scale instead.`},scalePropertyNotWorkWithScaleType:function(e,t,n){return`${n}-scale's \"${t}\" is dropped as it does not work with ${e} scale.`},scaleTypeNotWorkWithMark:function(e,t){return`Scale type \"${t}\" does not work with mark \"${e}\".`},stepDropped:function(e){return`The step for \"${e}\" is dropped because the ${\"width\"===e?\"x\":\"y\"} is continuous.`},mergeConflictingProperty:function(e,t,n,i){return`Conflicting ${t.toString()} property \"${e.toString()}\" (${_(n)} and ${_(i)}). Using ${_(n)}.`},mergeConflictingDomainProperty:function(e,t,n,i){return`Conflicting ${t.toString()} property \"${e.toString()}\" (${_(n)} and ${_(i)}). Using the union of the two domains.`},independentScaleMeansIndependentGuide:function(e){return`Setting the scale to be independent for \"${e}\" means we also have to set the guide (axis or legend) to be independent.`},domainSortDropped:function(e){return`Dropping sort property ${_(e)} as unioned domains only support boolean or op \"count\", \"min\", and \"max\".`},UNABLE_TO_MERGE_DOMAINS:\"Unable to merge domains.\",MORE_THAN_ONE_SORT:\"Domains that should be unioned has conflicting sort properties. Sort will be set to true.\",INVALID_CHANNEL_FOR_AXIS:\"Invalid channel for axis.\",cannotStackRangedMark:function(e){return`Cannot stack \"${e}\" if there is already \"${e}2\".`},cannotStackNonLinearScale:function(e){return`Cannot stack non-linear scale (${e}).`},stackNonSummativeAggregate:function(e){return`Stacking is applied even though the aggregate function is non-summative (\"${e}\").`},invalidTimeUnit:function(e,t){return`Invalid ${e}: ${_(t)}.`},dayReplacedWithDate:function(e){return`Time unit \"${e}\" is not supported. We are replacing it with ${ee(e,\"day\",\"date\")}.`},droppedDay:function(e){return`Dropping day from datetime ${_(e)} as day cannot be combined with other units.`},errorBarCenterAndExtentAreNotNeeded:function(e,t){return`${t?\"extent \":\"\"}${t&&e?\"and \":\"\"}${e?\"center \":\"\"}${t&&e?\"are \":\"is \"}not needed when data are aggregated.`},errorBarCenterIsUsedWithWrongExtent:function(e,t,n){return`${e} is not usually used with ${t} for ${n}.`},errorBarContinuousAxisHasCustomizedAggregate:function(e,t){return`Continuous axis should not have customized aggregation function ${e}; ${t} already agregates the axis.`},errorBarCenterIsNotNeeded:function(e,t){return`Center is not needed to be specified in ${t} when extent is ${e}.`},errorBand1DNotSupport:function(e){return`1D error band does not support ${e}.`},channelRequiredForBinned:function(e){return`Channel ${e} is required for \"binned\" bin.`},domainRequiredForThresholdScale:function(e){return`Domain for ${e} is required for threshold scale.`}}),Ct=(Et=2||0,{level:function(e){return arguments.length?(Et=+e,this):Et},error:function(){return Et>=1&&d(kt||\"error\",\"ERROR\",arguments),this},warn:function(){return Et>=2&&d(kt||\"warn\",\"WARN\",arguments),this},info:function(){return Et>=3&&d(kt||\"log\",\"INFO\",arguments),this},debug:function(){return Et>=4&&d(kt||\"log\",\"DEBUG\",arguments),this}});var kt,Et;let St=Ct;function $t(...e){St.warn(...e)}function Bt(e){return!!(e&&(e.year||e.quarter||e.month||e.date||e.day||e.hours||e.minutes||e.seconds||e.milliseconds))}const _t=[\"january\",\"february\",\"march\",\"april\",\"may\",\"june\",\"july\",\"august\",\"september\",\"october\",\"november\",\"december\"],Nt=_t.map(e=>e.substr(0,3)),Tt=[\"sunday\",\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\"],zt=Tt.map(e=>e.substr(0,3));function Pt(e,t){const n=[];if(t&&void 0!==e.day&&I(e).length>1&&($t(Dt.droppedDay(e)),delete(e=S(e)).day),void 0!==e.year?n.push(e.year):void 0!==e.day?n.push(2006):n.push(0),void 0!==e.month){const i=t?function(e){if(oe(e)&&(e=+e),x(e))return e-1;{const t=e.toLowerCase(),n=_t.indexOf(t);if(-1!==n)return n;const i=t.substr(0,3),r=Nt.indexOf(i);if(-1!==r)return r;throw new Error(Dt.invalidTimeUnit(\"month\",e))}}(e.month):e.month;n.push(i)}else if(void 0!==e.quarter){const i=t?function(e){if(oe(e)&&(e=+e),x(e))return e>4&&$t(Dt.invalidTimeUnit(\"quarter\",e)),e-1;throw new Error(Dt.invalidTimeUnit(\"quarter\",e))}(e.quarter):e.quarter;n.push(x(i)?3*i:i+\"*3\")}else n.push(0);if(void 0!==e.date)n.push(e.date);else if(void 0!==e.day){const i=t?function(e){if(oe(e)&&(e=+e),x(e))return e%7;{const t=e.toLowerCase(),n=Tt.indexOf(t);if(-1!==n)return n;const i=t.substr(0,3),r=zt.indexOf(i);if(-1!==r)return r;throw new Error(Dt.invalidTimeUnit(\"day\",e))}}(e.day):e.day;n.push(x(i)?i+1:i+\"+1\")}else n.push(1);for(const t of[\"hours\",\"minutes\",\"seconds\",\"milliseconds\"]){const i=e[t];n.push(void 0===i?0:i)}return n}function Lt(e){const t=Pt(e,!0).join(\", \");return e.utc?`utc(${t})`:`datetime(${t})`}var Ut;!function(e){e.YEAR=\"year\",e.MONTH=\"month\",e.DAY=\"day\",e.DATE=\"date\",e.HOURS=\"hours\",e.MINUTES=\"minutes\",e.SECONDS=\"seconds\",e.MILLISECONDS=\"milliseconds\",e.YEARMONTH=\"yearmonth\",e.YEARMONTHDATE=\"yearmonthdate\",e.YEARMONTHDATEHOURS=\"yearmonthdatehours\",e.YEARMONTHDATEHOURSMINUTES=\"yearmonthdatehoursminutes\",e.YEARMONTHDATEHOURSMINUTESSECONDS=\"yearmonthdatehoursminutesseconds\",e.MONTHDATE=\"monthdate\",e.MONTHDATEHOURS=\"monthdatehours\",e.HOURSMINUTES=\"hoursminutes\",e.HOURSMINUTESSECONDS=\"hoursminutesseconds\",e.MINUTESSECONDS=\"minutesseconds\",e.SECONDSMILLISECONDS=\"secondsmilliseconds\",e.QUARTER=\"quarter\",e.YEARQUARTER=\"yearquarter\",e.QUARTERMONTH=\"quartermonth\",e.YEARQUARTERMONTH=\"yearquartermonth\",e.UTCYEAR=\"utcyear\",e.UTCMONTH=\"utcmonth\",e.UTCDAY=\"utcday\",e.UTCDATE=\"utcdate\",e.UTCHOURS=\"utchours\",e.UTCMINUTES=\"utcminutes\",e.UTCSECONDS=\"utcseconds\",e.UTCMILLISECONDS=\"utcmilliseconds\",e.UTCYEARMONTH=\"utcyearmonth\",e.UTCYEARMONTHDATE=\"utcyearmonthdate\",e.UTCYEARMONTHDATEHOURS=\"utcyearmonthdatehours\",e.UTCYEARMONTHDATEHOURSMINUTES=\"utcyearmonthdatehoursminutes\",e.UTCYEARMONTHDATEHOURSMINUTESSECONDS=\"utcyearmonthdatehoursminutesseconds\",e.UTCMONTHDATE=\"utcmonthdate\",e.UTCMONTHDATEHOURS=\"utcmonthdatehours\",e.UTCHOURSMINUTES=\"utchoursminutes\",e.UTCHOURSMINUTESSECONDS=\"utchoursminutesseconds\",e.UTCMINUTESSECONDS=\"utcminutesseconds\",e.UTCSECONDSMILLISECONDS=\"utcsecondsmilliseconds\",e.UTCQUARTER=\"utcquarter\",e.UTCYEARQUARTER=\"utcyearquarter\",e.UTCQUARTERMONTH=\"utcquartermonth\",e.UTCYEARQUARTERMONTH=\"utcyearquartermonth\"}(Ut||(Ut={}));const Rt={year:1,quarter:1,month:1,day:1,date:1,hours:1,minutes:1,seconds:1,milliseconds:1},Mt=I(Rt);const qt={utcyear:1,utcquarter:1,utcmonth:1,utcday:1,utcdate:1,utchours:1,utcminutes:1,utcseconds:1,utcmilliseconds:1},Wt={utcyearquarter:1,utcyearquartermonth:1,utcyearmonth:1,utcyearmonthdate:1,utcyearmonthdatehours:1,utcyearmonthdatehoursminutes:1,utcyearmonthdatehoursminutesseconds:1,utcquartermonth:1,utcmonthdate:1,utcmonthdatehours:1,utchoursminutes:1,utchoursminutesseconds:1,utcminutesseconds:1,utcsecondsmilliseconds:1},It=Object.assign(Object.assign({},qt),Wt);function Ht(e){return!!It[e]}Object.assign(Object.assign(Object.assign(Object.assign({},Rt),qt),{yearquarter:1,yearquartermonth:1,yearmonth:1,yearmonthdate:1,yearmonthdatehours:1,yearmonthdatehoursminutes:1,yearmonthdatehoursminutesseconds:1,quartermonth:1,monthdate:1,monthdatehours:1,hoursminutes:1,hoursminutesseconds:1,minutesseconds:1,secondsmilliseconds:1}),Wt);const Gt={\"year-month\":\"%b %Y \",\"year-month-date\":\"%b %d, %Y \"};function Yt(e){return Mt.reduce((t,n)=>Vt(e,n)?[...t,n]:t,[])}function Vt(e,t){const n=e.indexOf(t);return n>-1&&(t!==Ut.SECONDS||0===n||\"i\"!==e.charAt(n-1))}function Jt(e,t,{end:n}={end:!1}){const i=Z(t),r=Ht(e)?\"utc\":\"\";let o;const s=Mt.reduce((t,n)=>{var s;return Vt(e,n)&&(t[n]=(s=n)===Ut.QUARTER?`(${r}quarter(${i})-1)`:`${r}${s}(${i})`,o=n),t},{});return n&&(s[o]+=\"+1\"),function(e){const t=Pt(e,!1).join(\", \");return e.utc?`utc(${t})`:`datetime(${t})`}(s)}function Qt(e,t,n){if(!e)return;const i=function(e){if(!e)return;const t=Yt(e);return`timeUnitSpecifier(${F(t)}, ${F(Gt)})`}(e);return n||Ht(e)?`utcFormat(${t}, ${i})`:`timeFormat(${t}, ${i})`}function Xt(e){if(!e)return;let t;return a(e)?t={unit:Zt(e)}:s(e)&&(t=Object.assign(Object.assign({},e),e.unit?{unit:Zt(e.unit)}:{})),Ht(t.unit)&&(t.utc=!0,t.unit=t.unit.substr(3)),t}function Zt(e){return\"day\"!==e&&e.indexOf(\"day\")>=0?($t(Dt.dayReplacedWithDate(e)),ee(e,\"day\",\"date\")):e}function Kt(e){return e&&!!e.signal}function en(e){return!!e.step}function tn(e){return!o(e)&&(\"field\"in e&&\"data\"in e)}const nn=I({blend:1,opacity:1,fill:1,fillOpacity:1,stroke:1,strokeCap:1,strokeWidth:1,strokeOpacity:1,strokeDash:1,strokeDashOffset:1,strokeJoin:1,strokeOffset:1,strokeMiterLimit:1,startAngle:1,endAngle:1,innerRadius:1,outerRadius:1,size:1,shape:1,interpolate:1,tension:1,orient:1,align:1,baseline:1,text:1,dir:1,dx:1,dy:1,ellipsis:1,limit:1,radius:1,theta:1,angle:1,font:1,fontSize:1,fontWeight:1,fontStyle:1,lineBreak:1,lineHeight:1,cursor:1,href:1,tooltip:1,cornerRadius:1,cornerRadiusTopLeft:1,cornerRadiusTopRight:1,cornerRadiusBottomLeft:1,cornerRadiusBottomRight:1,aspect:1,width:1,height:1}),rn=[\"cornerRadius\",\"cornerRadiusTopLeft\",\"cornerRadiusTopRight\",\"cornerRadiusBottomLeft\",\"cornerRadiusBottomRight\"];function on(e){return e&&!!e.field&&void 0!==e.equal}function sn(e){return e&&!!e.field&&void 0!==e.lt}function an(e){return e&&!!e.field&&void 0!==e.lte}function un(e){return e&&!!e.field&&void 0!==e.gt}function cn(e){return e&&!!e.field&&void 0!==e.gte}function ln(e){if(e&&e.field){if(o(e.range)&&2===e.range.length)return!0;if(Kt(e.range))return!0}return!1}function dn(e){return e&&!!e.field&&(o(e.oneOf)||o(e.in))}function fn(e){return dn(e)||on(e)||ln(e)||sn(e)||un(e)||an(e)||cn(e)}function gn(e,t){return Qi(e,{timeUnit:t,time:!0})}function pn(e,t=!0){var n;const{field:i}=e,r=null===(n=Xt(e.timeUnit))||void 0===n?void 0:n.unit,o=r?\"time(\"+Jt(r,i)+\")\":$i(e,{expr:\"datum\"});if(on(e))return o+\"===\"+gn(e.equal,r);if(sn(e)){return`${o}<${gn(e.lt,r)}`}if(un(e)){return`${o}>${gn(e.gt,r)}`}if(an(e)){return`${o}<=${gn(e.lte,r)}`}if(cn(e)){return`${o}>=${gn(e.gte,r)}`}if(dn(e))return`indexof([${function(e,t){return e.map(e=>gn(e,t))}(e.oneOf,r).join(\",\")}], ${o}) !== -1`;if(function(e){return e&&!!e.field&&void 0!==e.valid}(e))return mn(o,e.valid);if(ln(e)){const{range:n}=e,i=Kt(n)?{signal:`${n.signal}[0]`}:n[0],s=Kt(n)?{signal:`${n.signal}[1]`}:n[1];if(null!==i&&null!==s&&t)return\"inrange(\"+o+\", [\"+gn(i,r)+\", \"+gn(s,r)+\"])\";const a=[];return null!==i&&a.push(`${o} >= ${gn(i,r)}`),null!==s&&a.push(`${o} <= ${gn(s,r)}`),a.length>0?a.join(\" && \"):\"true\"}throw new Error(`Invalid field predicate: ${JSON.stringify(e)}`)}function mn(e,t=!0){return t?`isValid(${e}) && isFinite(+${e})`:`!isValid(${e}) || !isFinite(+${e})`}function hn(e){var t;return fn(e)&&e.timeUnit?Object.assign(Object.assign({},e),{timeUnit:null===(t=Xt(e.timeUnit))||void 0===t?void 0:t.unit}):e}const bn={quantitative:1,ordinal:1,temporal:1,nominal:1,geojson:1};var vn;!function(e){e.LINEAR=\"linear\",e.LOG=\"log\",e.POW=\"pow\",e.SQRT=\"sqrt\",e.SYMLOG=\"symlog\",e.IDENTITY=\"identity\",e.SEQUENTIAL=\"sequential\",e.TIME=\"time\",e.UTC=\"utc\",e.QUANTILE=\"quantile\",e.QUANTIZE=\"quantize\",e.THRESHOLD=\"threshold\",e.BIN_ORDINAL=\"bin-ordinal\",e.ORDINAL=\"ordinal\",e.POINT=\"point\",e.BAND=\"band\"}(vn||(vn={}));const yn={linear:\"numeric\",log:\"numeric\",pow:\"numeric\",sqrt:\"numeric\",symlog:\"numeric\",identity:\"numeric\",sequential:\"numeric\",time:\"time\",utc:\"time\",ordinal:\"ordinal\",\"bin-ordinal\":\"bin-ordinal\",point:\"ordinal-position\",band:\"ordinal-position\",quantile:\"discretizing\",quantize:\"discretizing\",threshold:\"discretizing\"},xn=I(yn);function On(e,t){const n=yn[e],i=yn[t];return n===i||\"ordinal-position\"===n&&\"time\"===i||\"ordinal-position\"===i&&\"time\"===n}const An={linear:0,log:1,pow:1,sqrt:1,symlog:1,identity:1,sequential:1,time:0,utc:0,point:10,band:11,ordinal:0,\"bin-ordinal\":0,quantile:0,quantize:0,threshold:0};function wn(e){return An[e]}const Fn=[\"linear\",\"log\",\"pow\",\"sqrt\",\"symlog\",\"time\",\"utc\"],jn=O(Fn),Dn=O([\"linear\",\"log\",\"pow\",\"sqrt\",\"symlog\"]);const Cn=O([\"quantile\",\"quantize\",\"threshold\"]),kn=O(Fn.concat([\"quantile\",\"quantize\",\"threshold\",\"sequential\",\"identity\"])),En=O([\"ordinal\",\"bin-ordinal\",\"point\",\"band\"]);function Sn(e){return e in En}function $n(e){return e in kn}function Bn(e){return e in jn}function _n(e){return e in Cn}function Nn(e){return null==e?void 0:e.selection}const Tn=A({type:1,domain:1,domainMid:1,align:1,range:1,scheme:1,bins:1,reverse:1,round:1,clamp:1,nice:1,base:1,exponent:1,constant:1,interpolate:1,zero:1,padding:1,paddingInner:1,paddingOuter:1},[\"type\",\"domain\",\"range\",\"scheme\"]),zn=I(Tn);!function(){var e;const t={};for(const n of Je)for(const i of I(bn))for(const r of xn){const o=Mn(n,i);Rn(n,r)&&Un(r,i)&&(t[o]=null!==(e=t[o])&&void 0!==e?e:[],t[o].push(r))}}();function Pn(e,t){switch(t){case\"type\":case\"domain\":case\"reverse\":case\"range\":return!0;case\"scheme\":case\"interpolate\":return!z([\"point\",\"band\",\"identity\"],e);case\"bins\":return!z([\"point\",\"band\",\"identity\",\"ordinal\"],e);case\"round\":return Bn(e)||\"band\"===e||\"point\"===e;case\"padding\":return Bn(e)||z([\"point\",\"band\"],e);case\"paddingOuter\":case\"align\":return z([\"point\",\"band\"],e);case\"paddingInner\":return\"band\"===e;case\"domainMid\":case\"clamp\":return Bn(e);case\"nice\":return Bn(e)||\"quantize\"===e||\"threshold\"===e;case\"exponent\":return\"pow\"===e;case\"base\":return\"log\"===e;case\"constant\":return\"symlog\"===e;case\"zero\":return $n(e)&&!z([\"log\",\"time\",\"utc\",\"threshold\",\"quantile\"],e)}}function Ln(e,t){switch(t){case\"interpolate\":case\"scheme\":case\"domainMid\":return He(e)?void 0:Dt.cannotUseScalePropertyWithNonColor(e);case\"align\":case\"type\":case\"bins\":case\"domain\":case\"range\":case\"base\":case\"exponent\":case\"constant\":case\"nice\":case\"padding\":case\"paddingInner\":case\"paddingOuter\":case\"reverse\":case\"round\":case\"clamp\":case\"zero\":return}}function Un(e,t){return z([\"ordinal\",\"nominal\"],t)?void 0===e||Sn(e):\"temporal\"===t?z([vn.TIME,vn.UTC,void 0],e):\"quantitative\"!==t||z([vn.LOG,vn.POW,vn.SQRT,vn.SYMLOG,vn.QUANTILE,vn.QUANTIZE,vn.THRESHOLD,vn.LINEAR,void 0],e)}function Rn(e,t){if(!mt(e))return!1;switch(e){case Ne:case Te:case\"theta\":case\"radius\":return Bn(t)||z([\"band\",\"point\"],t);case\"size\":case\"strokeWidth\":case\"opacity\":case\"fillOpacity\":case\"strokeOpacity\":case\"angle\":return Bn(t)||_n(t)||z([\"band\",\"point\",\"ordinal\"],t);case ze:case Pe:case\"stroke\":return\"band\"!==t;case\"strokeDash\":return\"ordinal\"===t||_n(t);case Le:return\"ordinal\"===t}}function Mn(e,t){return e+\"_\"+t}function qn(e){const{channel:t,channelDef:n,markDef:i,scale:r,config:o}=e,s=Vn(e);return xi(n)&&!Se(n.aggregate)&&r&&Bn(r.get(\"type\"))&&!1===r.get(\"zero\")?Wn({fieldDef:n,channel:t,markDef:i,ref:s,config:o}):s}function Wn({fieldDef:e,channel:t,markDef:n,ref:i,config:r}){if(ge(n.type))return i;return null===ir(\"invalid\",n,r)?i:[In(e,t),i]}function In(e,t){const n=Hn(e,!0),i=\"y\"===tt(t)?{field:{group:\"height\"}}:{value:0};return Object.assign({test:n},i)}function Hn(e,t=!0){return mn(a(e)?e:$i(e,{expr:\"datum\"}),!t)}function Gn(e,t,n,i){const r={};if(t&&(r.scale=t),Ai(e)){const{datum:t}=e;Bt(t)?r.signal=Lt(t):r.value=t}else r.field=$i(e,n);if(i){const{offset:e,band:t}=i;e&&(r.offset=e),t&&(r.band=t)}return r}function Yn({scaleName:e,fieldOrDatumDef:t,fieldOrDatumDef2:n,offset:i,startSuffix:r,band:o=.5}){const s=0<o&&o<1?\"datum\":void 0,a=$i(t,{expr:s,suffix:r}),u=void 0!==n?$i(n,{expr:s}):$i(t,{suffix:\"end\",expr:s}),c={};if(0===o||1===o){c.scale=e;const t=0===o?a:u;c.field=t}else{const t=`${o} * ${a} + ${1-o} * ${u}`;c.signal=`scale(\"${e}\", ${t})`}return i&&(c.offset=i),c}function Vn({channel:e,channelDef:t,channel2Def:n,markDef:i,config:r,scaleName:o,scale:s,stack:a,offset:u,defaultRef:c,band:l}){var d;if(t){if(ji(t)){if(Di(t)){l=null!=l?l:mi({channel:e,fieldDef:t,fieldDef2:n,markDef:i,stack:a,config:r,isMidPoint:!0});const{bin:s,timeUnit:c,type:d}=t;if(Ot(s)||l&&c&&\"temporal\"===d)return a&&a.impute?Gn(t,o,{binSuffix:\"mid\"},{offset:u}):l?Yn({scaleName:o,fieldOrDatumDef:t,band:l,offset:u}):Gn(t,o,Zi(t,e)?{binSuffix:\"range\"}:{},{offset:u});if(At(s)){if(xi(n))return Yn({scaleName:o,fieldOrDatumDef:t,fieldOrDatumDef2:n,band:l,offset:u});{const t=e===Ne?\"x2\":\"y2\";$t(Dt.channelRequiredForBinned(t))}}}const c=null==s?void 0:s.get(\"type\");return Gn(t,o,Sn(c)?{binSuffix:\"range\"}:{},{offset:u,band:\"band\"===c?null!==(d=null!=l?l:t.band)&&void 0!==d?d:.5:void 0})}if(Ci(t)){const n=t.value,i=u?{offset:u}:{};return Object.assign(Object.assign({},Jn(e,n)),i)}if(Kt(t))return t}return function(e){return\"function\"==typeof e}(c)&&(c=c()),c?Object.assign(Object.assign({},c),u?{offset:u}:{}):c}function Jn(e,t){return z([\"x\",\"x2\"],e)&&\"width\"===t?{field:{group:\"width\"}}:z([\"y\",\"y2\"],e)&&\"height\"===t?{field:{group:\"height\"}}:tr(t)}let Qn=new Set;function Xn(e){return e&&\"number\"!==e&&\"time\"!==e&&Qn.has(e)}function Zn({formatType:e,field:t,format:n}){return`${e}(${t}, ${JSON.stringify(n)})`}function Kn({fieldOrDatumDef:e,format:t,formatType:n,expr:i,normalizeStack:r,config:o,field:s,omitNumberFormatAndEmptyTimeFormat:u,omitTimeFormatConfig:c,isUTCScale:l}){var d,f;s||(s=xi(e)?r?`${$i(e,{expr:i,suffix:\"end\"})}-${$i(e,{expr:i,suffix:\"start\"})}`:$i(e,{expr:i}):function(e){const{datum:t}=e;return Bt(t)?Lt(t):`${JSON.stringify(t)}`}(e)),l=null!=l?l:ki(e)&&(null===(d=e.scale)||void 0===d?void 0:d.type)===vn.UTC;const g=c?null:o.timeFormat;if(Xn(n)){if(xi(e)&&Ot(e.bin)){return{signal:ii(s,$i(e,{expr:i,binSuffix:\"end\"}),t,n,o)}}return{signal:Zn({formatType:n,format:t,field:s})}}if(n&&(n=void 0),Vi(e)){const n=function(e,t,n,i,r,o=!1){return!t||n?(n=a(n)?n:i)||o?`${r?\"utc\":\"time\"}Format(${e}, '${n}')`:void 0:Qt(t,e,r)}(s,xi(e)?null===(f=Xt(e.timeUnit))||void 0===f?void 0:f.unit:void 0,t,g,l,!u);return n?{signal:n}:void 0}if(!u){if(t=ei(Oi(e),t,o),xi(e)&&Ot(e.bin)){return{signal:ii(s,$i(e,{expr:i,binSuffix:\"end\"}),t,n,o)}}return t||\"quantitative\"===Oi(e)?{signal:`${ti(s,t)}`}:{signal:`isValid(${s}) ? ${s} : \"\"+${s}`}}}function ei(e,t,n){return a(t)?t:\"quantitative\"===e?n.numberFormat:void 0}function ti(e,t){return`format(${e}, \"${t||\"\"}\")`}function ni(e,t,n,i){var r;return Xn(n)?Zn({formatType:n,field:e,format:t}):ti(e,null!==(r=a(t)?t:void 0)&&void 0!==r?r:i.numberFormat)}function ii(e,t,n,i,r){const o=ni(e,n,i,r),s=ni(t,n,i,r);return`${mn(e,!1)} ? \"null\" : ${o} + \" – \" + ${s}`}const ri=\"min\",oi={x:1,y:1,color:1,fill:1,stroke:1,strokeWidth:1,size:1,shape:1,fillOpacity:1,strokeOpacity:1,opacity:1,text:1};function si(e){return!!oi[e]}function ai(e){return!!e&&!!e.encoding}function ui(e){return!(!e||\"count\"!==e.op&&!e.field)}function ci(e){return!!e&&o(e)}function li(e){return\"row\"in e||\"column\"in e}function di(e){return!!e&&\"header\"in e}function fi(e){return\"facet\"in e}function gi(e){const{field:t,timeUnit:n,bin:i,aggregate:r}=e;return Object.assign(Object.assign(Object.assign(Object.assign({},n?{timeUnit:n}:{}),i?{bin:i}:{}),r?{aggregate:r}:{}),{field:t})}function pi(e){return Di(e)&&\"sort\"in e}function mi({channel:e,fieldDef:t,fieldDef2:n,markDef:i,stack:r,config:o,isMidPoint:s}){if(ji(t)&&void 0!==t.band)return t.band;if(xi(t)){const{timeUnit:e,bin:r}=t;if(e&&!n)return s?rr(\"timeUnitBandPosition\",i,o):pe(i.type)?rr(\"timeUnitBand\",i,o):0;if(Ot(r))return pe(i.type)&&!s?1:.5}return(null==r?void 0:r.fieldChannel)===e&&s?.5:void 0}function hi(e,t,n,i,r,o){return!!(Ot(t.bin)||t.timeUnit&&Di(t)&&\"temporal\"===t.type)&&!!mi({channel:e,fieldDef:t,fieldDef2:n,stack:i,markDef:r,config:o})}function bi(e){return!!e&&\"condition\"in e}function vi(e){const t=e&&e.condition;return!!t&&!o(t)&&xi(t)}function yi(e){const t=e&&e.condition;return!!t&&!o(t)&&ji(t)}function xi(e){return!(!e||!e.field&&\"count\"!==e.aggregate)}function Oi(e){return e&&e.type}function Ai(e){return!!e&&\"datum\"in e}function wi(e){return Di(e)&&_i(e)||Fi(e)}function Fi(e){return Ai(e)&&x(e.datum)}function ji(e){return xi(e)||Ai(e)}function Di(e){return!!e&&(\"field\"in e&&\"type\"in e||\"count\"===e.aggregate)}function Ci(e){return e&&\"value\"in e&&\"value\"in e}function ki(e){return!!e&&(\"scale\"in e||\"sort\"in e)}function Ei(e){return e&&(\"axis\"in e||\"stack\"in e||\"impute\"in e)}function Si(e){return!!e&&\"format\"in e}function $i(e,t={}){var n,i,o;let s=e.field;const a=t.prefix;let c=t.suffix,l=\"\";if(function(e){return\"count\"===e.aggregate}(e))s=function(e){return function(e){return 0===e.indexOf(\"__\")}(e)?e:`__${e}`}(\"count\");else{let r;if(!t.nofn)if(function(e){return\"op\"in e}(e))r=e.op;else{const{bin:a,aggregate:u,timeUnit:d}=e;Ot(a)?(r=xt(a),c=(null!==(n=t.binSuffix)&&void 0!==n?n:\"\")+(null!==(i=t.suffix)&&void 0!==i?i:\"\")):u?Ce(u)?(l=`.${s}`,s=`argmax_${u.argmax}`):De(u)?(l=`.${s}`,s=`argmin_${u.argmin}`):r=String(u):d&&(r=function(e){const t=Xt(e),{utc:n}=t,i=A(t,[\"utc\"]);return i.unit?(n?\"utc\":\"\")+I(i).map(e=>Y(`${\"unit\"===e?\"\":`_${e}_`}${i[e]}`)).join(\"\"):(n?\"utc\":\"\")+\"timeunit\"+I(i).map(e=>Y(`_${e}_${i[e]}`)).join(\"\")}(d),c=(!z([\"range\",\"mid\"],t.binSuffix)&&t.binSuffix||\"\")+(null!==(o=t.suffix)&&void 0!==o?o:\"\"))}r&&(s=s?`${r}_${s}`:r)}return c&&(s=`${s}_${c}`),a&&(s=`${a}_${s}`),t.forAs?s:t.expr?function(e,t=\"datum\"){return`${t}[${u(r(e).join(\".\"))}]`}(s,t.expr)+l:K(s)+l}function Bi(e){switch(e.type){case\"nominal\":case\"ordinal\":case\"geojson\":return!0;case\"quantitative\":return xi(e)&&!!e.bin;case\"temporal\":return!1}throw new Error(Dt.invalidFieldType(e.type))}function _i(e){return!Bi(e)}const Ni=(e,t)=>{switch(t.fieldTitle){case\"plain\":return e.field;case\"functional\":return function(e){const{aggregate:t,bin:n,timeUnit:i,field:r}=e;if(Ce(t))return`${r} for argmax(${t.argmax})`;if(De(t))return`${r} for argmin(${t.argmin})`;const o=Xt(i),s=t||(null==o?void 0:o.unit)||(null==o?void 0:o.maxbins)&&\"timeunit\"||Ot(n)&&\"bin\";return s?s.toUpperCase()+\"(\"+r+\")\":r}(e);default:return function(e,t){var n;const{field:i,bin:r,timeUnit:o,aggregate:s}=e;if(\"count\"===s)return t.countTitle;if(Ot(r))return`${i} (binned)`;if(o){const e=null===(n=Xt(o))||void 0===n?void 0:n.unit;if(e)return`${i} (${Yt(e).join(\"-\")})`}else if(s)return Ce(s)?`${i} for max ${s.argmax}`:De(s)?`${i} for min ${s.argmin}`:`${Q(s)} of ${i}`;return i}(e,t)}};let Ti=Ni;function zi(e){Ti=e}function Pi(e,t,{allowDisabling:n,includeDefault:i=!0}){var r,o;const s=(null!==(r=Li(e))&&void 0!==r?r:{}).title;if(!xi(e))return s;const a=e,u=i?Ui(a,t):void 0;return n?ne(s,a.title,u):null!==(o=null!=s?s:a.title)&&void 0!==o?o:u}function Li(e){return Ei(e)&&e.axis?e.axis:(t=e)&&\"legend\"in t&&e.legend?e.legend:di(e)&&e.header?e.header:void 0;var t}function Ui(e,t){return Ti(e,t)}function Ri(e){var t;if(Si(e)){const{format:t,formatType:n}=e;return{format:t,formatType:n}}{const n=null!==(t=Li(e))&&void 0!==t?t:{},{format:i,formatType:r}=n;return{format:i,formatType:r}}}function Mi(e){return xi(e)?e:vi(e)?e.condition:void 0}function qi(e){return ji(e)?e:yi(e)?e.condition:void 0}function Wi(e,t){if(a(e)||x(e)||y(e)){const n=a(e)?\"string\":x(e)?\"number\":\"boolean\";return $t(Dt.primitiveChannelDef(t,n,e)),{value:e}}return ji(e)?Ii(e,t):yi(e)?Object.assign(Object.assign({},e),{condition:Ii(e.condition,t)}):e}function Ii(e,t){return xi(e)?Hi(e,t):function(e){let t=e.type;if(t)return e;const{datum:n}=e;return t=x(n)?\"quantitative\":a(n)?\"nominal\":Bt(n)?\"temporal\":void 0,Object.assign(Object.assign({},e),{type:t})}(e)}function Hi(e,t){const{aggregate:n,timeUnit:i,bin:r,field:o}=e,s=Object.assign({},e);if(!n||ke(n)||Ce(n)||De(n)||($t(Dt.invalidAggregate(n)),delete s.aggregate),i&&(s.timeUnit=Xt(i)),o&&(s.field=`${o}`),Ot(r)&&(s.bin=Gi(r,t)),At(r)&&!z(ut,t)&&$t(`Channel ${t} should not be used with \"binned\" bin.`),Di(s)){const{type:e}=s,t=function(e){if(e)switch(e=e.toLowerCase()){case\"q\":case\"quantitative\":return\"quantitative\";case\"t\":case\"temporal\":return\"temporal\";case\"o\":case\"ordinal\":return\"ordinal\";case\"n\":case\"nominal\":return\"nominal\";case\"geojson\":return\"geojson\"}}(e);e!==t&&(s.type=t),\"quantitative\"!==e&&Se(n)&&($t(Dt.invalidFieldTypeForCountAggregate(e,n)),s.type=\"quantitative\")}else if(!et(t)){const e=function(e,t){if(e.timeUnit)return\"temporal\";if(Ot(e.bin))return\"quantitative\";switch(yt(t)){case\"continuous\":return\"quantitative\";case\"discrete\":case\"flexible\":return\"nominal\";default:return\"quantitative\"}}(s,t);$t(Dt.missingFieldType(t,e)),s.type=e}if(Di(s)){const{compatible:e,warning:n}=function(e,t){const n=e.type;if(\"geojson\"===n&&\"shape\"!==t)return{compatible:!1,warning:`Channel ${t} should not be used with a geojson data.`};switch(t){case\"row\":case\"column\":case\"facet\":return _i(e)?{compatible:!1,warning:Dt.facetChannelShouldBeDiscrete(t)}:Yi;case\"x\":case\"y\":case\"color\":case\"fill\":case\"stroke\":case\"text\":case\"detail\":case\"key\":case\"tooltip\":case\"href\":case\"url\":case\"angle\":case\"theta\":case\"radius\":return Yi;case\"longitude\":case\"longitude2\":case\"latitude\":case\"latitude2\":return\"quantitative\"!==n?{compatible:!1,warning:`Channel ${t} should be used with a quantitative field only, not ${e.type} field.`}:Yi;case\"opacity\":case\"fillOpacity\":case\"strokeOpacity\":case\"strokeWidth\":case\"size\":case\"theta2\":case\"radius2\":case\"x2\":case\"y2\":return\"nominal\"!==n||e.sort?Yi:{compatible:!1,warning:`Channel ${t} should not be used with an unsorted discrete field.`};case\"strokeDash\":return z([\"ordinal\",\"nominal\"],e.type)?Yi:{compatible:!1,warning:\"StrokeDash channel should be used with only discrete data.\"};case\"shape\":return z([\"ordinal\",\"nominal\",\"geojson\"],e.type)?Yi:{compatible:!1,warning:\"Shape channel should be used with only either discrete or geojson data.\"};case\"order\":return\"nominal\"!==e.type||\"sort\"in e?Yi:{compatible:!1,warning:\"Channel order is inappropriate for nominal field, which has no inherent order.\"}}}(s,t);e||$t(n)}if(pi(s)&&a(s.sort)){const{sort:e}=s;if(si(e))return Object.assign(Object.assign({},s),{sort:{encoding:e}});const t=e.substr(1);if(\"-\"===e.charAt(0)&&si(t))return Object.assign(Object.assign({},s),{sort:{encoding:t,order:\"descending\"}})}if(di(s)){const{header:e}=s,{orient:t}=e,n=A(e,[\"orient\"]);if(t)return Object.assign(Object.assign({},s),{header:Object.assign(Object.assign({},n),{labelOrient:e.labelOrient||t,titleOrient:e.titleOrient||t})})}return s}function Gi(e,t){return y(e)?{maxbins:jt(t)}:\"binned\"===e?{binned:!0}:e.maxbins||e.step?e:Object.assign(Object.assign({},e),{maxbins:jt(t)})}const Yi={compatible:!0};function Vi(e){const t=Li(e),n=t&&t.formatType||Si(e)&&e.formatType;return\"time\"===n||!n&&((i=e)&&(\"temporal\"===i.type||xi(i)&&!!i.timeUnit));var i}function Ji(e){const t=Li(e),n=t&&t.formatType||Si(e)&&e.formatType;return n&&Xn(n)}function Qi(e,{timeUnit:t,type:n,time:i,undefinedIfExprNotRequired:r}){var o;const s=t&&(null===(o=Xt(t))||void 0===o?void 0:o.unit);let u;if(Kt(e)){const t=e.signal;if(i&&!s&&\"temporal\"!==n)return i?`isDate(${t}) ? time(${t}) : ${t}`:t;u=t}else Bt(e)?u=Lt(e):(a(e)||x(e))&&(s||\"temporal\"===n)&&(u=function(e){return!!Rt[e]}(s)?Lt({[s]:e}):`datetime(${JSON.stringify(e)})`);return u?i?`time(${u})`:u:r?void 0:JSON.stringify(e)}function Xi(e,t){const{type:n}=e;return t.map(t=>{const i=Qi(t,{timeUnit:xi(e)?e.timeUnit:void 0,type:n,undefinedIfExprNotRequired:!0});return void 0!==i?{signal:i}:t})}function Zi(e,t){return Ot(e.bin)?mt(t)&&z([\"ordinal\",\"nominal\"],e.type):(console.warn(\"Only call this method for binned field defs.\"),!1)}function Ki(e){const{anchor:t,frame:n,offset:i,orient:r,color:o,subtitleColor:s,subtitleFont:a,subtitleFontSize:u,subtitleFontStyle:c,subtitleFontWeight:l,subtitleLineHeight:d,subtitlePadding:f}=e,g=A(e,[\"anchor\",\"frame\",\"offset\",\"orient\",\"color\",\"subtitleColor\",\"subtitleFont\",\"subtitleFontSize\",\"subtitleFontStyle\",\"subtitleFontWeight\",\"subtitleLineHeight\",\"subtitlePadding\"]);return{mark:Object.assign(Object.assign({},g),o?{fill:o}:{}),nonMark:Object.assign(Object.assign(Object.assign(Object.assign({},t?{anchor:t}:{}),n?{frame:n}:{}),i?{offset:i}:{}),r?{orient:r}:{}),subtitle:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},s?{subtitleColor:s}:{}),a?{subtitleFont:a}:{}),u?{subtitleFontSize:u}:{}),c?{subtitleFontStyle:c}:{}),l?{subtitleFontWeight:l}:{}),d?{subtitleLineHeight:d}:{}),f?{subtitlePadding:f}:{})}}function er(e){return a(e)||o(e)&&a(e[0])}function tr(e){return Kt(e)?e:void 0!==e?{value:e}:void 0}function nr(e){var t;return[].concat(e.type,null!==(t=e.style)&&void 0!==t?t:[])}function ir(e,t,n,i={}){const{vgChannel:r,ignoreVgConfig:o}=i;return r&&void 0!==t[r]?t[r]:void 0!==t[e]?t[e]:!o||r&&r!==e?rr(e,t,n,i):void 0}function rr(e,t,n,{vgChannel:i}={}){return ne(i?or(e,t,n.style):void 0,or(e,t,n.style),i?n[t.type][i]:void 0,n[t.type][e],i?n.mark[i]:n.mark[e])}function or(e,t,n){return sr(e,nr(t),n)}function sr(e,t,n){let i;t=h(t);for(const r of t){const t=n[r];t&&void 0!==t[e]&&(i=t[e])}return i}function ar(e,t){return h(e).reduce((e,n)=>{var i;return e.field.push($i(n,t)),e.order.push(null!==(i=n.sort)&&void 0!==i?i:\"ascending\"),e},{field:[],order:[]})}function ur(e,t){const n=[...e];return t.forEach(e=>{for(const t of n)if(E(t,e))return;n.push(e)}),n}function cr(e,t){return E(e,t)||!t?e:e?[...h(e),...h(t)].join(\", \"):t}function lr(e,t){const n=e.value,i=t.value;if(null==n||null===i)return{explicit:e.explicit,value:null};if(er(n)&&er(i))return{explicit:e.explicit,value:cr(n,i)};if(!er(n)&&!er(i))return{explicit:e.explicit,value:ur(n,i)};throw new Error(\"It should never reach here\")}function dr(e,t){const n=e&&e[t];return!!n&&(o(n)?P(n,e=>!!e.field):xi(n)||vi(n))}function fr(e){return P(Je,t=>{if(dr(e,t)){const n=e[t];if(o(n))return P(n,e=>!!e.aggregate);{const e=Mi(n);return e&&!!e.aggregate}}return!1})}function gr(e,t){const n=[],i=[],r=[],o=[],s={};return hr(e,(a,u)=>{if(xi(a)){const{field:c,aggregate:l,bin:d,timeUnit:f}=a,g=A(a,[\"field\",\"aggregate\",\"bin\",\"timeUnit\"]);if(l||f||d){const e=Li(a),p=e&&e.title;let m=$i(a,{forAs:!0});const h=Object.assign(Object.assign(Object.assign({},p?[]:{title:Pi(a,t,{allowDisabling:!0})}),g),{field:m});if(l){let e;if(Ce(l)?(e=\"argmax\",m=$i({op:\"argmax\",field:l.argmax},{forAs:!0}),h.field=`${m}.${c}`):De(l)?(e=\"argmin\",m=$i({op:\"argmin\",field:l.argmin},{forAs:!0}),h.field=`${m}.${c}`):\"boxplot\"!==l&&\"errorbar\"!==l&&\"errorband\"!==l&&(e=l),e){const t={op:e,as:m};c&&(t.field=c),o.push(t)}}else if(n.push(m),Di(a)&&Ot(d)){if(i.push({bin:d,field:c,as:m}),n.push($i(a,{binSuffix:\"end\"})),Zi(a,u)&&n.push($i(a,{binSuffix:\"range\"})),ct(u)){const e={field:m+\"_end\"};s[u+\"2\"]=e}h.bin=\"binned\",et(u)||(h.type=\"quantitative\")}else if(f){r.push({timeUnit:f,field:c,as:m});const e=Di(a)&&\"temporal\"!==a.type&&\"time\";e&&(\"text\"===u||\"tooltip\"===u?h.formatType=e:!function(e){return!!ot[e]}(u)?ct(u)&&(h.axis=Object.assign({formatType:e},h.axis)):h.legend=Object.assign({formatType:e},h.legend))}s[u]=h}else n.push(c),s[u]=e[u]}else s[u]=e[u]}),{bins:i,timeUnits:r,aggregate:o,groupby:n,encoding:s}}function pr(e,t){const n=t.type;return I(e).reduce((i,r)=>{if(!Ze(r))return $t(Dt.invalidEncodingChannel(r)),i;const s=e[r];if(\"angle\"!==r||\"arc\"!==n||e.theta||($t(Dt.REPLACE_ANGLE_WITH_THETA),r=\"theta\"),!function(e,t,n){const i=ht(t,n);if(!i)return!1;if(\"binned\"===i){const n=e[\"x2\"===t?\"x\":\"y\"];return!!(xi(n)&&xi(e[t])&&At(n.bin))}return!0}(e,r,n))return $t(Dt.incompatibleChannel(r,n)),i;if(\"size\"===r&&\"line\"===n){const t=Mi(e[r]);if(null==t?void 0:t.aggregate)return $t(Dt.LINE_WITH_VARYING_SIZE),i}if(\"color\"===r&&(t.filled?\"fill\"in e:\"stroke\"in e))return $t(Dt.droppingColor(\"encoding\",{fill:\"fill\"in e,stroke:\"stroke\"in e})),i;if(\"detail\"===r||\"order\"===r&&!o(s)&&!Ci(s)||\"tooltip\"===r&&o(s))s&&(i[r]=h(s).reduce((e,t)=>(xi(t)?e.push(Hi(t,r)):$t(Dt.emptyFieldDef(t,r)),e),[]));else{if(\"tooltip\"===r&&null===s)i[r]=null;else if(!(xi(s)||Ai(s)||Ci(s)||bi(s)||Kt(s)))return $t(Dt.emptyFieldDef(s,r)),i;i[r]=Wi(s,r)}return i},{})}function mr(e){const t=[];for(const n of I(e))if(dr(e,n)){const i=h(e[n]);for(const e of i)xi(e)?t.push(e):vi(e)&&t.push(e.condition)}return t}function hr(e,t,n){if(e)for(const i of I(e)){const r=e[i];if(o(r))for(const e of r)t.call(n,e,i);else t.call(n,r,i)}}function br(e,t,n,i){return e?I(e).reduce((n,r)=>{const s=e[r];return o(s)?s.reduce((e,n)=>t.call(i,e,n,r),n):t.call(i,n,s,r)},n):n}function vr(e,t){return I(t).reduce((n,i)=>{switch(i){case\"x\":case\"y\":case\"href\":case\"url\":case\"x2\":case\"y2\":case\"theta\":case\"theta2\":case\"radius\":case\"radius2\":case\"latitude\":case\"longitude\":case\"latitude2\":case\"longitude2\":case\"text\":case\"shape\":case\"angle\":case\"tooltip\":return n;case\"order\":if(\"line\"===e||\"trail\"===e)return n;case\"detail\":case\"key\":{const e=t[i];if(o(e)||xi(e))for(const t of h(e))t.aggregate||n.push($i(t,{}));return n}case\"size\":if(\"trail\"===e)return n;case\"color\":case\"fill\":case\"stroke\":case\"opacity\":case\"fillOpacity\":case\"strokeOpacity\":case\"strokeDash\":case\"strokeWidth\":{const e=Mi(t[i]);return e&&!e.aggregate&&n.push($i(e,{})),n}}},[])}function yr(e,t,n,i=!0){if(\"tooltip\"in n)return{tooltip:n.tooltip};return{tooltip:[...e.map(({fieldPrefix:e,titlePrefix:n})=>{const r=i?` of ${t.field}`:\"\";return{field:e+t.field,type:t.type,title:Kt(n)?{signal:n+`\"${escape(r)}\"`}:n+r}}),...mr(n)]}}function xr(e){const{axis:t,title:n,field:i}=e;return t&&void 0!==t.title?void 0:ne(n,i)}function Or(e,t,n,i,r){const{scale:o,axis:s}=n;return({partName:u,mark:c,positionPrefix:l,endPositionPrefix:d,extraEncoding:f={}})=>{const g=xr(n);return Ar(e,u,r,{mark:c,encoding:Object.assign(Object.assign(Object.assign({[t]:Object.assign(Object.assign(Object.assign({field:l+\"_\"+n.field,type:n.type},void 0!==g?{title:g}:{}),void 0!==o?{scale:o}:{}),void 0!==s?{axis:s}:{})},a(d)?{[t+\"2\"]:{field:d+\"_\"+n.field}}:{}),i),f)})}}function Ar(e,t,n,i){const{clip:r,color:o,opacity:s}=e,a=e.type;return e[t]||void 0===e[t]&&n[t]?[Object.assign(Object.assign({},i),{mark:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},n[t]),r?{clip:r}:{}),o?{color:o}:{}),s?{opacity:s}:{}),he(i.mark)?i.mark:{type:i.mark}),{style:`${a}-${t}`}),y(e[t])?{}:e[t])})]:[]}function wr(e,t,n){const{encoding:i}=e,r=\"vertical\"===t?\"y\":\"x\",o=i[r],s=i[r+\"2\"],a=i[r+\"Error\"],u=i[r+\"Error2\"];return{continuousAxisChannelDef:Fr(o,n),continuousAxisChannelDef2:Fr(s,n),continuousAxisChannelDefError:Fr(a,n),continuousAxisChannelDefError2:Fr(u,n),continuousAxis:r}}function Fr(e,t){if(e&&e.aggregate){const{aggregate:n}=e,i=A(e,[\"aggregate\"]);return n!==t&&$t(Dt.errorBarContinuousAxisHasCustomizedAggregate(n,t)),i}return e}function jr(e,t){const{mark:n,encoding:i}=e,{x:r,y:o}=i;if(wi(r)){if(wi(o)){const e=xi(r)&&r.aggregate,i=xi(o)&&o.aggregate;if(e||i!==t){if(i||e!==t){if(e===t&&i===t)throw new Error(\"Both x and y cannot have aggregate\");return he(n)&&n.orient?n.orient:\"vertical\"}return\"horizontal\"}return\"vertical\"}return\"horizontal\"}if(wi(o))return\"vertical\";throw new Error(\"Need a valid continuous axis for \"+t+\"s\")}const Dr=I({box:1,median:1,outliers:1,rule:1,ticks:1}),Cr=new we(\"boxplot\",Er);function kr(e){return x(e)?\"tukey\":e}function Er(e,{config:t}){var n,i;const{mark:r,encoding:a,selection:u,projection:c}=e,l=A(e,[\"mark\",\"encoding\",\"selection\",\"projection\"]),d=he(r)?r:{type:r};u&&$t(Dt.selectionNotSupported(\"boxplot\"));const f=null!==(n=d.extent)&&void 0!==n?n:t.boxplot.extent,g=ir(\"size\",d,t),p=kr(f),{transform:m,continuousAxisChannelDef:h,continuousAxis:b,groupby:v,aggregate:y,encodingWithoutContinuousAxis:x,ticksOrient:O,boxOrient:w,customTooltipWithoutAggregatedField:F}=function(e,t,n){const i=jr(e,\"boxplot\"),{continuousAxisChannelDef:r,continuousAxis:s}=wr(e,i,\"boxplot\"),a=r.field,u=kr(t),c=[...Sr(a),{op:\"median\",field:a,as:\"mid_box_\"+a},{op:\"min\",field:a,as:(\"min-max\"===u?\"lower_whisker_\":\"min_\")+a},{op:\"max\",field:a,as:(\"min-max\"===u?\"upper_whisker_\":\"max_\")+a}],l=\"min-max\"===u||\"tukey\"===u?[]:[{calculate:`datum[\"upper_box_${a}\"] - datum[\"lower_box_${a}\"]`,as:\"iqr_\"+a},{calculate:`min(datum[\"upper_box_${a}\"] + datum[\"iqr_${a}\"] * ${t}, datum[\"max_${a}\"])`,as:\"upper_whisker_\"+a},{calculate:`max(datum[\"lower_box_${a}\"] - datum[\"iqr_${a}\"] * ${t}, datum[\"min_${a}\"])`,as:\"lower_whisker_\"+a}],d=e.encoding,f=s,g=(d[f],A(d,[\"symbol\"==typeof f?f:f+\"\"])),{customTooltipWithoutAggregatedField:p,filteredEncoding:m}=function(e){const{tooltip:t}=e,n=A(e,[\"tooltip\"]);if(!t)return{filteredEncoding:e};let i,r;if(o(t)){for(const e of t)e.aggregate?(i||(i=[]),i.push(e)):(r||(r=[]),r.push(e));i&&(n.tooltip=i)}else t.aggregate?n.tooltip=t:r=t;return o(r)&&1===r.length&&(r=r[0]),{customTooltipWithoutAggregatedField:r,filteredEncoding:n}}(g),{bins:h,timeUnits:b,aggregate:v,groupby:y,encoding:x}=gr(m,n),O=\"vertical\"===i?\"horizontal\":\"vertical\",w=i;return{transform:[...h,...b,{aggregate:[...v,...c],groupby:y},...l],groupby:y,aggregate:v,continuousAxisChannelDef:r,continuousAxis:s,encodingWithoutContinuousAxis:x,ticksOrient:O,boxOrient:w,customTooltipWithoutAggregatedField:p}}(e,f,t),{color:j,size:D}=x,C=A(x,[\"color\",\"size\"]),k=e=>Or(d,b,h,e,t.boxplot),E=k(C),S=k(x),$=k(Object.assign(Object.assign({},C),D?{size:D}:{})),B=yr([{fieldPrefix:\"min-max\"===p?\"upper_whisker_\":\"max_\",titlePrefix:\"Max\"},{fieldPrefix:\"upper_box_\",titlePrefix:\"Q3\"},{fieldPrefix:\"mid_box_\",titlePrefix:\"Median\"},{fieldPrefix:\"lower_box_\",titlePrefix:\"Q1\"},{fieldPrefix:\"min-max\"===p?\"lower_whisker_\":\"min_\",titlePrefix:\"Min\"}],h,x),_={type:\"tick\",color:\"black\",opacity:1,orient:O,invalid:null},N=\"min-max\"===p?B:yr([{fieldPrefix:\"upper_whisker_\",titlePrefix:\"Upper Whisker\"},{fieldPrefix:\"lower_whisker_\",titlePrefix:\"Lower Whisker\"}],h,x),T=[...E({partName:\"rule\",mark:{type:\"rule\",invalid:null},positionPrefix:\"lower_whisker\",endPositionPrefix:\"lower_box\",extraEncoding:N}),...E({partName:\"rule\",mark:{type:\"rule\",invalid:null},positionPrefix:\"upper_box\",endPositionPrefix:\"upper_whisker\",extraEncoding:N}),...E({partName:\"ticks\",mark:_,positionPrefix:\"lower_whisker\",extraEncoding:N}),...E({partName:\"ticks\",mark:_,positionPrefix:\"upper_whisker\",extraEncoding:N})],z=[...\"tukey\"!==p?T:[],...S({partName:\"box\",mark:Object.assign(Object.assign({type:\"bar\"},g?{size:g}:{}),{orient:w,invalid:null}),positionPrefix:\"lower_box\",endPositionPrefix:\"upper_box\",extraEncoding:B}),...$({partName:\"median\",mark:Object.assign(Object.assign(Object.assign({type:\"tick\",invalid:null},s(t.boxplot.median)&&t.boxplot.median.color?{color:t.boxplot.median.color}:{}),g?{size:g}:{}),{orient:O}),positionPrefix:\"mid_box\",extraEncoding:B})];let P;if(\"min-max\"!==p){const e=`datum[\"lower_box_${h.field}\"]`,n=`datum[\"upper_box_${h.field}\"]`,i=`(${n} - ${e})`,r=`${e} - ${f} * ${i}`,o=`${n} + ${f} * ${i}`,s=`datum[\"${h.field}\"]`,a={joinaggregate:Sr(h.field),groupby:v};let u=void 0;\"tukey\"===p&&(u={transform:[{filter:`(${r} <= ${s}) && (${s} <= ${o})`},{aggregate:[{op:\"min\",field:h.field,as:\"lower_whisker_\"+h.field},{op:\"max\",field:h.field,as:\"upper_whisker_\"+h.field},{op:\"min\",field:\"lower_box_\"+h.field,as:\"lower_box_\"+h.field},{op:\"max\",field:\"upper_box_\"+h.field,as:\"upper_box_\"+h.field},...y],groupby:v}],layer:T});const c=A(C,[\"tooltip\"]),{scale:l,axis:g}=h,m=xr(h),x=Ar(d,\"outliers\",t.boxplot,{transform:[{filter:`(${s} < ${r}) || (${s} > ${o})`}],mark:\"point\",encoding:Object.assign(Object.assign({[b]:Object.assign(Object.assign(Object.assign({field:h.field,type:h.type},void 0!==m?{title:m}:{}),void 0!==l?{scale:l}:{}),void 0!==g?{axis:g}:{})},c),F?{tooltip:F}:{})})[0];x&&u?P={transform:[a],layer:[x,u]}:x?(P=x,P.transform.unshift(a)):u&&(P=u,P.transform.unshift(a))}return P?Object.assign(Object.assign({},l),{layer:[P,{transform:m,layer:z}]}):Object.assign(Object.assign({},l),{transform:(null!==(i=l.transform)&&void 0!==i?i:[]).concat(m),layer:z})}function Sr(e){return[{op:\"q1\",field:e,as:\"lower_box_\"+e},{op:\"q3\",field:e,as:\"upper_box_\"+e}]}const $r=I({ticks:1,rule:1}),Br=new we(\"errorbar\",_r);function _r(e,{config:t}){const{transform:n,continuousAxisChannelDef:i,continuousAxis:r,encodingWithoutContinuousAxis:o,ticksOrient:s,markDef:a,outerSpec:u,tooltipEncoding:c}=Tr(e,\"errorbar\",t),l=Or(a,r,i,o,t.errorbar),d={type:\"tick\",orient:s},f=[...l({partName:\"ticks\",mark:d,positionPrefix:\"lower\",extraEncoding:c}),...l({partName:\"ticks\",mark:d,positionPrefix:\"upper\",extraEncoding:c}),...l({partName:\"rule\",mark:\"rule\",positionPrefix:\"lower\",endPositionPrefix:\"upper\",extraEncoding:c})];return Object.assign(Object.assign(Object.assign({},u),{transform:n}),f.length>1?{layer:f}:Object.assign({},f[0]))}function Nr(e,t){const{encoding:n}=e;if(function(e){return(ji(e.x)||ji(e.y))&&!ji(e.x2)&&!ji(e.y2)&&!ji(e.xError)&&!ji(e.xError2)&&!ji(e.yError)&&!ji(e.yError2)}(n))return{orient:jr(e,t),inputType:\"raw\"};const i=function(e){return ji(e.x2)||ji(e.y2)}(n),r=function(e){return ji(e.xError)||ji(e.xError2)||ji(e.yError)||ji(e.yError2)}(n),o=n.x,s=n.y;if(i){if(r)throw new Error(`${t} cannot be both type aggregated-upper-lower and aggregated-error`);const e=n.x2,i=n.y2;if(ji(e)&&ji(i))throw new Error(`${t} cannot have both x2 and y2`);if(ji(e)){if(wi(o))return{orient:\"horizontal\",inputType:\"aggregated-upper-lower\"};throw new Error(`Both x and x2 have to be quantitative in ${t}`)}if(ji(i)){if(wi(s))return{orient:\"vertical\",inputType:\"aggregated-upper-lower\"};throw new Error(`Both y and y2 have to be quantitative in ${t}`)}throw new Error(\"No ranged axis\")}{const e=n.xError,i=n.xError2,r=n.yError,a=n.yError2;if(ji(i)&&!ji(e))throw new Error(`${t} cannot have xError2 without xError`);if(ji(a)&&!ji(r))throw new Error(`${t} cannot have yError2 without yError`);if(ji(e)&&ji(r))throw new Error(`${t} cannot have both xError and yError with both are quantiative`);if(ji(e)){if(wi(o))return{orient:\"horizontal\",inputType:\"aggregated-error\"};throw new Error(\"All x, xError, and xError2 (if exist) have to be quantitative\")}if(ji(r)){if(wi(s))return{orient:\"vertical\",inputType:\"aggregated-error\"};throw new Error(\"All y, yError, and yError2 (if exist) have to be quantitative\")}throw new Error(\"No ranged axis\")}}function Tr(e,t,n){var i;const{mark:r,encoding:o,selection:s,projection:a}=e,u=A(e,[\"mark\",\"encoding\",\"selection\",\"projection\"]),c=he(r)?r:{type:r};s&&$t(Dt.selectionNotSupported(t));const{orient:l,inputType:d}=Nr(e,t),{continuousAxisChannelDef:f,continuousAxisChannelDef2:g,continuousAxisChannelDefError:p,continuousAxisChannelDefError2:m,continuousAxis:h}=wr(e,l,t),{errorBarSpecificAggregate:b,postAggregateCalculates:v,tooltipSummary:y,tooltipTitleWithFieldName:x}=function(e,t,n,i,r,o,s,a){let u=[],c=[];const l=t.field;let d,f=!1;if(\"raw\"===o){const t=e.center?e.center:e.extent?\"iqr\"===e.extent?\"median\":\"mean\":a.errorbar.center,n=e.extent?e.extent:\"mean\"===t?\"stderr\":\"iqr\";if(\"median\"===t!=(\"iqr\"===n)&&$t(Dt.errorBarCenterIsUsedWithWrongExtent(t,n,s)),\"stderr\"===n||\"stdev\"===n)u=[{op:n,field:l,as:\"extent_\"+l},{op:t,field:l,as:\"center_\"+l}],c=[{calculate:`datum[\"center_${l}\"] + datum[\"extent_${l}\"]`,as:\"upper_\"+l},{calculate:`datum[\"center_${l}\"] - datum[\"extent_${l}\"]`,as:\"lower_\"+l}],d=[{fieldPrefix:\"center_\",titlePrefix:Q(t)},{fieldPrefix:\"upper_\",titlePrefix:zr(t,n,\"+\")},{fieldPrefix:\"lower_\",titlePrefix:zr(t,n,\"-\")}],f=!0;else{let t,i,r;e.center&&e.extent&&$t(Dt.errorBarCenterIsNotNeeded(e.extent,s)),\"ci\"===n?(t=\"mean\",i=\"ci0\",r=\"ci1\"):(t=\"median\",i=\"q1\",r=\"q3\"),u=[{op:i,field:l,as:\"lower_\"+l},{op:r,field:l,as:\"upper_\"+l},{op:t,field:l,as:\"center_\"+l}],d=[{fieldPrefix:\"upper_\",titlePrefix:Pi({field:l,aggregate:r,type:\"quantitative\"},a,{allowDisabling:!1})},{fieldPrefix:\"lower_\",titlePrefix:Pi({field:l,aggregate:i,type:\"quantitative\"},a,{allowDisabling:!1})},{fieldPrefix:\"center_\",titlePrefix:Pi({field:l,aggregate:t,type:\"quantitative\"},a,{allowDisabling:!1})}]}}else{(e.center||e.extent)&&$t(Dt.errorBarCenterAndExtentAreNotNeeded(e.center,e.extent)),\"aggregated-upper-lower\"===o?(d=[],c=[{calculate:`datum[\"${n.field}\"]`,as:\"upper_\"+l},{calculate:`datum[\"${l}\"]`,as:\"lower_\"+l}]):\"aggregated-error\"===o&&(d=[{fieldPrefix:\"\",titlePrefix:l}],c=[{calculate:`datum[\"${l}\"] + datum[\"${i.field}\"]`,as:\"upper_\"+l}],r?c.push({calculate:`datum[\"${l}\"] + datum[\"${r.field}\"]`,as:\"lower_\"+l}):c.push({calculate:`datum[\"${l}\"] - datum[\"${i.field}\"]`,as:\"lower_\"+l}));for(const e of c)d.push({fieldPrefix:e.as.substring(0,6),titlePrefix:ee(ee(e.calculate,'datum[\"',\"\"),'\"]',\"\")})}return{postAggregateCalculates:c,errorBarSpecificAggregate:u,tooltipSummary:d,tooltipTitleWithFieldName:f}}(c,f,g,p,m,d,t,n),O=o,w=h,F=(O[w],\"x\"===h?\"x2\":\"y2\"),j=(O[F],\"x\"===h?\"xError\":\"yError\"),D=(O[j],\"x\"===h?\"xError2\":\"yError2\"),C=(O[D],A(O,[\"symbol\"==typeof w?w:w+\"\",\"symbol\"==typeof F?F:F+\"\",\"symbol\"==typeof j?j:j+\"\",\"symbol\"==typeof D?D:D+\"\"])),{bins:k,timeUnits:E,aggregate:S,groupby:$,encoding:B}=gr(C,n),_=[...S,...b],N=\"raw\"!==d?[]:$,T=yr(y,f,B,x);return{transform:[...null!==(i=u.transform)&&void 0!==i?i:[],...k,...E,...0===_.length?[]:[{aggregate:_,groupby:N}],...v],groupby:N,continuousAxisChannelDef:f,continuousAxis:h,encodingWithoutContinuousAxis:B,ticksOrient:\"vertical\"===l?\"horizontal\":\"vertical\",markDef:c,outerSpec:u,tooltipEncoding:T}}function zr(e,t,n){return Q(e)+\" \"+n+\" \"+t}const Pr=I({band:1,borders:1}),Lr=new we(\"errorband\",Ur);function Ur(e,{config:t}){const{transform:n,continuousAxisChannelDef:i,continuousAxis:r,encodingWithoutContinuousAxis:o,markDef:s,outerSpec:a,tooltipEncoding:u}=Tr(e,\"errorband\",t),c=s,l=Or(c,r,i,o,t.errorband),d=void 0!==e.encoding.x&&void 0!==e.encoding.y;let f={type:d?\"area\":\"rect\"},g={type:d?\"line\":\"rule\"};const p=Object.assign(Object.assign({},c.interpolate?{interpolate:c.interpolate}:{}),c.tension&&c.interpolate?{tension:c.tension}:{});return d?(f=Object.assign(Object.assign({},f),p),g=Object.assign(Object.assign({},g),p)):c.interpolate?$t(Dt.errorBand1DNotSupport(\"interpolate\")):c.tension&&$t(Dt.errorBand1DNotSupport(\"tension\")),Object.assign(Object.assign({},a),{transform:n,layer:[...l({partName:\"band\",mark:f,positionPrefix:\"lower\",endPositionPrefix:\"upper\",extraEncoding:u}),...l({partName:\"borders\",mark:g,positionPrefix:\"lower\",extraEncoding:u}),...l({partName:\"borders\",mark:g,positionPrefix:\"upper\",extraEncoding:u})]})}const Rr={};function Mr(e,t,n){const i=new we(e,t);Rr[e]={normalizer:i,parts:n}}Mr(\"boxplot\",Er,Dr),Mr(\"errorbar\",_r,$r),Mr(\"errorband\",Ur,Pr);const qr=[\"gradientHorizontalMaxLength\",\"gradientHorizontalMinLength\",\"gradientVerticalMaxLength\",\"gradientVerticalMinLength\",\"unselectedOpacity\"],Wr=I({size:1,shape:1,fill:1,stroke:1,strokeDash:1,strokeWidth:1,opacity:1}),Ir={fillColor:{part:\"legend\",vgProp:\"fill\"},gradientStrokeColor:{part:\"gradient\",vgProp:\"stroke\"},labelColor:{part:\"labels\",vgProp:\"fill\"},strokeColor:{part:\"legend\",vgProp:\"stroke\"},symbolFillColor:{part:\"symbols\",vgProp:\"fill\"},symbolStrokeColor:{part:\"symbols\",vgProp:\"stroke\"},titleColor:{part:\"title\",vgProp:\"fill\"}},Hr={single:{on:\"click\",fields:[\"_vgsid_\"],resolve:\"global\",empty:\"all\",clear:\"dblclick\"},multi:{on:\"click\",fields:[\"_vgsid_\"],toggle:\"event.shiftKey\",resolve:\"global\",empty:\"all\",clear:\"dblclick\"},interval:{on:\"[mousedown, window:mouseup] > window:mousemove!\",encodings:[\"x\",\"y\"],translate:\"[mousedown, window:mouseup] > window:mousemove!\",zoom:\"wheel!\",mark:{fill:\"#333\",fillOpacity:.125,stroke:\"white\"},resolve:\"global\",clear:\"dblclick\"}};function Gr(e){return!(!e||\"legend\"!==e&&!e.legend)}function Yr(e){return Gr(e)&&s(e)}function Vr(e){return\"concat\"in e}function Jr(e){return\"vconcat\"in e}function Qr(e){return\"hconcat\"in e}function Xr(e){return s(e)&&void 0!==e.step}function Zr(e){return e.view||e.width||e.height}const Kr=I({align:1,bounds:1,center:1,columns:1,spacing:1});function eo(e,t){var n;return null!==(n=e[t])&&void 0!==n?n:e[\"width\"===t?\"continuousWidth\":\"continuousHeight\"]}function to(e,t){const n=no(e,t);return Xr(n)?n.step:io}function no(e,t){var n;return ne(null!==(n=e[t])&&void 0!==n?n:e[\"width\"===t?\"discreteWidth\":\"discreteHeight\"],{step:e.step})}const io=20,ro={background:\"white\",padding:5,timeFormat:\"%b %d, %Y\",countTitle:\"Count of Records\",view:{continuousWidth:200,continuousHeight:200,step:io},mark:{color:\"#4c78a8\",invalid:\"filter\",timeUnitBand:1},arc:{},area:{},bar:xe,circle:{},geoshape:{},image:{},line:{},point:{},rect:Oe,rule:{color:\"black\"},square:{},text:{color:\"black\"},tick:{thickness:1},trail:{},boxplot:{size:14,extent:1.5,box:{},median:{color:\"white\"},outliers:{},rule:{},ticks:null},errorbar:{center:\"mean\",rule:!0,ticks:!1},errorband:{band:{opacity:.3},borders:!1},scale:{pointPadding:.5,barBandPaddingInner:.1,rectBandPaddingInner:0,minBandSize:2,minFontSize:8,maxFontSize:40,minOpacity:.3,maxOpacity:.8,minSize:9,minStrokeWidth:1,maxStrokeWidth:4,quantileCount:4,quantizeCount:4},projection:{},legend:{gradientHorizontalMaxLength:200,gradientHorizontalMinLength:100,gradientVerticalMaxLength:200,gradientVerticalMinLength:64,unselectedOpacity:.35},header:{titlePadding:10,labelPadding:10},headerColumn:{},headerRow:{},headerFacet:{},selection:Hr,style:{},title:{},facet:{spacing:20},concat:{spacing:20}},oo=[\"#4c78a8\",\"#f58518\",\"#e45756\",\"#72b7b2\",\"#54a24b\",\"#eeca3b\",\"#b279a2\",\"#ff9da6\",\"#9d755d\",\"#bab0ac\"],so={text:11,guideLabel:10,guideTitle:11,groupTitle:13,groupSubtitle:12},ao={blue:oo[0],orange:oo[1],red:oo[2],teal:oo[3],green:oo[4],yellow:oo[5],purple:oo[6],pink:oo[7],brown:oo[8],gray0:\"#000\",gray1:\"#111\",gray2:\"#222\",gray3:\"#333\",gray4:\"#444\",gray5:\"#555\",gray6:\"#666\",gray7:\"#777\",gray8:\"#888\",gray9:\"#999\",gray10:\"#aaa\",gray11:\"#bbb\",gray12:\"#ccc\",gray13:\"#ddd\",gray14:\"#eee\",gray15:\"#fff\"};function uo(e={}){const{color:t,font:n,fontSize:i}=e,r=A(e,[\"color\",\"font\",\"fontSize\"]);return g({},ro,n?function(e){return{text:{font:e},style:{\"guide-label\":{font:e},\"guide-title\":{font:e},\"group-title\":{font:e},\"group-subtitle\":{font:e}}}}(n):{},t?function(e={}){return{signals:[{name:\"color\",value:s(e)?Object.assign(Object.assign({},ao),e):ao}],mark:{color:{signal:\"color.blue\"}},rule:{color:{signal:\"color.gray0\"}},text:{color:{signal:\"color.gray0\"}},style:{\"guide-label\":{fill:{signal:\"color.gray0\"}},\"guide-title\":{fill:{signal:\"color.gray0\"}},\"group-title\":{fill:{signal:\"color.gray0\"}},\"group-subtitle\":{fill:{signal:\"color.gray0\"}},cell:{stroke:{signal:\"color.gray8\"}}},axis:{domainColor:{signal:\"color.gray13\"},gridColor:{signal:\"color.gray8\"},tickColor:{signal:\"color.gray13\"}},range:{category:[{signal:\"color.blue\"},{signal:\"color.orange\"},{signal:\"color.red\"},{signal:\"color.teal\"},{signal:\"color.green\"},{signal:\"color.yellow\"},{signal:\"color.purple\"},{signal:\"color.pink\"},{signal:\"color.brown\"},{signal:\"color.grey8\"}]}}}(t):{},i?function(e){return{signals:[{name:\"fontSize\",value:s(e)?Object.assign(Object.assign({},so),e):so}],text:{fontSize:{signal:\"fontSize.text\"}},style:{\"guide-label\":{fontSize:{signal:\"fontSize.guideLabel\"}},\"guide-title\":{fontSize:{signal:\"fontSize.guideTitle\"}},\"group-title\":{fontSize:{signal:\"fontSize.groupTitle\"}},\"group-subtitle\":{fontSize:{signal:\"fontSize.groupSubtitle\"}}}}}(i):{},r||{})}const co=[\"view\",...me],lo=[\"color\",\"fontSize\",\"background\",\"padding\",\"facet\",\"concat\",\"numberFormat\",\"timeFormat\",\"countTitle\",\"header\",\"axisQuantitative\",\"axisTemporal\",\"axisDiscrete\",\"axisPoint\",\"axisXBand\",\"axisXPoint\",\"axisXDiscrete\",\"axisXQuantitative\",\"axisXTemporal\",\"axisYBand\",\"axisYPoint\",\"axisYDiscrete\",\"axisYQuantitative\",\"axisYTemporal\",\"scale\",\"selection\",\"overlay\"],fo=Object.assign({view:[\"continuousWidth\",\"continuousHeight\",\"discreteWidth\",\"discreteHeight\",\"step\"]},{area:[\"line\",\"point\"],bar:[\"binSpacing\",\"continuousBandSize\",\"discreteBandSize\"],rect:[\"binSpacing\",\"continuousBandSize\",\"discreteBandSize\"],line:[\"point\"],tick:[\"bandSize\",\"thickness\"]});function go(e){e=S(e);for(const t of lo)delete e[t];if(e.axis)for(const t in e.axis)ae(e.axis[t])&&delete e.axis[t];if(e.legend)for(const t of qr)delete e.legend[t];if(e.mark)for(const t of ve)delete e.mark[t];for(const t of co){for(const n of ve)delete e[t][n];const n=fo[t];if(n)for(const i of n)delete e[t][i];po(e,t)}for(const t of I(Rr))delete e[t];!function(e){const{mark:t,subtitle:n}=Ki(e.title),i=Object.assign(Object.assign({},e.style[\"group-title\"]),t);I(i).length>0&&(e.style[\"group-title\"]=i);I(n).length>0?e.title=n:delete e.title}(e);for(const t in e)s(e[t])&&0===I(e[t]).length&&delete e[t];return I(e).length>0?e:void 0}function po(e,t,n,i){const r=i?e[t][i]:e[t];\"view\"===t&&(n=\"cell\");const o=Object.assign(Object.assign({},r),e.style[null!=n?n:t]);I(o).length>0&&(e.style[null!=n?n:t]=o),i||delete e[t]}function mo(e){return\"layer\"in e}class ho{map(e,t){return fi(e)?this.mapFacet(e,t):function(e){return\"repeat\"in e}(e)?this.mapRepeat(e,t):Qr(e)?this.mapHConcat(e,t):Jr(e)?this.mapVConcat(e,t):Vr(e)?this.mapConcat(e,t):this.mapLayerOrUnit(e,t)}mapLayerOrUnit(e,t){if(mo(e))return this.mapLayer(e,t);if(Ae(e))return this.mapUnit(e,t);throw new Error(Dt.invalidSpec(e))}mapLayer(e,t){return Object.assign(Object.assign({},e),{layer:e.layer.map(e=>this.mapLayerOrUnit(e,t))})}mapHConcat(e,t){return Object.assign(Object.assign({},e),{hconcat:e.hconcat.map(e=>this.map(e,t))})}mapVConcat(e,t){return Object.assign(Object.assign({},e),{vconcat:e.vconcat.map(e=>this.map(e,t))})}mapConcat(e,t){const{concat:n}=e,i=A(e,[\"concat\"]);return Object.assign(Object.assign({},i),{concat:n.map(e=>this.map(e,t))})}mapFacet(e,t){return Object.assign(Object.assign({},e),{spec:this.map(e.spec,t)})}mapRepeat(e,t){return Object.assign(Object.assign({},e),{spec:this.map(e.spec,t)})}}const bo={zero:1,center:1,normalize:1};const vo=[\"arc\",\"bar\",\"area\",\"rule\",\"point\",\"circle\",\"square\",\"line\",\"text\",\"tick\"],yo=[\"bar\",\"area\",\"arc\"];function xo(e,t,n){var i,r;const o=\"x\"===n?\"y\":\"radius\",s=e[n],a=e[o];if(xi(s)&&xi(a))if(\"quantitative\"===Oi(s)&&\"quantitative\"===Oi(a)){if(s.stack)return n;if(a.stack)return o;const e=xi(s)&&!!s.aggregate;if(e!==(xi(a)&&!!a.aggregate))return e?n:o;{const e=null===(i=s.scale)||void 0===i?void 0:i.type,t=null===(r=a.scale)||void 0===r?void 0:r.type;if(e&&\"linear\"!==e)return o;if(t&&\"linear\"!==t)return n}}else{if(\"quantitative\"===Oi(s))return n;if(\"quantitative\"===Oi(a))return o}else{if(\"quantitative\"===Oi(s))return n;if(\"quantitative\"===Oi(a))return o}}function Oo(e,t,n={}){const i=he(e)?e.type:e;if(!z(vo,i))return null;const r=xo(t,0,\"x\")||xo(t,0,\"theta\");if(!r)return null;const o=t[r],s=xi(o)?$i(o,{}):void 0;let a=function(e){switch(e){case\"x\":return\"y\";case\"y\":return\"x\";case\"theta\":return\"radius\";case\"radius\":return\"theta\"}}(r),u=t[a],c=xi(u)?$i(u,{}):void 0;c===s&&(c=void 0,u=void 0,a=void 0);const l=st.reduce((e,n)=>{if(\"tooltip\"!==n&&dr(t,n)){const i=t[n];for(const t of h(i)){const i=Mi(t);if(i.aggregate)continue;const r=$i(i,{});r&&r===c||e.push({channel:n,fieldDef:i})}}return e},[]);let d;if(void 0!==o.stack?d=y(o.stack)?o.stack?\"zero\":null:o.stack:l.length>0&&z(yo,i)&&(d=\"zero\"),!d||!bo[d])return null;if(fr(t)&&0===l.length)return null;if(o.scale&&o.scale.type&&o.scale.type!==vn.LINEAR){if(n.disallowNonLinearStack)return null;$t(Dt.cannotStackNonLinearScale(o.scale.type))}return ji(t[it(r)])?(void 0!==o.stack&&$t(Dt.cannotStackRangedMark(r)),null):(xi(o)&&o.aggregate&&!z($e,o.aggregate)&&$t(Dt.stackNonSummativeAggregate(o.aggregate)),{groupbyChannel:u?a:void 0,groupbyField:c,fieldChannel:r,impute:null!==o.impute&&ge(i),stackBy:l,offset:d})}function Ao(e){const t=A(e,[\"point\",\"line\"]);return I(t).length>1?t:t.type}function wo(e){for(const t of[\"line\",\"area\",\"rule\",\"trail\"])e[t]&&(e=Object.assign(Object.assign({},e),{[t]:B(e[t],[\"point\",\"line\"])}));return e}function Fo(e,t={},n){return\"transparent\"===e.point?{opacity:0}:e.point?s(e.point)?e.point:{}:void 0!==e.point?null:t.point||n.shape?s(t.point)?t.point:{}:void 0}function jo(e,t={}){return e.line?!0===e.line?{}:e.line:void 0!==e.line?null:t.line?!0===t.line?{}:t.line:void 0}class Do{constructor(){this.name=\"path-overlay\"}hasMatchingType(e,t){if(Ae(e)){const{mark:n,encoding:i}=e,r=he(n)?n:{type:n};switch(r.type){case\"line\":case\"rule\":case\"trail\":return!!Fo(r,t[r.type],i);case\"area\":return!!Fo(r,t[r.type],i)||!!jo(r,t[r.type])}}return!1}run(e,t,n){const{config:i}=t,{selection:r,projection:o,encoding:s,mark:a}=e,u=A(e,[\"selection\",\"projection\",\"encoding\",\"mark\"]),c=he(a)?a:{type:a},l=Fo(c,i[c.type],s),d=\"area\"===c.type&&jo(c,i[c.type]),f=[Object.assign(Object.assign({},r?{selection:r}:{}),{mark:Ao(Object.assign(Object.assign({},\"area\"===c.type&&void 0===c.opacity&&void 0===c.fillOpacity?{opacity:.7}:{}),c)),encoding:B(s,[\"shape\"])})],g=Oo(c,s);let p=s;if(g){const{fieldChannel:e,offset:t}=g;p=Object.assign(Object.assign({},s),{[e]:Object.assign(Object.assign({},s[e]),t?{stack:t}:{})})}return d&&f.push(Object.assign(Object.assign({},o?{projection:o}:{}),{mark:Object.assign(Object.assign({type:\"line\"},$(c,[\"clip\",\"interpolate\",\"tension\",\"tooltip\"])),d),encoding:p})),l&&f.push(Object.assign(Object.assign({},o?{projection:o}:{}),{mark:Object.assign(Object.assign({type:\"point\",opacity:1,filled:!0},$(c,[\"clip\",\"tooltip\"])),l),encoding:p})),n(Object.assign(Object.assign({},u),{layer:f}),Object.assign(Object.assign({},t),{config:wo(i)}))}}class Co{constructor(){this.name=\"RangeStep\"}hasMatchingType(e){var t;if(Ae(e)&&e.encoding)for(const n of ut){const i=e.encoding[n];if(i&&ji(i)&&(null===(t=null==i?void 0:i.scale)||void 0===t?void 0:t.rangeStep))return!0}return!1}run(e){var t;const n={};let i=Object.assign({},e.encoding);for(const e of ut){const r=rt(e),o=i[e];if(o&&ji(o)&&(null===(t=null==o?void 0:o.scale)||void 0===t?void 0:t.rangeStep)){const{scale:t}=o,s=A(o,[\"scale\"]),a=A(t,[\"rangeStep\"]);n[r]={step:t.rangeStep},$t(Dt.RANGE_STEP_DEPRECATED),i=Object.assign(Object.assign({},i),{[e]:Object.assign(Object.assign({},s),I(a).length>0?{scale:a}:{})})}}return Object.assign(Object.assign(Object.assign({},n),e),{encoding:i})}}function ko(e,t){return t?li(e)?No(e,t):$o(e,t):e}function Eo(e,t){return t?No(e,t):e}function So(e,t,n){const i=t[e];return function(e){return e&&!a(e)&&\"repeat\"in e}(i)?i.repeat in n?Object.assign(Object.assign({},t),{[e]:n[i.repeat]}):void $t(Dt.noSuchRepeatedValue(i.repeat)):t}function $o(e,t){if(void 0!==(e=So(\"field\",e,t))){if(null===e)return null;if(pi(e)&&ui(e.sort)){const n=So(\"field\",e.sort,t);e=Object.assign(Object.assign({},e),n?{sort:n}:{})}return e}}function Bo(e,t){if(xi(e))return $o(e,t);{const n=So(\"datum\",e,t);return n===e||n.type||(n.type=\"nominal\"),n}}function _o(e,t){if(!ji(e)){if(yi(e)){const n=Bo(e.condition,t);if(n)return Object.assign(Object.assign({},e),{condition:n});return A(e,[\"condition\"])}return e}{const n=Bo(e,t);if(n)return n;if(bi(e))return{condition:e.condition}}}function No(e,t){const n={};for(const i in e)if(v(e,i)){const r=e[i];if(o(r))n[i]=r.map(e=>_o(e,t)).filter(e=>e);else{const e=_o(r,t);void 0!==e&&(n[i]=e)}}return n}class To{constructor(){this.name=\"RuleForRangedLine\"}hasMatchingType(e){if(Ae(e)){const{encoding:t,mark:n}=e;if(\"line\"===n)for(const e of Ke){const n=t[tt(e)];if(t[e]&&(xi(n)&&!At(n.bin)||Ai(n)))return!0}}return!1}run(e,t,n){const{encoding:i}=e;return $t(Dt.lineWithRange(!!i.x2,!!i.y2)),n(Object.assign(Object.assign({},e),{mark:\"rule\"}),t)}}function zo(e){const{parentEncoding:t,encoding:n}=e;if(t&&n){const e=I(t).reduce((e,t)=>(n[t]&&e.push(t),e),[]);e.length>0&&$t(Dt.encodingOverridden(e))}const i=Object.assign(Object.assign({},null!=t?t:{}),null!=n?n:{});return I(i).length>0?i:void 0}function Po(e){const{parentProjection:t,projection:n}=e;return t&&n&&$t(Dt.projectionOverridden({parentProjection:t,projection:n})),null!=n?n:t}function Lo(e,t){void 0===t&&(t=uo(e.config));const n=function(e,t={}){return Uo.map(e,{config:t})}(e,t),{width:i,height:r}=e,o=function(e,t,n){let{width:i,height:r}=t;const o=Ae(e)||mo(e),s={};o?\"container\"==i&&\"container\"==r?(s.type=\"fit\",s.contains=\"padding\"):\"container\"==i?(s.type=\"fit-x\",s.contains=\"padding\"):\"container\"==r&&(s.type=\"fit-y\",s.contains=\"padding\"):(\"container\"==i&&($t(Dt.containerSizeNonSingle(\"width\")),i=void 0),\"container\"==r&&($t(Dt.containerSizeNonSingle(\"height\")),r=void 0));const a=Object.assign(Object.assign(Object.assign({type:\"pad\"},s),n?Ro(n.autosize):{}),Ro(e.autosize));\"fit\"!==a.type||o||($t(Dt.FIT_NON_SINGLE),a.type=\"pad\");\"container\"==i&&\"fit\"!=a.type&&\"fit-x\"!=a.type&&$t(Dt.containerSizeNotCompatibleWithAutosize(\"width\"));\"container\"==r&&\"fit\"!=a.type&&\"fit-y\"!=a.type&&$t(Dt.containerSizeNotCompatibleWithAutosize(\"height\"));if(E(a,{type:\"pad\"}))return;return a}(n,{width:i,height:r,autosize:e.autosize},t);return Object.assign(Object.assign({},n),o?{autosize:o}:{})}const Uo=new class extends ho{constructor(){super(...arguments),this.nonFacetUnitNormalizers=[Cr,Br,Lr,new Do,new To,new Co]}map(e,t){if(Ae(e)){const n=dr(e.encoding,_e),i=dr(e.encoding,\"column\"),r=dr(e.encoding,\"facet\");if(n||i||r)return this.mapFacetedUnit(e,t)}return super.map(e,t)}mapUnit(e,t){const{parentEncoding:n,parentProjection:i}=t,r=Object.assign(Object.assign({},e),{encoding:Eo(e.encoding,t.repeater)});if(n||i)return this.mapUnitWithParentEncodingOrProjection(r,t);const o=this.mapLayerOrUnit.bind(this);for(const e of this.nonFacetUnitNormalizers)if(e.hasMatchingType(r,t.config))return e.run(r,t,o);return r}mapRepeat(e,t){return function(e){return!o(e.repeat)&&e.repeat.layer}(e)?this.mapLayerRepeat(e,t):this.mapNonLayerRepeat(e,t)}mapLayerRepeat(e,t){const{repeat:n,spec:i}=e,r=A(e,[\"repeat\",\"spec\"]),{row:o,column:s,layer:a}=n,{repeater:u={},repeaterPrefix:c=\"\"}=t;return o||s?this.mapRepeat(Object.assign(Object.assign({},e),{repeat:Object.assign(Object.assign({},o?{row:o}:{}),s?{column:s}:{}),spec:{repeat:{layer:a},spec:i}}),t):Object.assign(Object.assign({},r),{layer:a.map(e=>{const n=Object.assign(Object.assign({},u),{layer:e}),r=(i.name||\"\")+c+`child__layer_${Y(e)}`,o=this.mapLayerOrUnit(i,Object.assign(Object.assign({},t),{repeater:n,repeaterPrefix:r}));return o.name=r,o})})}mapNonLayerRepeat(e,t){var n;const{repeat:i,spec:r,data:s}=e,a=A(e,[\"repeat\",\"spec\",\"data\"]);!o(i)&&e.columns&&(e=B(e,[\"columns\"]),$t(Dt.columnsNotSupportByRowCol(\"repeat\")));const u=[],{repeater:c={},repeaterPrefix:l=\"\"}=t,d=!o(i)&&i.row||[c?c.row:null],f=!o(i)&&i.column||[c?c.column:null],g=o(i)&&i||[c?c.repeat:null];for(const e of g)for(const n of d)for(const s of f){const a={repeat:e,row:n,column:s,layer:c.layer},d=(r.name||\"\")+l+\"child__\"+(o(i)?`${Y(e)}`:(i.row?`row_${Y(n)}`:\"\")+(i.column?`column_${Y(s)}`:\"\")),f=this.map(r,Object.assign(Object.assign({},t),{repeater:a,repeaterPrefix:d}));f.name=d,u.push(B(f,[\"data\"]))}const p=o(i)?e.columns:i.column?i.column.length:1;return Object.assign(Object.assign({data:null!==(n=r.data)&&void 0!==n?n:s,align:\"all\"},a),{columns:p,concat:u})}mapFacet(e,t){const{facet:n}=e;return li(n)&&e.columns&&(e=B(e,[\"columns\"]),$t(Dt.columnsNotSupportByRowCol(\"facet\"))),super.mapFacet(e,t)}mapUnitWithParentEncodingOrProjection(e,t){const{encoding:n,projection:i}=e,{parentEncoding:r,parentProjection:o,config:s}=t,a=Po({parentProjection:o,projection:i}),u=zo({parentEncoding:r,encoding:Eo(n,t.repeater)});return this.mapUnit(Object.assign(Object.assign(Object.assign({},e),a?{projection:a}:{}),u?{encoding:u}:{}),{config:s})}mapFacetedUnit(e,t){const n=e.encoding,{row:i,column:r,facet:o}=n,s=A(n,[\"row\",\"column\",\"facet\"]),{mark:a,width:u,projection:c,height:l,view:d,selection:f,encoding:g}=e,p=A(e,[\"mark\",\"width\",\"projection\",\"height\",\"view\",\"selection\",\"encoding\"]),{facetMapping:m,layout:h}=this.getFacetMappingAndLayout({row:i,column:r,facet:o},t),b=Eo(s,t.repeater);return this.mapFacet(Object.assign(Object.assign(Object.assign({},p),h),{facet:m,spec:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},u?{width:u}:{}),l?{height:l}:{}),d?{view:d}:{}),c?{projection:c}:{}),{mark:a,encoding:b}),f?{selection:f}:{})}),t)}getFacetMappingAndLayout(e,t){var n;const{row:i,column:r,facet:o}=e;if(i||r){o&&$t(Dt.facetChannelDropped([...i?[_e]:[],...r?[\"column\"]:[]]));const t={},s={};for(const i of[_e,\"column\"]){const r=e[i];if(r){const e=A(r,[\"align\",\"center\",\"spacing\",\"columns\"]);t[i]=e;for(const e of[\"align\",\"center\",\"spacing\"])void 0!==r[e]&&(s[e]=null!==(n=s[e])&&void 0!==n?n:{},s[e][i]=r[e])}}return{facetMapping:t,layout:s}}{const{align:e,center:n,spacing:i,columns:r}=o;return{facetMapping:ko(A(o,[\"align\",\"center\",\"spacing\",\"columns\"]),t.repeater),layout:Object.assign(Object.assign(Object.assign(Object.assign({},e?{align:e}:{}),n?{center:n}:{}),i?{spacing:i}:{}),r?{columns:r}:{})}}}mapLayer(e,t){var{parentEncoding:n,parentProjection:i}=t,r=A(t,[\"parentEncoding\",\"parentProjection\"]);const{encoding:o,projection:s}=e,a=A(e,[\"encoding\",\"projection\"]),u=Object.assign(Object.assign({},r),{parentEncoding:zo({parentEncoding:n,encoding:o}),parentProjection:Po({parentProjection:i,projection:s})});return super.mapLayer(a,u)}};function Ro(e){return a(e)?{type:e}:null!=e?e:{}}const Mo=[\"background\",\"padding\"];function qo(e){return Mo.reduce((t,n)=>(e&&void 0!==e[n]&&(t[n]=e[n]),t),{})}function Wo(e){return\"url\"in e}function Io(e){return\"values\"in e}function Ho(e){return\"name\"in e&&!Wo(e)&&!Io(e)&&!Go(e)}function Go(e){return e&&(Yo(e)||Vo(e)||Jo(e))}function Yo(e){return\"sequence\"in e}function Vo(e){return\"sphere\"in e}function Jo(e){return\"graticule\"in e}const Qo=\"main\";function Xo(e){return\"filter\"in e}function Zo(e){return\"lookup\"in e}function Ko(e){return\"pivot\"in e}function es(e){return\"density\"in e}function ts(e){return\"quantile\"in e}function ns(e){return\"regression\"in e}function is(e){return\"loess\"in e}function rs(e){return\"sample\"in e}function os(e){return\"window\"in e}function ss(e){return\"joinaggregate\"in e}function as(e){return\"flatten\"in e}function us(e){return\"calculate\"in e}function cs(e){return\"bin\"in e}function ls(e){return\"impute\"in e}function ds(e){return\"timeUnit\"in e}function fs(e){return\"aggregate\"in e}function gs(e){return\"stack\"in e}function ps(e){return\"fold\"in e}function ms(e,t,n){return hs=t||vs,bs=n||xs,As(e.trim()).map(ws)}var hs,bs,vs=\"view\",ys=/[[\\]{}]/,xs={\"*\":1,arc:1,area:1,group:1,image:1,line:1,path:1,rect:1,rule:1,shape:1,symbol:1,text:1,trail:1};function Os(e,t,n,i,r){for(var o,s=0,a=e.length;t<a;++t){if(o=e[t],!s&&o===n)return t;r&&r.indexOf(o)>=0?--s:i&&i.indexOf(o)>=0&&++s}return t}function As(e){for(var t=[],n=0,i=e.length,r=0;r<i;)r=Os(e,r,\",\",\"[{\",\"]}\"),t.push(e.substring(n,r).trim()),n=++r;if(0===t.length)throw\"Empty event selector: \"+e;return t}function ws(e){return\"[\"===e[0]?function(e){var t,n,i=e.length,r=1;if((r=Os(e,r,\"]\",\"[\",\"]\"))===i)throw\"Empty between selector: \"+e;if(2!==(t=As(e.substring(1,r))).length)throw\"Between selector must have two elements: \"+e;if(\">\"!==(e=e.slice(r+1).trim())[0])throw\"Expected '>' after between selector: \"+e;if(t=t.map(ws),(n=ws(e.slice(1).trim())).between)return{between:t,stream:n};n.between=t;return n}(e):function(e){var t,n,i={source:hs},r=[],o=[0,0],s=0,a=0,u=e.length,c=0;if(\"}\"===e[u-1]){if(!((c=e.lastIndexOf(\"{\"))>=0))throw\"Unmatched right brace: \"+e;try{o=function(e){var t=e.split(\",\");if(!e.length||t.length>2)throw e;return t.map((function(t){var n=+t;if(n!=n)throw e;return n}))}(e.substring(c+1,u-1))}catch(t){throw\"Invalid throttle specification: \"+e}e=e.slice(0,c).trim(),u=e.length,c=0}if(!u)throw e;\"@\"===e[0]&&(s=++c);(t=Os(e,c,\":\"))<u&&(r.push(e.substring(a,t).trim()),a=c=++t);if((c=Os(e,c,\"[\"))===u)r.push(e.substring(a,u).trim());else if(r.push(e.substring(a,c).trim()),n=[],(a=++c)===u)throw\"Unmatched left bracket: \"+e;for(;c<u;){if((c=Os(e,c,\"]\"))===u)throw\"Unmatched left bracket: \"+e;if(n.push(e.substring(a,c).trim()),c<u-1&&\"[\"!==e[++c])throw\"Expected left bracket: \"+e;a=++c}if(!(u=r.length)||ys.test(r[u-1]))throw\"Invalid event selector: \"+e;u>1?(i.type=r[1],s?i.markname=r[0].slice(1):!function(e){return bs[e]}(r[0])?i.source=r[0]:i.marktype=r[0]):i.type=r[0];\"!\"===i.type.slice(-1)&&(i.consume=!0,i.type=i.type.slice(0,-1));null!=n&&(i.filter=n);o[0]&&(i.throttle=o[0]);o[1]&&(i.debounce=o[1]);return i}(e)}function Fs(e,t,n,i){const r=bi(t)&&t.condition,o=i(t);if(r){return{[n]:[...h(r).map(t=>{const n=i(t),r=function(e){return e.selection}(t)?$u(e,t.selection):_u(e,t.test);return Object.assign({test:r},n)}),...void 0!==o?[o]:[]]}}return void 0!==o?{[n]:o}:{}}function js(e,t,n={}){const{markDef:i,encoding:r,config:o}=t,{vgChannel:s}=n;let{defaultRef:a,defaultValue:u}=n;void 0===a&&(u=null!=u?u:ir(e,i,o,{vgChannel:s,ignoreVgConfig:!0}),void 0!==u&&(a=tr(u)));const c=r[e];return Fs(t,c,null!=s?s:e,n=>Vn({channel:e,channelDef:n,markDef:i,config:o,scaleName:t.scaleName(e),scale:t.getScaleComponent(e),stack:null,defaultRef:a}))}function Ds(e,t={filled:void 0}){var n,i,r,o;const{markDef:s,encoding:a,config:u}=e,{type:c}=s,l=null!==(n=t.filled)&&void 0!==n?n:ir(\"filled\",s,u),d=z([\"bar\",\"point\",\"circle\",\"square\",\"geoshape\"],c)?\"transparent\":void 0,f=null!==(r=null!==(i=ir(!0===l?\"color\":void 0,s,u,{vgChannel:\"fill\"}))&&void 0!==i?i:u.mark[!0===l&&\"color\"])&&void 0!==r?r:d,g=null!==(o=ir(!1===l?\"color\":void 0,s,u,{vgChannel:\"stroke\"}))&&void 0!==o?o:u.mark[!1===l&&\"color\"],p=l?\"fill\":\"stroke\",m=Object.assign(Object.assign({},f?{fill:tr(f)}:{}),g?{stroke:tr(g)}:{});return s.color&&(l?s.fill:s.stroke)&&$t(Dt.droppingColor(\"property\",{fill:\"fill\"in s,stroke:\"stroke\"in s})),Object.assign(Object.assign(Object.assign(Object.assign({},m),js(\"color\",e,{vgChannel:p,defaultValue:l?f:g})),js(\"fill\",e,{defaultValue:a.fill?f:void 0})),js(\"stroke\",e,{defaultValue:a.stroke?g:void 0}))}function Cs(e,t=\"text\"){const n=e.encoding[t];return Fs(e,n,t,t=>ks(t,e.config))}function ks(e,t,n=\"datum\"){if(e){if(Ci(e))return{value:e.value};if(Di(e)){const{format:i,formatType:r}=Ri(e);return Kn({fieldOrDatumDef:e,format:i,formatType:r,expr:n,config:t})}}}function Es(e,t={}){const{encoding:n,markDef:i,config:r}=e,u=n.tooltip;return o(u)?{tooltip:Ss({tooltip:u},e.stack,r,t)}:Fs(e,u,\"tooltip\",o=>{const u=ks(o,e.config,t.reactiveGeom?\"datum.datum\":\"datum\");if(u)return u;if(null===o)return;let c=ir(\"tooltip\",i,r);return!0===c&&(c={content:\"encoding\"}),a(c)?{value:c}:s(c)?\"encoding\"===c.content?Ss(n,e.stack,r,t):{signal:\"datum\"}:void 0})}function Ss(e,t,n,{reactiveGeom:i}={}){const r=[],o={},s={},a=i?\"datum.datum\":\"datum\",c=[];function l(i,r){const o=tt(r),u=Di(i)?i:Object.assign(Object.assign({},i),{type:e[o].type}),l=h(Pi(u,n,{allowDisabling:!1})).join(\", \");let d=ks(u,n,a).signal;if(ct(r)){const i=\"x\"===r?\"x2\":\"y2\",o=Mi(e[i]);if(At(u.bin)&&o){const e=$i(u,{expr:a}),t=$i(o,{expr:a}),{format:r,formatType:c}=Ri(u);d=ii(e,t,r,c,n),s[i]=!0}else if(t&&t.fieldChannel===r&&\"normalize\"===t.offset){const{format:e,formatType:t}=Ri(u);d=Kn({fieldOrDatumDef:u,format:e,formatType:t,expr:a,config:n,normalizeStack:!0}).signal}}c.push({channel:r,key:l,value:d})}hr(e,(e,t)=>{xi(e)?l(e,t):vi(e)&&l(e.condition,t)});for(const{channel:e,key:t,value:n}of c)s[e]||o[t]||(r.push(`${u(t)}: ${n}`),o[t]=!0);return r.length>0?{signal:`{${r.join(\", \")}}`}:void 0}function $s(e,t){const n=t[function(e){switch(e){case\"x\":return\"xOffset\";case\"y\":return\"yOffset\";case\"x2\":return\"x2Offset\";case\"y2\":return\"y2Offset\";case\"theta\":return\"thetaOffset\";case\"radius\":return\"radiusOffset\";case\"theta2\":return\"theta2Offset\";case\"radius2\":return\"radius2Offset\"}}(e)];if(n)return n}function Bs(e,t,{defaultPos:n,vgChannel:i,isMidPoint:r}){const{encoding:o,markDef:s,config:a,stack:u}=t,c=o[e],l=o[it(e)],d=t.scaleName(e),f=t.getScaleComponent(e),g=$s(e,s),p=_s({model:t,defaultPos:n,channel:e,scaleName:d,scale:f}),m=!c&&ct(e)&&(o.latitude||o.longitude)?{field:t.getName(e)}:function(e){const{channel:t,channelDef:n,isMidPoint:i,scaleName:r,stack:o,offset:s,markDef:a,config:u}=e;if(ji(n)&&o&&t===o.fieldChannel){if(xi(n)){const e=mi({channel:t,fieldDef:n,isMidPoint:i,markDef:a,stack:o,config:u});if(void 0!==e)return Yn({scaleName:r,fieldOrDatumDef:n,startSuffix:\"start\",band:e,offset:s})}return Gn(n,r,{suffix:\"end\"},{offset:s})}return qn(e)}({channel:e,channelDef:c,channel2Def:l,markDef:s,config:a,isMidPoint:r,scaleName:d,scale:f,stack:u,offset:g,defaultRef:p});return m?{[i||e]:m}:void 0}function _s({model:e,defaultPos:t,channel:n,scaleName:i,scale:r}){const{markDef:o,config:s}=e;return()=>{const a=tt(n),u=nt(n),c=ir(n,o,s,{vgChannel:u});if(void 0!==c)return Jn(n,c);switch(t){case\"zeroOrMin\":case\"zeroOrMax\":if(i){const e=r.get(\"type\");if(z([vn.LOG,vn.TIME,vn.UTC],e));else if(r.domainDefinitelyIncludesZero())return{scale:i,value:0}}if(\"zeroOrMin\"===t)return\"y\"===a?{field:{group:\"height\"}}:{value:0};switch(a){case\"radius\":return{signal:`min(${e.width.signal},${e.height.signal})/2`};case\"theta\":return{signal:\"2*PI\"};case\"x\":return{field:{group:\"width\"}};case\"y\":return{value:0}}break;case\"mid\":{const t=e[rt(n)];return Object.assign(Object.assign({},t),{mult:.5})}}}}const Ns={left:\"x\",center:\"xc\",right:\"x2\"},Ts={top:\"y\",middle:\"yc\",bottom:\"y2\"};function zs(e,t,n,i=\"middle\"){if(\"radius\"===e||\"theta\"===e)return nt(e);const r=ir(\"x\"===e?\"align\":\"baseline\",t,n);return\"x\"===e?Ns[r||(\"top\"===i?\"left\":\"center\")]:Ts[r||i]}function Ps(e,t,{defaultPos:n,defaultPos2:i,range:r}){return r?Ls(e,t,{defaultPos:n,defaultPos2:i}):Bs(e,t,{defaultPos:n})}function Ls(e,t,{defaultPos:n,defaultPos2:i}){const{markDef:r,config:o}=t,s=it(e),a=rt(e),u=function(e,t,n){const{encoding:i,mark:r,markDef:o,stack:s,config:a}=e,u=tt(n),c=rt(n),l=nt(n),d=i[u],f=e.scaleName(u),g=e.getScaleComponent(u),p=$s(n,e.markDef);if(!d&&(\"x2\"===n||\"y2\"===n)&&(i.latitude||i.longitude))return{[l]:{field:e.getName(n)}};const m=function({channel:e,channelDef:t,channel2Def:n,markDef:i,config:r,scaleName:o,scale:s,stack:a,offset:u,defaultRef:c}){if(ji(t)&&a&&e.charAt(0)===a.fieldChannel.charAt(0))return Gn(t,o,{suffix:\"start\"},{offset:u});return qn({channel:e,channelDef:n,scaleName:o,scale:s,stack:a,markDef:i,config:r,offset:u,defaultRef:c})}({channel:n,channelDef:d,channel2Def:i[n],markDef:o,config:a,scaleName:f,scale:g,stack:s,offset:p,defaultRef:void 0});if(void 0!==m)return{[l]:m};return Us(n,o)||Us(n,{[n]:or(n,o,a.style),[c]:or(c,o,a.style)})||Us(n,a[r])||Us(n,a.mark)||{[l]:_s({model:e,defaultPos:t,channel:n,scaleName:f,scale:g})()}}(t,i,s),c=u[a]?zs(e,r,o):nt(e);return Object.assign(Object.assign({},Bs(e,t,{defaultPos:n,vgChannel:c})),u)}function Us(e,t){const n=rt(e),i=nt(e);return void 0!==t[i]?{[i]:Jn(e,t[i])}:void 0!==t[e]?{[i]:Jn(e,t[e])}:t[n]?{[n]:Jn(e,t[n])}:void 0}function Rs(e,t,n){var i,r,s,a;const{config:u,encoding:c,markDef:l,stack:d}=e,f=it(t),g=rt(t),p=c[t],m=c[f],h=e.getScaleComponent(t),b=h?h.get(\"type\"):void 0,v=e.scaleName(t),y=l.orient,x=null!==(r=null!==(i=c[g])&&void 0!==i?i:c.size)&&void 0!==r?r:ir(\"size\",l,u,{vgChannel:g}),O=\"bar\"===n&&(\"x\"===t?\"vertical\"===y:\"horizontal\"===y);if(xi(p)&&(Ot(p.bin)||At(p.bin)||p.timeUnit&&!m)&&!x&&!Sn(b)){const n=mi({channel:t,fieldDef:p,stack:d,markDef:l,config:u}),i=null===(s=e.component.axes[t])||void 0===s?void 0:s[0];return function({fieldDef:e,fieldDef2:t,channel:n,band:i,scaleName:r,markDef:o,spacing:s=0,axisTranslate:a,reverse:u,config:c}){const l=it(n),d=nt(n),f=nt(l);return Ot(e.bin)||e.timeUnit?{[f]:Ws({channel:n,fieldDef:e,scaleName:r,markDef:o,band:(1-i)/2,offset:qs(l,s,u,a),config:c}),[d]:Ws({channel:n,fieldDef:e,scaleName:r,markDef:o,band:1-(1-i)/2,offset:qs(n,s,u,a),config:c})}:At(e.bin)&&xi(t)?{[f]:Gn(e,r,{},{offset:qs(l,s,u,a)}),[d]:Gn(t,r,{},{offset:qs(n,s,u,a)})}:void $t(Dt.channelRequiredForBinned(l))}({fieldDef:p,fieldDef2:m,channel:t,markDef:l,scaleName:v,band:n,axisTranslate:null!==(a=null==i?void 0:i.get(\"translate\"))&&void 0!==a?a:.5,spacing:ct(t)?ir(\"binSpacing\",l,u):void 0,reverse:h.get(\"reverse\"),config:u})}return(ji(p)&&Sn(b)||O)&&!m?function(e,t,n,i){var r;const{markDef:s,encoding:a,config:u,stack:c}=i,l=s.orient,d=i.scaleName(n),f=i.getScaleComponent(n),g=rt(n),p=it(n),m=\"horizontal\"===l&&\"y\"===n||\"vertical\"===l&&\"x\"===n,h=ir(m?\"size\":g,s,u,{vgChannel:g});let b;(a.size||void 0!==h)&&(m?b=js(\"size\",i,{vgChannel:g,defaultValue:h}):$t(Dt.cannotApplySizeToNonOrientedMark(s.type)));const v=null!==(r=ji(t)?mi({channel:n,fieldDef:t,markDef:s,stack:c,config:u}):void 0)&&void 0!==r?r:1;b=b||{[g]:Ms(e,g,d,f,u,v)};const y=\"band\"!==(null==f?void 0:f.get(\"type\"))||!(\"band\"in b[g]),x=zs(n,s,u,y?\"middle\":\"top\"),O=$s(n,s),A=qn({channel:n,channelDef:t,markDef:s,config:u,scaleName:d,scale:f,stack:c,offset:O,defaultRef:_s({model:i,defaultPos:\"mid\",channel:n,scaleName:d,scale:f}),band:y?.5:(1-v)/2});if(g)return Object.assign({[x]:A},b);{const e=nt(p),t=b[g],n=O?Object.assign(Object.assign({},t),{offset:O}):t;return{[x]:A,[e]:o(A)?[A[0],Object.assign(Object.assign({},A[1]),{offset:n})]:Object.assign(Object.assign({},A),{offset:n})}}}(n,p,t,e):Ls(t,e,{defaultPos:\"zeroOrMax\",defaultPos2:\"zeroOrMin\"})}function Ms(e,t,n,i,r,o){if(i){const t=i.get(\"type\");if(\"point\"===t||\"band\"===t){if(void 0!==r[e].discreteBandSize)return{value:r[e].discreteBandSize};if(t===vn.POINT){const e=i.get(\"range\");return en(e)&&x(e.step)?{value:e.step-2}:{value:io-2}}return{scale:n,band:o}}return{value:r[e].continuousBandSize}}const s=to(r.view,t),a=ne(r[e].discreteBandSize,s-2);return void 0!==a?{value:a}:void 0}function qs(e,t,n,i){if(Me(e))return 0;const r=\"x\"===e||\"y2\"===e?-t/2:t/2;return Kt(n)?{signal:`${n.signal} ? ${i-r} : ${i+r}`}:n?i-r:i+r}function Ws({channel:e,fieldDef:t,scaleName:n,markDef:i,band:r,offset:o,config:s}){return Wn({fieldDef:t,channel:e,markDef:i,ref:Yn({scaleName:n,fieldOrDatumDef:t,band:r,offset:o}),config:s})}function Is(e,t){const{fill:n,stroke:i}=\"include\"===t.color?Ds(e):{};return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},function(e,t){return nn.reduce((n,i)=>(void 0!==e[i]&&\"ignore\"!==t[i]&&(n[i]={value:e[i]}),n),{})}(e.markDef,t)),Hs(e,\"fill\",n)),Hs(e,\"stroke\",i)),js(\"opacity\",e)),js(\"fillOpacity\",e)),js(\"strokeOpacity\",e)),js(\"strokeWidth\",e)),js(\"strokeDash\",e)),Es(e)),Cs(e,\"href\"))}function Hs(e,t,n){const{config:i,mark:r,markDef:o}=e;if(\"hide\"===ir(\"invalid\",o,i)&&n&&!ge(r)){const i=function(e,{invalid:t=!1,channels:n}){const i=n.reduce((t,n)=>{const i=e.getScaleComponent(n);if(i){const r=i.get(\"type\"),o=e.vgField(n,{expr:\"datum\"});o&&$n(r)&&(t[o]=!0)}return t},{}),r=I(i);if(r.length>0){const e=t?\"||\":\"&&\";return r.map(e=>Hn(e,t)).join(` ${e} `)}return}(e,{invalid:!0,channels:pt});if(i)return{[t]:[{test:i,value:null},...h(n)]}}return n?{[t]:n}:{}}function Gs(e){const{config:t,markDef:n}=e;if(ir(\"invalid\",n,t)){const t=function(e,{invalid:t=!1,channels:n}){const i=n.reduce((t,n)=>{const i=e.getScaleComponent(n);if(i){const r=i.get(\"type\"),o=e.vgField(n,{expr:\"datum\"});o&&$n(r)&&(t[o]=!0)}return t},{}),r=I(i);if(r.length>0){const e=t?\"||\":\"&&\";return r.map(e=>Hn(e,t)).join(` ${e} `)}return}(e,{channels:[\"x\",\"y\"]});if(t)return{defined:{signal:t}}}return{}}function Ys(e,t){if(void 0!==t)return{[e]:tr(t)}}const Vs={has:e=>\"interval\"!==e.type&&e.nearest,parse:(e,t)=>{if(t.events)for(const n of t.events)n.markname=e.getName(\"voronoi\")},marks:(e,t,n)=>{const{x:i,y:r}=t.project.hasChannel,o=e.mark;if(ge(o))return $t(Dt.nearestNotSupportForContinuous(o)),n;const s={name:e.getName(\"voronoi\"),type:\"path\",interactive:!0,from:{data:e.getName(\"marks\")},encode:{update:Object.assign({fill:{value:\"transparent\"},strokeWidth:{value:.35},stroke:{value:\"transparent\"},isVoronoi:{value:!0}},Es(e,{reactiveGeom:!0}))},transform:[{type:\"voronoi\",x:{expr:i||!r?\"datum.datum.x || 0\":\"0\"},y:{expr:r||!i?\"datum.datum.y || 0\":\"0\"},size:[e.getSizeSignalRef(\"width\"),e.getSizeSignalRef(\"height\")]}]};let a=0,u=!1;return n.forEach((t,n)=>{var i;const r=null!==(i=t.name)&&void 0!==i?i:\"\";r===e.component.mark[0].name?a=n:r.indexOf(\"voronoi\")>=0&&(u=!0)}),u||n.splice(a+1,0,s),n}};class Js{constructor(e,t){this.debugName=t,this._children=[],this._parent=null,e&&(this.parent=e)}clone(){throw new Error(\"Cannot clone node\")}get parent(){return this._parent}set parent(e){this._parent=e,e&&e.addChild(this)}get children(){return this._children}numChildren(){return this._children.length}addChild(e,t){this._children.indexOf(e)>-1?console.warn(\"Attempt to add the same child twice.\"):void 0!==t?this._children.splice(t,0,e):this._children.push(e)}removeChild(e){const t=this._children.indexOf(e);return this._children.splice(t,1),t}remove(){let e=this._parent.removeChild(this);for(const t of this._children)t._parent=this._parent,this._parent.addChild(t,e++)}insertAsParentOf(e){const t=e.parent;t.removeChild(this),this.parent=t,e.parent=this}swapWithParent(){const e=this._parent,t=e.parent;for(const t of this._children)t.parent=e;this._children=[],e.removeChild(this),e.parent.removeChild(e),this.parent=t,e.parent=this}}class Qs extends Js{constructor(e,t,n,i){super(e,t),this.type=n,this.refCounts=i,this._source=this._name=t,this.refCounts&&!(this._name in this.refCounts)&&(this.refCounts[this._name]=0)}clone(){const e=new this.constructor;return e.debugName=\"clone_\"+this.debugName,e._source=this._source,e._name=\"clone_\"+this._name,e.type=this.type,e.refCounts=this.refCounts,e.refCounts[e._name]=0,e}dependentFields(){return new Set}producedFields(){return new Set}hash(){return void 0===this._hash&&(this._hash=`Output ${function(e){const t=++ie;return e?String(e)+t:t}()}`),this._hash}getSource(){return this.refCounts[this._name]++,this._source}isRequired(){return!!this.refCounts[this._name]}setSource(e){this._source=e}}class Xs extends Js{constructor(e,t){super(e),this.formula=t}clone(){return new Xs(null,S(this.formula))}static makeFromEncoding(e,t){const n=t.reduceFieldDef((e,n,i)=>{const{field:r,timeUnit:o}=n,s=dd(t)?t.encoding[it(i)]:void 0,a=dd(t)&&hi(i,n,s,t.stack,t.markDef,t.config);if(o){const t=$i(n,{forAs:!0});e[N({as:t,field:r,timeUnit:o})]=Object.assign({as:t,field:r,timeUnit:o},a?{band:!0}:{})}return e},{});return 0===I(n).length?null:new Xs(e,n)}static makeFromTransform(e,t){const n=Object.assign({},t),{timeUnit:i}=n,r=A(n,[\"timeUnit\"]),o=Xt(i),s=Object.assign(Object.assign({},r),{timeUnit:o});return new Xs(e,{[N(s)]:s})}merge(e){this.formula=Object.assign({},this.formula);for(const t in e.formula)this.formula[t]&&!e.formula[t].band||(this.formula[t]=e.formula[t]);for(const t of e.children)e.removeChild(t),t.parent=this;e.remove()}producedFields(){return new Set(H(this.formula).map(e=>e.as))}dependentFields(){return new Set(H(this.formula).map(e=>e.field))}hash(){return`TimeUnit ${N(this.formula)}`}assemble(){const e=[];for(const t of H(this.formula)){const{field:n,as:i,timeUnit:r}=t,o=Xt(r),{unit:s,utc:a}=o,u=A(o,[\"unit\",\"utc\"]);e.push(Object.assign(Object.assign(Object.assign(Object.assign({field:n,type:\"timeunit\"},s?{units:Yt(s)}:{}),a?{timezone:\"utc\"}:{}),u),{as:[i,`${i}_end`]}))}return e}}class Zs{constructor(...e){this.items=e,this.hasChannel={},this.hasField={}}}const Ks={has:e=>\"single\"===e.type&&\"global\"===e.resolve&&e.bind&&\"scales\"!==e.bind&&!Gr(e.bind),parse:(e,t,n,i)=>{i.on||delete t.events,i.clear||delete t.clear},topLevelSignals:(e,t,n)=>{const i=t.name,r=t.project,o=t.bind,s=t.init&&t.init[0],a=Vs.has(t)?\"(item().isVoronoi ? datum.datum : datum)\":\"datum\";return r.items.forEach((e,r)=>{var c,l;const d=Y(`${i}_${e.field}`);n.filter(e=>e.name===d).length||n.unshift(Object.assign(Object.assign({name:d},s?{init:ga(s[r])}:{value:null}),{on:t.events?[{events:t.events,update:`datum && item().mark.marktype !== 'group' ? ${a}[${u(e.field)}] : null`}]:[],bind:null!==(l=null!==(c=o[e.field])&&void 0!==c?c:o[e.channel])&&void 0!==l?l:o}))}),n},signals:(e,t,n)=>{const i=t.name,r=t.project,o=n.filter(e=>e.name===i+wa)[0],s=i+\"_tuple_fields\",a=r.items.map(e=>Y(`${i}_${e.field}`)),u=a.map(e=>`${e} !== null`).join(\" && \");return a.length&&(o.update=`${u} ? {fields: ${s}, values: [${a.join(\", \")}]} : null`),delete o.value,delete o.on,n}},ea={has:e=>\"multi\"===e.type&&!!e.toggle,signals:(e,t,n)=>n.concat({name:t.name+\"_toggle\",value:!1,on:[{events:t.events,update:t.toggle}]}),modifyExpr:(e,t)=>{const n=t.name+wa,i=t.name+\"_toggle\";return`${i} ? null : ${n}, `+(\"global\"===t.resolve?`${i} ? null : true, `:`${i} ? null : {unit: ${ka(e)}}, `)+`${i} ? ${n} : null`}},ta={has:e=>void 0!==e.clear&&!1!==e.clear,parse:(e,t,n)=>{n.clear&&(t.clear=a(n.clear)?ms(n.clear,\"scope\"):n.clear)},topLevelSignals:(e,t,n)=>{if(Ks.has(t))for(const e of t.project.items){const i=n.findIndex(n=>n.name===Y(`${t.name}_${e.field}`));-1!==i&&n[i].on.push({events:t.clear,update:\"null\"})}return n},signals:(e,t,n)=>{function i(e,i){-1!==e&&n[e].on&&n[e].on.push({events:t.clear,update:i})}if(\"interval\"===t.type)for(const e of t.project.items){const t=n.findIndex(t=>t.name===e.signals.visual);if(i(t,\"[0, 0]\"),-1===t){i(n.findIndex(t=>t.name===e.signals.data),\"null\")}}else{let e=n.findIndex(e=>e.name===t.name+wa);i(e,\"null\"),ea.has(t)&&(e=n.findIndex(e=>e.name===t.name+\"_toggle\"),i(e,\"false\"))}return n}},na={has:e=>\"interval\"===e.type&&\"global\"===e.resolve&&e.bind&&\"scales\"===e.bind,parse:(e,t)=>{const n=t.scales=[];for(const i of t.project.items){const r=i.channel;if(!mt(r))continue;const o=e.getScaleComponent(r),s=o?o.get(\"type\"):void 0;if(!o||!$n(s)){$t(Dt.SCALE_BINDINGS_CONTINUOUS);continue}const a={selection:t.name,field:i.field};o.set(\"selectionExtent\",a,!0),n.push(i)}},topLevelSignals:(e,t,n)=>{const i=t.scales.filter(e=>0===n.filter(t=>t.name===e.signals.data).length);if(!e.parent||ra(e)||0===i.length)return n;const r=n.filter(e=>e.name===t.name)[0];let o=r.update;if(o.indexOf(ja)>=0)r.update=`{${i.map(e=>`${u(e.field)}: ${e.signals.data}`).join(\", \")}}`;else{for(const e of i){const t=`${u(e.field)}: ${e.signals.data}`;o.indexOf(t)<0&&(o=`${o.substring(0,o.length-1)}, ${t}}`)}r.update=o}return n.concat(i.map(e=>({name:e.signals.data})))},signals:(e,t,n)=>{if(e.parent&&!ra(e))for(const e of t.scales){const t=n.filter(t=>t.name===e.signals.data)[0];t.push=\"outer\",delete t.value,delete t.update}return n}};function ia(e,t){return`domain(${u(e.scaleName(t))})`}function ra(e){var t;return e.parent&&pd(e.parent)&&(null!==(t=!e.parent.parent)&&void 0!==t?t:ra(e.parent.parent))}const oa={has:e=>{const t=\"global\"===e.resolve&&e.bind&&Gr(e.bind),n=1===e.project.items.length&&\"_vgsid_\"!==e.project.items[0].field;return t&&!n&&$t(Dt.LEGEND_BINDINGS_PROJECT_LENGTH),t&&n},parse:(e,t,n,i)=>{var r;if(i.on||delete t.events,i.clear||delete t.clear,i.on||i.clear){const e='event.item && indexof(event.item.mark.role, \"legend\") < 0';for(const n of t.events)n.filter=h(null!==(r=n.filter)&&void 0!==r?r:[]),n.filter.indexOf(e)<0&&n.filter.push(e)}const o=Yr(t.bind)?t.bind.legend:\"click\",s=a(o)?ms(o,\"view\"):h(o);t.bind={legend:{merge:s}}},topLevelSignals:(e,t,n)=>{const i=t.name,r=Yr(t.bind)&&t.bind.legend,o=e=>t=>{const n=S(t);return n.markname=e,n};for(const e of t.project.items){if(!e.hasLegend)continue;const s=`${Y(e.field)}_legend`,a=`${i}_${s}`;if(0===n.filter(e=>e.name===a).length){const e=r.merge.map(o(`${s}_symbols`)).concat(r.merge.map(o(`${s}_labels`))).concat(r.merge.map(o(`${s}_entries`)));n.unshift(Object.assign(Object.assign({name:a},t.init?{}:{value:null}),{on:[{events:e,update:\"datum.value || item().items[0].items[0].datum.value\",force:!0},{events:r.merge,update:`!event.item || !datum ? null : ${a}`,force:!0}]}))}}return n},signals:(e,t,n)=>{const i=t.name,r=t.project,o=n.find(e=>e.name===i+wa),s=i+\"_tuple_fields\",a=r.items.filter(e=>e.hasLegend).map(e=>Y(`${i}_${Y(e.field)}_legend`)),u=`${a.map(e=>`${e} !== null`).join(\" && \")} ? {fields: ${s}, values: [${a.join(\", \")}]} : null`;t.events&&a.length>0?o.on.push({events:a.map(e=>({signal:e})),update:u}):a.length>0&&(o.update=u,delete o.value,delete o.on);const c=n.find(e=>e.name===i+\"_toggle\"),l=Yr(t.bind)&&t.bind.legend;return c&&(t.events?c.on.push(Object.assign(Object.assign({},c.on[0]),{events:l})):c.on[0].events=l),n}};const sa=\"_translate_delta\",aa={has:e=>\"interval\"===e.type&&e.translate,signals:(e,t,n)=>{const i=t.name,r=na.has(t),o=i+\"_translate_anchor\",{x:s,y:a}=t.project.hasChannel;let u=ms(t.translate,\"scope\");return r||(u=u.map(e=>(e.between[0].markname=i+ha,e))),n.push({name:o,value:{},on:[{events:u.map(e=>e.between[0]),update:\"{x: x(unit), y: y(unit)\"+(void 0!==s?\", extent_x: \"+(r?ia(e,Ne):`slice(${s.signals.visual})`):\"\")+(void 0!==a?\", extent_y: \"+(r?ia(e,Te):`slice(${a.signals.visual})`):\"\")+\"}\"}]},{name:i+sa,value:{},on:[{events:u,update:`{x: ${o}.x - x(unit), y: ${o}.y - y(unit)}`}]}),void 0!==s&&ua(e,t,s,\"width\",n),void 0!==a&&ua(e,t,a,\"height\",n),n}};function ua(e,t,n,i,r){var o;const s=t.name,a=s+\"_translate_anchor\",u=s+sa,c=n.channel,l=na.has(t),d=r.filter(e=>e.name===n.signals[l?\"data\":\"visual\"])[0],f=e.getSizeSignalRef(i).signal,g=e.getScaleComponent(c),p=g.get(\"type\"),m=`${a}.extent_${c}`,h=`${l?\"log\"===p?\"panLog\":\"pow\"===p?\"panPow\":\"panLinear\":\"panLinear\"}(${m}, ${`${l&&c===Ne?\"-\":\"\"}${u}.${c} / `+(l?`${f}`:`span(${m})`)}`+(l&&\"pow\"===p?`, ${null!==(o=g.get(\"exponent\"))&&void 0!==o?o:1}`:\"\")+\")\";d.on.push({events:{signal:u},update:l?h:`clampRange(${h}, 0, ${f})`})}const ca={has:e=>\"interval\"===e.type&&e.zoom,signals:(e,t,n)=>{const i=t.name,r=na.has(t),o=i+\"_zoom_delta\",{x:s,y:a}=t.project.hasChannel,c=u(e.scaleName(Ne)),l=u(e.scaleName(Te));let d=ms(t.zoom,\"scope\");return r||(d=d.map(e=>(e.markname=i+ha,e))),n.push({name:i+\"_zoom_anchor\",on:[{events:d,update:r?\"{\"+[c?`x: invert(${c}, x(unit))`:\"\",l?`y: invert(${l}, y(unit))`:\"\"].filter(e=>!!e).join(\", \")+\"}\":\"{x: x(unit), y: y(unit)}\"}]},{name:o,on:[{events:d,force:!0,update:\"pow(1.001, event.deltaY * pow(16, event.deltaMode))\"}]}),void 0!==s&&la(e,t,s,\"width\",n),void 0!==a&&la(e,t,a,\"height\",n),n}};function la(e,t,n,i,r){var o;const s=t.name,a=n.channel,u=na.has(t),c=r.filter(e=>e.name===n.signals[u?\"data\":\"visual\"])[0],l=e.getSizeSignalRef(i).signal,d=e.getScaleComponent(a),f=d.get(\"type\"),g=u?ia(e,a):c.name,p=s+\"_zoom_delta\",m=`${u?\"log\"===f?\"zoomLog\":\"pow\"===f?\"zoomPow\":\"zoomLinear\":\"zoomLinear\"}(${g}, ${`${s}_zoom_anchor.${a}`}, ${p}`+(u&&\"pow\"===f?`, ${null!==(o=d.get(\"exponent\"))&&void 0!==o?o:1}`:\"\")+\")\";c.on.push({events:{signal:p},update:u?m:`clampRange(${m}, 0, ${l})`})}const da=[{has:()=>!0,parse:(e,t,n)=>{var i,r,o;const s=t.name,a=null!==(i=t.project)&&void 0!==i?i:t.project=new Zs,u={},c={},l=new Set,d=(e,t)=>{const n=\"visual\"===t?e.channel:e.field;let i=Y(`${s}_${n}`);for(let e=1;l.has(i);e++)i=Y(`${s}_${n}_${e}`);return l.add(i),{[t]:i}};if(!n.fields&&!n.encodings){const t=e.config.selection[n.type];if(n.init)for(const e of h(n.init))for(const i of I(e))Xe[i]?(n.encodings||(n.encodings=[])).push(i):\"interval\"===n.type?($t('Interval selections should be initialized using \"x\" and/or \"y\" keys.'),n.encodings=t.encodings):(n.fields||(n.fields=[])).push(i);else n.encodings=t.encodings,n.fields=t.fields}for(const e of null!==(r=n.fields)&&void 0!==r?r:[]){const t={type:\"E\",field:e};t.signals=Object.assign({},d(t,\"data\")),a.items.push(t),a.hasField[e]=t}for(const i of null!==(o=n.encodings)&&void 0!==o?o:[]){const n=e.fieldDef(i);if(n){let r=n.field;if(n.aggregate){$t(Dt.cannotProjectAggregate(i,n.aggregate));continue}if(!r){$t(Dt.cannotProjectOnChannelWithoutField(i));continue}if(n.timeUnit){r=e.vgField(i);const t={timeUnit:n.timeUnit,as:r,field:n.field};c[N(t)]=t}if(!u[r]){let o=\"E\";if(\"interval\"===t.type){$n(e.getScaleComponent(i).get(\"type\"))&&(o=\"R\")}else n.bin&&(o=\"R-RE\");const s={field:r,channel:i,type:o};s.signals=Object.assign(Object.assign({},d(s,\"data\")),d(s,\"visual\")),a.items.push(u[r]=s),a.hasField[r]=a.hasChannel[i]=u[r]}}else $t(Dt.cannotProjectOnChannelWithoutField(i))}if(n.init){const e=e=>a.items.map(t=>void 0!==e[t.channel]?e[t.channel]:e[t.field]);if(\"interval\"===n.type)t.init=e(n.init);else{const i=h(n.init);t.init=i.map(e)}}I(c).length>0&&(a.timeUnit=new Xs(null,c))},signals:(e,t,n)=>{const i=t.name+\"_tuple_fields\";return n.filter(e=>e.name===i).length>0?n:n.concat({name:i,value:t.project.items.map(e=>{const t=A(e,[\"signals\",\"hasLegend\"]);return t.field=K(t.field),t})})}},ea,na,oa,aa,ca,Ks,Vs,ta];function fa(e,t){for(const n of da)n.has(e)&&t(n)}function ga(e,t=!0,n=l){if(o(e)){const i=e.map(e=>ga(e,t,n));return t?`[${i.join(\", \")}]`:i}return Bt(e)?n(t?Lt(e):function(e){const t=Pt(e,!0);return e.utc?+new Date(Date.UTC(...t)):+new Date(...t)}(e)):t?n(JSON.stringify(e)):e}function pa(e,t){return Ca(e,(n,i)=>{t=i.marks?i.marks(e,n,t):t,fa(n,i=>{i.marks&&(t=i.marks(e,n,t))})}),t}function ma(e){return e.map(e=>(e.on&&!e.on.length&&delete e.on,e))}const ha=\"_brush\",ba={signals:(e,t)=>{const n=t.name,i=n+\"_tuple_fields\",r=na.has(t),o=[],s=[],a=[];if(t.translate&&!r){const e=`!event.item || event.item.mark.name !== ${u(n+ha)}`;va(t,(t,n)=>{var i;const r=h(null!==(i=n.between[0].filter)&&void 0!==i?i:n.between[0].filter=[]);return r.indexOf(e)<0&&r.push(e),t})}t.project.items.forEach((n,i)=>{const r=n.channel;if(r!==Ne&&r!==Te)return void $t(\"Interval selections only support x and y encoding channels.\");const c=t.init?t.init[i]:null,l=function(e,t,n,i){const r=n.channel,o=n.signals.visual,s=n.signals.data,a=na.has(t),c=u(e.scaleName(r)),l=e.getScaleComponent(r),d=l?l.get(\"type\"):void 0,f=e=>`scale(${c}, ${e})`,g=e.getSizeSignalRef(r===Ne?\"width\":\"height\").signal,p=`${r}(unit)`,m=va(t,(e,t)=>[...e,{events:t.between[0],update:`[${p}, ${p}]`},{events:t,update:`[${o}[0], clamp(${p}, 0, ${g})]`}]);return m.push({events:{signal:t.name+\"_scale_trigger\"},update:$n(d)?`[${f(`${s}[0]`)}, ${f(`${s}[1]`)}]`:\"[0, 0]\"}),a?[{name:s,on:[]}]:[Object.assign(Object.assign({name:o},i?{init:ga(i,!0,f)}:{value:[]}),{on:m}),Object.assign(Object.assign({name:s},i?{init:ga(i)}:{}),{on:[{events:{signal:o},update:`${o}[0] === ${o}[1] ? null : invert(${c}, ${o})`}]})]}(e,t,n,c),d=n.signals.data,f=n.signals.visual,g=u(e.scaleName(r)),p=$n(e.getScaleComponent(r).get(\"type\"))?\"+\":\"\";o.push(...l),s.push(d),a.push({scaleName:e.scaleName(r),expr:`(!isArray(${d}) || `+`(${p}invert(${g}, ${f})[0] === ${p}${d}[0] && `+`${p}invert(${g}, ${f})[1] === ${p}${d}[1]))`})}),r||o.push({name:n+\"_scale_trigger\",value:{},on:[{events:a.map(e=>({scale:e.scaleName})),update:a.map(e=>e.expr).join(\" && \")+` ? ${n+\"_scale_trigger\"} : {}`}]});const c=t.init,l=`unit: ${ka(e)}, fields: ${i}, values`;return o.concat(Object.assign(Object.assign({name:n+wa},c?{init:`{${l}: ${ga(c)}}`}:{}),{on:[{events:[{signal:s.join(\" || \")}],update:s.join(\" && \")+` ? {${l}: [${s}]} : null`}]}))},modifyExpr:(e,t)=>t.name+wa+\", \"+(\"global\"===t.resolve?\"true\":`{unit: ${ka(e)}}`),marks:(e,t,n)=>{const i=t.name,{x:r,y:o}=t.project.hasChannel,s=r&&r.signals.visual,a=o&&o.signals.visual,c=`data(${u(t.name+Aa)})`;if(na.has(t))return n;const l={x:void 0!==r?{signal:`${s}[0]`}:{value:0},y:void 0!==o?{signal:`${a}[0]`}:{value:0},x2:void 0!==r?{signal:`${s}[1]`}:{field:{group:\"width\"}},y2:void 0!==o?{signal:`${a}[1]`}:{field:{group:\"height\"}}};if(\"global\"===t.resolve)for(const t of I(l))l[t]=[Object.assign({test:`${c}.length && ${c}[0].unit === ${ka(e)}`},l[t]),{value:0}];const d=t.mark,{fill:f,fillOpacity:g,cursor:p}=d,m=A(d,[\"fill\",\"fillOpacity\",\"cursor\"]),h=I(m).reduce((e,t)=>(e[t]=[{test:[void 0!==r&&`${s}[0] !== ${s}[1]`,void 0!==o&&`${a}[0] !== ${a}[1]`].filter(e=>e).join(\" && \"),value:m[t]},{value:null}],e),{});return[{name:i+ha+\"_bg\",type:\"rect\",clip:!0,encode:{enter:{fill:{value:f},fillOpacity:{value:g}},update:l}},...n,{name:i+ha,type:\"rect\",clip:!0,encode:{enter:Object.assign(Object.assign({},p?{cursor:{value:p}}:{}),{fill:{value:\"transparent\"}}),update:Object.assign(Object.assign({},l),h)}}]}};function va(e,t){return e.events.reduce((e,n)=>n.between?t(e,n):($t(`${n} is not an ordered event stream for interval selections.`),e),[])}function ya(e,t){const n=t.name,i=n+\"_tuple_fields\",r=t.project,o=\"(item().isVoronoi ? datum.datum : datum)\",s=r.items.map(t=>{const n=e.fieldDef(t.channel);return n&&n.bin?`[${o}[${u(e.vgField(t.channel,{}))}], `+`${o}[${u(e.vgField(t.channel,{binSuffix:\"end\"}))}]]`:`${o}[${u(t.field)}]`}).join(\", \"),a=`unit: ${ka(e)}, fields: ${i}, values`,c=t.events;return[{name:n+wa,on:c?[{events:c,update:`datum && item().mark.marktype !== 'group' ? {${a}: [${s}]} : null`,force:!0}]:[]}]}const xa={signals:ya,modifyExpr:(e,t)=>t.name+wa+\", \"+(\"global\"===t.resolve?\"null\":`{unit: ${ka(e)}}`)},Oa={signals:ya,modifyExpr:(e,t)=>t.name+wa+\", \"+(\"global\"===t.resolve?\"true\":`{unit: ${ka(e)}}`)},Aa=\"_store\",wa=\"_tuple\",Fa=\"_modify\",ja=\"vlSelectionResolve\",Da={single:Oa,multi:xa,interval:ba};function Ca(e,t){const n=e.component.selection;if(n)for(const e of H(n)){if(!0===t(e,Da[e.type]))break}}function ka(e,{escape:t}={escape:!0}){let n=t?u(e.name):e.name;const i=function(e){let t=e.parent;for(;t&&!fd(t);)t=t.parent;return t}(e);if(i){const{facet:e}=i;for(const t of Ye)e[t]&&(n+=` + '__facet_${t}_' + (facet[${u(i.vgField(t))}])`)}return n}function Ea(e){let t=!1;return Ca(e,e=>{t=t||e.project.items.some(e=>\"_vgsid_\"===e.field)}),t}var Sa,$a,Ba,_a,Na;function Ta(e){this.type=e}Ta.prototype.visit=function(e){var t,n,i;if(e(this))return 1;for(n=0,i=(t=function(e){switch(e.type){case\"ArrayExpression\":return e.elements;case\"BinaryExpression\":case\"LogicalExpression\":return[e.left,e.right];case\"CallExpression\":var t=e.arguments.slice();return t.unshift(e.callee),t;case\"ConditionalExpression\":return[e.test,e.consequent,e.alternate];case\"MemberExpression\":return[e.object,e.property];case\"ObjectExpression\":return e.properties;case\"Property\":return[e.key,e.value];case\"UnaryExpression\":return[e.argument];case\"Identifier\":case\"Literal\":case\"RawCode\":default:return[]}}(this)).length;n<i;++n)if(t[n].visit(e))return 1};(Sa={})[1]=\"Boolean\",Sa[2]=\"<end>\",Sa[3]=\"Identifier\",Sa[4]=\"Keyword\",Sa[5]=\"Null\",Sa[6]=\"Numeric\",Sa[7]=\"Punctuator\",Sa[8]=\"String\",Sa[9]=\"RegularExpression\";var za=new RegExp(\"[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\"),Pa=new RegExp(\"[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0300-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u0483-\\\\u0487\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0610-\\\\u061A\\\\u0620-\\\\u0669\\\\u066E-\\\\u06D3\\\\u06D5-\\\\u06DC\\\\u06DF-\\\\u06E8\\\\u06EA-\\\\u06FC\\\\u06FF\\\\u0710-\\\\u074A\\\\u074D-\\\\u07B1\\\\u07C0-\\\\u07F5\\\\u07FA\\\\u0800-\\\\u082D\\\\u0840-\\\\u085B\\\\u08A0-\\\\u08B2\\\\u08E4-\\\\u0963\\\\u0966-\\\\u096F\\\\u0971-\\\\u0983\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BC-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CE\\\\u09D7\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E3\\\\u09E6-\\\\u09F1\\\\u0A01-\\\\u0A03\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A66-\\\\u0A75\\\\u0A81-\\\\u0A83\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABC-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0AD0\\\\u0AE0-\\\\u0AE3\\\\u0AE6-\\\\u0AEF\\\\u0B01-\\\\u0B03\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3C-\\\\u0B44\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B56\\\\u0B57\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B63\\\\u0B66-\\\\u0B6F\\\\u0B71\\\\u0B82\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD0\\\\u0BD7\\\\u0BE6-\\\\u0BEF\\\\u0C00-\\\\u0C03\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C58\\\\u0C59\\\\u0C60-\\\\u0C63\\\\u0C66-\\\\u0C6F\\\\u0C81-\\\\u0C83\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBC-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0CDE\\\\u0CE0-\\\\u0CE3\\\\u0CE6-\\\\u0CEF\\\\u0CF1\\\\u0CF2\\\\u0D01-\\\\u0D03\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D-\\\\u0D44\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4E\\\\u0D57\\\\u0D60-\\\\u0D63\\\\u0D66-\\\\u0D6F\\\\u0D7A-\\\\u0D7F\\\\u0D82\\\\u0D83\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0DCA\\\\u0DCF-\\\\u0DD4\\\\u0DD6\\\\u0DD8-\\\\u0DDF\\\\u0DE6-\\\\u0DEF\\\\u0DF2\\\\u0DF3\\\\u0E01-\\\\u0E3A\\\\u0E40-\\\\u0E4E\\\\u0E50-\\\\u0E59\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB9\\\\u0EBB-\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EC8-\\\\u0ECD\\\\u0ED0-\\\\u0ED9\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F18\\\\u0F19\\\\u0F20-\\\\u0F29\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F71-\\\\u0F84\\\\u0F86-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u1000-\\\\u1049\\\\u1050-\\\\u109D\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u135D-\\\\u135F\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1714\\\\u1720-\\\\u1734\\\\u1740-\\\\u1753\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1772\\\\u1773\\\\u1780-\\\\u17D3\\\\u17D7\\\\u17DC\\\\u17DD\\\\u17E0-\\\\u17E9\\\\u180B-\\\\u180D\\\\u1810-\\\\u1819\\\\u1820-\\\\u1877\\\\u1880-\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1920-\\\\u192B\\\\u1930-\\\\u193B\\\\u1946-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u19D0-\\\\u19D9\\\\u1A00-\\\\u1A1B\\\\u1A20-\\\\u1A5E\\\\u1A60-\\\\u1A7C\\\\u1A7F-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1AA7\\\\u1AB0-\\\\u1ABD\\\\u1B00-\\\\u1B4B\\\\u1B50-\\\\u1B59\\\\u1B6B-\\\\u1B73\\\\u1B80-\\\\u1BF3\\\\u1C00-\\\\u1C37\\\\u1C40-\\\\u1C49\\\\u1C4D-\\\\u1C7D\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CF6\\\\u1CF8\\\\u1CF9\\\\u1D00-\\\\u1DF5\\\\u1DFC-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u200C\\\\u200D\\\\u203F\\\\u2040\\\\u2054\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D7F-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2DE0-\\\\u2DFF\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u302F\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u3099\\\\u309A\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA62B\\\\uA640-\\\\uA66F\\\\uA674-\\\\uA67D\\\\uA67F-\\\\uA69D\\\\uA69F-\\\\uA6F1\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA827\\\\uA840-\\\\uA873\\\\uA880-\\\\uA8C4\\\\uA8D0-\\\\uA8D9\\\\uA8E0-\\\\uA8F7\\\\uA8FB\\\\uA900-\\\\uA92D\\\\uA930-\\\\uA953\\\\uA960-\\\\uA97C\\\\uA980-\\\\uA9C0\\\\uA9CF-\\\\uA9D9\\\\uA9E0-\\\\uA9FE\\\\uAA00-\\\\uAA36\\\\uAA40-\\\\uAA4D\\\\uAA50-\\\\uAA59\\\\uAA60-\\\\uAA76\\\\uAA7A-\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEF\\\\uAAF2-\\\\uAAF6\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABEA\\\\uABEC\\\\uABED\\\\uABF0-\\\\uABF9\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2D\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF10-\\\\uFF19\\\\uFF21-\\\\uFF3A\\\\uFF3F\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\");function La(e,t){if(!e)throw new Error(\"ASSERT: \"+t)}function Ua(e){return e>=48&&e<=57}function Ra(e){return\"0123456789abcdefABCDEF\".indexOf(e)>=0}function Ma(e){return\"01234567\".indexOf(e)>=0}function qa(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&[5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(e)>=0}function Wa(e){return 10===e||13===e||8232===e||8233===e}function Ia(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||92===e||e>=128&&za.test(String.fromCharCode(e))}function Ha(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=48&&e<=57||92===e||e>=128&&Pa.test(String.fromCharCode(e))}var Ga={if:1,in:1,do:1,var:1,for:1,new:1,try:1,let:1,this:1,else:1,case:1,void:1,with:1,enum:1,while:1,break:1,catch:1,throw:1,const:1,yield:1,class:1,super:1,return:1,typeof:1,delete:1,switch:1,export:1,import:1,public:1,static:1,default:1,finally:1,extends:1,package:1,private:1,function:1,continue:1,debugger:1,interface:1,protected:1,instanceof:1,implements:1};function Ya(){for(var e;Ba<_a&&(qa(e=$a.charCodeAt(Ba))||Wa(e));)++Ba}function Va(e){var t,n,i,r=0;for(n=\"u\"===e?4:2,t=0;t<n;++t)Ba<_a&&Ra($a[Ba])?(i=$a[Ba++],r=16*r+\"0123456789abcdef\".indexOf(i.toLowerCase())):lu({},\"Unexpected token %0\",\"ILLEGAL\");return String.fromCharCode(r)}function Ja(){var e,t,n,i;for(t=0,\"}\"===(e=$a[Ba])&&lu({},\"Unexpected token %0\",\"ILLEGAL\");Ba<_a&&Ra(e=$a[Ba++]);)t=16*t+\"0123456789abcdef\".indexOf(e.toLowerCase());return(t>1114111||\"}\"!==e)&&lu({},\"Unexpected token %0\",\"ILLEGAL\"),t<=65535?String.fromCharCode(t):(n=55296+(t-65536>>10),i=56320+(t-65536&1023),String.fromCharCode(n,i))}function Qa(){var e,t;for(e=$a.charCodeAt(Ba++),t=String.fromCharCode(e),92===e&&(117!==$a.charCodeAt(Ba)&&lu({},\"Unexpected token %0\",\"ILLEGAL\"),++Ba,(e=Va(\"u\"))&&\"\\\\\"!==e&&Ia(e.charCodeAt(0))||lu({},\"Unexpected token %0\",\"ILLEGAL\"),t=e);Ba<_a&&Ha(e=$a.charCodeAt(Ba));)++Ba,t+=String.fromCharCode(e),92===e&&(t=t.substr(0,t.length-1),117!==$a.charCodeAt(Ba)&&lu({},\"Unexpected token %0\",\"ILLEGAL\"),++Ba,(e=Va(\"u\"))&&\"\\\\\"!==e&&Ha(e.charCodeAt(0))||lu({},\"Unexpected token %0\",\"ILLEGAL\"),t+=e);return t}function Xa(){var e,t;return e=Ba,{type:1===(t=92===$a.charCodeAt(Ba)?Qa():function(){var e,t;for(e=Ba++;Ba<_a;){if(92===(t=$a.charCodeAt(Ba)))return Ba=e,Qa();if(!Ha(t))break;++Ba}return $a.slice(e,Ba)}()).length?3:Ga.hasOwnProperty(t)?4:\"null\"===t?5:\"true\"===t||\"false\"===t?1:3,value:t,start:e,end:Ba}}function Za(){var e,t,n,i,r=Ba,o=$a.charCodeAt(Ba),s=$a[Ba];switch(o){case 46:case 40:case 41:case 59:case 44:case 123:case 125:case 91:case 93:case 58:case 63:case 126:return++Ba,{type:7,value:String.fromCharCode(o),start:r,end:Ba};default:if(61===(e=$a.charCodeAt(Ba+1)))switch(o){case 43:case 45:case 47:case 60:case 62:case 94:case 124:case 37:case 38:case 42:return Ba+=2,{type:7,value:String.fromCharCode(o)+String.fromCharCode(e),start:r,end:Ba};case 33:case 61:return Ba+=2,61===$a.charCodeAt(Ba)&&++Ba,{type:7,value:$a.slice(r,Ba),start:r,end:Ba}}}return\">>>=\"===(i=$a.substr(Ba,4))?{type:7,value:i,start:r,end:Ba+=4}:\">>>\"===(n=i.substr(0,3))||\"<<=\"===n||\">>=\"===n?{type:7,value:n,start:r,end:Ba+=3}:s===(t=n.substr(0,2))[1]&&\"+-<>&|\".indexOf(s)>=0||\"=>\"===t?{type:7,value:t,start:r,end:Ba+=2}:\"<>=!+-*%&|^/\".indexOf(s)>=0?{type:7,value:s,start:r,end:++Ba}:void lu({},\"Unexpected token %0\",\"ILLEGAL\")}function Ka(){var e,t,n;if(La(Ua((n=$a[Ba]).charCodeAt(0))||\".\"===n,\"Numeric literal must start with a decimal digit or a decimal point\"),t=Ba,e=\"\",\".\"!==n){if(e=$a[Ba++],n=$a[Ba],\"0\"===e){if(\"x\"===n||\"X\"===n)return++Ba,function(e){for(var t=\"\";Ba<_a&&Ra($a[Ba]);)t+=$a[Ba++];return 0===t.length&&lu({},\"Unexpected token %0\",\"ILLEGAL\"),Ia($a.charCodeAt(Ba))&&lu({},\"Unexpected token %0\",\"ILLEGAL\"),{type:6,value:parseInt(\"0x\"+t,16),start:e,end:Ba}}(t);if(Ma(n))return function(e){for(var t=\"0\"+$a[Ba++];Ba<_a&&Ma($a[Ba]);)t+=$a[Ba++];return(Ia($a.charCodeAt(Ba))||Ua($a.charCodeAt(Ba)))&&lu({},\"Unexpected token %0\",\"ILLEGAL\"),{type:6,value:parseInt(t,8),octal:!0,start:e,end:Ba}}(t);n&&Ua(n.charCodeAt(0))&&lu({},\"Unexpected token %0\",\"ILLEGAL\")}for(;Ua($a.charCodeAt(Ba));)e+=$a[Ba++];n=$a[Ba]}if(\".\"===n){for(e+=$a[Ba++];Ua($a.charCodeAt(Ba));)e+=$a[Ba++];n=$a[Ba]}if(\"e\"===n||\"E\"===n)if(e+=$a[Ba++],\"+\"!==(n=$a[Ba])&&\"-\"!==n||(e+=$a[Ba++]),Ua($a.charCodeAt(Ba)))for(;Ua($a.charCodeAt(Ba));)e+=$a[Ba++];else lu({},\"Unexpected token %0\",\"ILLEGAL\");return Ia($a.charCodeAt(Ba))&&lu({},\"Unexpected token %0\",\"ILLEGAL\"),{type:6,value:parseFloat(e),start:t,end:Ba}}function eu(){var e,t,n,i;return Na=null,Ya(),e=Ba,t=function(){var e,t,n,i;for(La(\"/\"===(e=$a[Ba]),\"Regular expression literal must start with a slash\"),t=$a[Ba++],n=!1,i=!1;Ba<_a;)if(t+=e=$a[Ba++],\"\\\\\"===e)Wa((e=$a[Ba++]).charCodeAt(0))&&lu({},\"Invalid regular expression: missing /\"),t+=e;else if(Wa(e.charCodeAt(0)))lu({},\"Invalid regular expression: missing /\");else if(n)\"]\"===e&&(n=!1);else{if(\"/\"===e){i=!0;break}\"[\"===e&&(n=!0)}return i||lu({},\"Invalid regular expression: missing /\"),{value:t.substr(1,t.length-2),literal:t}}(),n=function(){var e,t,n;for(t=\"\",n=\"\";Ba<_a&&Ha((e=$a[Ba]).charCodeAt(0));)++Ba,\"\\\\\"===e&&Ba<_a?lu({},\"Unexpected token %0\",\"ILLEGAL\"):(n+=e,t+=e);return n.search(/[^gimuy]/g)>=0&&lu({},\"Invalid regular expression\",n),{value:n,literal:t}}(),i=function(e,t){var n=e;t.indexOf(\"u\")>=0&&(n=n.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g,(function(e,t){if(parseInt(t,16)<=1114111)return\"x\";lu({},\"Invalid regular expression\")})).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\"x\"));try{new RegExp(n)}catch(e){lu({},\"Invalid regular expression\")}try{return new RegExp(e,t)}catch(e){return null}}(t.value,n.value),{literal:t.literal+n.literal,value:i,regex:{pattern:t.value,flags:n.value},start:e,end:Ba}}function tu(){var e;return Ya(),Ba>=_a?{type:2,start:Ba,end:Ba}:Ia(e=$a.charCodeAt(Ba))?Xa():40===e||41===e||59===e?Za():39===e||34===e?function(){var e,t,n,i,r=\"\",o=!1;for(La(\"'\"===(e=$a[Ba])||'\"'===e,\"String literal must starts with a quote\"),t=Ba,++Ba;Ba<_a;){if((n=$a[Ba++])===e){e=\"\";break}if(\"\\\\\"===n)if((n=$a[Ba++])&&Wa(n.charCodeAt(0)))\"\\r\"===n&&\"\\n\"===$a[Ba]&&++Ba;else switch(n){case\"u\":case\"x\":\"{\"===$a[Ba]?(++Ba,r+=Ja()):r+=Va(n);break;case\"n\":r+=\"\\n\";break;case\"r\":r+=\"\\r\";break;case\"t\":r+=\"\\t\";break;case\"b\":r+=\"\\b\";break;case\"f\":r+=\"\\f\";break;case\"v\":r+=\"\\v\";break;default:Ma(n)?(0!==(i=\"01234567\".indexOf(n))&&(o=!0),Ba<_a&&Ma($a[Ba])&&(o=!0,i=8*i+\"01234567\".indexOf($a[Ba++]),\"0123\".indexOf(n)>=0&&Ba<_a&&Ma($a[Ba])&&(i=8*i+\"01234567\".indexOf($a[Ba++]))),r+=String.fromCharCode(i)):r+=n}else{if(Wa(n.charCodeAt(0)))break;r+=n}}return\"\"!==e&&lu({},\"Unexpected token %0\",\"ILLEGAL\"),{type:8,value:r,octal:o,start:t,end:Ba}}():46===e?Ua($a.charCodeAt(Ba+1))?Ka():Za():Ua(e)?Ka():Za()}function nu(){var e;return Ba=(e=Na).end,Na=tu(),Ba=e.end,e}function iu(){var e;e=Ba,Na=tu(),Ba=e}function ru(e,t,n){var i=new Ta(\"||\"===e||\"&&\"===e?\"LogicalExpression\":\"BinaryExpression\");return i.operator=e,i.left=t,i.right=n,i}function ou(e,t){var n=new Ta(\"CallExpression\");return n.callee=e,n.arguments=t,n}function su(e){var t=new Ta(\"Identifier\");return t.name=e,t}function au(e){var t=new Ta(\"Literal\");return t.value=e.value,t.raw=$a.slice(e.start,e.end),e.regex&&(\"//\"===t.raw&&(t.raw=\"/(?:)/\"),t.regex=e.regex),t}function uu(e,t,n){var i=new Ta(\"MemberExpression\");return i.computed=\"[\"===e,i.object=t,i.property=n,i.computed||(n.member=!0),i}function cu(e,t,n){var i=new Ta(\"Property\");return i.key=t,i.value=n,i.kind=e,i}function lu(e,t){var n,i=Array.prototype.slice.call(arguments,2),r=t.replace(/%(\\d)/g,(function(e,t){return La(t<i.length,\"Message reference must be in range\"),i[t]}));throw(n=new Error(r)).index=Ba,n.description=r,n}function du(e){2===e.type&&lu(e,\"Unexpected end of input\"),6===e.type&&lu(e,\"Unexpected number\"),8===e.type&&lu(e,\"Unexpected string\"),3===e.type&&lu(e,\"Unexpected identifier\"),4===e.type&&lu(e,\"Unexpected reserved word\"),lu(e,\"Unexpected token %0\",e.value)}function fu(e){var t=nu();7===t.type&&t.value===e||du(t)}function gu(e){return 7===Na.type&&Na.value===e}function pu(e){return 4===Na.type&&Na.value===e}function mu(){var e=[];for(Ba=Na.start,fu(\"[\");!gu(\"]\");)gu(\",\")?(nu(),e.push(null)):(e.push(Cu()),gu(\"]\")||fu(\",\"));return nu(),function(e){var t=new Ta(\"ArrayExpression\");return t.elements=e,t}(e)}function hu(){var e;return Ba=Na.start,8===(e=nu()).type||6===e.type?(e.octal&&lu(e,\"Octal literals are not allowed in strict mode.\"),au(e)):su(e.value)}function bu(){var e,t,n;return Ba=Na.start,3===(e=Na).type?(n=hu(),fu(\":\"),cu(\"init\",n,Cu())):2!==e.type&&7!==e.type?(t=hu(),fu(\":\"),cu(\"init\",t,Cu())):void du(e)}function vu(){var e,t,n=[],i={},r=String;for(Ba=Na.start,fu(\"{\");!gu(\"}\");)t=\"$\"+(\"Identifier\"===(e=bu()).key.type?e.key.name:r(e.key.value)),Object.prototype.hasOwnProperty.call(i,t)?lu({},\"Duplicate data property in object literal not allowed in strict mode\"):i[t]=!0,n.push(e),gu(\"}\")||fu(\",\");return fu(\"}\"),function(e){var t=new Ta(\"ObjectExpression\");return t.properties=e,t}(n)}var yu={if:1,this:1};function xu(){var e,t,n;if(gu(\"(\"))return function(){var e;return fu(\"(\"),e=ku(),fu(\")\"),e}();if(gu(\"[\"))return mu();if(gu(\"{\"))return vu();if(e=Na.type,Ba=Na.start,3===e||yu[Na.value])n=su(nu().value);else if(8===e||6===e)Na.octal&&lu(Na,\"Octal literals are not allowed in strict mode.\"),n=au(nu());else{if(4===e)throw new Error(\"Disabled.\");1===e?((t=nu()).value=\"true\"===t.value,n=au(t)):5===e?((t=nu()).value=null,n=au(t)):gu(\"/\")||gu(\"/=\")?(n=au(eu()),iu()):du(nu())}return n}function Ou(){var e=[];if(fu(\"(\"),!gu(\")\"))for(;Ba<_a&&(e.push(Cu()),!gu(\")\"));)fu(\",\");return fu(\")\"),e}function Au(){return fu(\".\"),Ba=Na.start,function(e){return 3===e.type||4===e.type||1===e.type||5===e.type}(e=nu())||du(e),su(e.value);var e}function wu(){var e;return fu(\"[\"),e=ku(),fu(\"]\"),e}function Fu(){var e=function(){var e;for(e=xu();;)if(gu(\".\"))e=uu(\".\",e,Au());else if(gu(\"(\"))e=ou(e,Ou());else{if(!gu(\"[\"))break;e=uu(\"[\",e,wu())}return e}();if(7===Na.type&&(gu(\"++\")||gu(\"--\")))throw new Error(\"Disabled.\");return e}function ju(){var e,t,n,i,r;if(7!==Na.type&&4!==Na.type)t=Fu();else{if(gu(\"++\")||gu(\"--\"))throw new Error(\"Disabled.\");if(gu(\"+\")||gu(\"-\")||gu(\"~\")||gu(\"!\"))e=nu(),t=ju(),n=e.value,i=t,(r=new Ta(\"UnaryExpression\")).operator=n,r.argument=i,r.prefix=!0,t=r;else{if(pu(\"delete\")||pu(\"void\")||pu(\"typeof\"))throw new Error(\"Disabled.\");t=Fu()}}return t}function Du(e){var t=0;if(7!==e.type&&4!==e.type)return 0;switch(e.value){case\"||\":t=1;break;case\"&&\":t=2;break;case\"|\":t=3;break;case\"^\":t=4;break;case\"&\":t=5;break;case\"==\":case\"!=\":case\"===\":case\"!==\":t=6;break;case\"<\":case\">\":case\"<=\":case\">=\":case\"instanceof\":case\"in\":t=7;break;case\"<<\":case\">>\":case\">>>\":t=8;break;case\"+\":case\"-\":t=9;break;case\"*\":case\"/\":case\"%\":t=11}return t}function Cu(){var e,t;return e=function(){var e,t,n,i,r,o,s,a,u,c;if(e=Na,u=ju(),0===(r=Du(i=Na)))return u;for(i.prec=r,nu(),t=[e,Na],o=[u,i,s=ju()];(r=Du(Na))>0;){for(;o.length>2&&r<=o[o.length-2].prec;)s=o.pop(),a=o.pop().value,u=o.pop(),t.pop(),n=ru(a,u,s),o.push(n);(i=nu()).prec=r,o.push(i),t.push(Na),n=ju(),o.push(n)}for(n=o[c=o.length-1],t.pop();c>1;)t.pop(),n=ru(o[c-1].value,o[c-2],n),c-=2;return n}(),gu(\"?\")&&(nu(),t=Cu(),fu(\":\"),e=function(e,t,n){var i=new Ta(\"ConditionalExpression\");return i.test=e,i.consequent=t,i.alternate=n,i}(e,t,Cu())),e}function ku(){var e=Cu();if(gu(\",\"))throw new Error(\"Disabled.\");return e}function Eu(e){const t=function(e){Ba=0,_a=($a=e).length,Na=null,iu();var t=ku();if(2!==Na.type)throw new Error(\"Unexpect token after expression.\");return t}(e),n=new Set;return t.visit(e=>{\"MemberExpression\"===e.type&&function e(t){return\"MemberExpression\"===t.object.type?e(t.object):\"datum\"===t.object.name}(e)&&n.add(function e(t){const n=[];return\"Identifier\"===t.type?[t.name]:\"Literal\"===t.type?[t.value]:(\"MemberExpression\"===t.type&&(n.push(...e(t.object)),n.push(...e(t.property))),n)}(e).slice(1).join(\".\"))}),n}class Su extends Js{constructor(e,t,n){super(e),this.model=t,this.filter=n,this.expr=_u(this.model,this.filter,this),this._dependentFields=Eu(this.expr)}clone(){return new Su(null,this.model,S(this.filter))}dependentFields(){return this._dependentFields}producedFields(){return new Set}assemble(){return{type:\"filter\",expr:this.expr}}hash(){return`Filter ${this.expr}`}}function $u(e,t,n,i=\"datum\"){const r=[];const o=V(t,(function(t){const o=Y(t),s=e.getSelectionComponent(o,t),a=u(o+Aa);if(s.project.timeUnit){const t=null!=n?n:e.component.data.raw,i=s.project.timeUnit.clone();t.parent?i.insertAsParentOf(t):t.parent=i}return\"none\"!==s.empty&&r.push(a),`vlSelectionTest(${a}, ${i}`+(\"global\"===s.resolve?\")\":`, ${u(s.resolve)})`)}));return(r.length?\"!(\"+r.map(e=>`length(data(${e}))`).join(\" || \")+\") || \":\"\")+`(${o})`}function Bu(e,t){const n=t.encoding;let i=t.field;if(n||i){if(n&&!i){const r=e.project.items.filter(e=>e.channel===n);!r.length||r.length>1?(i=e.project.items[0].field,$t((r.length?\"Multiple \":\"No \")+`matching ${u(n)} encoding found for selection ${u(t.selection)}. `+`Using \"field\": ${u(i)}.`)):i=r[0].field}}else i=e.project.items[0].field,e.project.items.length>1&&$t('A \"field\" or \"encoding\" must be specified when using a selection as a scale domain. '+`Using \"field\": ${u(i)}.`);return`${e.name}[${u(i)}]`}function _u(e,t,n){return V(t,t=>a(t)?t:function(e){return null==e?void 0:e.selection}(t)?$u(e,t.selection,n):pn(t))}function Nu(e,t,n,i){var r,o,s;e.encode=null!==(r=e.encode)&&void 0!==r?r:{},e.encode[t]=null!==(o=e.encode[t])&&void 0!==o?o:{},e.encode[t].update=null!==(s=e.encode[t].update)&&void 0!==s?s:{},e.encode[t].update[n]=i}function Tu(e){return Kt(e)?e.signal:u(e.value)}function zu(e,t,n,i={header:!1}){var r,o;const s=e.combine(),{disable:a,orient:u,scale:c,labelExpr:l,title:d,zindex:f}=s,g=A(s,[\"disable\",\"orient\",\"scale\",\"labelExpr\",\"title\",\"zindex\"]);if(!a){for(const e in g){const n=ce[e],i=g[e];if(n&&n!==t&&\"both\"!==n)delete g[e];else if(ae(i)){const{condition:t}=i,n=A(i,[\"condition\"]),r=h(t),o=se[e];if(o){const{vgProp:t,part:i}=o;Nu(g,i,t,[...r.map(e=>{const{test:t}=e,n=A(e,[\"test\"]);return Object.assign({test:_u(null,t)},n)}),n]),delete g[e]}else if(null===o){const t={signal:r.map(e=>{const{test:t}=e,n=A(e,[\"test\"]);return`${_u(null,t)} ? ${Tu(n)} : `}).join(\"\")+Tu(n)};g[e]=t}}else if(Kt(i)){const t=se[e];if(t){const{vgProp:n,part:r}=t;Nu(g,r,n,i),delete g[e]}}}if(\"grid\"===t){if(!g.grid)return;if(g.encode){const{grid:e}=g.encode;g.encode=Object.assign({},e?{grid:e}:{}),0===I(g.encode).length&&delete g.encode}return Object.assign(Object.assign({scale:c,orient:u},g),{domain:!1,labels:!1,maxExtent:0,minExtent:0,ticks:!1,zindex:ne(f,0)})}{if(!i.header&&e.mainExtracted)return;if(void 0!==l){let e=l;(null===(o=null===(r=g.encode)||void 0===r?void 0:r.labels)||void 0===o?void 0:o.update)&&Kt(g.encode.labels.update.text)&&(e=ee(l,\"datum.label\",g.encode.labels.update.text.signal)),Nu(g,\"labels\",\"text\",{signal:e})}if(g.encode){for(const t of ue)e.hasAxisPart(t)||delete g.encode[t];0===I(g.encode).length&&delete g.encode}const t=function(e,t){if(e)return er(e)?e:e.map(e=>Ui(e,t)).join(\", \")}(d,n);return Object.assign(Object.assign(Object.assign({scale:c,orient:u,grid:!1},t?{title:t}:{}),g),{zindex:ne(f,0)})}}}function Pu(e){const{axes:t}=e.component,n=[];for(const i of ut)if(t[i])for(const r of t[i])if(!r.get(\"gridScale\")){const t=\"x\"===i?\"height\":\"width\",r=e.getSizeSignalRef(t).signal;t!==r&&n.push({name:t,update:r})}return n}const Lu={titleAlign:\"align\",titleAnchor:\"anchor\",titleAngle:\"angle\",titleBaseline:\"baseline\",titleColor:\"color\",titleFont:\"font\",titleFontSize:\"fontSize\",titleFontStyle:\"fontStyle\",titleFontWeight:\"fontWeight\",titleLimit:\"limit\",titleLineHeight:\"lineHeight\",titleOrient:\"orient\",titlePadding:\"offset\"},Uu={labelAlign:\"align\",labelAnchor:\"anchor\",labelAngle:\"angle\",labelBaseline:\"baseline\",labelColor:\"color\",labelFont:\"font\",labelFontSize:\"fontSize\",labelFontStyle:\"fontStyle\",labelFontWeight:\"fontWeight\",labelLimit:\"limit\",labelLineHeight:\"lineHeight\",labelOrient:\"orient\",labelPadding:\"offset\"},Ru=I(Lu),Mu=I(Uu);function qu(e,t){return Object.assign.apply(null,[{},...e.map(e=>t[e])])}function Wu(e,t,n,i){const r=\"band\"===t?[\"axisDiscrete\",\"axisBand\"]:\"point\"===t?[\"axisDiscrete\",\"axisPoint\"]:function(e){return e in Dn}(t)?[\"axisQuantitative\"]:\"time\"===t||\"utc\"===t?[\"axisTemporal\"]:[],o=\"x\"===e?\"axisX\":\"axisY\",s=\"axis\"+Q(n),a=[...r,...r.map(e=>o+e.substr(4))],u=[\"axis\",s,o];return{vlOnlyAxisConfig:qu(a,i),vgAxisConfig:qu(u,i),axisConfigStyle:Iu([...u,...a],i)}}function Iu(e,t){var n;const i=[{}];for(const r of e){let e=null===(n=t[r])||void 0===n?void 0:n.style;if(e){e=h(e);for(const n of e)i.push(t.style[n])}}return Object.assign.apply(null,i)}function Hu(e,t,n,i={}){var r;const o=sr(e,n,t.style);if(void 0!==o)return{configFrom:\"style\",configValue:o};for(const t of[\"vlOnlyAxisConfig\",\"vgAxisConfig\",\"axisConfigStyle\"])if(void 0!==(null===(r=i[t])||void 0===r?void 0:r[e]))return{configFrom:t,configValue:i[t][e]};return{}}function Gu(e,t){if(void 0!==e)return e=re(e),\"top\"===t||\"bottom\"===t?e<=45||315<=e?\"top\"===t?\"bottom\":\"top\":135<=e&&e<=225?\"top\"===t?\"top\":\"bottom\":\"middle\":e<=45||315<=e||135<=e&&e<=225?\"middle\":45<=e&&e<=135?\"left\"===t?\"top\":\"bottom\":\"left\"===t?\"bottom\":\"top\"}function Yu(e,t){if(void 0!==e)return e=re(e),\"top\"===t||\"bottom\"===t?e%180==0?\"center\":0<e&&e<180?\"top\"===t?\"right\":\"left\":\"top\"===t?\"left\":\"right\":(e+90)%180==0?\"center\":90<=e&&e<270?\"left\"===t?\"left\":\"right\":\"left\"===t?\"right\":\"left\"}class Vu extends Js{constructor(e,t){super(e),this.transform=t,this._dependentFields=Eu(this.transform.calculate)}clone(){return new Vu(null,S(this.transform))}static parseAllForSortIndex(e,t){return t.forEachFieldDef((t,n)=>{if(ki(t)&&ci(t.sort)){const{field:i,timeUnit:r}=t,o=t.sort,s=o.map((e,t)=>`${pn({field:i,timeUnit:r,equal:e})} ? ${t} : `).join(\"\")+o.length;e=new Vu(e,{calculate:s,as:Ju(t,n,{forAs:!0})})}}),e}producedFields(){return new Set([this.transform.as])}dependentFields(){return this._dependentFields}assemble(){return{type:\"formula\",expr:this.transform.calculate,as:this.transform.as}}hash(){return`Calculate ${N(this.transform)}`}}function Ju(e,t,n){return $i(e,Object.assign({prefix:t,suffix:\"sort_index\"},null!=n?n:{}))}function Qu(e,t){return z([\"top\",\"bottom\"],t)?\"column\":z([\"left\",\"right\"],t)||\"row\"===e?\"row\":\"column\"}function Xu(e,t,n,i){const r=\"row\"===i?n.headerRow:\"column\"===i?n.headerColumn:n.headerFacet;return ne(((null==t?void 0:t.header)||{})[e],r[e],n.header[e])}function Zu(e,t,n,i){const r={};for(const o of e){const e=Xu(o,t,n,i);void 0!==e&&(r[o]=e)}return r}const Ku=[\"row\",\"column\"],ec=[\"header\",\"footer\"];function tc(e,t){const n=e.component.layoutHeaders[t].title,i=e.config?e.config:void 0,r=e.component.layoutHeaders[t].facetFieldDef?e.component.layoutHeaders[t].facetFieldDef:void 0,{titleAnchor:o,titleAngle:s,titleOrient:a}=Zu([\"titleAnchor\",\"titleAngle\",\"titleOrient\"],r,i,t),u=Qu(t,a);return{name:`${t}-title`,type:\"group\",role:`${u}-title`,title:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({text:n},\"row\"===t?{orient:\"left\"}:{}),{style:\"guide-title\"}),ic(s,u)),nc(u,s,o)),lc(i,r,t,Ru,Lu))}}function nc(e,t,n=\"middle\"){switch(n){case\"start\":return{align:\"left\"};case\"end\":return{align:\"right\"}}const i=Yu(t,\"row\"===e?\"left\":\"top\");return i?{align:i}:{}}function ic(e,t){const n=Gu(e,\"row\"===t?\"left\":\"top\");return n?{baseline:n}:{}}function rc(e,t){const n=e.component.layoutHeaders[t],i=[];for(const r of ec)if(n[r])for(const o of n[r]){const s=ac(e,t,r,n,o);null!=s&&i.push(s)}return i}function oc(e,t){var n;const{sort:i}=e;return ui(i)?{field:$i(i,{expr:\"datum\"}),order:null!==(n=i.order)&&void 0!==n?n:\"ascending\"}:o(i)?{field:Ju(e,t,{expr:\"datum\"}),order:\"ascending\"}:{field:$i(e,{expr:\"datum\"}),order:null!=i?i:\"ascending\"}}function sc(e,t,n){const{format:i,formatType:r,labelAngle:o,labelAnchor:s,labelOrient:a,labelExpr:u}=Zu([\"format\",\"formatType\",\"labelAngle\",\"labelAnchor\",\"labelOrient\",\"labelExpr\"],e,n,t),c=Kn({fieldOrDatumDef:e,format:i,formatType:r,expr:\"parent\",config:n}).signal,l=Qu(t,a);return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({text:{signal:u?ee(ee(u,\"datum.label\",c),\"datum.value\",$i(e,{expr:\"parent\"})):c}},\"row\"===t?{orient:\"left\"}:{}),{style:\"guide-label\",frame:\"group\"}),ic(o,l)),nc(l,o,s)),lc(n,e,t,Mu,Uu))}function ac(e,t,n,i,r){if(r){let o=null;const{facetFieldDef:s}=i,a=e.config?e.config:void 0;if(s&&r.labels){const{labelOrient:e}=Zu([\"labelOrient\"],s,a,t);(\"row\"===t&&!z([\"top\",\"bottom\"],e)||\"column\"===t&&!z([\"left\",\"right\"],e))&&(o=sc(s,t,a))}const u=fd(e)&&!li(e.facet),c=r.axes,l=(null==c?void 0:c.length)>0;if(o||l){const a=\"row\"===t?\"height\":\"width\";return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({name:e.getName(`${t}_${n}`),type:\"group\",role:`${t}-${n}`},i.facetFieldDef?{from:{data:e.getName(t+\"_domain\")},sort:oc(s,t)}:{}),l&&u?{from:{data:e.getName(`facet_domain_${t}`)}}:{}),o?{title:o}:{}),r.sizeSignal?{encode:{update:{[a]:r.sizeSignal}}}:{}),l?{axes:c}:{})}}return null}const uc={column:{start:0,end:1},row:{start:1,end:0}};function cc(e,t){return uc[t][e]}function lc(e,t,n,i,r){const o={};for(const s of i){if(!r[s])continue;const i=Xu(s,t,e,n);void 0!==i&&(o[r[s]]=i)}return o}function dc(e){return[...fc(e,\"width\"),...fc(e,\"height\"),...fc(e,\"childWidth\"),...fc(e,\"childHeight\")]}function fc(e,t){const n=\"width\"===t?\"x\":\"y\",i=e.component.layoutSize.get(t);if(!i||\"merged\"===i)return[];const r=e.getSizeSignalRef(t).signal;if(\"step\"===i){const t=e.getScaleComponent(n);if(t){const i=t.get(\"type\"),o=t.get(\"range\");if(Sn(i)&&en(o)){const i=e.scaleName(n);if(fd(e.parent)){if(\"independent\"===e.parent.component.resolve.scale[n])return[gc(i,o)]}return[gc(i,o),{name:r,update:pc(i,t,`domain('${i}').length`)}]}}throw new Error(\"layout size is step although width/height is not step.\")}if(\"container\"==i){const t=r.endsWith(\"width\"),n=t?\"containerSize()[0]\":\"containerSize()[1]\",i=`isFinite(${n}) ? ${n} : ${eo(e.config.view,t?\"width\":\"height\")}`;return[{name:r,init:i,on:[{update:i,events:\"window:resize\"}]}]}return[{name:r,value:i}]}function gc(e,t){return{name:e+\"_step\",value:t.step}}function pc(e,t,n){const i=t.get(\"type\"),r=t.get(\"padding\"),o=ne(t.get(\"paddingOuter\"),r);let s=t.get(\"paddingInner\");return s=\"band\"===i?void 0!==s?s:r:1,`bandspace(${n}, ${s}, ${o}) * ${e}_step`}function mc(e){return\"childWidth\"===e?\"width\":\"childHeight\"===e?\"height\":e}function hc(e,t){return I(e).reduce((n,i)=>{const r=e[i];return Object.assign(Object.assign({},n),Fs(t,r,i,e=>Kt(e)?e:{value:e.value}))},{})}function bc(e,t){if(pd(t)||fd(t))return\"shared\";if(gd(t))return z(ut,e)?\"independent\":\"shared\";throw new Error(\"invalid model type for resolve\")}function vc(e,t){const n=e.scale[t],i=z(ut,t)?\"axis\":\"legend\";return\"independent\"===n?(\"shared\"===e[i][t]&&$t(Dt.independentScaleMeansIndependentGuide(t)),\"independent\"):e[i][t]||\"shared\"}class yc{constructor(e={},t={}){this.explicit=e,this.implicit=t}clone(){return new yc(S(this.explicit),S(this.implicit))}combine(){return Object.assign(Object.assign({},this.explicit),this.implicit)}get(e){return ne(this.explicit[e],this.implicit[e])}getWithExplicit(e){return void 0!==this.explicit[e]?{explicit:!0,value:this.explicit[e]}:void 0!==this.implicit[e]?{explicit:!1,value:this.implicit[e]}:{explicit:!1,value:void 0}}setWithExplicit(e,t){void 0!==t.value&&this.set(e,t.value,t.explicit)}set(e,t,n){return delete this[n?\"implicit\":\"explicit\"][e],this[n?\"explicit\":\"implicit\"][e]=t,this}copyKeyFromSplit(e,t){void 0!==t.explicit[e]?this.set(e,t.explicit[e],!0):void 0!==t.implicit[e]&&this.set(e,t.implicit[e],!1)}copyKeyFromObject(e,t){void 0!==t[e]&&this.set(e,t[e],!0)}copyAll(e){for(const t of I(e.combine())){const n=e.getWithExplicit(t);this.setWithExplicit(t,n)}}}function xc(e){return{explicit:!0,value:e}}function Oc(e){return{explicit:!1,value:e}}function Ac(e){return(t,n,i,r)=>{const o=e(t.value,n.value);return o>0?t:o<0?n:wc(t,n,i,r)}}function wc(e,t,n,i){return e.explicit&&t.explicit&&$t(Dt.mergeConflictingProperty(n,i,e.value,t.value)),e}function Fc(e,t,n,i,r=wc){return void 0===e||void 0===e.value?t:e.explicit&&!t.explicit?e:t.explicit&&!e.explicit?t:E(e.value,t.value)?e:r(e,t,n,i)}const jc=Object.assign(Object.assign({},{clipHeight:1,columnPadding:1,columns:1,cornerRadius:1,direction:1,fillColor:1,format:1,formatType:1,gradientLength:1,gradientOpacity:1,gradientStrokeColor:1,gradientStrokeWidth:1,gradientThickness:1,gridAlign:1,labelAlign:1,labelBaseline:1,labelColor:1,labelFont:1,labelFontSize:1,labelFontStyle:1,labelFontWeight:1,labelLimit:1,labelOffset:1,labelOpacity:1,labelOverlap:1,labelPadding:1,labelSeparation:1,legendX:1,legendY:1,offset:1,orient:1,padding:1,rowPadding:1,strokeColor:1,symbolDash:1,symbolDashOffset:1,symbolFillColor:1,symbolLimit:1,symbolOffset:1,symbolOpacity:1,symbolSize:1,symbolStrokeColor:1,symbolStrokeWidth:1,symbolType:1,tickCount:1,tickMinStep:1,title:1,titleAlign:1,titleAnchor:1,titleBaseline:1,titleColor:1,titleFont:1,titleFontSize:1,titleFontStyle:1,titleFontWeight:1,titleLimit:1,titleLineHeight:1,titleOpacity:1,titleOrient:1,titlePadding:1,type:1,values:1,zindex:1}),{disable:1,labelExpr:1,selections:1,opacity:1,shape:1,stroke:1,fill:1,size:1,strokeWidth:1,strokeDash:1,encode:1}),Dc=I(jc);class Cc extends yc{}function kc(e){const{legend:t}=e;return ne(t.type,Ec(e))}function Ec({channel:e,timeUnit:t,scaleType:n,alwaysReturn:i}){if(He(e)){if(z([\"quarter\",\"month\",\"day\"],t))return\"symbol\";if(Bn(n))return i?\"gradient\":void 0}return i?\"symbol\":void 0}function Sc({legend:e,legendConfig:t,timeUnit:n,channel:i,scaleType:r}){const o=ne(e.orient,t.orient,\"right\"),s=kc({legend:e,channel:i,timeUnit:n,scaleType:r,alwaysReturn:!0});return ne(e.direction,t[s?\"gradientDirection\":\"symbolDirection\"],function(e,t){switch(e){case\"top\":case\"bottom\":return\"horizontal\";case\"left\":case\"right\":case\"none\":case void 0:return;default:return\"gradient\"===t?\"horizontal\":void 0}}(o,s))}function $c(e,t,n,i){return{signal:`clamp(${e.getSizeSignalRef(t).signal}, ${n}, ${i})`}}function Bc(e,t,n){const i=t.getScaleComponent(n).get(\"type\");return ne(e.get(\"type\"),Ec({channel:n,scaleType:i,alwaysReturn:!0}))}function _c(e){return Tc(e,(e,t)=>Math.max(e,t.value))}function Nc(e){return Tc(e,(e,t)=>ne(e,t.value))}function Tc(e,t){return function(e){const t=e&&e.condition;return!!t&&(o(t)||Ci(t))}(e)?h(e.condition).reduce(t,e.value):Ci(e)?e.value:void 0}function zc(e,t,n){const i=t.get(\"selections\");if(!(null==i?void 0:i.length))return;const r=u(n.field);return i.map(e=>`(!length(data(${u(Y(e)+Aa)})) || (${e}[${r}] && indexof(${e}[${r}], datum.value) >= 0))`).join(\" || \")}var Pc=Object.freeze({__proto__:null,symbols:function(e,t,n,i,r){var s,a,u,c,l;if(\"symbol\"!==Bc(r,n,i))return;const{markDef:d,encoding:f,config:g,mark:p}=n,m=d.filled&&\"trail\"!==p;let h=Object.assign(Object.assign({},function(e,t,n){for(const i of n){const n=rr(i,t.markDef,t.config);void 0!==n&&(e[i]={value:n})}return e}({},n,be)),Ds(n,{filled:m}));const b=null!==(s=_c(f.opacity))&&void 0!==s?s:d.opacity;if(h.fill)if(\"fill\"===i||m&&i===ze)delete h.fill;else if(h.fill.field)r.get(\"symbolFillColor\")?delete h.fill:(h.fill=tr(null!==(a=g.legend.symbolBaseFillColor)&&void 0!==a?a:\"black\"),h.fillOpacity=tr(null!=b?b:1));else if(o(h.fill)){const e=null!==(l=null!==(c=Nc(null!==(u=f.fill)&&void 0!==u?u:f.color))&&void 0!==c?c:d.fill)&&void 0!==l?l:m&&d.color;e&&(h.fill=tr(e))}if(h.stroke)if(\"stroke\"===i||!m&&i===ze)delete h.stroke;else if(h.stroke.field)delete h.stroke;else if(o(h.stroke)){const e=ne(Nc(f.stroke||f.color),d.stroke,m?d.color:void 0);e&&(h.stroke={value:e})}if(\"opacity\"!==i){const t=xi(e)&&zc(n,r,e);t?h.opacity=[Object.assign({test:t},tr(null!=b?b:1)),tr(g.legend.unselectedOpacity)]:b&&(h.opacity=tr(b))}return h=Object.assign(Object.assign({},h),t),I(h).length>0?h:void 0},gradient:function(e,t,n,i,r){if(\"gradient\"!==Bc(r,n,i))return;let o={};const s=_c(n.encoding.opacity)||n.markDef.opacity;return s&&(o.opacity=tr(s)),o=Object.assign(Object.assign({},o),t),I(o).length>0?o:void 0},labels:function(e,t,n,i,r){const o=n.legend(i)||{},s=n.config,a=xi(e)?zc(n,r,e):void 0,u=a?[{test:a,value:1},{value:s.legend.unselectedOpacity}]:void 0,{format:c,formatType:l}=o,d=Kn({fieldOrDatumDef:e,format:c,formatType:l,field:\"datum.value\",config:s,isUTCScale:n.getScaleComponent(i).get(\"type\")===vn.UTC,omitNumberFormatAndEmptyTimeFormat:!0}),f=Object.assign(Object.assign(Object.assign({},u?{opacity:u}:{}),d?{text:d}:{}),t);return I(f).length>0?f:void 0},entries:function(e,t,n,i,r){const o=r.get(\"selections\");return(null==o?void 0:o.length)?{fill:{value:\"transparent\"}}:void 0},getFirstConditionValue:Nc});function Lc(e){dd(e)?e.component.legends=function(e){const{encoding:t}=e,n={};for(const i of[ze,...Wr,\"fillOpacity\",\"strokeOpacity\"]){const r=qi(t[i]);r&&e.getScaleComponent(i)&&(i===Le&&xi(r)&&\"geojson\"===r.type||(n[i]=Rc(e,i)))}return n}(e):e.component.legends=function(e){const{legends:t,resolve:n}=e.component;for(const i of e.children){Lc(i);for(const r of I(i.component.legends))n.legend[r]=vc(e.component.resolve,r),\"shared\"===n.legend[r]&&(t[r]=qc(t[r],i.component.legends[r]),t[r]||(n.legend[r]=\"independent\",delete t[r]))}for(const i of I(t))for(const t of e.children)t.component.legends[i]&&\"shared\"===n.legend[i]&&delete t.component.legends[i];return t}(e)}function Uc(e,t,n,i){switch(t){case\"disable\":return void 0!==n;case\"values\":return!!(null==n?void 0:n.values);case\"title\":if(\"title\"===t&&e===(null==i?void 0:i.title))return!0}return e===(n||{})[t]}function Rc(e,t){var n,i;const r=e.legend(t),o=new Cc({},function(e,t){const n=e.scaleName(t);if(\"trail\"===e.mark){if(\"color\"===t)return{stroke:n};if(\"size\"===t)return{strokeWidth:n}}return\"color\"===t?e.markDef.filled?{fill:n}:{stroke:n}:{[t]:n}}(e,t));!function(e,t,n){var i;const r=null===(i=e.fieldDef(t))||void 0===i?void 0:i.field;Ca(e,e=>{var i,o;const s=null!==(i=e.project.hasField[r])&&void 0!==i?i:e.project.hasChannel[t];if(s&&oa.has(e)){const t=null!==(o=n.get(\"selections\"))&&void 0!==o?o:[];t.push(e.name),n.set(\"selections\",t,!1),s.hasLegend=!0}})}(e,t,o);for(const n of Dc){const i=Mc(n,r,t,e);if(void 0!==i){const s=Uc(i,n,r,e.fieldDef(t));(s||void 0===e.config.legend[n])&&o.set(n,i,s)}}const s=null!==(n=null==r?void 0:r.encoding)&&void 0!==n?n:{},a=o.get(\"selections\"),u={};for(const n of[\"labels\",\"legend\",\"title\",\"symbols\",\"gradient\",\"entries\"]){const r=hc(null!==(i=s[n])&&void 0!==i?i:{},e),c=qi(e.encoding[t]),l=Pc[n]?Pc[n](c,r,e,t,o):r;void 0!==l&&I(l).length>0&&(u[n]=Object.assign(Object.assign(Object.assign({},(null==a?void 0:a.length)&&xi(c)?{name:`${Y(c.field)}_legend_${n}`}:{}),(null==a?void 0:a.length)?{interactive:!!a}:{}),{update:l}))}return I(u).length>0&&o.set(\"encode\",u,!!(null==r?void 0:r.encoding)),o}function Mc(e,t,n,i){var r;if(\"disable\"===e)return void 0!==t&&!t;t=t||{};const{encoding:s,mark:a}=i,u=qi(s[n]),c=i.config.legend,l=xi(u)?null===(r=Xt(u.timeUnit))||void 0===r?void 0:r.unit:void 0,d=i.getScaleComponent(n).get(\"type\");switch(e){case\"direction\":return Sc({legend:t,legendConfig:c,timeUnit:l,channel:n,scaleType:d});case\"format\":if(Vi(u))return;return ei(u.type,t.format,i.config);case\"formatType\":if(Vi(u))return;return t.formatType;case\"gradientLength\":return ne(t.gradientLength,c.gradientLength,function({legend:e,legendConfig:t,model:n,channel:i,scaleType:r}){const{gradientHorizontalMaxLength:o,gradientHorizontalMinLength:s,gradientVerticalMaxLength:a,gradientVerticalMinLength:u}=t;if(Bn(r)){if(\"horizontal\"===Sc({legend:e,legendConfig:t,channel:i,scaleType:r})){const i=ne(e.orient,t.orient);return\"top\"===i||\"bottom\"===i?$c(n,\"width\",s,o):s}return $c(n,\"height\",u,a)}}({model:i,legend:t,legendConfig:c,channel:n,scaleType:d}));case\"labelOverlap\":return ne(t.labelOverlap,function(e){if(z([\"quantile\",\"threshold\",\"log\"],e))return\"greedy\"}(d));case\"symbolType\":return ne(t.symbolType,function(e,t,n,i){var r;if(\"shape\"!==t){const e=null!==(r=Nc(n))&&void 0!==r?r:i;if(e)return e}switch(e){case\"bar\":case\"rect\":case\"image\":case\"square\":return\"square\";case\"line\":case\"trail\":case\"rule\":return\"stroke\";case\"arc\":case\"point\":case\"circle\":case\"tick\":case\"geoshape\":case\"area\":case\"text\":return\"circle\"}}(a,n,s.shape,i.markDef.shape));case\"title\":return Pi(u,i.config,{allowDisabling:!0});case\"type\":return kc({legend:t,channel:n,timeUnit:l,scaleType:d,alwaysReturn:!1});case\"values\":return function(e,t){const n=e.values;return o(n)?Xi(t,n):Kt(n)?n:void 0}(t,u)}return t[e]}function qc(e,t){var n,i,r,o,s,a;if(!e)return t.clone();const u=e.getWithExplicit(\"orient\"),c=t.getWithExplicit(\"orient\");if(u.explicit&&c.explicit&&u.value!==c.value)return;let l=!1;for(const n of Dc){const i=Fc(e.getWithExplicit(n),t.getWithExplicit(n),n,\"legend\",(e,t)=>{switch(n){case\"symbolType\":return Wc(e,t);case\"title\":return lr(e,t);case\"type\":return l=!0,Oc(\"symbol\")}return wc(e,t,n,\"legend\")});e.setWithExplicit(n,i)}return l&&((null===(r=null===(i=null===(n=e.implicit)||void 0===n?void 0:n.encode)||void 0===i?void 0:i.gradient)||void 0===r||r)&&J(e.implicit,[\"encode\",\"gradient\"]),(null===(a=null===(s=null===(o=e.explicit)||void 0===o?void 0:o.encode)||void 0===s?void 0:s.gradient)||void 0===a||a)&&J(e.explicit,[\"encode\",\"gradient\"])),e}function Wc(e,t){return\"circle\"===t.value?t:e}function Ic(e,t,n,i){var r,o,s;e.encode=null!==(r=e.encode)&&void 0!==r?r:{},e.encode[t]=null!==(o=e.encode[t])&&void 0!==o?o:{},e.encode[t].update=null!==(s=e.encode[t].update)&&void 0!==s?s:{},e.encode[t].update[n]=i}function Hc(e){const t=e.component.legends,n={};for(const i of I(t)){const r=e.getScaleComponent(i),o=_(r.get(\"domains\"));if(n[o])for(const e of n[o]){qc(e,t[i])||n[o].push(t[i])}else n[o]=[t[i].clone()]}return H(n).flat().map(Gc).filter(e=>void 0!==e)}function Gc(e){var t,n,i,r;const o=e.combine(),{disable:s,labelExpr:a,selections:u}=o,c=A(o,[\"disable\",\"labelExpr\",\"selections\"]);if(!s){if(null===(t=c.encode)||void 0===t?void 0:t.symbols){const e=c.encode.symbols.update;!e.fill||\"transparent\"===e.fill.value||e.stroke||c.stroke||(e.stroke={value:\"transparent\"});for(const t of Wr)c[t]&&delete e[t]}if(c.title||delete c.title,void 0!==a){let e=a;(null===(r=null===(i=null===(n=c.encode)||void 0===n?void 0:n.labels)||void 0===i?void 0:i.update)||void 0===r?void 0:r.text)&&Kt(c.encode.labels.update.text)&&(e=ee(a,\"datum.label\",c.encode.labels.update.text.signal)),Ic(c,\"labels\",\"text\",{signal:e})}for(const e in c){const t=c[e];if(Kt(t)){const n=Ir[e];if(n){const{vgProp:i,part:r}=n;Ic(c,r,i,t),delete c[e]}}}return c}}function Yc(e){return pd(e)||gd(e)?function(e){return e.children.reduce((e,t)=>e.concat(t.assembleProjections()),Vc(e))}(e):Vc(e)}function Vc(e){const t=e.component.projection;if(!t||t.merged)return[];const n=t.combine(),{name:i}=n;if(t.data){const r={signal:`[${t.size.map(e=>e.signal).join(\", \")}]`},o=t.data.reduce((t,n)=>{const i=Kt(n)?n.signal:`data('${e.lookupDataSource(n)}')`;return z(t,i)||t.push(i),t},[]);if(o.length<=0)throw new Error(\"Projection's fit didn't find any data sources\");return[Object.assign({name:i,size:r,fit:{signal:o.length>1?`[${o.join(\", \")}]`:o[0]}},n)]}return[Object.assign(Object.assign({name:i},{translate:{signal:\"[width / 2, height / 2]\"}}),n)]}const Jc=[\"type\",\"clipAngle\",\"clipExtent\",\"center\",\"rotate\",\"precision\",\"reflectX\",\"reflectY\",\"coefficient\",\"distance\",\"fraction\",\"lobes\",\"parallel\",\"radius\",\"ratio\",\"spacing\",\"tilt\"];class Qc extends yc{constructor(e,t,n,i){super(Object.assign({},t),{name:e}),this.specifiedProjection=t,this.size=n,this.data=i,this.merged=!1}get isFit(){return!!this.data}}function Xc(e){e.component.projection=dd(e)?function(e){var t;if(e.hasProjection){const n=e.specifiedProjection,i=!(n&&(null!=n.scale||null!=n.translate)),r=i?[e.getSizeSignalRef(\"width\"),e.getSizeSignalRef(\"height\")]:void 0,o=i?function(e){const t=[],{encoding:n}=e;for(const i of[[\"longitude\",\"latitude\"],[\"longitude2\",\"latitude2\"]])(qi(n[i[0]])||qi(n[i[1]]))&&t.push({signal:e.getName(`geojson_${t.length}`)});e.channelHasField(Le)&&\"geojson\"===e.typedFieldDef(Le).type&&t.push({signal:e.getName(`geojson_${t.length}`)});0===t.length&&t.push(e.requestDataName(Qo));return t}(e):void 0;return new Qc(e.projectionName(!0),Object.assign(Object.assign({},null!==(t=e.config.projection)&&void 0!==t?t:{}),null!=n?n:{}),r,o)}return}(e):function(e){if(0===e.children.length)return;let t;for(const t of e.children)Xc(t);const n=L(e.children,e=>{const n=e.component.projection;if(n){if(t){const e=function(e,t){const n=L(Jc,n=>!v(e.explicit,n)&&!v(t.explicit,n)||!(!v(e.explicit,n)||!v(t.explicit,n)||_(e.get(n))!==_(t.get(n))));if(_(e.size)===_(t.size)){if(n)return e;if(_(e.explicit)===_({}))return t;if(_(t.explicit)===_({}))return e}return null}(t,n);return e&&(t=e),!!e}return t=n,!0}return!0});if(t&&n){const n=e.projectionName(!0),i=new Qc(n,t.specifiedProjection,t.size,S(t.data));for(const t of e.children){const e=t.component.projection;e&&(e.isFit&&i.data.push(...t.component.projection.data),t.renameProjection(e.get(\"name\"),n),e.merged=!0)}return i}return}(e)}function Zc(e,t){return`${xt(e)}_${t}`}function Kc(e,t,n){var i;const r=Zc(null!==(i=Gi(n,void 0))&&void 0!==i?i:{},t);return e.getName(`${r}_bins`)}function el(e,t,n){let i,r;i=function(e){return\"as\"in e}(e)?a(e.as)?[e.as,`${e.as}_end`]:[e.as[0],e.as[1]]:[$i(e,{forAs:!0}),$i(e,{binSuffix:\"end\",forAs:!0})];const o=Object.assign({},Gi(t,void 0)),s=Zc(o,e.field),{signal:u,extentSignal:c}=function(e,t){return{signal:e.getName(`${t}_bins`),extentSignal:e.getName(`${t}_extent`)}}(n,s);if(Ft(o.extent)){const e=o.extent,t=e.selection;r=Bu(n.getSelectionComponent(Y(t),t),e),delete o.extent}return{key:s,binComponent:Object.assign(Object.assign(Object.assign({bin:o,field:e.field,as:[i]},u?{signal:u}:{}),c?{extentSignal:c}:{}),r?{span:r}:{})}}class tl extends Js{constructor(e,t){super(e),this.bins=t}clone(){return new tl(null,S(this.bins))}static makeFromEncoding(e,t){const n=t.reduceFieldDef((e,n,i)=>{if(Di(n)&&Ot(n.bin)){const{key:r,binComponent:o}=el(n,n.bin,t);e[r]=Object.assign(Object.assign(Object.assign({},o),e[r]),function(e,t,n,i){var r,o;if(Zi(t,n)){const s=dd(e)&&null!==(o=null!==(r=e.axis(n))&&void 0!==r?r:e.legend(n))&&void 0!==o?o:{},a=$i(t,{expr:\"datum\"}),u=$i(t,{expr:\"datum\",binSuffix:\"end\"});return{formulaAs:$i(t,{binSuffix:\"range\",forAs:!0}),formula:ii(a,u,s.format,s.formatType,i)}}return{}}(t,n,i,t.config))}return e},{});return 0===I(n).length?null:new tl(e,n)}static makeFromTransform(e,t,n){const{key:i,binComponent:r}=el(t,t.bin,n);return new tl(e,{[i]:r})}merge(e,t){for(const n of I(e.bins))n in this.bins?(t(e.bins[n].signal,this.bins[n].signal),this.bins[n].as=R([...this.bins[n].as,...e.bins[n].as],N)):this.bins[n]=e.bins[n];for(const t of e.children)e.removeChild(t),t.parent=this;e.remove()}producedFields(){return new Set(H(this.bins).map(e=>e.as).flat(2))}dependentFields(){return new Set(H(this.bins).map(e=>e.field))}hash(){return`Bin ${N(this.bins)}`}assemble(){return H(this.bins).flatMap(e=>{const t=[],[n,...i]=e.as,r=e.bin,{extent:o}=r,s=A(r,[\"extent\"]),a=Object.assign(Object.assign(Object.assign({type:\"bin\",field:K(e.field),as:n,signal:e.signal},Ft(o)?{extent:null}:{extent:o}),e.span?{span:{signal:`span(${e.span})`}}:{}),s);!o&&e.extentSignal&&(t.push({type:\"extent\",field:K(e.field),signal:e.extentSignal}),a.extent={signal:e.extentSignal}),t.push(a);for(const e of i)for(let i=0;i<2;i++)t.push({type:\"formula\",expr:$i({field:n[i]},{expr:\"datum\"}),as:e[i]});return e.formula&&t.push({type:\"formula\",expr:e.formula,as:e.formulaAs}),t})}}class nl extends Js{constructor(e){let t;if(super(null),Go(e=null!=e?e:{name:\"source\"})||(t=e.format?Object.assign({},B(e.format,[\"parse\"])):{}),Io(e))this._data={values:e.values};else if(Wo(e)){if(this._data={url:e.url},!t.type){let n=/(?:\\.([^.]+))?$/.exec(e.url)[1];z([\"json\",\"csv\",\"tsv\",\"dsv\",\"topojson\"],n)||(n=\"json\"),t.type=n}}else Vo(e)?this._data={values:[{type:\"Sphere\"}]}:(Ho(e)||Go(e))&&(this._data={});this._generator=Go(e),e.name&&(this._name=e.name),t&&I(t).length>0&&(this._data.format=t)}dependentFields(){return new Set}producedFields(){}get data(){return this._data}hasName(){return!!this._name}get isGenerator(){return this._generator}get dataName(){return this._name}set dataName(e){this._name=e}set parent(e){throw new Error(\"Source nodes have to be roots.\")}remove(){throw new Error(\"Source nodes are roots and cannot be removed.\")}hash(){throw new Error(\"Cannot hash sources\")}assemble(){return Object.assign(Object.assign({name:this._name},this._data),{transform:[]})}}function il(e){for(const t of e){for(const e of t.children)if(e.parent!==t)return console.error(\"Dataflow graph is inconsistent.\",t,e),!1;if(!il(t.children))return!1}return!0}class rl extends Js{constructor(e,t){super(e),this.params=t}clone(){return new rl(null,this.params)}dependentFields(){return new Set}producedFields(){}hash(){return`Graticule ${N(this.params)}`}assemble(){return Object.assign({type:\"graticule\"},!0===this.params?{}:this.params)}}class ol extends Js{constructor(e,t){super(e),this.params=t}clone(){return new ol(null,this.params)}dependentFields(){return new Set}producedFields(){var e;return new Set([null!==(e=this.params.as)&&void 0!==e?e:\"data\"])}hash(){return`Hash ${N(this.params)}`}assemble(){return Object.assign({type:\"sequence\"},this.params)}}function sl(e){return e instanceof nl||e instanceof rl||e instanceof ol}class al{constructor(){this._mutated=!1}setMutated(){this._mutated=!0}get mutatedFlag(){return this._mutated}}class ul extends al{constructor(){super(),this._continue=!1}setContinue(){this._continue=!0}get continueFlag(){return this._continue}get flags(){return{continueFlag:this.continueFlag,mutatedFlag:this.mutatedFlag}}set flags({continueFlag:e,mutatedFlag:t}){e&&this.setContinue(),t&&this.setMutated()}reset(){}optimizeNextFromLeaves(e){if(sl(e))return!1;const t=e.parent,{continueFlag:n}=this.run(e);return n&&this.optimizeNextFromLeaves(t),this.mutatedFlag}}class cl extends al{}function ll(e,t,n,i){const r=dd(i)?i.encoding[it(t)]:void 0;if(Di(n)&&dd(i)&&hi(t,n,r,i.stack,i.markDef,i.config))e.add($i(n,{})),e.add($i(n,{suffix:\"end\"})),n.bin&&Zi(n,t)&&e.add($i(n,{binSuffix:\"range\"}));else if(t in qe){const n=function(e){switch(e){case\"latitude\":return\"y\";case\"latitude2\":return\"y2\";case\"longitude\":return\"x\";case\"longitude2\":return\"x2\"}}(t);e.add(i.getName(n))}else e.add($i(n));return e}class dl extends Js{constructor(e,t,n){super(e),this.dimensions=t,this.measures=n}clone(){return new dl(null,new Set(this.dimensions),S(this.measures))}get groupBy(){return this.dimensions}static makeFromEncoding(e,t){let n=!1;t.forEachFieldDef(e=>{e.aggregate&&(n=!0)});const i={},r=new Set;return n?(t.forEachFieldDef((e,n)=>{var o,s,a,u;const{aggregate:c,field:l}=e;if(c)if(\"count\"===c)i[\"*\"]=null!==(o=i[\"*\"])&&void 0!==o?o:{},i[\"*\"].count=new Set([$i(e,{forAs:!0})]);else{if(De(c)||Ce(c)){const e=De(c)?\"argmin\":\"argmax\",t=c[e];i[t]=null!==(s=i[t])&&void 0!==s?s:{},i[t][e]=new Set([$i({op:e,field:t},{forAs:!0})])}else i[l]=null!==(a=i[l])&&void 0!==a?a:{},i[l][c]=new Set([$i(e,{forAs:!0})]);mt(n)&&\"unaggregated\"===t.scaleDomain(n)&&(i[l]=null!==(u=i[l])&&void 0!==u?u:{},i[l].min=new Set([$i({field:l,aggregate:\"min\"},{forAs:!0})]),i[l].max=new Set([$i({field:l,aggregate:\"max\"},{forAs:!0})]))}else ll(r,n,e,t)}),r.size+I(i).length===0?null:new dl(e,r,i)):null}static makeFromTransform(e,t){var n,i,r;const o=new Set,s={};for(const e of t.aggregate){const{op:t,field:r,as:o}=e;t&&(\"count\"===t?(s[\"*\"]=null!==(n=s[\"*\"])&&void 0!==n?n:{},s[\"*\"].count=new Set([o||$i(e,{forAs:!0})])):(s[r]=null!==(i=s[r])&&void 0!==i?i:{},s[r][t]=new Set([o||$i(e,{forAs:!0})])))}for(const e of null!==(r=t.groupby)&&void 0!==r?r:[])o.add(e);return o.size+I(s).length===0?null:new dl(e,o,s)}merge(e){return function(e,t){if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0}(this.dimensions,e.dimensions)?(function(e,t){var n;for(const i of I(t)){const r=t[i];for(const t of I(r))i in e?e[i][t]=new Set([...null!==(n=e[i][t])&&void 0!==n?n:[],...r[t]]):e[i]={[t]:r[t]}}}(this.measures,e.measures),!0):(function(...e){St.debug(...e)}(\"different dimensions, cannot merge\"),!1)}addDimensions(e){e.forEach(this.dimensions.add,this.dimensions)}dependentFields(){return new Set([...this.dimensions,...I(this.measures)])}producedFields(){const e=new Set;for(const t of I(this.measures))for(const n of I(this.measures[t])){const i=this.measures[t][n];0===i.size?e.add(`${n}_${t}`):i.forEach(e.add,e)}return e}hash(){return`Aggregate ${N({dimensions:this.dimensions,measures:this.measures})}`}assemble(){const e=[],t=[],n=[];for(const i of I(this.measures))for(const r of I(this.measures[i]))for(const o of this.measures[i][r])n.push(o),e.push(r),t.push(\"*\"===i?null:K(i));return{type:\"aggregate\",groupby:[...this.dimensions].map(K),ops:e,fields:t,as:n}}}class fl extends Js{constructor(e,t,n,i){super(e),this.model=t,this.name=n,this.data=i;for(const e of Ye){const n=t.facet[e];if(n){const{bin:i,sort:r}=n;this[e]=Object.assign({name:t.getName(`${e}_domain`),fields:[$i(n),...Ot(i)?[$i(n,{binSuffix:\"end\"})]:[]]},ui(r)?{sortField:r}:o(r)?{sortIndexField:Ju(n,e)}:{})}}this.childModel=t.child}hash(){let e=\"Facet\";for(const t of Ye)this[t]&&(e+=` ${t.charAt(0)}:${N(this[t])}`);return e}get fields(){var e;const t=[];for(const n of Ye)(null===(e=this[n])||void 0===e?void 0:e.fields)&&t.push(...this[n].fields);return t}dependentFields(){const e=new Set(this.fields);for(const t of Ye)this[t]&&(this[t].sortField&&e.add(this[t].sortField.field),this[t].sortIndexField&&e.add(this[t].sortIndexField));return e}producedFields(){return new Set}getSource(){return this.name}getChildIndependentFieldsWithStep(){const e={};for(const t of[\"x\",\"y\"]){const n=this.childModel.component.scales[t];if(n&&!n.merged){const i=n.get(\"type\"),r=n.get(\"range\");if(Sn(i)&&en(r)){const n=Yl(Vl(this.childModel,t));n?e[t]=n:$t(`Unknown field for ${t}. Cannot calculate view size.`)}}}return e}assembleRowColumnHeaderData(e,t,n){const i={row:\"y\",column:\"x\"}[e],r=[],o=[],s=[];n&&n[i]&&(t?(r.push(`distinct_${n[i]}`),o.push(\"max\")):(r.push(n[i]),o.push(\"distinct\")),s.push(`distinct_${n[i]}`));const{sortField:a,sortIndexField:u}=this[e];if(a){const{op:e=ri,field:t}=a;r.push(t),o.push(e),s.push($i(a,{forAs:!0}))}else u&&(r.push(u),o.push(\"max\"),s.push(u));return{name:this[e].name,source:null!=t?t:this.data,transform:[Object.assign({type:\"aggregate\",groupby:this[e].fields},r.length?{fields:r,ops:o,as:s}:{})]}}assembleFacetHeaderData(e){var t,n;const{columns:i}=this.model.layout,{layoutHeaders:r}=this.model.component,o=[],s={};for(const e of Ku){for(const i of ec){const o=null!==(t=r[e]&&r[e][i])&&void 0!==t?t:[];for(const t of o)if((null===(n=t.axes)||void 0===n?void 0:n.length)>0){s[e]=!0;break}}if(s[e]){const t=`length(data(\"${this.facet.name}\"))`,n=\"row\"===e?i?{signal:`ceil(${t} / ${i})`}:1:i?{signal:`min(${t}, ${i})`}:{signal:t};o.push({name:`${this.facet.name}_${e}`,transform:[{type:\"sequence\",start:0,stop:n}]})}}const{row:a,column:u}=s;return(a||u)&&o.unshift(this.assembleRowColumnHeaderData(\"facet\",null,e)),o}assemble(){var e,t;const n=[];let i=null;const r=this.getChildIndependentFieldsWithStep(),{column:o,row:s,facet:a}=this;if(o&&s&&(r.x||r.y)){i=`cross_${this.column.name}_${this.row.name}`;const o=[].concat(null!==(e=r.x)&&void 0!==e?e:[],null!==(t=r.y)&&void 0!==t?t:[]),s=o.map(()=>\"distinct\");n.push({name:i,source:this.data,transform:[{type:\"aggregate\",groupby:this.fields,fields:o,ops:s}]})}for(const e of[\"column\",_e])this[e]&&n.push(this.assembleRowColumnHeaderData(e,i,r));if(a){const e=this.assembleFacetHeaderData(r);e&&n.push(...e)}return n}}function gl(e){return\"'\"===e[0]&&\"'\"===e[e.length-1]||'\"'===e[0]&&'\"'===e[e.length-1]?e.slice(1,-1):e}function pl(e){const t={};return function e(t,n){if(C(t))e(t.not,n);else if(D(t))for(const i of t.and)e(i,n);else if(j(t))for(const i of t.or)e(i,n);else n(t)}(e.filter,e=>{var n;if(fn(e)){let i=null;on(e)?i=e.equal:ln(e)?i=e.range[0]:dn(e)&&(i=(null!==(n=e.oneOf)&&void 0!==n?n:e.in)[0]),i&&(Bt(i)?t[e.field]=\"date\":x(i)?t[e.field]=\"number\":a(i)&&(t[e.field]=\"string\")),e.timeUnit&&(t[e.field]=\"date\")}}),t}function ml(e){const t={};function n(e){var n;Vi(e)?t[e.field]=\"date\":\"quantitative\"===e.type&&(a(n=e.aggregate)&&z([\"min\",\"max\"],n))?t[e.field]=\"number\":te(e.field)>1?e.field in t||(t[e.field]=\"flatten\"):ki(e)&&ui(e.sort)&&te(e.sort.field)>1&&(e.sort.field in t||(t[e.sort.field]=\"flatten\"))}if((dd(e)||fd(e))&&e.forEachFieldDef((t,i)=>{if(Di(t))n(t);else{const r=tt(i),o=e.fieldDef(r);n(Object.assign(Object.assign({},t),{type:o.type}))}}),dd(e)){const{mark:n,markDef:i,encoding:r}=e;if(ge(n)&&!e.encoding.order){const e=r[\"horizontal\"===i.orient?\"y\":\"x\"];xi(e)&&\"quantitative\"===e.type&&!(e.field in t)&&(t[e.field]=\"number\")}}return t}class hl extends Js{constructor(e,t){super(e),this._parse=t}clone(){return new hl(null,S(this._parse))}hash(){return`Parse ${N(this._parse)}`}static makeExplicit(e,t,n){let i={};const r=t.data;return!Go(r)&&r&&r.format&&r.format.parse&&(i=r.format.parse),this.makeWithAncestors(e,i,{},n)}static makeWithAncestors(e,t,n,i){for(const e of I(n)){const t=i.getWithExplicit(e);void 0!==t.value&&(t.explicit||t.value===n[e]||\"derived\"===t.value||\"flatten\"===n[e]?delete n[e]:$t(Dt.differentParse(e,n[e],t.value)))}for(const e of I(t)){const n=i.get(e);void 0!==n&&(n===t[e]?delete t[e]:$t(Dt.differentParse(e,t[e],n)))}const r=new yc(t,n);i.copyAll(r);const o={};for(const e of I(r.combine())){const t=r.get(e);null!==t&&(o[e]=t)}return 0===I(o).length||i.parseNothing?null:new hl(e,o)}get parse(){return this._parse}merge(e){this._parse=Object.assign(Object.assign({},this._parse),e.parse),e.remove()}assembleFormatParse(){const e={};for(const t of I(this._parse)){const n=this._parse[t];1===te(t)&&(e[t]=n)}return e}producedFields(){return new Set(I(this._parse))}dependentFields(){return new Set(I(this._parse))}assembleTransforms(e=!1){return I(this._parse).filter(t=>!e||te(t)>1).map(e=>{const t=function(e,t){const n=Z(e);if(\"number\"===t)return`toNumber(${n})`;if(\"boolean\"===t)return`toBoolean(${n})`;if(\"string\"===t)return`toString(${n})`;if(\"date\"===t)return`toDate(${n})`;if(\"flatten\"===t)return n;if(0===t.indexOf(\"date:\")){return`timeParse(${n},'${gl(t.slice(5,t.length))}')`}if(0===t.indexOf(\"utc:\")){return`utcParse(${n},'${gl(t.slice(4,t.length))}')`}return $t(Dt.unrecognizedParse(t)),null}(e,this._parse[e]);return t?{type:\"formula\",expr:t,as:(n=e,`${r(n).join(\".\")}`)}:null;var n}).filter(e=>null!==e)}}class bl extends Js{constructor(e,t){super(e),this.transform=t}clone(){return new bl(null,S(this.transform))}addDimensions(e){this.transform.groupby=R(this.transform.groupby.concat(e),e=>e)}dependentFields(){const e=new Set;return this.transform.groupby&&this.transform.groupby.forEach(e.add,e),this.transform.joinaggregate.map(e=>e.field).filter(e=>void 0!==e).forEach(e.add,e),e}producedFields(){return new Set(this.transform.joinaggregate.map(this.getDefaultName))}getDefaultName(e){var t;return null!==(t=e.as)&&void 0!==t?t:$i(e)}hash(){return`JoinAggregateTransform ${N(this.transform)}`}assemble(){const e=[],t=[],n=[];for(const i of this.transform.joinaggregate)t.push(i.op),n.push(this.getDefaultName(i)),e.push(void 0===i.field?null:i.field);const i=this.transform.groupby;return Object.assign({type:\"joinaggregate\",as:n,ops:t,fields:e},void 0!==i?{groupby:i}:{})}}class vl extends Js{constructor(e,t){super(e),this._stack=t}clone(){return new vl(null,S(this._stack))}static makeFromTransform(e,t){const{stack:n,groupby:i,as:r,offset:s=\"zero\"}=t,u=[],c=[];if(void 0!==t.sort)for(const e of t.sort)u.push(e.field),c.push(ne(e.order,\"ascending\"));const l={field:u,order:c};let d;return d=function(e){return o(e)&&e.every(e=>a(e))&&e.length>1}(r)?r:a(r)?[r,r+\"_end\"]:[t.stack+\"_start\",t.stack+\"_end\"],new vl(e,{stackField:n,groupby:i,offset:s,sort:l,facetby:[],as:d})}static makeFromEncoding(e,t){const n=t.stack,{encoding:i}=t;if(!n)return null;const{groupbyChannel:r,fieldChannel:s,offset:a,impute:u}=n;let c;if(r){c=Mi(i[r])}const l=function(e){return e.stack.stackBy.reduce((e,t)=>{const n=$i(t.fieldDef);return n&&e.push(n),e},[])}(t),d=t.encoding.order;let f;return f=o(d)||xi(d)?ar(d):l.reduce((e,t)=>(e.field.push(t),e.order.push(\"y\"===s?\"descending\":\"ascending\"),e),{field:[],order:[]}),new vl(e,{dimensionFieldDef:c,stackField:t.vgField(s),facetby:[],stackby:l,sort:f,offset:a,impute:u,as:[t.vgField(s,{suffix:\"start\",forAs:!0}),t.vgField(s,{suffix:\"end\",forAs:!0})]})}get stack(){return this._stack}addDimensions(e){this._stack.facetby.push(...e)}dependentFields(){const e=new Set;return e.add(this._stack.stackField),this.getGroupbyFields().forEach(e.add,e),this._stack.facetby.forEach(e.add,e),this._stack.sort.field.forEach(e.add,e),e}producedFields(){return new Set(this._stack.as)}hash(){return`Stack ${N(this._stack)}`}getGroupbyFields(){const{dimensionFieldDef:e,impute:t,groupby:n}=this._stack;return e?e.bin?t?[$i(e,{binSuffix:\"mid\"})]:[$i(e,{}),$i(e,{binSuffix:\"end\"})]:[$i(e)]:null!=n?n:[]}assemble(){const e=[],{facetby:t,dimensionFieldDef:n,stackField:i,stackby:r,sort:o,offset:s,impute:a,as:u}=this._stack;if(a&&n){const{band:o=.5,bin:s}=n;s&&e.push({type:\"formula\",expr:`${o}*`+$i(n,{expr:\"datum\"})+`+${1-o}*`+$i(n,{expr:\"datum\",binSuffix:\"end\"}),as:$i(n,{binSuffix:\"mid\",forAs:!0})}),e.push({type:\"impute\",field:i,groupby:[...r,...t],key:$i(n,{binSuffix:\"mid\"}),method:\"value\",value:0})}return e.push({type:\"stack\",groupby:[...this.getGroupbyFields(),...t],field:i,sort:o,as:u,offset:s}),e}}class yl extends Js{constructor(e,t){super(e),this.transform=t}clone(){return new yl(null,S(this.transform))}addDimensions(e){this.transform.groupby=R(this.transform.groupby.concat(e),e=>e)}dependentFields(){var e,t;const n=new Set;return(null!==(e=this.transform.groupby)&&void 0!==e?e:[]).forEach(n.add,n),(null!==(t=this.transform.sort)&&void 0!==t?t:[]).forEach(e=>n.add(e.field)),this.transform.window.map(e=>e.field).filter(e=>void 0!==e).forEach(n.add,n),n}producedFields(){return new Set(this.transform.window.map(this.getDefaultName))}getDefaultName(e){var t;return null!==(t=e.as)&&void 0!==t?t:$i(e)}hash(){return`WindowTransform ${N(this.transform)}`}assemble(){var e;const t=[],n=[],i=[],r=[];for(const e of this.transform.window)n.push(e.op),i.push(this.getDefaultName(e)),r.push(void 0===e.param?null:e.param),t.push(void 0===e.field?null:e.field);const o=this.transform.frame,s=this.transform.groupby;if(o&&null===o[0]&&null===o[1]&&n.every(e=>ke(e)))return Object.assign({type:\"joinaggregate\",as:i,ops:n,fields:t},void 0!==s?{groupby:s}:{});const a=[],u=[];if(void 0!==this.transform.sort)for(const t of this.transform.sort)a.push(t.field),u.push(null!==(e=t.order)&&void 0!==e?e:\"ascending\");const c={field:a,order:u},l=this.transform.ignorePeers;return Object.assign(Object.assign(Object.assign({type:\"window\",params:r,as:i,ops:n,fields:t,sort:c},void 0!==l?{ignorePeers:l}:{}),void 0!==s?{groupby:s}:{}),void 0!==o?{frame:o}:{})}}class xl extends Js{clone(){return new xl(null)}constructor(e){super(e)}dependentFields(){return new Set}producedFields(){return new Set([\"_vgsid_\"])}hash(){return\"Identifier\"}assemble(){return{type:\"identifier\",as:\"_vgsid_\"}}}class Ol extends ul{run(e){const t=e.parent;if(e instanceof hl){if(sl(t))return this.flags;if(t.numChildren()>1)return this.setContinue(),this.flags;if(t instanceof hl)this.setMutated(),t.merge(e);else{if(W(t.producedFields(),e.dependentFields()))return this.setContinue(),this.flags;this.setMutated(),e.swapWithParent()}}return this.setContinue(),this.flags}}class Al extends cl{mergeNodes(e,t){const n=t.shift();for(const i of t)e.removeChild(i),i.parent=n,i.remove()}run(e){const t=e.children.map(e=>e.hash()),n={};for(let i=0;i<t.length;i++)void 0===n[t[i]]?n[t[i]]=[e.children[i]]:n[t[i]].push(e.children[i]);for(const t of I(n))n[t].length>1&&(this.setMutated(),this.mergeNodes(e,n[t]));for(const t of e.children)this.run(t);return this.mutatedFlag}}class wl extends ul{run(e){return e instanceof Qs||e.numChildren()>0||e instanceof fl||(this.setMutated(),e.remove()),this.flags}}class Fl extends ul{constructor(){super(...arguments),this.fields=new Set,this.prev=null}run(e){if(this.setContinue(),e instanceof Xs){const t=e.producedFields();M(t,this.fields)?(this.setMutated(),this.prev.remove()):this.fields=new Set([...this.fields,...t]),this.prev=e}return this.flags}reset(){this.fields.clear()}}class jl extends ul{run(e){this.setContinue();const t=e.parent.children.filter(e=>e instanceof Xs),n=t.pop();for(const e of t)this.setMutated(),n.merge(e);return this.flags}}function Dl(e){if(e instanceof fl)if(1!==e.numChildren()||e.children[0]instanceof Qs){const n=e.model.component.data.main;!function e(t){if(t instanceof Qs&&t.type===Qo&&1===t.numChildren()){const n=t.children[0];n instanceof fl||(n.swapWithParent(),e(t))}}(n);const i=(t=e,function e(n){if(!(n instanceof fl)){const i=n.clone();if(i instanceof Qs){const e=_l+i.getSource();i.setSource(e),t.model.component.data.outputNodes[e]=i}else(i instanceof dl||i instanceof vl||i instanceof yl||i instanceof bl)&&i.addDimensions(t.fields);for(const t of n.children.flatMap(e))t.parent=i;return[i]}return n.children.flatMap(e)}),r=e.children.map(i).flat();for(const e of r)e.parent=n}else{const t=e.children[0];(t instanceof dl||t instanceof vl||t instanceof yl||t instanceof bl)&&t.addDimensions(e.fields),t.swapWithParent(),Dl(e)}else e.children.map(Dl);var t}class Cl extends cl{constructor(){super()}run(e){e instanceof Qs&&!e.isRequired()&&(this.setMutated(),e.remove());for(const t of e.children)this.run(t);return this.mutatedFlag}}class kl extends cl{constructor(e){super(),this.requiresSelectionId=e&&Ea(e)}run(e){e instanceof xl&&(this.requiresSelectionId&&(sl(e.parent)||e.parent instanceof dl||e.parent instanceof hl)||(this.setMutated(),e.remove()));for(const t of e.children)this.run(t);return this.mutatedFlag}}class El extends ul{run(e){const t=e.parent,n=[...t.children],i=t.children.filter(e=>e instanceof hl);if(t.numChildren()>1&&i.length>=1){const e={},r=new Set;for(const t of i){const n=t.parse;for(const t of I(n))t in e?e[t]!==n[t]&&r.add(t):e[t]=n[t]}for(const t of r)delete e[t];if(0!==I(e).length){this.setMutated();const i=new hl(t,e);for(const r of n){if(r instanceof hl)for(const t of I(e))delete r.parse[t];t.removeChild(r),r.parent=i,r instanceof hl&&0===I(r.parse).length&&r.remove()}}}return this.setContinue(),this.flags}}class Sl extends ul{run(e){const t=e.parent,n=t.children.filter(e=>e instanceof dl),i={};for(const e of n){const t=N(e.groupBy);t in i||(i[t]=[]),i[t].push(e)}for(const e of I(i)){const n=i[e];if(n.length>1){const e=n.pop();for(const i of n)e.merge(i)&&(t.removeChild(i),i.parent=e,i.remove(),this.setMutated())}}return this.setContinue(),this.flags}}class $l extends ul{constructor(e){super(),this.model=e}run(e){const t=e.parent,n=!(sl(t)||t instanceof Su||t instanceof hl||t instanceof xl),i=[],r=[];for(const e of t.children)e instanceof tl&&(n&&!W(t.producedFields(),e.dependentFields())?i.push(e):r.push(e));if(i.length>0){const e=i.pop();for(const t of i)e.merge(t,this.model.renameSignal.bind(this.model));this.setMutated(),t instanceof tl?t.merge(e,this.model.renameSignal.bind(this.model)):e.swapWithParent()}if(r.length>1){const e=r.pop();for(const t of r)e.merge(t,this.model.renameSignal.bind(this.model));this.setMutated()}return this.setContinue(),this.flags}}class Bl extends ul{run(e){const t=e.parent,n=[...t.children];if(!P(n,e=>e instanceof Qs)||t.numChildren()<=1)return this.setContinue(),this.flags;const i=[];let r;for(const e of n)if(e instanceof Qs){let n=e;for(;1===n.numChildren();){const e=n.children[0];if(!(e instanceof Qs))break;n=e}i.push(...n.children),r?(t.removeChild(e),e.parent=r.parent,r.parent.removeChild(r),r.parent=n,this.setMutated()):r=n}else i.push(e);if(i.length){this.setMutated();for(const e of i)e.parent.removeChild(e),e.parent=r}return this.setContinue(),this.flags}}const _l=\"scale_\";function Nl(e){const t=[];function n(e){if(0===e.numChildren())t.push(e);else for(const t of e.children)n(t)}for(const t of e)n(t);return t}function Tl(e){return e}function zl(e,t){return t.map(t=>{if(e instanceof ul){const n=e.optimizeNextFromLeaves(t);return e.reset(),n}return e.run(t)}).some(Tl)}function Pl(e,t){let n=e.sources;const i=new Set;return i.add(zl(new Cl,n)),i.add(zl(new kl(t),n)),n=n.filter(e=>e.numChildren()>0),i.add(zl(new wl,Nl(n))),n=n.filter(e=>e.numChildren()>0),i.add(zl(new Ol,Nl(n))),i.add(zl(new $l(t),Nl(n))),i.add(zl(new Fl,Nl(n))),i.add(zl(new El,Nl(n))),i.add(zl(new Sl,Nl(n))),i.add(zl(new jl,Nl(n))),i.add(zl(new Al,n)),i.add(zl(new Bl,Nl(n))),e.sources=n,i.has(!0)}class Ll{constructor(e){Object.defineProperty(this,\"signal\",{enumerable:!0,get:e})}static fromName(e,t){return new Ll(()=>e(t))}}function Ul(e){dd(e)?function(e){const t=e.component.scales;for(const n of I(t)){const i=Rl(e,n);if(t[n].setWithExplicit(\"domains\",i),Il(e,n),e.component.data.isFaceted){let t=e;for(;!fd(t)&&t.parent;)t=t.parent;if(\"shared\"===t.component.resolve.scale[n])for(const e of i.value)tn(e)&&(e.data=_l+e.data.replace(_l,\"\"))}}}(e):function(e){for(const t of e.children)Ul(t);const t=e.component.scales;for(const n of I(t)){let i,r=null;for(const t of e.children){const e=t.component.scales[n];if(e){i=void 0===i?e.getWithExplicit(\"domains\"):Fc(i,e.getWithExplicit(\"domains\"),\"domains\",\"scale\",Gl);const t=e.get(\"selectionExtent\");r&&t&&r.selection!==t.selection&&$t(\"The same selection must be used to override scale domains in a layered view.\"),r=t}}t[n].setWithExplicit(\"domains\",i),r&&t[n].set(\"selectionExtent\",r,!0)}}(e)}function Rl(e,t){const n=e.getScaleComponent(t).get(\"type\"),{encoding:i}=e,r=function(e,t,n,i){if(\"unaggregated\"===e){const{valid:e,reason:i}=Hl(t,n);if(!e)return void $t(i)}else if(void 0===e&&i.useUnaggregatedDomain){const{valid:e}=Hl(t,n);if(e)return\"unaggregated\"}return e}(e.scaleDomain(t),e.typedFieldDef(t),n,e.config.scale);return r!==e.scaleDomain(t)&&(e.specifiedScales[t]=Object.assign(Object.assign({},e.specifiedScales[t]),{domain:r})),\"x\"===t&&qi(i.x2)?qi(i.x)?Fc(ql(n,r,e,\"x\"),ql(n,r,e,\"x2\"),\"domain\",\"scale\",Gl):ql(n,r,e,\"x2\"):\"y\"===t&&qi(i.y2)?qi(i.y)?Fc(ql(n,r,e,\"y\"),ql(n,r,e,\"y2\"),\"domain\",\"scale\",Gl):ql(n,r,e,\"y2\"):ql(n,r,e,t)}function Ml(e,t,n){var i;const r=null===(i=Xt(n))||void 0===i?void 0:i.unit;return\"temporal\"===t||r?function(e,t,n){return e.map(e=>({signal:`{data: ${Qi(e,{timeUnit:n,type:t})}}`}))}(e,t,r):[e]}function ql(e,t,n,i){const{encoding:r}=n,o=qi(r[i]),{type:a}=o,u=o.timeUnit;if(function(e){return e&&e.unionWith}(t)){const r=ql(e,void 0,n,i),o=Ml(t.unionWith,a,u);return xc([...r.value,...o])}if(Kt(t))return xc([t]);if(t&&\"unaggregated\"!==t&&!Nn(t))return xc(Ml(t,a,u));const c=n.stack;if(c&&i===c.fieldChannel){if(\"normalize\"===c.offset)return Oc([[0,1]]);const e=n.requestDataName(Qo);return Oc([{data:e,field:n.vgField(i,{suffix:\"start\"})},{data:e,field:n.vgField(i,{suffix:\"end\"})}])}const l=mt(i)&&xi(o)?function(e,t,n){if(!Sn(n))return;const i=e.fieldDef(t),r=i.sort;if(ci(r))return{op:\"min\",field:Ju(i,t),order:\"ascending\"};const{stack:o}=e,s=o?[...o.groupbyField?[o.groupbyField]:[],...o.stackBy.map(e=>e.fieldDef.field)]:void 0;if(ui(r)){const e=o&&!z(s,r.field);return Wl(r,e)}if(ai(r)){const{encoding:t,order:n}=r,i=e.fieldDef(t),{aggregate:a,field:u}=i,c=o&&!z(s,u);if(De(a)||Ce(a))return Wl({field:$i(i),order:n},c);if(ke(a)||!a)return Wl({op:a,field:u,order:n},c)}else{if(\"descending\"===r)return{op:\"min\",field:e.vgField(t),order:\"descending\"};if(z([\"ascending\",void 0],r))return!0}return}(n,i,e):void 0;if(Ai(o)){return Oc(Ml([o.datum],a,u))}const d=o;if(\"unaggregated\"===t){const e=n.requestDataName(Qo),{field:t}=o;return Oc([{data:e,field:$i({field:t,aggregate:\"min\"})},{data:e,field:$i({field:t,aggregate:\"max\"})}])}if(Ot(d.bin)){if(Sn(e))return Oc(\"bin-ordinal\"===e?[]:[{data:G(l)?n.requestDataName(Qo):n.requestDataName(\"raw\"),field:n.vgField(i,Zi(d,i)?{binSuffix:\"range\"}:{}),sort:!0!==l&&s(l)?l:{field:n.vgField(i,{}),op:\"min\"}}]);{const{bin:e}=d;if(Ot(e)){const t=Kc(n,d.field,e);return Oc([new Ll(()=>{const e=n.getSignalName(t);return`[${e}.start, ${e}.stop]`})])}return Oc([{data:n.requestDataName(Qo),field:n.vgField(i,{})}])}}if(d.timeUnit&&z([\"time\",\"utc\"],e)&&hi(i,d,dd(n)?n.encoding[it(i)]:void 0,n.stack,n.markDef,n.config)){const e=n.requestDataName(Qo);return Oc([{data:e,field:n.vgField(i)},{data:e,field:n.vgField(i,{suffix:\"end\"})}])}return Oc(l?[{data:G(l)?n.requestDataName(Qo):n.requestDataName(\"raw\"),field:n.vgField(i),sort:l}]:[{data:n.requestDataName(Qo),field:n.vgField(i)}])}function Wl(e,t){const{op:n,field:i,order:r}=e;return Object.assign(Object.assign({op:null!=n?n:t?\"sum\":ri},i?{field:K(i)}:{}),r?{order:r}:{})}function Il(e,t){var n;const i=e.component.scales[t],r=e.specifiedScales[t].domain,o=null===(n=e.fieldDef(t))||void 0===n?void 0:n.bin,s=Nn(r)&&r,a=wt(o)&&Ft(o.extent)&&o.extent;(s||a)&&i.set(\"selectionExtent\",null!=s?s:a,!0)}function Hl(e,t){const{aggregate:n,type:i}=e;return n?a(n)&&!Be[n]?{valid:!1,reason:Dt.unaggregateDomainWithNonSharedDomainOp(n)}:\"quantitative\"===i&&\"log\"===t?{valid:!1,reason:Dt.unaggregatedDomainWithLogScale(e)}:{valid:!0}:{valid:!1,reason:Dt.unaggregateDomainHasNoEffectForRawField(e)}}function Gl(e,t,n,i){return e.explicit&&t.explicit&&$t(Dt.mergeConflictingDomainProperty(n,i,e.value,t.value)),{explicit:e.explicit,value:[...e.value,...t.value]}}function Yl(e){if(tn(e)&&a(e.field))return e.field;if(function(e){return!o(e)&&(\"fields\"in e&&!(\"data\"in e))}(e)){let t;for(const n of e.fields)if(tn(n)&&a(n.field))if(t){if(t!==n.field)return $t(\"Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.\"),t}else t=n.field;return $t(\"Detected faceted independent scales that union domain of identical fields from different source detected. We will assume that this is the same field from a different fork of the same data source. However, if this is not case, the result view size maybe incorrect.\"),t}if(function(e){return!o(e)&&(\"fields\"in e&&\"data\"in e)}(e)){$t(\"Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.\");const t=e.fields[0];return a(t)?t:void 0}}function Vl(e,t){return function(e){const t=R(e.map(e=>{if(tn(e)){return A(e,[\"sort\"])}return e}),N),n=R(e.map(e=>{if(tn(e)){const t=e.sort;return void 0===t||G(t)||(\"op\"in t&&\"count\"===t.op&&delete t.field,\"ascending\"===t.order&&delete t.order),t}}).filter(e=>void 0!==e),N);if(0===t.length)return;if(1===t.length){const t=e[0];if(tn(t)&&n.length>0){let e=n[0];if(n.length>1)$t(Dt.MORE_THAN_ONE_SORT),e=!0;else if(s(e)&&\"field\"in e){const n=e.field;t.field===n&&(e=!e.order||{order:e.order})}return Object.assign(Object.assign({},t),{sort:e})}return t}const i=R(n.map(e=>G(e)||!(\"op\"in e)||e.op in je?e:($t(Dt.domainSortDropped(e)),!0)),N);let r;1===i.length?r=i[0]:i.length>1&&($t(Dt.MORE_THAN_ONE_SORT),r=!0);const o=R(e.map(e=>tn(e)?e.data:null),e=>e);if(1===o.length&&null!==o[0]){return Object.assign({data:o[0],fields:t.map(e=>e.field)},r?{sort:r}:{})}return Object.assign({fields:t},r?{sort:r}:{})}(e.component.scales[t].get(\"domains\").map(t=>(tn(t)&&(t.data=e.lookupDataSource(t.data)),t)))}function Jl(e){return I(e.component.scales).reduce((t,n)=>{const i=e.component.scales[n];if(i.merged)return t;const r=i.combine(),{name:o,type:s,selectionExtent:a,domains:u,range:c,reverse:l}=r,d=A(r,[\"name\",\"type\",\"selectionExtent\",\"domains\",\"range\",\"reverse\"]),f=function(e,t,n){if(ct(n)&&en(e))return{step:{signal:t+\"_step\"}};return e}(r.range,o,n);let g;a&&(g=function(e,t){const n=t.selection;return{signal:Bu(e.getSelectionComponent(n,Y(n)),t)}}(e,a));const p=Vl(e,n);return t.push(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({name:o,type:s},p?{domain:p}:{}),g?{domainRaw:g}:{}),{range:f}),void 0!==l?{reverse:l}:{}),d)),t},[])}class Ql extends yc{constructor(e,t){super({},{name:e}),this.merged=!1,this.setWithExplicit(\"type\",t)}domainDefinitelyIncludesZero(){return!1!==this.get(\"zero\")||P(this.get(\"domains\"),e=>o(e)&&2===e.length&&e[0]<=0&&e[1]>=0)}}const Xl=[\"range\",\"scheme\"];function Zl(e){return\"x\"===e?\"width\":\"y\"===e?\"height\":void 0}function Kl(e,t){const n=e.fieldDef(t);if(n&&n.bin&&Ot(n.bin)){const i=Kc(e,n.field,n.bin),r=Zl(t),o=e.getName(r);return new Ll(()=>{const t=e.getSignalName(i),n=`(${t}.stop - ${t}.start) / ${t}.step`;return`${e.getSignalName(o)} / (${n})`})}}function ed(e,t){const n=t.specifiedScales[e],{size:i}=t,r=t.getScaleComponent(e).get(\"type\");for(const i of Xl)if(void 0!==n[i]){const s=Pn(r,i),a=Ln(e,i);if(s)if(a)$t(a);else switch(i){case\"range\":return o(n.range)&&ct(e)?xc(n.range.map(e=>{if(\"width\"===e||\"height\"===e){const n=t.getName(e),i=t.getSignalName.bind(t);return Ll.fromName(i,n)}return e})):xc(n.range);case\"scheme\":return xc(td(n[i]))}else $t(Dt.scalePropertyNotWorkWithScaleType(r,i,e))}if(e===Ne||e===Te){const t=e===Ne?\"width\":\"height\",n=i[t];if(Xr(n)){if(Sn(r))return xc({step:n.step});$t(Dt.stepDropped(t))}}return Oc(function(e,t){const{size:n,config:i,mark:r,encoding:s}=t,a=t.getSignalName.bind(t),{type:u}=qi(s[e]),c=t.getScaleComponent(e).get(\"type\"),{domain:l,domainMid:d}=t.specifiedScales[e];switch(e){case Ne:case Te:{if(z([\"point\",\"band\"],c))if(e!==Ne||n.width){if(e===Te&&!n.height){const e=no(i.view,\"height\");if(Xr(e))return e}}else{const e=no(i.view,\"width\");if(Xr(e))return e}const r=Zl(e),o=t.getName(r);return e===Te&&$n(c)?[Ll.fromName(a,o),0]:[0,Ll.fromName(a,o)]}case\"size\":{const s=t.component.scales[e].get(\"zero\"),a=function e(t,n,i){if(n)return Kt(n)?{signal:`${n.signal} ? 0 : ${e(t,!1,i)}`}:0;switch(t){case\"bar\":case\"tick\":return i.scale.minBandSize;case\"line\":case\"trail\":case\"rule\":return i.scale.minStrokeWidth;case\"text\":return i.scale.minFontSize;case\"point\":case\"square\":case\"circle\":return i.scale.minSize}throw new Error(Dt.incompatibleChannel(\"size\",t))}(r,s,i),u=function(e,t,n,i){const r={x:Kl(n,\"x\"),y:Kl(n,\"y\")};switch(e){case\"bar\":case\"tick\":{if(void 0!==i.scale.maxBandSize)return i.scale.maxBandSize;const e=nd(t,r,i.view);return x(e)?e-1:new Ll(()=>`${e.signal} - 1`)}case\"line\":case\"trail\":case\"rule\":return i.scale.maxStrokeWidth;case\"text\":return i.scale.maxFontSize;case\"point\":case\"square\":case\"circle\":{if(i.scale.maxSize)return i.scale.maxSize;const e=nd(t,r,i.view);return x(e)?Math.pow(.95*e,2):new Ll(()=>`pow(0.95 * ${e.signal}, 2)`)}}throw new Error(Dt.incompatibleChannel(\"size\",e))}(r,n,t,i);return _n(c)?function(e,t,n){const i=()=>{const i=Kt(t)?t.signal:t,r=Kt(e)?e.signal:e,o=`(${i} - ${r}) / (${n} - 1)`;return`sequence(${r}, ${i} + ${o}, ${o})`};return Kt(t)?new Ll(i):{signal:i()}}(a,u,function(e,t,n,i){switch(e){case\"quantile\":return t.scale.quantileCount;case\"quantize\":return t.scale.quantizeCount;case\"threshold\":return void 0!==n&&o(n)?n.length+1:($t(Dt.domainRequiredForThresholdScale(i)),3)}}(c,i,l,e)):[a,u]}case\"theta\":return[0,2*Math.PI];case\"angle\":return[0,360];case\"radius\":return[0,new Ll(()=>`min(${t.getSignalName(\"width\")},${t.getSignalName(\"height\")})/2`)];case\"strokeWidth\":return[i.scale.minStrokeWidth,i.scale.maxStrokeWidth];case\"strokeDash\":return[[1,0],[4,2],[2,1],[1,1],[1,2,4,2]];case Le:return\"symbol\";case ze:case Pe:case\"stroke\":return\"ordinal\"===c?\"nominal\"===u?\"category\":\"ordinal\":void 0!==d?\"diverging\":\"rect\"===r||\"geoshape\"===r?\"heatmap\":\"ramp\";case\"opacity\":case\"fillOpacity\":case\"strokeOpacity\":return[i.scale.minOpacity,i.scale.maxOpacity]}throw new Error(`Scale range undefined for channel ${e}`)}(e,t))}function td(e){return function(e){return!a(e)&&!!e.name}(e)?Object.assign({scheme:e.name},B(e,[\"name\"])):{scheme:e}}function nd(e,t,n){const i=Xr(e.width)?e.width.step:to(n,\"width\"),r=Xr(e.height)?e.height.step:to(n,\"height\");return t.x||t.y?new Ll(()=>`min(${[t.x?t.x.signal:i,t.y?t.y.signal:r].join(\", \")})`):Math.min(i,r)}function id(e,t){dd(e)?function(e,t){const n=e.component.scales,{config:i,encoding:r,markDef:o,specifiedScales:s}=e;for(const a of I(n)){const u=s[a],c=n[a],l=e.getScaleComponent(a),d=qi(r[a]),f=u[t],g=l.get(\"type\"),p=Pn(g,t),m=Ln(a,t);if(void 0!==f&&(p?m&&$t(m):$t(Dt.scalePropertyNotWorkWithScaleType(g,t,a))),p&&void 0===m)if(void 0!==f)c.copyKeyFromObject(t,u);else{const n=rd(t,e,a,d,l.get(\"type\"),l.get(\"padding\"),l.get(\"paddingInner\"),u.domain,o,i);void 0!==n&&c.set(t,n,!1)}}}(e,t):sd(e,t)}function rd(e,t,n,i,r,s,a,u,c,l){const d=l.scale,{type:f}=i;switch(e){case\"bins\":return xi(i)?function(e,t){const n=t.bin;if(Ot(n)){const i=Kc(e,t.field,n);return new Ll(()=>e.getSignalName(i))}if(At(n)&&wt(n)&&void 0!==n.step)return{step:n.step};return}(t,i):void 0;case\"interpolate\":return function(e,t){if(z([ze,Pe,\"stroke\"],e)&&\"nominal\"!==t)return\"hcl\";return}(n,f);case\"nice\":return function(e,t,n){var i;if((null===(i=Mi(n))||void 0===i?void 0:i.bin)||z([vn.TIME,vn.UTC],e))return;return!!z([Ne,Te],t)||void 0}(r,n,i);case\"padding\":return function(e,t,n,i,r,o){if(z([Ne,Te],e)){if(Bn(t)){if(void 0!==n.continuousPadding)return n.continuousPadding;const{type:t,orient:s}=r;if(\"bar\"===t&&(!xi(i)||!i.bin&&!i.timeUnit)&&(\"vertical\"===s&&\"x\"===e||\"horizontal\"===s&&\"y\"===e))return o.continuousBandSize}if(t===vn.POINT)return n.pointPadding}return}(n,r,d,i,c,l.bar);case\"paddingInner\":return function(e,t,n,i){if(void 0!==e)return;if(z([Ne,Te],t)){const{bandPaddingInner:e,barBandPaddingInner:t,rectBandPaddingInner:r}=i;return ne(e,\"bar\"===n?t:r)}return}(s,n,c.type,d);case\"paddingOuter\":return function(e,t,n,i,r,o){if(void 0!==e)return;if(z([Ne,Te],t)&&n===vn.BAND){const{bandPaddingOuter:e}=o;return ne(e,Kt(r)?{signal:`${r.signal}/2`}:r/2)}return}(s,n,r,c.type,a,d);case\"reverse\":return function(e,t,n,i){if(\"x\"===n&&void 0!==i.xReverse)return $n(e)&&\"descending\"===t?Kt(i.xReverse)?{signal:`!${i.xReverse.signal}`}:!i.xReverse:i.xReverse;if($n(e)&&\"descending\"===t)return!0;return}(r,xi(i)?i.sort:void 0,n,d);case\"zero\":return function(e,t,n,i,r){if(n&&\"unaggregated\"!==n&&$n(r)){if(o(n)){const e=n[0],t=n[n.length-1];if(e<=0&&t>=0)return!0}return!1}if(\"size\"===e&&\"quantitative\"===t.type&&!_n(r))return!0;if((!xi(t)||!t.bin)&&z([Ne,Te,\"theta\",\"radius\"],e)){const{orient:t,type:n}=i;return!z([\"bar\",\"area\",\"line\",\"trail\"],n)||!(\"horizontal\"===t&&\"y\"===e||\"vertical\"===t&&\"x\"===e)}return!1}(n,i,u,c,r)}return d[e]}function od(e){dd(e)?function(e){const t=e.component.scales;for(const n of pt){const i=t[n];if(!i)continue;const r=ed(n,e);i.setWithExplicit(\"range\",r)}}(e):sd(e,\"range\")}function sd(e,t){const n=e.component.scales;for(const n of e.children)\"range\"===t?od(n):id(n,t);for(const i of I(n)){let r;for(const n of e.children){const e=n.component.scales[i];if(e){r=Fc(r,e.getWithExplicit(t),t,\"scale\",Ac((e,n)=>{switch(t){case\"range\":return e.step&&n.step?e.step-n.step:0}return 0}))}}n[i].setWithExplicit(t,r)}}function ad(e,t,n,i){const r=function(e,t,n){var i;switch(t.type){case\"nominal\":case\"ordinal\":if(He(e)||\"discrete\"===yt(e))return\"shape\"===e&&\"ordinal\"===t.type&&$t(Dt.discreteChannelCannotEncode(e,\"ordinal\")),\"ordinal\";if(z([\"x\",\"y\"],e)){if(z([\"rect\",\"bar\",\"image\",\"rule\"],n))return\"band\"}else if(\"arc\"===n&&z([\"theta\",\"radius\"],e))return\"band\";return void 0!==t.band||Ei(t)&&(null===(i=t.axis)||void 0===i?void 0:i.tickBand)?\"band\":\"point\";case\"temporal\":return He(e)?\"time\":\"discrete\"===yt(e)?($t(Dt.discreteChannelCannotEncode(e,\"temporal\")),\"ordinal\"):xi(t)&&t.timeUnit&&Xt(t.timeUnit).utc?\"utc\":\"time\";case\"quantitative\":return He(e)?xi(t)&&Ot(t.bin)?\"bin-ordinal\":\"linear\":\"discrete\"===yt(e)?($t(Dt.discreteChannelCannotEncode(e,\"quantitative\")),\"ordinal\"):\"linear\";case\"geojson\":return}throw new Error(Dt.invalidFieldType(t.type))}(t,n,i),{type:o}=e;return mt(t)?void 0!==o?Rn(t,o)?xi(n)&&!Un(o,n.type)?($t(Dt.scaleTypeNotWorkWithFieldDef(o,r)),r):o:($t(Dt.scaleTypeNotWorkWithChannel(t,o,r)),r):r:null}function ud(e){dd(e)?e.component.scales=function(e){const{encoding:t,mark:n}=e;return pt.reduce((i,r)=>{const o=qi(t[r]);if(o&&\"geoshape\"===n&&r===Le&&\"geojson\"===o.type)return i;let s=o&&o.scale;if(o&&null!==s&&!1!==s){s=null!=s?s:{};const t=ad(s,r,o,n);i[r]=new Ql(e.scaleName(r+\"\",!0),{value:t,explicit:s.type===t})}return i},{})}(e):e.component.scales=function(e){var t;const n=e.component.scales={},i={},r=e.component.resolve;for(const n of e.children){ud(n);for(const o of I(n.component.scales))if(r.scale[o]=null!==(t=r.scale[o])&&void 0!==t?t:bc(o,e),\"shared\"===r.scale[o]){const e=i[o],t=n.component.scales[o].getWithExplicit(\"type\");e?On(e.value,t.value)?i[o]=Fc(e,t,\"type\",\"scale\",cd):(r.scale[o]=\"independent\",delete i[o]):i[o]=t}}for(const t of I(i)){const r=e.scaleName(t,!0),o=i[t];n[t]=new Ql(r,o);for(const n of e.children){const e=n.component.scales[t];e&&(n.renameScale(e.get(\"name\"),r),e.merged=!0)}}return n}(e)}const cd=Ac((e,t)=>wn(e)-wn(t));class ld{constructor(){this.nameMap={}}rename(e,t){this.nameMap[e]=t}has(e){return void 0!==this.nameMap[e]}get(e){for(;this.nameMap[e]&&e!==this.nameMap[e];)e=this.nameMap[e];return e}}function dd(e){return\"unit\"===(null==e?void 0:e.type)}function fd(e){return\"facet\"===(null==e?void 0:e.type)}function gd(e){return\"concat\"===(null==e?void 0:e.type)}function pd(e){return\"layer\"===(null==e?void 0:e.type)}class md{constructor(e,t,n,i,r,o,s){var a,u;this.type=t,this.parent=n,this.config=r,this.view=s,this.children=[],this.correctDataNames=e=>(e.from&&e.from.data&&(e.from.data=this.lookupDataSource(e.from.data)),e.from&&e.from.facet&&e.from.facet.data&&(e.from.facet.data=this.lookupDataSource(e.from.facet.data)),e),this.parent=n,this.config=r,this.name=null!==(a=e.name)&&void 0!==a?a:i,this.title=er(e.title)?{text:e.title}:e.title,this.scaleNameMap=n?n.scaleNameMap:new ld,this.projectionNameMap=n?n.projectionNameMap:new ld,this.signalNameMap=n?n.signalNameMap:new ld,this.data=e.data,this.description=e.description,this.transforms=(null!==(u=e.transform)&&void 0!==u?u:[]).map(e=>Xo(e)?{filter:k(e.filter,hn)}:e),this.layout=\"layer\"===t||\"unit\"===t?{}:function(e,t,n){var i,r;const o=n[t],s={},{spacing:a,columns:u}=o;void 0!==a&&(s.spacing=a),void 0!==u&&(fi(e)&&!li(e.facet)||Vr(e))&&(s.columns=u),Jr(e)&&(s.columns=1);for(const t of Kr)if(void 0!==e[t])if(\"spacing\"===t){const n=e[t];s[t]=x(n)?n:{row:null!==(i=n.row)&&void 0!==i?i:a,column:null!==(r=n.column)&&void 0!==r?r:a}}else s[t]=e[t];return s}(e,t,r),this.component={data:{sources:n?n.component.data.sources:[],outputNodes:n?n.component.data.outputNodes:{},outputNodeRefCounts:n?n.component.data.outputNodeRefCounts:{},isFaceted:fi(e)||n&&n.component.data.isFaceted&&void 0===e.data},layoutSize:new yc,layoutHeaders:{row:{},column:{},facet:{}},mark:null,resolve:Object.assign({scale:{},axis:{},legend:{}},o?S(o):{}),selection:null,scales:null,projection:null,axes:{},legends:{}}}get width(){return this.getSizeSignalRef(\"width\")}get height(){return this.getSizeSignalRef(\"height\")}parse(){this.parseScale(),this.parseLayoutSize(),this.renameTopLevelLayoutSizeSignal(),this.parseSelections(),this.parseProjection(),this.parseData(),this.parseAxesAndHeaders(),this.parseLegends(),this.parseMarkGroup()}parseScale(){!function(e,{ignoreRange:t}={}){ud(e),Ul(e);for(const t of zn)id(e,t);t||od(e)}(this)}parseProjection(){Xc(this)}renameTopLevelLayoutSizeSignal(){\"width\"!==this.getName(\"width\")&&this.renameSignal(this.getName(\"width\"),\"width\"),\"height\"!==this.getName(\"height\")&&this.renameSignal(this.getName(\"height\"),\"height\")}parseLegends(){Lc(this)}assembleGroupStyle(){var e,t;if(\"unit\"===this.type||\"layer\"===this.type)return null!==(t=null===(e=this.view)||void 0===e?void 0:e.style)&&void 0!==t?t:\"cell\"}assembleEncodeFromView(e){const t=A(e,[\"style\"]),n={};for(const e of I(t)){const i=t[e];void 0!==i&&(n[e]=tr(i))}return n}assembleGroupEncodeEntry(e){let t=void 0;return this.view&&(t=this.assembleEncodeFromView(this.view)),e||\"unit\"!==this.type&&\"layer\"!==this.type?t:Object.assign({width:this.getSizeSignalRef(\"width\"),height:this.getSizeSignalRef(\"height\")},null!=t?t:{})}assembleLayout(){if(!this.layout)return;const e=this.layout,{spacing:t}=e,n=A(e,[\"spacing\"]),{component:i,config:r}=this,o=function(e,t){const n={};for(const i of Ye){const r=e[i];if(null==r?void 0:r.facetFieldDef){const{titleAnchor:e,titleOrient:o}=Zu([\"titleAnchor\",\"titleOrient\"],r.facetFieldDef,t,i),s=Qu(i,o),a=cc(e,s);void 0!==a&&(n[s]=a)}}return I(n).length>0?n:void 0}(i.layoutHeaders,r);return Object.assign(Object.assign(Object.assign({padding:t},this.assembleDefaultLayout()),n),o?{titleBand:o}:{})}assembleDefaultLayout(){return{}}assembleHeaderMarks(){const{layoutHeaders:e}=this.component;let t=[];for(const n of Ye)e[n].title&&t.push(tc(this,n));for(const e of Ku)t=t.concat(rc(this,e));return t}assembleAxes(){return function(e,t){const{x:n=[],y:i=[]}=e;return[...n.map(e=>zu(e,\"grid\",t)),...i.map(e=>zu(e,\"grid\",t)),...n.map(e=>zu(e,\"main\",t)),...i.map(e=>zu(e,\"main\",t))].filter(e=>e)}(this.component.axes,this.config)}assembleLegends(){return Hc(this)}assembleProjections(){return Yc(this)}assembleTitle(){var e,t,n;const i=null!==(e=this.title)&&void 0!==e?e:{},{encoding:r}=i,o=A(i,[\"encoding\"]),s=Object.assign(Object.assign(Object.assign({},Ki(this.config.title).nonMark),o),r?{encode:{update:r}}:{});if(s.text)return z([\"unit\",\"layer\"],this.type)?z([\"middle\",void 0],s.anchor)&&(s.frame=null!==(t=s.frame)&&void 0!==t?t:\"group\"):s.anchor=null!==(n=s.anchor)&&void 0!==n?n:\"start\",I(s).length>0?s:void 0}assembleGroup(e=[]){const t={};(e=e.concat(this.assembleSignals())).length>0&&(t.signals=e);const n=this.assembleLayout();n&&(t.layout=n),t.marks=[].concat(this.assembleHeaderMarks(),this.assembleMarks());const i=!this.parent||fd(this.parent)?function e(t){return pd(t)||gd(t)?t.children.reduce((t,n)=>t.concat(e(n)),Jl(t)):Jl(t)}(this):[];i.length>0&&(t.scales=i);const r=this.assembleAxes();r.length>0&&(t.axes=r);const o=this.assembleLegends();return o.length>0&&(t.legends=o),t}getName(e){return Y((this.name?this.name+\"_\":\"\")+e)}requestDataName(e){var t;const n=this.getName(e),i=this.component.data.outputNodeRefCounts;return i[n]=(null!==(t=i[n])&&void 0!==t?t:0)+1,n}getSizeSignalRef(e){if(fd(this.parent)){const t=lt(mc(e)),n=this.component.scales[t];if(n&&!n.merged){const e=n.get(\"type\"),i=n.get(\"range\");if(Sn(e)&&en(i)){const e=n.get(\"name\"),i=Yl(Vl(this,t));if(i){return{signal:pc(e,n,$i({aggregate:\"distinct\",field:i},{expr:\"datum\"}))}}return $t(`Unknown field for ${t}. Cannot calculate view size.`),null}}}return{signal:this.signalNameMap.get(this.getName(e))}}lookupDataSource(e){const t=this.component.data.outputNodes[e];return t?t.getSource():e}getSignalName(e){return this.signalNameMap.get(e)}renameSignal(e,t){this.signalNameMap.rename(e,t)}renameScale(e,t){this.scaleNameMap.rename(e,t)}renameProjection(e,t){this.projectionNameMap.rename(e,t)}scaleName(e,t){return t?this.getName(e):Ze(e)&&mt(e)&&this.component.scales[e]||this.scaleNameMap.has(this.getName(e))?this.scaleNameMap.get(this.getName(e)):void 0}projectionName(e){return e?this.getName(\"projection\"):this.component.projection&&!this.component.projection.merged||this.projectionNameMap.has(this.getName(\"projection\"))?this.projectionNameMap.get(this.getName(\"projection\")):void 0}getScaleComponent(e){if(!this.component.scales)throw new Error(\"getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().\");const t=this.component.scales[e];return t&&!t.merged?t:this.parent?this.parent.getScaleComponent(e):void 0}getSelectionComponent(e,t){let n=this.component.selection[e];if(!n&&this.parent&&(n=this.parent.getSelectionComponent(e,t)),!n)throw new Error(Dt.selectionNotFound(t));return n}}class hd extends md{vgField(e,t={}){const n=this.fieldDef(e);if(n)return $i(n,t)}reduceFieldDef(e,t){return br(this.getMapping(),(t,n,i)=>{const r=Mi(n);return r?e(t,r,i):t},t)}forEachFieldDef(e,t){hr(this.getMapping(),(t,n)=>{const i=Mi(t);i&&e(i,n)},t)}}class bd extends Js{constructor(e,t){var n,i,r;super(e),this.transform=t,this.transform=S(t);const o=null!==(n=this.transform.as)&&void 0!==n?n:[void 0,void 0];this.transform.as=[null!==(i=o[0])&&void 0!==i?i:\"value\",null!==(r=o[1])&&void 0!==r?r:\"density\"]}clone(){return new bd(null,S(this.transform))}dependentFields(){var e;return new Set([this.transform.density,...null!==(e=this.transform.groupby)&&void 0!==e?e:[]])}producedFields(){return new Set(this.transform.as)}hash(){return`DensityTransform ${N(this.transform)}`}assemble(){const e=this.transform,{density:t}=e,n=A(e,[\"density\"]);return Object.assign({type:\"kde\",field:t},n)}}class vd extends Js{constructor(e,t){super(e),this.filter=t}clone(){return new vd(null,Object.assign({},this.filter))}static make(e,t){const{config:n,mark:i,markDef:r}=t;if(\"filter\"!==ir(\"invalid\",r,n))return null;const o=t.reduceFieldDef((e,n,r)=>{const o=mt(r)&&t.getScaleComponent(r);if(o){$n(o.get(\"type\"))&&\"count\"!==n.aggregate&&!ge(i)&&(e[n.field]=n)}return e},{});return I(o).length?new vd(e,o):null}dependentFields(){return new Set(I(this.filter))}producedFields(){return new Set}hash(){return`FilterInvalid ${N(this.filter)}`}assemble(){const e=I(this.filter).reduce((e,t)=>{const n=this.filter[t],i=$i(n,{expr:\"datum\"});return null!==n&&(\"temporal\"===n.type?e.push(`(isDate(${i}) || (isValid(${i}) && isFinite(+${i})))`):\"quantitative\"===n.type&&(e.push(`isValid(${i})`),e.push(`isFinite(+${i})`))),e},[]);return e.length>0?{type:\"filter\",expr:e.join(\" && \")}:null}}class yd extends Js{constructor(e,t){super(e),this.transform=t,this.transform=S(t);const{flatten:n,as:i=[]}=this.transform;this.transform.as=n.map((e,t)=>{var n;return null!==(n=i[t])&&void 0!==n?n:e})}clone(){return new yd(this.parent,S(this.transform))}dependentFields(){return new Set(this.transform.flatten)}producedFields(){return new Set(this.transform.as)}hash(){return`FlattenTransform ${N(this.transform)}`}assemble(){const{flatten:e,as:t}=this.transform;return{type:\"flatten\",fields:e,as:t}}}class xd extends Js{constructor(e,t){var n,i,r;super(e),this.transform=t,this.transform=S(t);const o=null!==(n=this.transform.as)&&void 0!==n?n:[void 0,void 0];this.transform.as=[null!==(i=o[0])&&void 0!==i?i:\"key\",null!==(r=o[1])&&void 0!==r?r:\"value\"]}clone(){return new xd(null,S(this.transform))}dependentFields(){return new Set(this.transform.fold)}producedFields(){return new Set(this.transform.as)}hash(){return`FoldTransform ${N(this.transform)}`}assemble(){const{fold:e,as:t}=this.transform;return{type:\"fold\",fields:e,as:t}}}class Od extends Js{constructor(e,t,n,i){super(e),this.fields=t,this.geojson=n,this.signal=i}clone(){return new Od(null,S(this.fields),this.geojson,this.signal)}static parseAll(e,t){if(t.component.projection&&!t.component.projection.isFit)return e;let n=0;for(const i of[[\"longitude\",\"latitude\"],[\"longitude2\",\"latitude2\"]]){const r=i.map(e=>{const n=qi(t.encoding[e]);return xi(n)?n.field:Ai(n)?{expr:`${n.datum}`}:Ci(n)?{expr:`${n.value}`}:void 0});(r[0]||r[1])&&(e=new Od(e,r,null,t.getName(`geojson_${n++}`)))}if(t.channelHasField(Le)){const i=t.typedFieldDef(Le);\"geojson\"===i.type&&(e=new Od(e,null,i.field,t.getName(`geojson_${n++}`)))}return e}dependentFields(){var e;const t=(null!==(e=this.fields)&&void 0!==e?e:[]).filter(a);return new Set([...this.geojson?[this.geojson]:[],...t])}producedFields(){return new Set}hash(){return`GeoJSON ${this.geojson} ${this.signal} ${N(this.fields)}`}assemble(){return Object.assign(Object.assign(Object.assign({type:\"geojson\"},this.fields?{fields:this.fields}:{}),this.geojson?{geojson:this.geojson}:{}),{signal:this.signal})}}class Ad extends Js{constructor(e,t,n,i){super(e),this.projection=t,this.fields=n,this.as=i}clone(){return new Ad(null,this.projection,S(this.fields),S(this.as))}static parseAll(e,t){if(!t.projectionName())return e;for(const n of[[\"longitude\",\"latitude\"],[\"longitude2\",\"latitude2\"]]){const i=n.map(e=>{const n=qi(t.encoding[e]);return xi(n)?n.field:Ai(n)?{expr:`${n.datum}`}:Ci(n)?{expr:`${n.value}`}:void 0}),r=\"longitude2\"===n[0]?\"2\":\"\";(i[0]||i[1])&&(e=new Ad(e,t.projectionName(),i,[t.getName(\"x\"+r),t.getName(\"y\"+r)]))}return e}dependentFields(){return new Set(this.fields.filter(a))}producedFields(){return new Set(this.as)}hash(){return`Geopoint ${this.projection} ${N(this.fields)} ${N(this.as)}`}assemble(){return{type:\"geopoint\",projection:this.projection,fields:this.fields,as:this.as}}}class wd extends Js{constructor(e,t){super(e),this.transform=t}clone(){return new wd(null,S(this.transform))}dependentFields(){var e;return new Set([this.transform.impute,this.transform.key,...null!==(e=this.transform.groupby)&&void 0!==e?e:[]])}producedFields(){return new Set([this.transform.impute])}processSequence(e){const{start:t=0,stop:n,step:i}=e;return{signal:`sequence(${[t,n,...i?[i]:[]].join(\",\")})`}}static makeFromTransform(e,t){return new wd(e,t)}static makeFromEncoding(e,t){const n=t.encoding,i=n.x,r=n.y;if(xi(i)&&xi(r)){const o=i.impute?i:r.impute?r:void 0;if(void 0===o)return;const s=i.impute?r:r.impute?i:void 0,{method:a,value:u,frame:c,keyvals:l}=o.impute,d=vr(t.mark,n);return new wd(e,Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({impute:o.field,key:s.field},a?{method:a}:{}),void 0!==u?{value:u}:{}),c?{frame:c}:{}),void 0!==l?{keyvals:l}:{}),d.length?{groupby:d}:{}))}return null}hash(){return`Impute ${N(this.transform)}`}assemble(){const{impute:e,key:t,keyvals:n,method:i,groupby:r,value:o,frame:s=[null,null]}=this.transform,a=Object.assign(Object.assign(Object.assign(Object.assign({type:\"impute\",field:e,key:t},n?{keyvals:(u=n,void 0!==(null==u?void 0:u.stop)?this.processSequence(n):n)}:{}),{method:\"value\"}),r?{groupby:r}:{}),{value:i&&\"value\"!==i?null:o});var u;if(i&&\"value\"!==i){return[a,Object.assign({type:\"window\",as:[`imputed_${e}_value`],ops:[i],fields:[e],frame:s,ignorePeers:!1},r?{groupby:r}:{}),{type:\"formula\",expr:`datum.${e} === null ? datum.imputed_${e}_value : datum.${e}`,as:e}]}return[a]}}class Fd extends yc{constructor(e={},t={},n=!1){super(e,t),this.explicit=e,this.implicit=t,this.parseNothing=n}clone(){const e=super.clone();return e.parseNothing=this.parseNothing,e}}class jd extends Js{constructor(e,t){var n,i,r;super(e),this.transform=t,this.transform=S(t);const o=null!==(n=this.transform.as)&&void 0!==n?n:[void 0,void 0];this.transform.as=[null!==(i=o[0])&&void 0!==i?i:t.on,null!==(r=o[1])&&void 0!==r?r:t.loess]}clone(){return new jd(null,S(this.transform))}dependentFields(){var e;return new Set([this.transform.loess,this.transform.on,...null!==(e=this.transform.groupby)&&void 0!==e?e:[]])}producedFields(){return new Set(this.transform.as)}hash(){return`LoessTransform ${N(this.transform)}`}assemble(){const e=this.transform,{loess:t,on:n}=e,i=A(e,[\"loess\",\"on\"]);return Object.assign({type:\"loess\",x:n,y:t},i)}}class Dd extends Js{constructor(e,t,n){super(e),this.transform=t,this.secondary=n}clone(){return new Dd(null,S(this.transform),this.secondary)}static make(e,t,n,i){const r=t.component.data.sources,{from:o}=n;let s=null;if(function(e){return\"data\"in e}(o)){let e=Md(o.data,r);e||(e=new nl(o.data),r.push(e));const n=t.getName(`lookup_${i}`);s=new Qs(e,n,\"lookup\",t.component.data.outputNodeRefCounts),t.component.data.outputNodes[n]=s}else if(function(e){return\"selection\"in e}(o)){const e=o.selection;if(n=Object.assign({as:e},n),s=t.getSelectionComponent(Y(e),e).materialized,!s)throw new Error(Dt.noSameUnitLookup(e))}return new Dd(e,n,s.getSource())}dependentFields(){return new Set([this.transform.lookup])}producedFields(){return new Set(this.transform.as?h(this.transform.as):this.transform.from.fields)}hash(){return`Lookup ${N({transform:this.transform,secondary:this.secondary})}`}assemble(){let e;if(this.transform.from.fields)e=Object.assign({values:this.transform.from.fields},this.transform.as?{as:h(this.transform.as)}:{});else{let t=this.transform.as;a(t)||($t(Dt.NO_FIELDS_NEEDS_AS),t=\"_lookup\"),e={as:[t]}}return Object.assign(Object.assign({type:\"lookup\",from:this.secondary,key:this.transform.from.key,fields:[this.transform.lookup]},e),this.transform.default?{default:this.transform.default}:{})}}class Cd extends Js{constructor(e,t){var n,i,r;super(e),this.transform=t,this.transform=S(t);const o=null!==(n=this.transform.as)&&void 0!==n?n:[void 0,void 0];this.transform.as=[null!==(i=o[0])&&void 0!==i?i:\"prob\",null!==(r=o[1])&&void 0!==r?r:\"value\"]}clone(){return new Cd(null,S(this.transform))}dependentFields(){var e;return new Set([this.transform.quantile,...null!==(e=this.transform.groupby)&&void 0!==e?e:[]])}producedFields(){return new Set(this.transform.as)}hash(){return`QuantileTransform ${N(this.transform)}`}assemble(){const e=this.transform,{quantile:t}=e,n=A(e,[\"quantile\"]);return Object.assign({type:\"quantile\",field:t},n)}}class kd extends Js{constructor(e,t){var n,i,r;super(e),this.transform=t,this.transform=S(t);const o=null!==(n=this.transform.as)&&void 0!==n?n:[void 0,void 0];this.transform.as=[null!==(i=o[0])&&void 0!==i?i:t.on,null!==(r=o[1])&&void 0!==r?r:t.regression]}clone(){return new kd(null,S(this.transform))}dependentFields(){var e;return new Set([this.transform.regression,this.transform.on,...null!==(e=this.transform.groupby)&&void 0!==e?e:[]])}producedFields(){return new Set(this.transform.as)}hash(){return`RegressionTransform ${N(this.transform)}`}assemble(){const e=this.transform,{regression:t,on:n}=e,i=A(e,[\"regression\",\"on\"]);return Object.assign({type:\"regression\",x:n,y:t},i)}}class Ed extends Js{constructor(e,t){super(e),this.transform=t}clone(){return new Ed(null,S(this.transform))}addDimensions(e){var t;this.transform.groupby=R((null!==(t=this.transform.groupby)&&void 0!==t?t:[]).concat(e),e=>e)}producedFields(){}dependentFields(){var e;return new Set([this.transform.pivot,this.transform.value,...null!==(e=this.transform.groupby)&&void 0!==e?e:[]])}hash(){return`PivotTransform ${N(this.transform)}`}assemble(){const{pivot:e,value:t,groupby:n,limit:i,op:r}=this.transform;return Object.assign(Object.assign(Object.assign({type:\"pivot\",field:e,value:t},void 0!==i?{limit:i}:{}),void 0!==r?{op:r}:{}),void 0!==n?{groupby:n}:{})}}class Sd extends Js{constructor(e,t){super(e),this.transform=t}clone(){return new Sd(null,S(this.transform))}dependentFields(){return new Set}producedFields(){return new Set}hash(){return`SampleTransform ${N(this.transform)}`}assemble(){return{type:\"sample\",size:this.transform.sample}}}function $d(e){let t=0;return function n(i,r){var o;if(i instanceof nl&&!i.isGenerator&&!Wo(i.data)){e.push(r),r={name:null,source:r.name,transform:[]}}if(i instanceof hl&&(i.parent instanceof nl&&!r.source?(r.format=Object.assign(Object.assign({},null!==(o=r.format)&&void 0!==o?o:{}),{parse:i.assembleFormatParse()}),r.transform.push(...i.assembleTransforms(!0))):r.transform.push(...i.assembleTransforms())),i instanceof fl){r.name||(r.name=`data_${t++}`),!r.source||r.transform.length>0?(e.push(r),i.data=r.name):i.data=r.source;for(const t of i.assemble())e.push(t)}else{if((i instanceof rl||i instanceof ol||i instanceof vd||i instanceof Su||i instanceof Vu||i instanceof Ad||i instanceof Od||i instanceof dl||i instanceof Dd||i instanceof yl||i instanceof bl||i instanceof xd||i instanceof yd||i instanceof bd||i instanceof jd||i instanceof Cd||i instanceof kd||i instanceof xl||i instanceof Sd||i instanceof Ed)&&r.transform.push(i.assemble()),(i instanceof tl||i instanceof Xs||i instanceof wd||i instanceof vl)&&r.transform.push(...i.assemble()),i instanceof Qs)if(r.source&&0===r.transform.length)i.setSource(r.source);else if(i.parent instanceof Qs)i.setSource(r.name);else if(r.name||(r.name=`data_${t++}`),i.setSource(r.name),1===i.numChildren()){e.push(r),r={name:null,source:r.name,transform:[]}}switch(i.numChildren()){case 0:i instanceof Qs&&(!r.source||r.transform.length>0)&&e.push(r);break;case 1:n(i.children[0],r);break;default:{r.name||(r.name=`data_${t++}`);let o=r.name;!r.source||r.transform.length>0?e.push(r):o=r.source;for(const e of i.children){n(e,{name:null,source:o,transform:[]})}break}}}}}function Bd(e){return\"top\"===e||\"left\"===e?\"header\":\"footer\"}function _d(e,t){var n;const{facet:i,config:r,child:s,component:a}=e;if(e.channelHasField(t)){const u=i[t],c=Xu(\"title\",null,r,t);let l=Pi(u,r,{allowDisabling:!0,includeDefault:void 0===c||!!c});s.component.layoutHeaders[t].title&&(l=o(l)?l.join(\", \"):l,l+=\" / \"+s.component.layoutHeaders[t].title,s.component.layoutHeaders[t].title=null);const d=Xu(\"labelOrient\",u,r,t),f=ne((null!==(n=u.header)&&void 0!==n?n:{}).labels,r.header.labels,!0),g=z([\"bottom\",\"right\"],d)?\"footer\":\"header\";a.layoutHeaders[t]={title:l,facetFieldDef:u,[g]:\"facet\"===t?[]:[Nd(e,t,f)]}}}function Nd(e,t,n){const i=\"row\"===t?\"height\":\"width\";return{labels:n,sizeSignal:e.child.component.layoutSize.get(i)?e.child.getSizeSignalRef(i):void 0,axes:[]}}function Td(e,t){var n;const{child:i}=e;if(i.component.axes[t]){const{layoutHeaders:r,resolve:o}=e.component;if(o.axis[t]=vc(o,t),\"shared\"===o.axis[t]){const o=\"x\"===t?\"column\":\"row\",s=r[o];for(const r of i.component.axes[t]){const t=Bd(r.get(\"orient\"));s[t]=null!==(n=s[t])&&void 0!==n?n:[Nd(e,o,!1)];const i=zu(r,\"main\",e.config,{header:!0});i&&s[t][0].axes.push(i),r.mainExtracted=!0}}}}function zd(e){for(const t of e.children)t.parseLayoutSize()}function Pd(e,t){const n=mc(t),i=lt(n),r=e.component.resolve,o=e.component.layoutSize;let s;for(const t of e.children){const e=t.component.layoutSize.getWithExplicit(n),o=r.scale[i];if(\"independent\"===o&&\"step\"===e.value){s=void 0;break}if(s){if(\"independent\"===o&&s.value!==e.value){s=void 0;break}s=Fc(s,e,n,\"\")}else s=e}if(s){for(const i of e.children)e.renameSignal(i.getName(n),e.getName(t)),i.component.layoutSize.set(n,\"merged\",!1);o.setWithExplicit(t,s)}else o.setWithExplicit(t,{explicit:!1,value:void 0})}function Ld(e,t){const n=\"width\"===t?\"x\":\"y\",i=e.config,r=e.getScaleComponent(n);if(r){const e=r.get(\"type\"),n=r.get(\"range\");if(Sn(e)){const e=no(i.view,t);return en(n)||Xr(e)?\"step\":e}return eo(i.view,t)}if(e.hasProjection||\"arc\"===e.mark)return eo(i.view,t);{const e=no(i.view,t);return Xr(e)?e.step:e}}function Ud(e,t,n){return $i(t,Object.assign({suffix:`by_${$i(e)}`},null!=n?n:{}))}class Rd extends hd{constructor(e,t,n,i){super(e,\"facet\",t,n,i,e.resolve),this.child=df(e.spec,this,this.getName(\"child\"),void 0,i),this.children=[this.child],this.facet=this.initFacet(e.facet)}initFacet(e){return li(e)?br(e,(e,t,n)=>z([_e,\"column\"],n)?void 0===t.field?($t(Dt.emptyFieldDef(t,n)),e):(e[n]=Wi(t,n),e):($t(Dt.incompatibleChannel(n,\"facet\")),e),{}):{facet:Wi(e,\"facet\")}}channelHasField(e){return!!this.facet[e]}fieldDef(e){return this.facet[e]}parseData(){this.component.data=Wd(this),this.child.parseData()}parseLayoutSize(){zd(this)}parseSelections(){this.child.parseSelections(),this.component.selection=this.child.component.selection}parseMarkGroup(){this.child.parseMarkGroup()}parseAxesAndHeaders(){this.child.parseAxesAndHeaders(),function(e){for(const t of Ye)_d(e,t);Td(e,\"x\"),Td(e,\"y\")}(this)}assembleSelectionTopLevelSignals(e){return this.child.assembleSelectionTopLevelSignals(e)}assembleSignals(){return this.child.assembleSignals(),[]}assembleSelectionData(e){return this.child.assembleSelectionData(e)}getHeaderLayoutMixins(){var e,t,n;const i={};for(const r of Ye)for(const o of ec){const s=this.component.layoutHeaders[r],a=s[o],{facetFieldDef:u}=s;if(u){const t=Xu(\"titleOrient\",u,this.config,r);if(z([\"right\",\"bottom\"],t)){const n=Qu(r,t);i.titleAnchor=null!==(e=i.titleAnchor)&&void 0!==e?e:{},i.titleAnchor[n]=\"end\"}}if(null==a?void 0:a[0]){const e=\"row\"===r?\"height\":\"width\",a=\"header\"===o?\"headerBand\":\"footerBand\";\"facet\"===r||this.child.component.layoutSize.get(e)||(i[a]=null!==(t=i[a])&&void 0!==t?t:{},i[a][r]=.5),s.title&&(i.offset=null!==(n=i.offset)&&void 0!==n?n:{},i.offset[\"row\"===r?\"rowTitle\":\"columnTitle\"]=10)}}return i}assembleDefaultLayout(){const{column:e,row:t}=this.facet,n=e?this.columnDistinctSignal():t?1:void 0;let i=\"all\";return(t||\"independent\"!==this.component.resolve.scale.x)&&(e||\"independent\"!==this.component.resolve.scale.y)||(i=\"none\"),Object.assign(Object.assign(Object.assign({},this.getHeaderLayoutMixins()),n?{columns:n}:{}),{bounds:\"full\",align:i})}assembleLayoutSignals(){return this.child.assembleLayoutSignals()}columnDistinctSignal(){if(!(this.parent&&this.parent instanceof Rd)){return{signal:`length(data('${this.getName(\"column_domain\")}'))`}}}assembleGroup(e){return this.parent&&this.parent instanceof Rd?Object.assign(Object.assign({},this.channelHasField(\"column\")?{encode:{update:{columns:{field:$i(this.facet.column,{prefix:\"distinct\"})}}}}:{}),super.assembleGroup(e)):super.assembleGroup(e)}getCardinalityAggregateForChild(){const e=[],t=[],n=[];if(this.child instanceof Rd){if(this.child.channelHasField(\"column\")){const i=$i(this.child.facet.column);e.push(i),t.push(\"distinct\"),n.push(`distinct_${i}`)}}else for(const i of[\"x\",\"y\"]){const r=this.child.component.scales[i];if(r&&!r.merged){const o=r.get(\"type\"),s=r.get(\"range\");if(Sn(o)&&en(s)){const r=Yl(Vl(this.child,i));r?(e.push(r),t.push(\"distinct\"),n.push(`distinct_${r}`)):$t(`Unknown field for ${i}. Cannot calculate view size.`)}}}return{fields:e,ops:t,as:n}}assembleFacet(){const{name:e,data:t}=this.component.data.facetRoot,{row:n,column:i}=this.facet,{fields:r,ops:s,as:a}=this.getCardinalityAggregateForChild(),u=[];for(const e of Ye){const t=this.facet[e];if(t){u.push($i(t));const{bin:c,sort:l}=t;if(Ot(c)&&u.push($i(t,{binSuffix:\"end\"})),ui(l)){const{field:e,op:o=ri}=l,u=Ud(t,l);n&&i?(r.push(u),s.push(\"max\"),a.push(u)):(r.push(e),s.push(o),a.push(u))}else if(o(l)){const n=Ju(t,e);r.push(n),s.push(\"max\"),a.push(n)}}}const c=!!n&&!!i;return Object.assign({name:e,data:t,groupby:u},c||r.length>0?{aggregate:Object.assign(Object.assign({},c?{cross:c}:{}),r.length?{fields:r,ops:s,as:a}:{})}:{})}facetSortFields(e){const{facet:t}=this,n=t[e];return n?ui(n.sort)?[Ud(n,n.sort,{expr:\"datum\"})]:o(n.sort)?[Ju(n,e,{expr:\"datum\"})]:[$i(n,{expr:\"datum\"})]:[]}facetSortOrder(e){const{facet:t}=this,n=t[e];if(n){const{sort:e}=n;return[(ui(e)?e.order:!o(e)&&e)||\"ascending\"]}return[]}assembleLabelTitle(){const{facet:e,config:t}=this;if(e.facet)return sc(e.facet,\"facet\",t);const n={row:[\"top\",\"bottom\"],column:[\"left\",\"right\"]};for(const i of Ku)if(e[i]){const r=Xu(\"labelOrient\",e[i],t,i);if(z(n[i],r))return sc(e[i],i,t)}}assembleMarks(){const{child:e}=this,t=function(e){const t=[],n=$d(t);for(const t of e.children)n(t,{source:e.name,name:null,transform:[]});return t}(this.component.data.facetRoot),n=e.assembleGroupEncodeEntry(!1),i=this.assembleLabelTitle()||e.assembleTitle(),r=e.assembleGroupStyle();return[Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({name:this.getName(\"cell\"),type:\"group\"},i?{title:i}:{}),r?{style:r}:{}),{from:{facet:this.assembleFacet()},sort:{field:Ye.map(e=>this.facetSortFields(e)).flat(),order:Ye.map(e=>this.facetSortOrder(e)).flat()}}),t.length>0?{data:t}:{}),n?{encode:{update:n}}:{}),e.assembleGroup(function(e,t){if(e.component.selection&&I(e.component.selection).length){const n=u(e.getName(\"cell\"));t.unshift({name:\"facet\",value:{},on:[{events:ms(\"mousemove\",\"scope\"),update:`isTuple(facet) ? facet : group(${n}).datum`}]})}return ma(t)}(this,[])))]}getMapping(){return this.facet}}function Md(e,t){var n,i,r,o,s,a,u,c,l,d;for(const f of t){const t=f.data;if((!e.name||!f.hasName()||e.name===f.dataName)&&!((null===(n=e.format)||void 0===n?void 0:n.mesh)&&(null===(i=t.format)||void 0===i?void 0:i.feature)||((null===(r=e.format)||void 0===r?void 0:r.feature)||(null===(o=t.format)||void 0===o?void 0:o.feature))&&(null===(s=e.format)||void 0===s?void 0:s.feature)!==(null===(a=t.format)||void 0===a?void 0:a.feature)||((null===(u=e.format)||void 0===u?void 0:u.mesh)||(null===(c=t.format)||void 0===c?void 0:c.mesh))&&(null===(l=e.format)||void 0===l?void 0:l.mesh)!==(null===(d=t.format)||void 0===d?void 0:d.mesh)))if(Io(e)&&Io(t)){if(E(e.values,t.values))return f}else if(Wo(e)&&Wo(t)){if(e.url===t.url)return f}else if(Ho(e)&&e.name===f.dataName)return f}return null}function qd(e,t){if(e.data||!e.parent){if(null===e.data){const e=new nl([]);return t.push(e),e}const n=Md(e.data,t);if(n)return Go(e.data)||(n.data.format=function(e,...t){for(const n of t)U(e,null!=n?n:{});return e}({},e.data.format,n.data.format)),!n.hasName()&&e.data.name&&(n.dataName=e.data.name),n;{const n=new nl(e.data);return t.push(n),n}}return e.parent.component.data.facetRoot?e.parent.component.data.facetRoot:e.parent.component.data.main}function Wd(e){var t,n,i,r,o,s,a,u,c,l;let d=qd(e,e.component.data.sources);const{outputNodes:f,outputNodeRefCounts:g}=e.component.data,p=e.parent?e.parent.component.data.ancestorParse.clone():new Fd,m=e.data;Go(m)?(Yo(m)?d=new ol(d,m.sequence):Jo(m)&&(d=new rl(d,m.graticule)),p.parseNothing=!0):null===(null===(t=null==m?void 0:m.format)||void 0===t?void 0:t.parse)&&(p.parseNothing=!0),d=null!==(n=hl.makeExplicit(d,e,p))&&void 0!==n?n:d,d=new xl(d);const h=e.parent&&pd(e.parent);(dd(e)||fd(e))&&h&&(d=null!==(i=tl.makeFromEncoding(d,e))&&void 0!==i?i:d),e.transforms.length>0&&(d=function(e,t,n){var i,r;let o=0;for(const s of t.transforms){let a,u=void 0;if(us(s))a=e=new Vu(e,s),u=\"derived\";else if(Xo(s)){const r=pl(s);a=e=null!==(i=hl.makeWithAncestors(e,{},r,n))&&void 0!==i?i:e,e=new Su(e,t,s.filter)}else if(cs(s))a=e=tl.makeFromTransform(e,s,t),u=\"number\";else if(ds(s)){u=\"date\",void 0===n.getWithExplicit(s.field).value&&(e=new hl(e,{[s.field]:u}),n.set(s.field,u,!1)),a=e=Xs.makeFromTransform(e,s)}else if(fs(s))a=e=dl.makeFromTransform(e,s),u=\"number\",Ea(t)&&(e=new xl(e));else if(Zo(s))a=e=Dd.make(e,t,s,o++),u=\"derived\";else if(os(s))a=e=new yl(e,s),u=\"number\";else if(ss(s))a=e=new bl(e,s),u=\"number\";else if(gs(s))a=e=vl.makeFromTransform(e,s),u=\"derived\";else if(ps(s))a=e=new xd(e,s),u=\"derived\";else if(as(s))a=e=new yd(e,s),u=\"derived\";else if(Ko(s))a=e=new Ed(e,s),u=\"derived\";else if(rs(s))e=new Sd(e,s);else if(ls(s))a=e=wd.makeFromTransform(e,s),u=\"derived\";else if(es(s))a=e=new bd(e,s),u=\"derived\";else if(ts(s))a=e=new Cd(e,s),u=\"derived\";else if(ns(s))a=e=new kd(e,s),u=\"derived\";else{if(!is(s)){$t(Dt.invalidTransformIgnored(s));continue}a=e=new jd(e,s),u=\"derived\"}if(a&&void 0!==u)for(const e of null!==(r=a.producedFields())&&void 0!==r?r:[])n.set(e,u,!1)}return e}(d,e,p));const b=function(e){const t={};if(dd(e)&&e.component.selection)for(const n of I(e.component.selection)){const i=e.component.selection[n];for(const e of i.project.items)!e.channel&&te(e.field)>1&&(t[e.field]=\"flatten\")}return t}(e),v=ml(e);d=null!==(r=hl.makeWithAncestors(d,{},Object.assign(Object.assign({},b),v),p))&&void 0!==r?r:d,dd(e)&&(d=Od.parseAll(d,e),d=Ad.parseAll(d,e)),(dd(e)||fd(e))&&(h||(d=null!==(o=tl.makeFromEncoding(d,e))&&void 0!==o?o:d),d=null!==(s=Xs.makeFromEncoding(d,e))&&void 0!==s?s:d,d=Vu.parseAllForSortIndex(d,e));const y=e.getName(\"raw\"),x=new Qs(d,y,\"raw\",g);if(f[y]=x,d=x,dd(e)){const t=dl.makeFromEncoding(d,e);t&&(d=t,Ea(e)&&(d=new xl(d))),d=null!==(a=wd.makeFromEncoding(d,e))&&void 0!==a?a:d,d=null!==(u=vl.makeFromEncoding(d,e))&&void 0!==u?u:d}dd(e)&&(d=null!==(c=vd.make(d,e))&&void 0!==c?c:d);const O=e.getName(Qo),A=new Qs(d,O,Qo,g);f[O]=A,d=A,dd(e)&&function(e,t){Ca(e,n=>{const i=n.name,r=e.getName(`lookup_${i}`);e.component.data.outputNodes[r]=n.materialized=new Qs(new Su(t,e,{selection:i}),r,\"lookup\",e.component.data.outputNodeRefCounts)})}(e,A);let w=null;if(fd(e)){const t=e.getName(\"facet\");d=null!==(l=function(e,t){const{row:n,column:i}=t;if(n&&i){let t=null;for(const r of[n,i])if(ui(r.sort)){const{field:n,op:i=ri}=r.sort;e=t=new bl(e,{joinaggregate:[{op:i,field:n,as:Ud(r,r.sort,{forAs:!0})}],groupby:[$i(r)]})}return t}return null}(d,e.facet))&&void 0!==l?l:d,w=new fl(d,e,t,A.getSource()),f[t]=w,d=w}return Object.assign(Object.assign({},e.component.data),{outputNodes:f,outputNodeRefCounts:g,raw:x,main:A,facetRoot:w,ancestorParse:p})}class Id extends md{constructor(e,t,n,i){var r,o,s,a;super(e,\"concat\",t,n,i,e.resolve),\"shared\"!==(null===(o=null===(r=e.resolve)||void 0===r?void 0:r.axis)||void 0===o?void 0:o.x)&&\"shared\"!==(null===(a=null===(s=e.resolve)||void 0===s?void 0:s.axis)||void 0===a?void 0:a.y)||$t(Dt.CONCAT_CANNOT_SHARE_AXIS),this.children=this.getChildren(e).map((e,t)=>df(e,this,this.getName(\"concat_\"+t),void 0,i))}parseData(){this.component.data=Wd(this);for(const e of this.children)e.parseData()}parseSelections(){this.component.selection={};for(const e of this.children){e.parseSelections();for(const t of I(e.component.selection))this.component.selection[t]=e.component.selection[t]}}parseMarkGroup(){for(const e of this.children)e.parseMarkGroup()}parseAxesAndHeaders(){for(const e of this.children)e.parseAxesAndHeaders()}getChildren(e){return Jr(e)?e.vconcat:Qr(e)?e.hconcat:e.concat}parseLayoutSize(){!function(e){zd(e);const t=1===e.layout.columns?\"width\":\"childWidth\",n=void 0===e.layout.columns?\"height\":\"childHeight\";Pd(e,t),Pd(e,n)}(this)}parseAxisGroup(){return null}assembleSelectionTopLevelSignals(e){return this.children.reduce((e,t)=>t.assembleSelectionTopLevelSignals(e),e)}assembleSignals(){return this.children.forEach(e=>e.assembleSignals()),[]}assembleLayoutSignals(){const e=dc(this);for(const t of this.children)e.push(...t.assembleLayoutSignals());return e}assembleSelectionData(e){return this.children.reduce((e,t)=>t.assembleSelectionData(e),e)}assembleMarks(){return this.children.map(e=>{const t=e.assembleTitle(),n=e.assembleGroupStyle(),i=e.assembleGroupEncodeEntry(!1);return Object.assign(Object.assign(Object.assign(Object.assign({type:\"group\",name:e.getName(\"group\")},t?{title:t}:{}),n?{style:n}:{}),i?{encode:{update:i}}:{}),e.assembleGroup())})}assembleDefaultLayout(){const e=this.layout.columns;return Object.assign(Object.assign({},null!=e?{columns:e}:{}),{bounds:\"full\",align:\"each\"})}}const Hd=Object.assign(Object.assign({disable:1,gridScale:1,scale:1},le),{labelExpr:1,encode:1}),Gd=I(Hd);class Yd extends yc{constructor(e={},t={},n=!1){super(),this.explicit=e,this.implicit=t,this.mainExtracted=n}clone(){return new Yd(S(this.explicit),S(this.implicit),this.mainExtracted)}hasAxisPart(e){return\"axis\"===e||(\"grid\"===e||\"title\"===e?!!this.get(e):!(!1===(t=this.get(e))||null===t));var t}}const Vd={bottom:\"top\",top:\"bottom\",left:\"right\",right:\"left\"};function Jd(e,t){if(!e)return t.map(e=>e.clone());{if(e.length!==t.length)return;const n=e.length;for(let i=0;i<n;i++){const n=e[i],r=t[i];if(!!n!=!!r)return;if(n&&r){const t=n.getWithExplicit(\"orient\"),o=r.getWithExplicit(\"orient\");if(t.explicit&&o.explicit&&t.value!==o.value)return;e[i]=Qd(n,r)}}}return e}function Qd(e,t){for(const n of Gd){const i=Fc(e.getWithExplicit(n),t.getWithExplicit(n),n,\"axis\",(e,t)=>{switch(n){case\"title\":return lr(e,t);case\"gridScale\":return{explicit:e.explicit,value:ne(e.value,t.value)}}return wc(e,t,n,\"axis\")});e.setWithExplicit(n,i)}return e}function Xd(e,t){const n=\"x\"===t?\"x2\":\"y2\",i=e.fieldDef(t),r=e.fieldDef(n),o=i?i.title:void 0,s=r?r.title:void 0;return o&&s?cr(o,s):o||(s||(void 0!==o?o:void 0!==s?s:void 0))}function Zd(e,t,n,i,r){if(\"disable\"===t)return void 0!==n;switch(n=n||{},t){case\"titleAngle\":case\"labelAngle\":return e===re(n[t]);case\"values\":return!!n.values;case\"encode\":return!!n.encoding||!!n.labelAngle;case\"title\":if(e===Xd(i,r))return!0}return e===n[t]}const Kd=new Set([\"grid\",\"orient\",\"tickCount\",\"labelExpr\",\"translate\"]);function ef(e,t){var n;const i=t.axis(e),r=new Yd,o=qi(t.encoding[e]),s=ne(null==i?void 0:i.orient,function(e){switch(e){case Ne:return\"bottom\";case Te:return\"left\"}}(e)),a=t.getScaleComponent(e).get(\"type\"),u=Wu(e,a,s,t.config),c=function(e,t,n,i,r){if(void 0!==(null==t?void 0:t.labelAngle))return re(null==t?void 0:t.labelAngle);{const{configValue:o}=Hu(\"labelAngle\",e.config,null==t?void 0:t.style,r);return void 0!==o?re(o):n===Ne&&z([\"nominal\",\"ordinal\"],i.type)?270:void 0}}(t,i,e,o,u);for(const n of Gd){const l=tf(o,n,i,e,t,a,s,c),d=void 0!==l,f=Zd(l,n,i,t,e);if(d&&f)r.set(n,l,f);else{const{configValue:e,configFrom:o}=fe(n)?Hu(n,t.config,null==i?void 0:i.style,u):{},s=void 0!==e;d&&!s?r.set(n,l,f):(\"vgAxisConfig\"!==o||Kd.has(n)&&s||ae(e)||Kt(e))&&r.set(n,e,!1)}}const l=null!==(n=null==i?void 0:i.encoding)&&void 0!==n?n:{},d=ue.reduce((n,i)=>{var o;if(!r.hasAxisPart(i))return n;const s=hc(null!==(o=l[i])&&void 0!==o?o:{},t),a=\"labels\"===i?function(e,t,n){var i;const{encoding:r,config:o}=e,s=null!==(i=qi(r[t]))&&void 0!==i?i:qi(r[it(t)]),a=e.axis(t)||{},{format:u,formatType:c}=a,l=Kn({fieldOrDatumDef:s,field:\"datum.value\",format:u,formatType:c,config:o,isUTCScale:e.getScaleComponent(t).get(\"type\")===vn.UTC,omitTimeFormatConfig:!0,omitNumberFormatAndEmptyTimeFormat:!0});let d=Object.assign(Object.assign({},l?{text:l}:{}),n);return d=Object.assign(Object.assign({},d),n),0===I(d).length?void 0:d}(t,e,s):s;return void 0!==a&&I(a).length>0&&(n[i]={update:a}),n},{});return I(d).length>0&&r.set(\"encode\",d,!!(null==i?void 0:i.encoding)||void 0!==(null==i?void 0:i.labelAngle)),r}function tf(e,t,n,i,r,s,a,u){var c,l,d;if(\"disable\"===t)return void 0!==n&&!n;n=n||{};const{mark:f,config:g}=r;switch(t){case\"scale\":return r.scaleName(i);case\"gridScale\":return function(e,t){const n=\"x\"===t?\"y\":\"x\";if(e.getScaleComponent(n))return e.scaleName(n)}(r,i);case\"format\":if(Vi(e)||Ji(e))return;return ei(e.type,n.format,g);case\"formatType\":if(Vi(e)||Ji(e))return;return n.formatType;case\"grid\":return!At(null===(c=r.fieldDef(i))||void 0===c?void 0:c.bin)&&ne(n.grid,function(e,t){return!Sn(e)&&!Ot(null==t?void 0:t.bin)}(s,r.typedFieldDef(i)));case\"labelAlign\":return null!==(l=n.labelAlign)&&void 0!==l?l:Yu(u,a);case\"labelAngle\":return u;case\"labelBaseline\":return null!==(d=n.labelBaseline)&&void 0!==d?d:Gu(u,a);case\"labelFlush\":return ne(n.labelFlush,function(e,t){if(\"x\"===t&&z([\"quantitative\",\"temporal\"],e))return!0}(e.type,i));case\"labelOverlap\":return ne(n.labelOverlap,function(e,t){if(\"nominal\"!==e)return\"log\"!==t||\"greedy\"}(e.type,s));case\"orient\":return a;case\"tickCount\":{const t=\"x\"===i?\"width\":\"y\"===i?\"height\":void 0,o=t?r.getSizeSignalRef(t):void 0;return ne(n.tickCount,function({fieldOrDatumDef:e,scaleType:t,size:n,values:i}){var r;if(!i&&!Sn(t)&&\"log\"!==t){if(xi(e)){if(Ot(e.bin))return{signal:`ceil(${n.signal}/10)`};if(e.timeUnit&&z([\"month\",\"hours\",\"day\",\"quarter\"],null===(r=Xt(e.timeUnit))||void 0===r?void 0:r.unit))return}return{signal:`ceil(${n.signal}/40)`}}}({fieldOrDatumDef:e,scaleType:s,size:o,values:n.values}))}case\"title\":{if(void 0!==n.title)return n.title;const e=Xd(r,i);if(void 0!==e)return e;const t=r.typedFieldDef(i),o=\"x\"===i?\"x2\":\"y2\",s=r.fieldDef(o);return ur(t?[gi(t)]:[],xi(s)?[gi(s)]:[])}case\"values\":return function(e,t){const n=e.values;return o(n)?Xi(t,n):Kt(n)?n:void 0}(n,e);case\"zindex\":return ne(n.zindex,function(e,t){return\"rect\"===e&&Bi(t)?1:0}(f,e))}return fe(t)?n[t]:void 0}function nf(e,t,n,{graticule:i}){const r=he(e)?Object.assign({},e):{type:e},o=ir(\"orient\",r,n);if(r.orient=function(e,t,n){switch(e){case\"point\":case\"circle\":case\"square\":case\"text\":case\"rect\":case\"image\":return}const{x:i,y:r,x2:o,y2:s}=t;switch(e){case\"bar\":if(xi(i)&&(At(i.bin)||xi(r)&&r.aggregate&&!i.aggregate))return\"vertical\";if(xi(r)&&(At(r.bin)||xi(i)&&i.aggregate&&!r.aggregate))return\"horizontal\";if(s||o){if(n)return n;if(!o&&(xi(i)&&\"quantitative\"===i.type&&!Ot(i.bin)||Fi(i)))return\"horizontal\";if(!s&&(xi(r)&&\"quantitative\"===r.type&&!Ot(r.bin)||Fi(r)))return\"vertical\"}case\"rule\":if(o&&(!xi(i)||!At(i.bin))&&s&&(!xi(r)||!At(r.bin)))return;case\"area\":if(s)return xi(r)&&At(r.bin)?\"horizontal\":\"vertical\";if(o)return xi(i)&&At(i.bin)?\"vertical\":\"horizontal\";if(\"rule\"===e){if(i&&!r)return\"vertical\";if(r&&!i)return\"horizontal\"}case\"line\":case\"tick\":{const t=wi(i),o=wi(r);if(t&&!o)return\"tick\"!==e?\"horizontal\":\"vertical\";if(!t&&o)return\"tick\"!==e?\"vertical\":\"horizontal\";if(t&&o){const t=i,o=r,s=\"temporal\"===t.type,a=\"temporal\"===o.type;return s&&!a?\"tick\"!==e?\"vertical\":\"horizontal\":!s&&a?\"tick\"!==e?\"horizontal\":\"vertical\":!t.aggregate&&o.aggregate?\"tick\"!==e?\"vertical\":\"horizontal\":t.aggregate&&!o.aggregate?\"tick\"!==e?\"horizontal\":\"vertical\":n||\"vertical\"}return n||void 0}}return\"vertical\"}(r.type,t,o),void 0!==o&&o!==r.orient&&$t(Dt.orientOverridden(r.orient,o)),\"bar\"===r.type&&r.orient){const e=ir(\"cornerRadiusEnd\",r,n);if(void 0!==e){const n=\"horizontal\"===r.orient&&t.x2||\"vertical\"===r.orient&&t.y2?[\"cornerRadius\"]:ye[r.orient];for(const t of n)r[t]=e;void 0!==r.cornerRadiusEnd&&delete r.cornerRadiusEnd}}return void 0===ir(\"opacity\",r,n)&&(r.opacity=function(e,t){if(z([\"point\",\"tick\",\"circle\",\"square\"],e)&&!fr(t))return.7;return}(r.type,t)),void 0===r.filled&&(r.filled=!i&&function(e,t){const n=rr(\"filled\",e,t),i=e.type;return ne(n,\"point\"!==i&&\"line\"!==i&&\"rule\"!==i)}(r,n)),void 0===ir(\"cursor\",r,n)&&(r.cursor=function(e,t,n){if(t.href||e.href||ir(\"href\",e,n))return\"pointer\";return e.cursor}(r,t,n)),r}function rf(e,t){const{config:n}=e;return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},Is(e,{align:\"ignore\",baseline:\"ignore\",color:\"include\",size:\"include\",orient:\"ignore\"})),Bs(\"x\",e,{defaultPos:\"mid\"})),Bs(\"y\",e,{defaultPos:\"mid\"})),js(\"size\",e)),js(\"angle\",e)),function(e,t,n){if(n)return{shape:{value:n}};return js(\"shape\",e)}(e,0,t))}function of(e){var t;const{config:n,markDef:i}=e,{orient:r}=i,o=\"horizontal\"===r?\"width\":\"height\",s=e.getScaleComponent(\"horizontal\"===r?\"x\":\"y\"),a=null!==(t=ir(\"size\",i,n,{vgChannel:o}))&&void 0!==t?t:n.tick.bandSize;if(void 0!==a)return a;{const e=s?s.get(\"range\"):void 0;return e&&en(e)&&x(e.step)?3*e.step/4:3*to(n.view,o)/4}}const sf={arc:{vgMark:\"arc\",encodeEntry:e=>Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},Is(e,{align:\"ignore\",baseline:\"ignore\",color:\"include\",size:\"ignore\",orient:\"ignore\"})),Bs(\"x\",e,{defaultPos:\"mid\"})),Bs(\"y\",e,{defaultPos:\"mid\"})),Rs(e,\"radius\",\"arc\")),Rs(e,\"theta\",\"arc\"))},area:{vgMark:\"area\",encodeEntry:e=>Object.assign(Object.assign(Object.assign(Object.assign({},Is(e,{align:\"ignore\",baseline:\"ignore\",color:\"include\",orient:\"include\",size:\"ignore\"})),Ps(\"x\",e,{defaultPos:\"zeroOrMin\",defaultPos2:\"zeroOrMin\",range:\"horizontal\"===e.markDef.orient})),Ps(\"y\",e,{defaultPos:\"zeroOrMin\",defaultPos2:\"zeroOrMin\",range:\"vertical\"===e.markDef.orient})),Gs(e))},bar:{vgMark:\"rect\",encodeEntry:e=>Object.assign(Object.assign(Object.assign({},Is(e,{align:\"ignore\",baseline:\"ignore\",color:\"include\",orient:\"ignore\",size:\"ignore\"})),Rs(e,\"x\",\"bar\")),Rs(e,\"y\",\"bar\"))},circle:{vgMark:\"symbol\",encodeEntry:e=>rf(e,\"circle\")},geoshape:{vgMark:\"shape\",encodeEntry:e=>Object.assign({},Is(e,{align:\"ignore\",baseline:\"ignore\",color:\"include\",size:\"ignore\",orient:\"ignore\"})),postEncodingTransform:e=>{const{encoding:t}=e,n=t.shape;return[Object.assign({type:\"geoshape\",projection:e.projectionName()},n&&xi(n)&&\"geojson\"===n.type?{field:$i(n,{expr:\"datum\"})}:{})]}},image:{vgMark:\"image\",encodeEntry:e=>Object.assign(Object.assign(Object.assign(Object.assign({},Is(e,{align:\"ignore\",baseline:\"ignore\",color:\"ignore\",orient:\"ignore\",size:\"ignore\"})),Rs(e,\"x\",\"image\")),Rs(e,\"y\",\"image\")),Cs(e,\"url\"))},line:{vgMark:\"line\",encodeEntry:e=>Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},Is(e,{align:\"ignore\",baseline:\"ignore\",color:\"include\",size:\"ignore\",orient:\"ignore\"})),Bs(\"x\",e,{defaultPos:\"mid\"})),Bs(\"y\",e,{defaultPos:\"mid\"})),js(\"size\",e,{vgChannel:\"strokeWidth\"})),Gs(e))},point:{vgMark:\"symbol\",encodeEntry:e=>rf(e)},rect:{vgMark:\"rect\",encodeEntry:e=>Object.assign(Object.assign(Object.assign({},Is(e,{align:\"ignore\",baseline:\"ignore\",color:\"include\",orient:\"ignore\",size:\"ignore\"})),Rs(e,\"x\",\"rect\")),Rs(e,\"y\",\"rect\"))},rule:{vgMark:\"rule\",encodeEntry:e=>{const{markDef:t}=e,n=t.orient;return e.encoding.x||e.encoding.y||e.encoding.latitude||e.encoding.longitude?Object.assign(Object.assign(Object.assign(Object.assign({},Is(e,{align:\"ignore\",baseline:\"ignore\",color:\"include\",orient:\"ignore\",size:\"ignore\"})),Ps(\"x\",e,{defaultPos:\"horizontal\"===n?\"zeroOrMax\":\"mid\",defaultPos2:\"zeroOrMin\",range:\"vertical\"!==n})),Ps(\"y\",e,{defaultPos:\"vertical\"===n?\"zeroOrMax\":\"mid\",defaultPos2:\"zeroOrMin\",range:\"horizontal\"!==n})),js(\"size\",e,{vgChannel:\"strokeWidth\"})):{}}},square:{vgMark:\"symbol\",encodeEntry:e=>rf(e,\"square\")},text:{vgMark:\"text\",encodeEntry:e=>{const{config:t,encoding:n}=e;return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},Is(e,{align:\"include\",baseline:\"include\",color:\"include\",size:\"ignore\",orient:\"ignore\"})),Bs(\"x\",e,{defaultPos:\"mid\"})),Bs(\"y\",e,{defaultPos:\"mid\"})),Cs(e)),js(\"size\",e,{vgChannel:\"fontSize\"})),js(\"angle\",e)),Ys(\"align\",function(e,t,n){if(void 0===ir(\"align\",e,n))return\"center\";return}(e.markDef,0,t))),Ys(\"baseline\",function(e,t,n){if(void 0===ir(\"baseline\",e,n))return\"middle\";return}(e.markDef,0,t))),Bs(\"radius\",e,{defaultPos:null,isMidPoint:!0})),Bs(\"theta\",e,{defaultPos:null,isMidPoint:!0}))}},tick:{vgMark:\"rect\",encodeEntry:e=>{const{config:t,markDef:n}=e,i=n.orient,r=\"horizontal\"===i?\"width\":\"height\",o=\"horizontal\"===i?\"height\":\"width\";return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},Is(e,{align:\"ignore\",baseline:\"ignore\",color:\"include\",orient:\"ignore\",size:\"ignore\"})),Bs(\"x\",e,{defaultPos:\"mid\",vgChannel:\"xc\"})),Bs(\"y\",e,{defaultPos:\"mid\",vgChannel:\"yc\"})),js(\"size\",e,{defaultValue:of(e),vgChannel:r})),{[o]:tr(ir(\"thickness\",n,t))})}},trail:{vgMark:\"trail\",encodeEntry:e=>Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},Is(e,{align:\"ignore\",baseline:\"ignore\",color:\"include\",size:\"include\",orient:\"ignore\"})),Bs(\"x\",e,{defaultPos:\"mid\"})),Bs(\"y\",e,{defaultPos:\"mid\"})),js(\"size\",e)),Gs(e))}};function af(e){return z([\"line\",\"area\",\"trail\"],e.mark)?function(e){const t=vr(e.mark,e.encoding),n=uf(e,{fromPrefix:t.length>0?\"faceted_path_\":\"\"});return t.length>0?[{name:e.getName(\"pathgroup\"),type:\"group\",from:{facet:{name:\"faceted_path_\"+e.requestDataName(Qo),data:e.requestDataName(Qo),groupby:t}},encode:{update:{width:{field:{group:\"width\"}},height:{field:{group:\"height\"}}}},marks:n}]:n}(e):z([\"bar\"],e.mark)?function(e){const t=rn.some(t=>ir(t,e.markDef,e.config));if(e.stack&&!e.fieldDef(\"size\")&&t){const[t]=uf(e,{fromPrefix:\"stack_group_\"}),n=e.scaleName(e.stack.fieldChannel),i=(t={})=>e.vgField(e.stack.fieldChannel,t),r=(e,t)=>`${e}(${[i({prefix:\"min\",suffix:\"start\",expr:t}),i({prefix:\"max\",suffix:\"start\",expr:t}),i({prefix:\"min\",suffix:\"end\",expr:t}),i({prefix:\"max\",suffix:\"end\",expr:t})].map(e=>`scale('${n}',${e})`).join(\",\")})`;let o,s;\"x\"===e.stack.fieldChannel?(o=Object.assign(Object.assign({},$(t.encode.update,[\"y\",\"yc\",\"y2\",\"height\",...rn])),{x:{signal:r(\"min\",\"datum\")},x2:{signal:r(\"max\",\"datum\")},clip:{value:!0}}),s={x:{field:{group:\"x\"},mult:-1},height:{field:{group:\"height\"}}},t.encode.update=Object.assign(Object.assign({},B(t.encode.update,[\"y\",\"yc\",\"y2\"])),{height:{field:{group:\"height\"}}})):(o=Object.assign(Object.assign({},$(t.encode.update,[\"x\",\"xc\",\"x2\",\"width\"])),{y:{signal:r(\"min\",\"datum\")},y2:{signal:r(\"max\",\"datum\")},clip:{value:!0}}),s={y:{field:{group:\"y\"},mult:-1},width:{field:{group:\"width\"}}},t.encode.update=Object.assign(Object.assign({},B(t.encode.update,[\"x\",\"xc\",\"x2\"])),{width:{field:{group:\"width\"}}}));for(const n of rn){const i=rr(n,e.markDef,e.config);t.encode.update[n]?(o[n]=t.encode.update[n],delete t.encode.update[n]):i&&(o[n]={value:i}),i&&(t.encode.update[n]={value:0})}const a=e.fieldDef(e.stack.groupbyChannel),u=$i(a)?[$i(a)]:[];return((null==a?void 0:a.bin)||(null==a?void 0:a.timeUnit))&&u.push($i(a,{binSuffix:\"end\"})),o=[\"stroke\",\"strokeWidth\",\"strokeJoin\",\"strokeCap\",\"strokeDash\",\"strokeDashOffset\",\"strokeMiterLimit\",\"strokeOpacity\"].reduce((n,i)=>{if(t.encode.update[i])return Object.assign(Object.assign({},n),{[i]:t.encode.update[i]});{const t=rr(i,e.markDef,e.config);return void 0!==t?Object.assign(Object.assign({},n),{[i]:{value:t}}):n}},o),o.stroke&&(o.strokeForeground={value:!0},o.strokeOffset={value:0}),[{type:\"group\",from:{facet:{data:e.requestDataName(Qo),name:\"stack_group_\"+e.requestDataName(Qo),groupby:u,aggregate:{fields:[i({suffix:\"start\"}),i({suffix:\"start\"}),i({suffix:\"end\"}),i({suffix:\"end\"})],ops:[\"min\",\"max\",\"min\",\"max\"]}}},encode:{update:o},marks:[{type:\"group\",encode:{update:s},marks:[t]}]}]}return uf(e)}(e):uf(e)}function uf(e,t={fromPrefix:\"\"}){const n=e.mark,i=ne(e.markDef.clip,function(e){const t=e.getScaleComponent(\"x\"),n=e.getScaleComponent(\"y\");return!!(t&&t.get(\"selectionExtent\")||n&&n.get(\"selectionExtent\"))||void 0}(e),function(e){const t=e.component.projection;return!(!t||t.isFit)||void 0}(e)),r=nr(e.markDef),s=e.encoding.key,a=function(e){const{encoding:t,stack:n,mark:i,markDef:r,config:s}=e,a=t.order;if(!(!o(a)&&Ci(a)&&T(a.value)||!a&&T(ir(\"order\",r,s)))){if((o(a)||xi(a))&&!n)return ar(a,{expr:\"datum\"});if(ge(i)){const n=\"horizontal\"===r.orient?\"y\":\"x\",i=t[n];if(xi(i)){const t=i.sort;if(o(t))return{field:$i(i,{prefix:n,suffix:\"sort_index\",expr:\"datum\"})};if(ui(t))return{field:$i({aggregate:fr(e.encoding)?t.op:void 0,field:t.field},{expr:\"datum\"})};if(ai(t)){return{field:$i(e.fieldDef(t.encoding),{expr:\"datum\"}),order:t.order}}return{field:$i(i,{binSuffix:e.stack&&e.stack.impute?\"mid\":void 0,expr:\"datum\"})}}}else;}}(e),u=function(e){if(!e.component.selection)return null;const t=I(e.component.selection).length;let n=t,i=e.parent;for(;i&&0===n;)n=I(i.component.selection).length,i=i.parent;return n?{interactive:t>0}:null}(e),c=sf[n].postEncodingTransform?sf[n].postEncodingTransform(e):null;return[Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({name:e.getName(\"marks\"),type:sf[n].vgMark},i?{clip:!0}:{}),r?{style:r}:{}),s?{key:s.field}:{}),a?{sort:a}:{}),u||{}),{from:{data:t.fromPrefix+e.requestDataName(Qo)},encode:{update:sf[n].encodeEntry(e)}}),c?{transform:c}:{})]}class cf extends hd{constructor(e,t,n,i={},r){var o,s;super(e,\"unit\",t,n,r,void 0,Zr(e)?e.view:void 0),this.specifiedScales={},this.specifiedAxes={},this.specifiedLegends={},this.specifiedProjection={},this.selection={},this.children=[];const a=he(e.mark)?e.mark.type:e.mark;this.markDef=nf(e.mark,null!==(o=e.encoding)&&void 0!==o?o:{},r,{graticule:e.data&&Jo(e.data)});const u=this.encoding=pr(null!==(s=e.encoding)&&void 0!==s?s:{},this.markDef);this.size=function({encoding:e,size:t}){for(const n of ut){const i=rt(n);Xr(t[i])&&wi(e[n])&&(delete t[i],$t(Dt.stepDropped(i)))}return t}({encoding:u,size:Zr(e)?Object.assign(Object.assign(Object.assign({},i),e.width?{width:e.width}:{}),e.height?{height:e.height}:{}):i}),this.stack=Oo(a,u),this.specifiedScales=this.initScales(a,u),this.specifiedAxes=this.initAxes(u),this.specifiedLegends=this.initLegend(u),this.specifiedProjection=e.projection,this.selection=e.selection}get hasProjection(){const{encoding:e}=this,t=\"geoshape\"===this.mark,n=e&&We.some(t=>ji(e[t]));return t||n}scaleDomain(e){const t=this.specifiedScales[e];return t?t.domain:void 0}axis(e){return this.specifiedAxes[e]}legend(e){return this.specifiedLegends[e]}initScales(e,t){return pt.reduce((e,n)=>{var i;const r=qi(t[n]);return r&&(e[n]=null!==(i=r.scale)&&void 0!==i?i:{}),e},{})}initAxes(e){return[Ne,Te].reduce((t,n)=>{const i=e[n];if(ji(i)||n===Ne&&ji(e.x2)||n===Te&&ji(e.y2)){const e=ji(i)?i.axis:void 0;t[n]=e?Object.assign({},e):e}return t},{})}initLegend(e){return ft.reduce((t,n)=>{const i=qi(e[n]);if(i&&function(e){switch(e){case ze:case Pe:case\"stroke\":case\"size\":case Le:case\"opacity\":case\"strokeWidth\":case\"strokeDash\":return!0;case\"fillOpacity\":case\"strokeOpacity\":case\"angle\":return!1}}(n)){const e=i.legend;t[n]=e?Object.assign({},e):e}return t},{})}parseData(){this.component.data=Wd(this)}parseLayoutSize(){!function(e){const{size:t,component:n}=e;for(const i of ut){const r=rt(i);if(t[r]){const e=t[r];n.layoutSize.set(r,Xr(e)?\"step\":e,!0)}else{const t=Ld(e,r);n.layoutSize.set(r,t,!1)}}}(this)}parseSelections(){this.component.selection=function(e,t){var n;const i={},r=e.config.selection;for(const o of I(null!=t?t:{})){const s=S(t[o]),u=A(r[s.type],[\"fields\",\"encodings\"]);for(const e in u)\"encodings\"===e&&s.fields||\"fields\"===e&&s.encodings||(\"mark\"===e&&(s[e]=Object.assign(Object.assign({},u[e]),s[e])),void 0!==s[e]&&!0!==s[e]||(s[e]=null!==(n=u[e])&&void 0!==n?n:s[e]));const c=Y(o),l=i[c]=Object.assign(Object.assign({},s),{name:c,events:a(s.on)?ms(s.on,\"scope\"):S(s.on)});fa(l,n=>{n.has(l)&&n.parse&&n.parse(e,l,s,t[o])})}return i}(this,this.selection)}parseMarkGroup(){this.component.mark=af(this)}parseAxesAndHeaders(){var e;this.component.axes=(e=this,ut.reduce((t,n)=>(e.component.scales[n]&&(t[n]=[ef(n,e)]),t),{}))}assembleSelectionTopLevelSignals(e){return function(e,t){let n=!1;if(Ca(e,(i,r)=>{const o=i.name,s=u(o+Aa);if(0===t.filter(e=>e.name===o).length){const e=\"global\"===i.resolve?\"union\":i.resolve,n=\"multi\"===i.type?\", true)\":\")\";t.push({name:i.name,update:`${ja}(${s}, ${u(e)}${n}`})}n=!0,r.topLevelSignals&&(t=r.topLevelSignals(e,i,t)),fa(i,n=>{n.topLevelSignals&&(t=n.topLevelSignals(e,i,t))})}),n){0===t.filter(e=>\"unit\"===e.name).length&&t.unshift({name:\"unit\",value:{},on:[{events:\"mousemove\",update:\"isTuple(group()) ? group() : unit\"}]})}return ma(t)}(this,e)}assembleSignals(){return[...Pu(this),...(e=this,t=[],Ca(e,(n,i)=>{const r=n.name;let o=i.modifyExpr(e,n);t.push(...i.signals(e,n)),fa(n,i=>{i.signals&&(t=i.signals(e,n,t)),i.modifyExpr&&(o=i.modifyExpr(e,n,o))}),t.push({name:r+Fa,on:[{events:{signal:n.name+wa},update:`modify(${u(n.name+Aa)}, ${o})`}]})}),ma(t))];var e,t}assembleSelectionData(e){return function(e,t){const n=[...t];return Ca(e,t=>{const i={name:t.name+Aa};if(t.init){const n=t.project.items.map(e=>A(e,[\"signals\"])),r=t.init.map(e=>ga(e,!1));i.values=\"interval\"===t.type?[{unit:ka(e,{escape:!1}),fields:n,values:r}]:r.map(t=>({unit:ka(e,{escape:!1}),fields:n,values:t}))}n.filter(e=>e.name===t.name+Aa).length||n.push(i)}),n}(this,e)}assembleLayout(){return null}assembleLayoutSignals(){return dc(this)}assembleMarks(){var e;let t=null!==(e=this.component.mark)&&void 0!==e?e:[];return this.parent&&pd(this.parent)||(t=pa(this,t)),t.map(this.correctDataNames)}getMapping(){return this.encoding}get mark(){return this.markDef.type}channelHasField(e){return dr(this.encoding,e)}fieldDef(e){return Mi(this.encoding[e])}typedFieldDef(e){const t=this.fieldDef(e);return Di(t)?t:null}}class lf extends md{constructor(e,t,n,i,r){super(e,\"layer\",t,n,r,e.resolve,e.view);const o=Object.assign(Object.assign(Object.assign({},i),e.width?{width:e.width}:{}),e.height?{height:e.height}:{});this.children=e.layer.map((e,t)=>{if(mo(e))return new lf(e,this,this.getName(\"layer_\"+t),o,r);if(Ae(e))return new cf(e,this,this.getName(\"layer_\"+t),o,r);throw new Error(Dt.invalidSpec(e))})}parseData(){this.component.data=Wd(this);for(const e of this.children)e.parseData()}parseLayoutSize(){var e;zd(e=this),Pd(e,\"width\"),Pd(e,\"height\")}parseSelections(){this.component.selection={};for(const e of this.children){e.parseSelections();for(const t of I(e.component.selection))this.component.selection[t]=e.component.selection[t]}}parseMarkGroup(){for(const e of this.children)e.parseMarkGroup()}parseAxesAndHeaders(){!function(e){var t;const{axes:n,resolve:i}=e.component,r={top:0,bottom:0,right:0,left:0};for(const t of e.children){t.parseAxesAndHeaders();for(const r of I(t.component.axes))i.axis[r]=vc(e.component.resolve,r),\"shared\"===i.axis[r]&&(n[r]=Jd(n[r],t.component.axes[r]),n[r]||(i.axis[r]=\"independent\",delete n[r]))}for(const o of[Ne,Te]){for(const s of e.children)if(s.component.axes[o]){if(\"independent\"===i.axis[o]){n[o]=(null!==(t=n[o])&&void 0!==t?t:[]).concat(s.component.axes[o]);for(const e of s.component.axes[o]){const{value:t,explicit:n}=e.getWithExplicit(\"orient\");if(r[t]>0&&!n){const n=Vd[t];r[t]>r[n]&&e.set(\"orient\",n,!1)}r[t]++}}delete s.component.axes[o]}if(\"independent\"===i.axis[o]&&n[o]&&n[o].length>1)for(const e of n[o])e.get(\"grid\")&&!e.explicit.grid&&(e.implicit.grid=!1)}}(this)}assembleSelectionTopLevelSignals(e){return this.children.reduce((e,t)=>t.assembleSelectionTopLevelSignals(e),e)}assembleSignals(){return this.children.reduce((e,t)=>e.concat(t.assembleSignals()),Pu(this))}assembleLayoutSignals(){return this.children.reduce((e,t)=>e.concat(t.assembleLayoutSignals()),dc(this))}assembleSelectionData(e){return this.children.reduce((e,t)=>t.assembleSelectionData(e),e)}assembleTitle(){let e=super.assembleTitle();if(e)return e;for(const t of this.children)if(e=t.assembleTitle(),e)return e}assembleLayout(){return null}assembleMarks(){return function(e,t){for(const n of e.children)dd(n)&&(t=pa(n,t));return t}(this,this.children.flatMap(e=>e.assembleMarks()))}assembleLegends(){return this.children.reduce((e,t)=>e.concat(t.assembleLegends()),Hc(this))}}function df(e,t,n,i,r){if(fi(e))return new Rd(e,t,n,r);if(mo(e))return new lf(e,t,n,i,r);if(Ae(e))return new cf(e,t,n,i,r);if(function(e){return Jr(e)||Qr(e)||Vr(e)}(e))return new Id(e,t,n,r);throw new Error(Dt.invalidSpec(e))}const ff=new class extends ho{mapUnit(e,{config:t}){if(e.encoding){const{encoding:n,transform:i}=e,{bins:r,timeUnits:o,aggregate:s,groupby:a,encoding:u}=gr(n,t),c=[...i||[],...r,...o,...0===s.length?[]:[{aggregate:s,groupby:a}]];return Object.assign(Object.assign(Object.assign({},e),c.length>0?{transform:c}:{}),{encoding:u})}return e}};const gf=t;e.compile=function(e,t={}){var n,i;t.logger&&(n=t.logger,St=n),t.fieldTitle&&zi(t.fieldTitle),t.formatTypes&&(i=t.formatTypes,Qn=new Set(i));try{const n=uo(g(t.config,e.config)),i=Lo(e,n),r=df(i,null,\"\",void 0,n);return r.parse(),function(e,t){il(e.sources);let n=0,i=0;for(let i=0;i<5&&Pl(e,t);i++)n++;e.sources.map(Dl);for(let n=0;n<5&&Pl(e,t);n++)i++;il(e.sources),5===Math.max(n,i)&&$t(\"Maximum optimization runs(5) reached.\")}(r.component.data,r),{spec:function(e,t,n={},i){const r=e.config?go(e.config):void 0,o=[].concat(e.assembleSelectionData([]),function(e,t){var n,i;const r=[],o=$d(r);let s=0;for(const t of e.sources){t.hasName()||(t.dataName=`source_${s++}`);const e=t.assemble();o(t,e)}for(const e of r)0===e.transform.length&&delete e.transform;let a=0;for(const[e,t]of r.entries())0!==(null!==(n=t.transform)&&void 0!==n?n:[]).length||t.source||r.splice(a++,0,r.splice(e,1)[0]);for(const t of r)for(const n of null!==(i=t.transform)&&void 0!==i?i:[])\"lookup\"===n.type&&(n.from=e.outputNodes[n.from].getSource());for(const e of r)e.name in t&&(e.values=t[e.name]);return r}(e.component.data,n)),s=e.assembleProjections(),a=e.assembleTitle(),u=e.assembleGroupStyle(),c=e.assembleGroupEncodeEntry(!0);let l=e.assembleLayoutSignals();return l=l.filter(e=>\"width\"!==e.name&&\"height\"!==e.name||void 0===e.value||(t[e.name]=+e.value,!1)),Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({$schema:\"https://vega.github.io/schema/vega/v5.json\"},e.description?{description:e.description}:{}),t),a?{title:a}:{}),u?{style:u}:{}),c?{encode:{update:c}}:{}),{data:o}),s.length>0?{projections:s}:{}),e.assembleGroup([...l,...e.assembleSelectionTopLevelSignals([])])),r?{config:r}:{}),i?{usermeta:i}:{})}(r,function(e,t,n,i){const r=i.component.layoutSize.get(\"width\"),o=i.component.layoutSize.get(\"height\");void 0===t?t={type:\"pad\"}:a(t)&&(t={type:t});if(r&&o&&(s=t.type,\"fit\"===s||\"fit-x\"===s||\"fit-y\"===s))if(\"step\"===r&&\"step\"===o)$t(Dt.droppingFit()),t.type=\"pad\";else if(\"step\"===r||\"step\"===o){const e=\"step\"===r?\"width\":\"height\";$t(Dt.droppingFit(lt(e)));const n=\"width\"===e?\"height\":\"width\";t.type=function(e){return e?`fit-${lt(e)}`:\"fit\"}(n)}var s;return Object.assign(Object.assign(Object.assign({},1===I(t).length&&t.type?\"pad\"===t.type?{}:{autosize:t.type}:{autosize:t}),qo(n)),qo(e))}(e,i.autosize,n,r),e.datasets,e.usermeta),normalized:i}}finally{t.logger&&(St=Ct),t.fieldTitle&&zi(Ni)}},e.extractTransforms=function(e,t){return ff.map(e,{config:t})},e.normalize=Lo,e.version=gf,Object.defineProperty(e,\"__esModule\",{value:!0})}));","^I",1689821863988,"^K",["^L",[]],"^M",["^ ","^N","^O","^P","^Q","^R","0.1.0","^S","darkstar","^T","JVM static compilation of vega-lite/vega","^U","^V","^W",["^V","0.1.0"]],"^X",[],"^Y",["^ ","^1",[],"^3",false,"^5",[],"^6",[],"^7",[],"^8","es6","^9",null,"^<",false,"^G",[],"^X",[],"^Z",[],"^[",true,"^10",false],"^11",["^12","jar:file:/Users/kingjames/.m2/repository/metasoarous/darkstar/0.1.0/darkstar-0.1.0.jar!/vega-lite.js"],"^13",["^L",["^16"]],"^Z",[],"^[",true,"^14",true,"^15",["buffer"],"^10",false]],"~:shadow.build.classpath/CACHE-TIMESTAMP",1743820537000]